
c:/Users/13479/Desktop/PotsdamSensors/Particle/IPMC/target/1.1.1/argon/IPMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059c8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00019b18  2**0
                  CONTENTS
  3 .data         0000010c  2003d15c  000d99e0  0000d15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00001588  2003d268  2003d268  0001d268  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d9aec  000d9aec  00019aec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d9b14  000d9b14  00019b14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00167057  00000000  00000000  00019b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001ef7c  00000000  00000000  00180b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0002103a  00000000  00000000  0019faeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002b50  00000000  00000000  001c0b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004758  00000000  00000000  001c3675  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004c7c9  00000000  00000000  001c7dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00052f0a  00000000  00000000  00214596  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e2cce  00000000  00000000  002674a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000d9a0  00000000  00000000  0034a170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	c0 91 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 ffc8 	bl	d8fc2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 ffcd 	bl	d8fd8 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d15c 	.word	0x2003d15c
   d4048:	000d99e0 	.word	0x000d99e0
   d404c:	2003d268 	.word	0x2003d268
   d4050:	2003d268 	.word	0x2003d268
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fb1f 	bl	d769c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d99d8 	.word	0x000d99d8
   d4080:	000d9950 	.word	0x000d9950

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8ee 	b.w	d4264 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb47 	bl	d471c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bad1 	b.w	d7638 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bf9b 	b.w	d6fd0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f002 bfa1 	b.w	d6fe0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f002 bf9f 	b.w	d6fe0 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40b2:	4770      	bx	lr

000d40b4 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d40b4:	3008      	adds	r0, #8
   d40b6:	f001 be5b 	b.w	d5d70 <_ZN7FatFile5writeEPKvj>

000d40ba <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d40ba:	b507      	push	{r0, r1, r2, lr}
   d40bc:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d40be:	2201      	movs	r2, #1
   d40c0:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d40c4:	3008      	adds	r0, #8
   d40c6:	4619      	mov	r1, r3
   d40c8:	f001 fe52 	bl	d5d70 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d40cc:	b003      	add	sp, #12
   d40ce:	f85d fb04 	ldr.w	pc, [sp], #4

000d40d2 <_ZN6SdFileD0Ev>:
   d40d2:	b510      	push	{r4, lr}
   d40d4:	4604      	mov	r4, r0
   d40d6:	f7ff ffe0 	bl	d409a <_ZdlPv>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}
	...

000d40e0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40e2:	4602      	mov	r2, r0
   d40e4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40e6:	7913      	ldrb	r3, [r2, #4]
   d40e8:	6895      	ldr	r5, [r2, #8]
   d40ea:	b133      	cbz	r3, d40fa <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40ec:	b93d      	cbnz	r5, d40fe <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40ee:	490c      	ldr	r1, [pc, #48]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40f0:	b004      	add	sp, #16
   d40f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40f6:	f003 b99a 	b.w	d742e <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40fa:	4b0a      	ldr	r3, [pc, #40]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40fc:	e000      	b.n	d4100 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40fe:	4b0a      	ldr	r3, [pc, #40]	; (d4128 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4100:	7b16      	ldrb	r6, [r2, #12]
   d4102:	4c0a      	ldr	r4, [pc, #40]	; (d412c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4104:	490a      	ldr	r1, [pc, #40]	; (d4130 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4106:	7b52      	ldrb	r2, [r2, #13]
   d4108:	9202      	str	r2, [sp, #8]
   d410a:	2e01      	cmp	r6, #1
   d410c:	bf08      	it	eq
   d410e:	4621      	moveq	r1, r4
   d4110:	9101      	str	r1, [sp, #4]
   d4112:	9500      	str	r5, [sp, #0]
   d4114:	4a07      	ldr	r2, [pc, #28]	; (d4134 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4116:	2100      	movs	r1, #0
   d4118:	f003 fa03 	bl	d7522 <_ZN5Print11printf_implEbPKcz>
  }
   d411c:	b004      	add	sp, #16
   d411e:	bd70      	pop	{r4, r5, r6, pc}
   d4120:	000d9209 	.word	0x000d9209
   d4124:	000d94d1 	.word	0x000d94d1
   d4128:	000d91f8 	.word	0x000d91f8
   d412c:	000d9201 	.word	0x000d9201
   d4130:	000d9205 	.word	0x000d9205
   d4134:	000d921f 	.word	0x000d921f

000d4138 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d4138:	b510      	push	{r4, lr}
   d413a:	4604      	mov	r4, r0
   d413c:	3004      	adds	r0, #4
   d413e:	f003 f887 	bl	d7250 <_ZN6StringD1Ev>
   d4142:	4620      	mov	r0, r4
   d4144:	bd10      	pop	{r4, pc}

000d4146 <_ZN14http_request_tD1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   d4146:	b510      	push	{r4, lr}
   d4148:	4604      	mov	r4, r0
   d414a:	303c      	adds	r0, #60	; 0x3c
   d414c:	f003 f880 	bl	d7250 <_ZN6StringD1Ev>
   d4150:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4154:	f003 f87c 	bl	d7250 <_ZN6StringD1Ev>
   d4158:	4620      	mov	r0, r4
   d415a:	f003 f879 	bl	d7250 <_ZN6StringD1Ev>
   d415e:	4620      	mov	r0, r4
   d4160:	bd10      	pop	{r4, pc}
	...

000d4164 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4164:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4166:	6984      	ldr	r4, [r0, #24]
   d4168:	4b0a      	ldr	r3, [pc, #40]	; (d4194 <_ZN9TCPClientD1Ev+0x30>)
   d416a:	6003      	str	r3, [r0, #0]
   d416c:	4605      	mov	r5, r0
   d416e:	b17c      	cbz	r4, d4190 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4170:	6863      	ldr	r3, [r4, #4]
   d4172:	3b01      	subs	r3, #1
   d4174:	6063      	str	r3, [r4, #4]
   d4176:	b95b      	cbnz	r3, d4190 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4178:	6823      	ldr	r3, [r4, #0]
   d417a:	4620      	mov	r0, r4
   d417c:	689b      	ldr	r3, [r3, #8]
   d417e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4180:	68a3      	ldr	r3, [r4, #8]
   d4182:	3b01      	subs	r3, #1
   d4184:	60a3      	str	r3, [r4, #8]
   d4186:	b91b      	cbnz	r3, d4190 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4188:	6823      	ldr	r3, [r4, #0]
   d418a:	4620      	mov	r0, r4
   d418c:	68db      	ldr	r3, [r3, #12]
   d418e:	4798      	blx	r3
   d4190:	4628      	mov	r0, r5
   d4192:	bd38      	pop	{r3, r4, r5, pc}
   d4194:	000d9724 	.word	0x000d9724

000d4198 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
   d4198:	b510      	push	{r4, lr}
   d419a:	4604      	mov	r4, r0
   d419c:	f7ff ffe2 	bl	d4164 <_ZN9TCPClientD1Ev>
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZN9TCPClientD0Ev>:
   d41a4:	b510      	push	{r4, lr}
   d41a6:	4604      	mov	r4, r0
   d41a8:	f7ff ffdc 	bl	d4164 <_ZN9TCPClientD1Ev>
   d41ac:	4620      	mov	r0, r4
   d41ae:	f7ff ff74 	bl	d409a <_ZdlPv>
   d41b2:	4620      	mov	r0, r4
   d41b4:	bd10      	pop	{r4, pc}

000d41b6 <_ZN7FatFile6existsEPKc>:
   * dirFile.exists("TOFIND.TXT") searches for "TOFIND.TXT" in  the directory
   * dirFile.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
   d41b6:	b500      	push	{lr}
   d41b8:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d41ba:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d41bc:	460a      	mov	r2, r1
   d41be:	4601      	mov	r1, r0
   d41c0:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d41c2:	f88d 3004 	strb.w	r3, [sp, #4]
   d41c6:	f88d 3005 	strb.w	r3, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d41ca:	f001 fd82 	bl	d5cd2 <_ZN7FatFile4openEPS_PKci>
  }
   d41ce:	b00b      	add	sp, #44	; 0x2c
   d41d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d41d4 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d41d4:	4613      	mov	r3, r2
   d41d6:	460a      	mov	r2, r1
   d41d8:	4901      	ldr	r1, [pc, #4]	; (d41e0 <_ZN7FatFile4openEPKci+0xc>)
   d41da:	6809      	ldr	r1, [r1, #0]
   d41dc:	f001 bd79 	b.w	d5cd2 <_ZN7FatFile4openEPS_PKci>
   d41e0:	2003e3c0 	.word	0x2003e3c0

000d41e4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41e4:	b530      	push	{r4, r5, lr}
   d41e6:	b085      	sub	sp, #20
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d41e8:	4b1c      	ldr	r3, [pc, #112]	; (d425c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d41ea:	9300      	str	r3, [sp, #0]
   d41ec:	7913      	ldrb	r3, [r2, #4]
   d41ee:	f88d 3004 	strb.w	r3, [sp, #4]
   d41f2:	6893      	ldr	r3, [r2, #8]
   d41f4:	9302      	str	r3, [sp, #8]
   d41f6:	7b13      	ldrb	r3, [r2, #12]
   d41f8:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41fc:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d4200:	7b53      	ldrb	r3, [r2, #13]
   d4202:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4206:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4208:	460a      	mov	r2, r1
   d420a:	466b      	mov	r3, sp
   d420c:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d4210:	4628      	mov	r0, r5
   d4212:	f002 f8f5 	bl	d6400 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4216:	b1f0      	cbz	r0, d4256 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4218:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d421a:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d421e:	4628      	mov	r0, r5
   d4220:	f001 fd50 	bl	d5cc4 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4224:	2101      	movs	r1, #1
   d4226:	4620      	mov	r0, r4
   d4228:	f001 ff93 	bl	d6152 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d422c:	4601      	mov	r1, r0
   d422e:	b168      	cbz	r0, d424c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d4230:	4621      	mov	r1, r4
   d4232:	4628      	mov	r0, r5
   d4234:	f001 fb71 	bl	d591a <_ZN7FatFile8openRootEP9FatVolume>
   d4238:	b168      	cbz	r0, d4256 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d423a:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d423e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d4242:	bf16      	itet	ne
   d4244:	4b06      	ldrne	r3, [pc, #24]	; (d4260 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d4246:	4618      	moveq	r0, r3
   d4248:	601d      	strne	r5, [r3, #0]
   d424a:	e005      	b.n	d4258 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d424c:	4620      	mov	r0, r4
   d424e:	f001 ff80 	bl	d6152 <_ZN9FatVolume4initEh>
   d4252:	2800      	cmp	r0, #0
   d4254:	d1ec      	bne.n	d4230 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d4256:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d4258:	b005      	add	sp, #20
   d425a:	bd30      	pop	{r4, r5, pc}
   d425c:	000d91dc 	.word	0x000d91dc
   d4260:	2003e3c0 	.word	0x2003e3c0

000d4264 <setup>:
int count = 1; 
//functions
void writeHeader1(SdFile file, char fileName[]);        //creates header with variables for SD card data
void logData1(SdFile file, char fileName[]);            //logs data to SD card

void setup(){
   d4264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4268:	b094      	sub	sp, #80	; 0x50
  Serial.begin(115200);
   d426a:	f003 fb17 	bl	d789c <_Z16_fetch_usbserialv>
   d426e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4272:	f003 fb01 	bl	d7878 <_ZN9USBSerial5beginEl>
  while(!Serial);
   d4276:	f003 fb11 	bl	d789c <_Z16_fetch_usbserialv>
   d427a:	f003 fb04 	bl	d7886 <_ZN9USBSerialcvbEv>
   d427e:	2800      	cmp	r0, #0
   d4280:	d0f9      	beq.n	d4276 <setup+0x12>
  delay(4000); 
   d4282:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d4286:	4d29      	ldr	r5, [pc, #164]	; (d432c <setup+0xc8>)
   d4288:	4c29      	ldr	r4, [pc, #164]	; (d4330 <setup+0xcc>)
   d428a:	f003 f997 	bl	d75bc <delay>
  Serial.println("Starting up...");
   d428e:	f003 fb05 	bl	d789c <_Z16_fetch_usbserialv>
   d4292:	4928      	ldr	r1, [pc, #160]	; (d4334 <setup+0xd0>)
   d4294:	f003 f8de 	bl	d7454 <_ZN5Print7printlnEPKc>
   d4298:	4628      	mov	r0, r5
   d429a:	f004 fedf 	bl	d905c <strlen>
   d429e:	4680      	mov	r8, r0
   d42a0:	4620      	mov	r0, r4
   d42a2:	f004 fedb 	bl	d905c <strlen>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d42a6:	264c      	movs	r6, #76	; 0x4c
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d42a8:	4607      	mov	r7, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d42aa:	4632      	mov	r2, r6
   d42ac:	2100      	movs	r1, #0
   d42ae:	a801      	add	r0, sp, #4
   d42b0:	f004 fe92 	bl	d8fd8 <memset>
        creds.size = sizeof(creds);
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
   d42b4:	2303      	movs	r3, #3
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d42b6:	4820      	ldr	r0, [pc, #128]	; (d4338 <setup+0xd4>)
        creds.size = sizeof(creds);
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
   d42b8:	f88d 3018 	strb.w	r3, [sp, #24]
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d42bc:	2300      	movs	r3, #0
   d42be:	4619      	mov	r1, r3
   d42c0:	aa01      	add	r2, sp, #4
   d42c2:	6840      	ldr	r0, [r0, #4]
        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
   d42c4:	9404      	str	r4, [sp, #16]
    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
   d42c6:	9601      	str	r6, [sp, #4]
        creds.ssid = ssid;
   d42c8:	9502      	str	r5, [sp, #8]
        creds.ssid_len = ssidLen;
   d42ca:	f8cd 800c 	str.w	r8, [sp, #12]
        creds.password = password;
        creds.password_len = passwordLen;
   d42ce:	9705      	str	r7, [sp, #20]
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d42d0:	f002 fe56 	bl	d6f80 <network_set_credentials>

  //setting wifi
  WiFi.setCredentials(wifissid, wifipassword, WPA2);//options are WPA2 (default if not chosen), WEP, WPA
  
  //Serial for plantower
  Serial1.begin(9600, SERIAL_8N1);
   d42d4:	f003 fb52 	bl	d797c <_Z22__fetch_global_Serial1v>
   d42d8:	2200      	movs	r2, #0
   d42da:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42de:	f003 fb43 	bl	d7968 <_ZN11USARTSerial5beginEmm>
   d42e2:	2404      	movs	r4, #4
  //Setup for humidity and temperature sensor
  int count2 = 0;
  while(!htu.begin() && count2 != 3){ //count for if htu not connected
   d42e4:	4815      	ldr	r0, [pc, #84]	; (d433c <setup+0xd8>)
   d42e6:	f000 fe3e 	bl	d4f66 <_ZN15Adafruit_Si70215beginEv>
   d42ea:	b988      	cbnz	r0, d4310 <setup+0xac>
   d42ec:	3c01      	subs	r4, #1
   d42ee:	d00f      	beq.n	d4310 <setup+0xac>
	    delay(1000); 
   d42f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42f4:	f003 f962 	bl	d75bc <delay>
      count2++;
      Serial.println(htu.begin());
   d42f8:	f003 fad0 	bl	d789c <_Z16_fetch_usbserialv>
   d42fc:	4605      	mov	r5, r0
   d42fe:	480f      	ldr	r0, [pc, #60]	; (d433c <setup+0xd8>)
   d4300:	f000 fe31 	bl	d4f66 <_ZN15Adafruit_Si70215beginEv>
   d4304:	220a      	movs	r2, #10
   d4306:	4601      	mov	r1, r0
   d4308:	4628      	mov	r0, r5
   d430a:	f003 f900 	bl	d750e <_ZN5Print7printlnEii>
  
  //Serial for plantower
  Serial1.begin(9600, SERIAL_8N1);
  //Setup for humidity and temperature sensor
  int count2 = 0;
  while(!htu.begin() && count2 != 3){ //count for if htu not connected
   d430e:	e7e9      	b.n	d42e4 <setup+0x80>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return vwd()->exists(path);
   d4310:	490b      	ldr	r1, [pc, #44]	; (d4340 <setup+0xdc>)
   d4312:	480c      	ldr	r0, [pc, #48]	; (d4344 <setup+0xe0>)
   d4314:	f7ff ff4f 	bl	d41b6 <_ZN7FatFile6existsEPKc>
	}

  sd.exists(sdfilename); // creates sd file

  //Setup for RTC and manually changing SD file timing
  rtc.begin();
   d4318:	480b      	ldr	r0, [pc, #44]	; (d4348 <setup+0xe4>)
   d431a:	f002 fb43 	bl	d69a4 <_ZN10RTC_DS32315beginEv>
  if (rtc.lostPower()) {    // Note: comment this line (and end bracket) and change rtc.adjust below to change time manually
   d431e:	480a      	ldr	r0, [pc, #40]	; (d4348 <setup+0xe4>)
   d4320:	f002 fb47 	bl	d69b2 <_ZN10RTC_DS32319lostPowerEv>
   //rtc.adjust(DateTime(F(__DATE__), F(__TIME__))); //
     //rtc.adjust(DateTime(2020, 1, 24, 13, 42, 0)); //manually change time here (YEAR, MONTH, DAY, HR, MIN, SEC)
  } // this end bracket
}
   d4324:	b014      	add	sp, #80	; 0x50
   d4326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d432a:	bf00      	nop
   d432c:	2003d184 	.word	0x2003d184
   d4330:	2003d1e8 	.word	0x2003d1e8
   d4334:	000d923d 	.word	0x000d923d
   d4338:	2003e704 	.word	0x2003e704
   d433c:	2003dfb0 	.word	0x2003dfb0
   d4340:	2003d1b0 	.word	0x2003d1b0
   d4344:	2003d704 	.word	0x2003d704
   d4348:	2003d278 	.word	0x2003d278

000d434c <_Z12writeHeader16SdFilePc>:
    if(count == 33){
      count = 1;
    }
  }
}
void writeHeader1(SdFile file, char fileName[]) {
   d434c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d434e:	4a38      	ldr	r2, [pc, #224]	; (d4430 <_Z12writeHeader16SdFilePc+0xe4>)
   d4350:	4b38      	ldr	r3, [pc, #224]	; (d4434 <_Z12writeHeader16SdFilePc+0xe8>)
   d4352:	9202      	str	r2, [sp, #8]
   d4354:	2201      	movs	r2, #1
   d4356:	460e      	mov	r6, r1
   d4358:	9300      	str	r3, [sp, #0]
   d435a:	f88d 200c 	strb.w	r2, [sp, #12]
   d435e:	2300      	movs	r3, #0
  sd.begin(chipSelect, SD_SCK_MHZ(50));
   d4360:	210e      	movs	r1, #14
    if(count == 33){
      count = 1;
    }
  }
}
void writeHeader1(SdFile file, char fileName[]) {
   d4362:	4604      	mov	r4, r0
  sd.begin(chipSelect, SD_SCK_MHZ(50));
   d4364:	466a      	mov	r2, sp
   d4366:	4834      	ldr	r0, [pc, #208]	; (d4438 <_Z12writeHeader16SdFilePc+0xec>)
   d4368:	f88d 3004 	strb.w	r3, [sp, #4]
   d436c:	f88d 300d 	strb.w	r3, [sp, #13]
   d4370:	f7ff ff38 	bl	d41e4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d4374:	4631      	mov	r1, r6
   d4376:	4831      	ldr	r0, [pc, #196]	; (d443c <_Z12writeHeader16SdFilePc+0xf0>)
   d4378:	f7ff ff1d 	bl	d41b6 <_ZN7FatFile6existsEPKc>
  if(!sd.exists(fileName)){
   d437c:	2800      	cmp	r0, #0
   d437e:	d154      	bne.n	d442a <_Z12writeHeader16SdFilePc+0xde>
    file.open(fileName, O_WRONLY | O_CREAT);
   d4380:	f104 0508 	add.w	r5, r4, #8
   d4384:	f240 2201 	movw	r2, #513	; 0x201
   d4388:	4631      	mov	r1, r6
   d438a:	4628      	mov	r0, r5
   d438c:	f7ff ff22 	bl	d41d4 <_ZN7FatFile4openEPKci>
    file.sync();
   d4390:	4628      	mov	r0, r5
   d4392:	f001 fc61 	bl	d5c58 <_ZN7FatFile4syncEv>
    file.print("Time");
   d4396:	492a      	ldr	r1, [pc, #168]	; (d4440 <_Z12writeHeader16SdFilePc+0xf4>)
   d4398:	4620      	mov	r0, r4
   d439a:	f003 f848 	bl	d742e <_ZN5Print5printEPKc>
    file.print(',');
   d439e:	212c      	movs	r1, #44	; 0x2c
   d43a0:	4620      	mov	r0, r4
   d43a2:	f003 f848 	bl	d7436 <_ZN5Print5printEc>
    file.print(",pm10_standard");
   d43a6:	4927      	ldr	r1, [pc, #156]	; (d4444 <_Z12writeHeader16SdFilePc+0xf8>)
   d43a8:	4620      	mov	r0, r4
   d43aa:	f003 f840 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",pm25_standard");
   d43ae:	4926      	ldr	r1, [pc, #152]	; (d4448 <_Z12writeHeader16SdFilePc+0xfc>)
   d43b0:	4620      	mov	r0, r4
   d43b2:	f003 f83c 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",pm100_standard");
   d43b6:	4925      	ldr	r1, [pc, #148]	; (d444c <_Z12writeHeader16SdFilePc+0x100>)
   d43b8:	4620      	mov	r0, r4
   d43ba:	f003 f838 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",pm10_env");
   d43be:	4924      	ldr	r1, [pc, #144]	; (d4450 <_Z12writeHeader16SdFilePc+0x104>)
   d43c0:	4620      	mov	r0, r4
   d43c2:	f003 f834 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",pm25_env");
   d43c6:	4923      	ldr	r1, [pc, #140]	; (d4454 <_Z12writeHeader16SdFilePc+0x108>)
   d43c8:	4620      	mov	r0, r4
   d43ca:	f003 f830 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",pm100_env");
   d43ce:	4922      	ldr	r1, [pc, #136]	; (d4458 <_Z12writeHeader16SdFilePc+0x10c>)
   d43d0:	4620      	mov	r0, r4
   d43d2:	f003 f82c 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",P3um");
   d43d6:	4921      	ldr	r1, [pc, #132]	; (d445c <_Z12writeHeader16SdFilePc+0x110>)
   d43d8:	4620      	mov	r0, r4
   d43da:	f003 f828 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",P5um");
   d43de:	4920      	ldr	r1, [pc, #128]	; (d4460 <_Z12writeHeader16SdFilePc+0x114>)
   d43e0:	4620      	mov	r0, r4
   d43e2:	f003 f824 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",P10um");
   d43e6:	491f      	ldr	r1, [pc, #124]	; (d4464 <_Z12writeHeader16SdFilePc+0x118>)
   d43e8:	4620      	mov	r0, r4
   d43ea:	f003 f820 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",P25um");
   d43ee:	491e      	ldr	r1, [pc, #120]	; (d4468 <_Z12writeHeader16SdFilePc+0x11c>)
   d43f0:	4620      	mov	r0, r4
   d43f2:	f003 f81c 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",P50um");
   d43f6:	491d      	ldr	r1, [pc, #116]	; (d446c <_Z12writeHeader16SdFilePc+0x120>)
   d43f8:	4620      	mov	r0, r4
   d43fa:	f003 f818 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",P100um");
   d43fe:	491c      	ldr	r1, [pc, #112]	; (d4470 <_Z12writeHeader16SdFilePc+0x124>)
   d4400:	4620      	mov	r0, r4
   d4402:	f003 f814 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",checksum");
   d4406:	491b      	ldr	r1, [pc, #108]	; (d4474 <_Z12writeHeader16SdFilePc+0x128>)
   d4408:	4620      	mov	r0, r4
   d440a:	f003 f810 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",Temperature");
   d440e:	491a      	ldr	r1, [pc, #104]	; (d4478 <_Z12writeHeader16SdFilePc+0x12c>)
   d4410:	4620      	mov	r0, r4
   d4412:	f003 f80c 	bl	d742e <_ZN5Print5printEPKc>
    file.print(",Humidity");
   d4416:	4919      	ldr	r1, [pc, #100]	; (d447c <_Z12writeHeader16SdFilePc+0x130>)
   d4418:	4620      	mov	r0, r4
   d441a:	f003 f808 	bl	d742e <_ZN5Print5printEPKc>
    file.println();
   d441e:	4620      	mov	r0, r4
   d4420:	f003 f80c 	bl	d743c <_ZN5Print7printlnEv>
    file.close();
   d4424:	4628      	mov	r0, r5
   d4426:	f001 fc4d 	bl	d5cc4 <_ZN7FatFile5closeEv>
  }
}
   d442a:	b004      	add	sp, #16
   d442c:	bd70      	pop	{r4, r5, r6, pc}
   d442e:	bf00      	nop
   d4430:	02faf080 	.word	0x02faf080
   d4434:	000d91dc 	.word	0x000d91dc
   d4438:	2003d2c8 	.word	0x2003d2c8
   d443c:	2003d704 	.word	0x2003d704
   d4440:	000d924c 	.word	0x000d924c
   d4444:	000d9251 	.word	0x000d9251
   d4448:	000d9260 	.word	0x000d9260
   d444c:	000d926f 	.word	0x000d926f
   d4450:	000d927f 	.word	0x000d927f
   d4454:	000d9289 	.word	0x000d9289
   d4458:	000d9293 	.word	0x000d9293
   d445c:	000d929e 	.word	0x000d929e
   d4460:	000d92a4 	.word	0x000d92a4
   d4464:	000d92aa 	.word	0x000d92aa
   d4468:	000d92b1 	.word	0x000d92b1
   d446c:	000d92b8 	.word	0x000d92b8
   d4470:	000d92bf 	.word	0x000d92bf
   d4474:	000d92c7 	.word	0x000d92c7
   d4478:	000d92d1 	.word	0x000d92d1
   d447c:	000d92de 	.word	0x000d92de

000d4480 <_Z8logData16SdFilePc>:
void logData1(SdFile file, char fileName[]) {
   d4480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d4484:	4a97      	ldr	r2, [pc, #604]	; (d46e4 <_Z8logData16SdFilePc+0x264>)
   d4486:	4b98      	ldr	r3, [pc, #608]	; (d46e8 <_Z8logData16SdFilePc+0x268>)
   d4488:	9202      	str	r2, [sp, #8]
   d448a:	2201      	movs	r2, #1
   d448c:	4604      	mov	r4, r0
   d448e:	460d      	mov	r5, r1
   d4490:	9300      	str	r3, [sp, #0]
   d4492:	f88d 200c 	strb.w	r2, [sp, #12]
   d4496:	2300      	movs	r3, #0
  //logging RTC data
  sd.begin(chipSelect, SD_SCK_MHZ(50));
   d4498:	466a      	mov	r2, sp
   d449a:	210e      	movs	r1, #14
   d449c:	4893      	ldr	r0, [pc, #588]	; (d46ec <_Z8logData16SdFilePc+0x26c>)
   d449e:	f88d 3004 	strb.w	r3, [sp, #4]
   d44a2:	f88d 300d 	strb.w	r3, [sp, #13]
   d44a6:	f7ff fe9d 	bl	d41e4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d44aa:	4629      	mov	r1, r5
   d44ac:	4890      	ldr	r0, [pc, #576]	; (d46f0 <_Z8logData16SdFilePc+0x270>)
   d44ae:	f7ff fe82 	bl	d41b6 <_ZN7FatFile6existsEPKc>
   d44b2:	f104 0608 	add.w	r6, r4, #8
  if(!sd.exists(fileName)){
   d44b6:	b910      	cbnz	r0, d44be <_Z8logData16SdFilePc+0x3e>
    file.open(fileName, O_WRONLY | O_CREAT);
   d44b8:	f240 2201 	movw	r2, #513	; 0x201
   d44bc:	e000      	b.n	d44c0 <_Z8logData16SdFilePc+0x40>
  }
  else{
    file.open(fileName, O_WRONLY | O_APPEND);
   d44be:	2209      	movs	r2, #9
   d44c0:	4629      	mov	r1, r5
   d44c2:	4630      	mov	r0, r6
   d44c4:	4d8b      	ldr	r5, [pc, #556]	; (d46f4 <_Z8logData16SdFilePc+0x274>)
  file.print(':');
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging temp and humidity data
  templ = (int)temp;
   d44c6:	f8df a248 	ldr.w	sl, [pc, #584]	; d4710 <_Z8logData16SdFilePc+0x290>
  tempr = (temp-templ)*100;//rounded to 2 places
   d44ca:	f8df 9248 	ldr.w	r9, [pc, #584]	; d4714 <_Z8logData16SdFilePc+0x294>
  humdl = (int)humd;
   d44ce:	f8df 8248 	ldr.w	r8, [pc, #584]	; d4718 <_Z8logData16SdFilePc+0x298>
  humdr = (humd-humdl)*100;//rounded to 2 places
   d44d2:	4f89      	ldr	r7, [pc, #548]	; (d46f8 <_Z8logData16SdFilePc+0x278>)
  sd.begin(chipSelect, SD_SCK_MHZ(50));
  if(!sd.exists(fileName)){
    file.open(fileName, O_WRONLY | O_CREAT);
  }
  else{
    file.open(fileName, O_WRONLY | O_APPEND);
   d44d4:	f7ff fe7e 	bl	d41d4 <_ZN7FatFile4openEPKci>
  }
  file.sync();
   d44d8:	4630      	mov	r0, r6
   d44da:	f001 fbbd 	bl	d5c58 <_ZN7FatFile4syncEv>
  file.print(now.year(), DEC);
   d44de:	7829      	ldrb	r1, [r5, #0]
   d44e0:	220a      	movs	r2, #10
   d44e2:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
   d44e6:	4620      	mov	r0, r4
   d44e8:	f003 f80f 	bl	d750a <_ZN5Print5printEii>
  file.print('-');
   d44ec:	212d      	movs	r1, #45	; 0x2d
   d44ee:	4620      	mov	r0, r4
   d44f0:	f002 ffa1 	bl	d7436 <_ZN5Print5printEc>
  file.print(now.month(), DEC);
   d44f4:	220a      	movs	r2, #10
   d44f6:	7869      	ldrb	r1, [r5, #1]
   d44f8:	4620      	mov	r0, r4
   d44fa:	f002 ffe2 	bl	d74c2 <_ZN5Print5printEhi>
  file.print('-');
   d44fe:	212d      	movs	r1, #45	; 0x2d
   d4500:	4620      	mov	r0, r4
   d4502:	f002 ff98 	bl	d7436 <_ZN5Print5printEc>
  file.print(now.day(), DEC);
   d4506:	220a      	movs	r2, #10
   d4508:	78a9      	ldrb	r1, [r5, #2]
   d450a:	4620      	mov	r0, r4
   d450c:	f002 ffd9 	bl	d74c2 <_ZN5Print5printEhi>
  file.print(" ");
   d4510:	497a      	ldr	r1, [pc, #488]	; (d46fc <_Z8logData16SdFilePc+0x27c>)
   d4512:	4620      	mov	r0, r4
   d4514:	f002 ff8b 	bl	d742e <_ZN5Print5printEPKc>
  file.print(now.hour(), DEC);
   d4518:	220a      	movs	r2, #10
   d451a:	78e9      	ldrb	r1, [r5, #3]
   d451c:	4620      	mov	r0, r4
   d451e:	f002 ffd0 	bl	d74c2 <_ZN5Print5printEhi>
  file.print(':');
   d4522:	213a      	movs	r1, #58	; 0x3a
   d4524:	4620      	mov	r0, r4
   d4526:	f002 ff86 	bl	d7436 <_ZN5Print5printEc>
  file.print(now.minute(), DEC);
   d452a:	220a      	movs	r2, #10
   d452c:	7929      	ldrb	r1, [r5, #4]
   d452e:	4620      	mov	r0, r4
   d4530:	f002 ffc7 	bl	d74c2 <_ZN5Print5printEhi>
  file.print(':');
   d4534:	213a      	movs	r1, #58	; 0x3a
   d4536:	4620      	mov	r0, r4
   d4538:	f002 ff7d 	bl	d7436 <_ZN5Print5printEc>
  file.print(now.second(), DEC);
   d453c:	220a      	movs	r2, #10
   d453e:	7969      	ldrb	r1, [r5, #5]
  tempr = (temp-templ)*100;//rounded to 2 places
  humdl = (int)humd;
  humdr = (humd-humdl)*100;//rounded to 2 places
  file.print(',');
  file.print(',');
  file.print(data.pm10_standard);
   d4540:	4d6f      	ldr	r5, [pc, #444]	; (d4700 <_Z8logData16SdFilePc+0x280>)
  file.print(" ");
  file.print(now.hour(), DEC);
  file.print(':');
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
   d4542:	4620      	mov	r0, r4
   d4544:	f002 ffbd 	bl	d74c2 <_ZN5Print5printEhi>
  //logging temp and humidity data
  templ = (int)temp;
   d4548:	4b6e      	ldr	r3, [pc, #440]	; (d4704 <_Z8logData16SdFilePc+0x284>)
  tempr = (temp-templ)*100;//rounded to 2 places
   d454a:	eddf 6a6f 	vldr	s13, [pc, #444]	; d4708 <_Z8logData16SdFilePc+0x288>
  file.print(':');
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging temp and humidity data
  templ = (int)temp;
   d454e:	edd3 7a00 	vldr	s15, [r3]
  tempr = (temp-templ)*100;//rounded to 2 places
  humdl = (int)humd;
   d4552:	4b6e      	ldr	r3, [pc, #440]	; (d470c <_Z8logData16SdFilePc+0x28c>)
  file.print(':');
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging temp and humidity data
  templ = (int)temp;
   d4554:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  tempr = (temp-templ)*100;//rounded to 2 places
  humdl = (int)humd;
  humdr = (humd-humdl)*100;//rounded to 2 places
  file.print(',');
   d4558:	212c      	movs	r1, #44	; 0x2c
  file.print(':');
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging temp and humidity data
  templ = (int)temp;
   d455a:	ed8a 7a00 	vstr	s14, [sl]
  tempr = (temp-templ)*100;//rounded to 2 places
   d455e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  humdl = (int)humd;
  humdr = (humd-humdl)*100;//rounded to 2 places
  file.print(',');
   d4562:	4620      	mov	r0, r4
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging temp and humidity data
  templ = (int)temp;
  tempr = (temp-templ)*100;//rounded to 2 places
   d4564:	ee37 7ac7 	vsub.f32	s14, s15, s14
  humdl = (int)humd;
   d4568:	edd3 7a00 	vldr	s15, [r3]
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging temp and humidity data
  templ = (int)temp;
  tempr = (temp-templ)*100;//rounded to 2 places
   d456c:	ee27 7a26 	vmul.f32	s14, s14, s13
   d4570:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   d4574:	ed89 7a00 	vstr	s14, [r9]
  humdl = (int)humd;
   d4578:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   d457c:	ed88 7a00 	vstr	s14, [r8]
  humdr = (humd-humdl)*100;//rounded to 2 places
   d4580:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d4584:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d4588:	ee67 7aa6 	vmul.f32	s15, s15, s13
   d458c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4590:	edc7 7a00 	vstr	s15, [r7]
  file.print(',');
   d4594:	f002 ff4f 	bl	d7436 <_ZN5Print5printEc>
  file.print(',');
   d4598:	212c      	movs	r1, #44	; 0x2c
   d459a:	4620      	mov	r0, r4
   d459c:	f002 ff4b 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.pm10_standard);
   d45a0:	220a      	movs	r2, #10
   d45a2:	8869      	ldrh	r1, [r5, #2]
   d45a4:	4620      	mov	r0, r4
   d45a6:	f002 ffb0 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d45aa:	212c      	movs	r1, #44	; 0x2c
   d45ac:	4620      	mov	r0, r4
   d45ae:	f002 ff42 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.pm25_standard);
   d45b2:	220a      	movs	r2, #10
   d45b4:	88a9      	ldrh	r1, [r5, #4]
   d45b6:	4620      	mov	r0, r4
   d45b8:	f002 ffa7 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d45bc:	212c      	movs	r1, #44	; 0x2c
   d45be:	4620      	mov	r0, r4
   d45c0:	f002 ff39 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.pm100_standard);
   d45c4:	220a      	movs	r2, #10
   d45c6:	88e9      	ldrh	r1, [r5, #6]
   d45c8:	4620      	mov	r0, r4
   d45ca:	f002 ff9e 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d45ce:	212c      	movs	r1, #44	; 0x2c
   d45d0:	4620      	mov	r0, r4
   d45d2:	f002 ff30 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.pm10_env);
   d45d6:	220a      	movs	r2, #10
   d45d8:	8929      	ldrh	r1, [r5, #8]
   d45da:	4620      	mov	r0, r4
   d45dc:	f002 ff95 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d45e0:	212c      	movs	r1, #44	; 0x2c
   d45e2:	4620      	mov	r0, r4
   d45e4:	f002 ff27 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.pm25_env);
   d45e8:	220a      	movs	r2, #10
   d45ea:	8969      	ldrh	r1, [r5, #10]
   d45ec:	4620      	mov	r0, r4
   d45ee:	f002 ff8c 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d45f2:	212c      	movs	r1, #44	; 0x2c
   d45f4:	4620      	mov	r0, r4
   d45f6:	f002 ff1e 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.pm100_env);
   d45fa:	220a      	movs	r2, #10
   d45fc:	89a9      	ldrh	r1, [r5, #12]
   d45fe:	4620      	mov	r0, r4
   d4600:	f002 ff83 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d4604:	212c      	movs	r1, #44	; 0x2c
   d4606:	4620      	mov	r0, r4
   d4608:	f002 ff15 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.particles_03um);
   d460c:	220a      	movs	r2, #10
   d460e:	89e9      	ldrh	r1, [r5, #14]
   d4610:	4620      	mov	r0, r4
   d4612:	f002 ff7a 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d4616:	212c      	movs	r1, #44	; 0x2c
   d4618:	4620      	mov	r0, r4
   d461a:	f002 ff0c 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.particles_05um);
   d461e:	220a      	movs	r2, #10
   d4620:	8a29      	ldrh	r1, [r5, #16]
   d4622:	4620      	mov	r0, r4
   d4624:	f002 ff71 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d4628:	212c      	movs	r1, #44	; 0x2c
   d462a:	4620      	mov	r0, r4
   d462c:	f002 ff03 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.particles_10um);
   d4630:	220a      	movs	r2, #10
   d4632:	8a69      	ldrh	r1, [r5, #18]
   d4634:	4620      	mov	r0, r4
   d4636:	f002 ff68 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d463a:	212c      	movs	r1, #44	; 0x2c
   d463c:	4620      	mov	r0, r4
   d463e:	f002 fefa 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.particles_25um);
   d4642:	220a      	movs	r2, #10
   d4644:	8aa9      	ldrh	r1, [r5, #20]
   d4646:	4620      	mov	r0, r4
   d4648:	f002 ff5f 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d464c:	212c      	movs	r1, #44	; 0x2c
   d464e:	4620      	mov	r0, r4
   d4650:	f002 fef1 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.particles_50um);
   d4654:	220a      	movs	r2, #10
   d4656:	8ae9      	ldrh	r1, [r5, #22]
   d4658:	4620      	mov	r0, r4
   d465a:	f002 ff56 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d465e:	212c      	movs	r1, #44	; 0x2c
   d4660:	4620      	mov	r0, r4
   d4662:	f002 fee8 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.particles_100um);
   d4666:	220a      	movs	r2, #10
   d4668:	8b29      	ldrh	r1, [r5, #24]
   d466a:	4620      	mov	r0, r4
   d466c:	f002 ff4d 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d4670:	212c      	movs	r1, #44	; 0x2c
   d4672:	4620      	mov	r0, r4
   d4674:	f002 fedf 	bl	d7436 <_ZN5Print5printEc>
  file.print(data.checksum);
   d4678:	220a      	movs	r2, #10
   d467a:	8b69      	ldrh	r1, [r5, #26]
   d467c:	4620      	mov	r0, r4
   d467e:	f002 ff44 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d4682:	212c      	movs	r1, #44	; 0x2c
   d4684:	4620      	mov	r0, r4
   d4686:	f002 fed6 	bl	d7436 <_ZN5Print5printEc>
  file.print(templ);
   d468a:	220a      	movs	r2, #10
   d468c:	f8da 1000 	ldr.w	r1, [sl]
   d4690:	4620      	mov	r0, r4
   d4692:	f002 ff3a 	bl	d750a <_ZN5Print5printEii>
  file.print('.');
   d4696:	212e      	movs	r1, #46	; 0x2e
   d4698:	4620      	mov	r0, r4
   d469a:	f002 fecc 	bl	d7436 <_ZN5Print5printEc>
  file.print(tempr);
   d469e:	220a      	movs	r2, #10
   d46a0:	f8d9 1000 	ldr.w	r1, [r9]
   d46a4:	4620      	mov	r0, r4
   d46a6:	f002 ff30 	bl	d750a <_ZN5Print5printEii>
  file.print(',');
   d46aa:	212c      	movs	r1, #44	; 0x2c
   d46ac:	4620      	mov	r0, r4
   d46ae:	f002 fec2 	bl	d7436 <_ZN5Print5printEc>
  file.print(humdl);
   d46b2:	220a      	movs	r2, #10
   d46b4:	f8d8 1000 	ldr.w	r1, [r8]
   d46b8:	4620      	mov	r0, r4
   d46ba:	f002 ff26 	bl	d750a <_ZN5Print5printEii>
  file.print('.');
   d46be:	212e      	movs	r1, #46	; 0x2e
   d46c0:	4620      	mov	r0, r4
   d46c2:	f002 feb8 	bl	d7436 <_ZN5Print5printEc>
  file.print(humdr);
   d46c6:	220a      	movs	r2, #10
   d46c8:	6839      	ldr	r1, [r7, #0]
   d46ca:	4620      	mov	r0, r4
   d46cc:	f002 ff1d 	bl	d750a <_ZN5Print5printEii>
  file.println();
   d46d0:	4620      	mov	r0, r4
   d46d2:	f002 feb3 	bl	d743c <_ZN5Print7printlnEv>
  file.close();
   d46d6:	4630      	mov	r0, r6
   d46d8:	f001 faf4 	bl	d5cc4 <_ZN7FatFile5closeEv>
   d46dc:	b004      	add	sp, #16
   d46de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d46e2:	bf00      	nop
   d46e4:	02faf080 	.word	0x02faf080
   d46e8:	000d91dc 	.word	0x000d91dc
   d46ec:	2003d2c8 	.word	0x2003d2c8
   d46f0:	2003d704 	.word	0x2003d704
   d46f4:	2003d74c 	.word	0x2003d74c
   d46f8:	2003d274 	.word	0x2003d274
   d46fc:	000d9549 	.word	0x000d9549
   d4700:	2003df90 	.word	0x2003df90
   d4704:	2003e3bc 	.word	0x2003e3bc
   d4708:	42c80000 	.word	0x42c80000
   d470c:	2003dfbc 	.word	0x2003dfbc
   d4710:	2003df84 	.word	0x2003df84
   d4714:	2003df88 	.word	0x2003df88
   d4718:	2003dfac 	.word	0x2003dfac

000d471c <loop>:
  if (rtc.lostPower()) {    // Note: comment this line (and end bracket) and change rtc.adjust below to change time manually
   //rtc.adjust(DateTime(F(__DATE__), F(__TIME__))); //
     //rtc.adjust(DateTime(2020, 1, 24, 13, 42, 0)); //manually change time here (YEAR, MONTH, DAY, HR, MIN, SEC)
  } // this end bracket
}
void loop(){
   d471c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4720:	ed2d 8b02 	vpush	{d8}
   d4724:	4c66      	ldr	r4, [pc, #408]	; (d48c0 <loop+0x1a4>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4726:	2200      	movs	r2, #0
   d4728:	b0a2      	sub	sp, #136	; 0x88
   d472a:	4611      	mov	r1, r2
   d472c:	6860      	ldr	r0, [r4, #4]
   d472e:	f002 fbff 	bl	d6f30 <network_ready>
  //check for wifi connection
  if(!WiFi.ready()){
   d4732:	4603      	mov	r3, r0
   d4734:	b948      	cbnz	r0, d474a <loop+0x2e>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4736:	4601      	mov	r1, r0
   d4738:	4602      	mov	r2, r0
   d473a:	6860      	ldr	r0, [r4, #4]
   d473c:	f002 fbe0 	bl	d6f00 <network_connect>
    WiFi.connect();
    Serial.println("Connecting...");
   d4740:	f003 f8ac 	bl	d789c <_Z16_fetch_usbserialv>
   d4744:	495f      	ldr	r1, [pc, #380]	; (d48c4 <loop+0x1a8>)
   d4746:	f002 fe85 	bl	d7454 <_ZN5Print7printlnEPKc>
  }

  //Plantower data collection and processing
  int txdata = Serial1.read();
   d474a:	f003 f917 	bl	d797c <_Z22__fetch_global_Serial1v>
   d474e:	6803      	ldr	r3, [r0, #0]
   d4750:	695b      	ldr	r3, [r3, #20]
   d4752:	4798      	blx	r3
  if(txdata != -260){
   d4754:	f510 7f82 	cmn.w	r0, #260	; 0x104
   d4758:	f000 81b5 	beq.w	d4ac6 <loop+0x3aa>
    if(count % 2 == 1){
   d475c:	4f5a      	ldr	r7, [pc, #360]	; (d48c8 <loop+0x1ac>)
   d475e:	4b5b      	ldr	r3, [pc, #364]	; (d48cc <loop+0x1b0>)
   d4760:	683a      	ldr	r2, [r7, #0]
   d4762:	4013      	ands	r3, r2
   d4764:	2b00      	cmp	r3, #0
   d4766:	bfbe      	ittt	lt
   d4768:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d476c:	f063 0301 	ornlt	r3, r3, #1
   d4770:	3301      	addlt	r3, #1
   d4772:	2b01      	cmp	r3, #1
   d4774:	4b56      	ldr	r3, [pc, #344]	; (d48d0 <loop+0x1b4>)
   d4776:	d10a      	bne.n	d478e <loop+0x72>
      shiftedtxdata = txdata << 8;
   d4778:	0201      	lsls	r1, r0, #8
      if(count == 1){
   d477a:	2a01      	cmp	r2, #1

  //Plantower data collection and processing
  int txdata = Serial1.read();
  if(txdata != -260){
    if(count % 2 == 1){
      shiftedtxdata = txdata << 8;
   d477c:	6019      	str	r1, [r3, #0]
      if(count == 1){
   d477e:	f040 8199 	bne.w	d4ab4 <loop+0x398>
        if(txdata != 66){
   d4782:	2842      	cmp	r0, #66	; 0x42
   d4784:	f000 8196 	beq.w	d4ab4 <loop+0x398>
          count = 0;
   d4788:	2300      	movs	r3, #0
   d478a:	603b      	str	r3, [r7, #0]
   d478c:	e192      	b.n	d4ab4 <loop+0x398>
        }
      }
      count++;
    }
    else{
      int dataval = shiftedtxdata + txdata;
   d478e:	681b      	ldr	r3, [r3, #0]
      switch(count){
   d4790:	3a02      	subs	r2, #2
        }
      }
      count++;
    }
    else{
      int dataval = shiftedtxdata + txdata;
   d4792:	4418      	add	r0, r3
      switch(count){
   d4794:	2a1e      	cmp	r2, #30
   d4796:	f200 818d 	bhi.w	d4ab4 <loop+0x398>
   d479a:	e8df f012 	tbh	[pc, r2, lsl #1]
   d479e:	001f      	.short	0x001f
   d47a0:	001f018b 	.word	0x001f018b
   d47a4:	0022018b 	.word	0x0022018b
   d47a8:	0025018b 	.word	0x0025018b
   d47ac:	0028018b 	.word	0x0028018b
   d47b0:	002b018b 	.word	0x002b018b
   d47b4:	002e018b 	.word	0x002e018b
   d47b8:	0031018b 	.word	0x0031018b
   d47bc:	0034018b 	.word	0x0034018b
   d47c0:	0037018b 	.word	0x0037018b
   d47c4:	003a018b 	.word	0x003a018b
   d47c8:	003d018b 	.word	0x003d018b
   d47cc:	0040018b 	.word	0x0040018b
   d47d0:	0043018b 	.word	0x0043018b
   d47d4:	018b018b 	.word	0x018b018b
   d47d8:	0046018b 	.word	0x0046018b
        case 2 :
        case 4 :
          data.framelen = dataval;
   d47dc:	4b3d      	ldr	r3, [pc, #244]	; (d48d4 <loop+0x1b8>)
   d47de:	8018      	strh	r0, [r3, #0]
        break;
   d47e0:	e168      	b.n	d4ab4 <loop+0x398>
        case 6 :
          data.pm10_standard = dataval;
   d47e2:	4b3c      	ldr	r3, [pc, #240]	; (d48d4 <loop+0x1b8>)
   d47e4:	8058      	strh	r0, [r3, #2]
        break;
   d47e6:	e165      	b.n	d4ab4 <loop+0x398>
        case 8 :
          data.pm25_standard = dataval;
   d47e8:	4b3a      	ldr	r3, [pc, #232]	; (d48d4 <loop+0x1b8>)
   d47ea:	8098      	strh	r0, [r3, #4]
        break;
   d47ec:	e162      	b.n	d4ab4 <loop+0x398>
        case 10 :
          data.pm100_standard = dataval;
   d47ee:	4b39      	ldr	r3, [pc, #228]	; (d48d4 <loop+0x1b8>)
   d47f0:	80d8      	strh	r0, [r3, #6]
        break;
   d47f2:	e15f      	b.n	d4ab4 <loop+0x398>
        case 12 :
          data.pm10_env = dataval;
   d47f4:	4b37      	ldr	r3, [pc, #220]	; (d48d4 <loop+0x1b8>)
   d47f6:	8118      	strh	r0, [r3, #8]
        break;
   d47f8:	e15c      	b.n	d4ab4 <loop+0x398>
        case 14 :
          data.pm25_env = dataval;
   d47fa:	4b36      	ldr	r3, [pc, #216]	; (d48d4 <loop+0x1b8>)
   d47fc:	8158      	strh	r0, [r3, #10]
        break;
   d47fe:	e159      	b.n	d4ab4 <loop+0x398>
        case 16 :
          data.pm100_env = dataval;
   d4800:	4b34      	ldr	r3, [pc, #208]	; (d48d4 <loop+0x1b8>)
   d4802:	8198      	strh	r0, [r3, #12]
        break;
   d4804:	e156      	b.n	d4ab4 <loop+0x398>
        case 18 :
          data.particles_03um = dataval;
   d4806:	4b33      	ldr	r3, [pc, #204]	; (d48d4 <loop+0x1b8>)
   d4808:	81d8      	strh	r0, [r3, #14]
        break;
   d480a:	e153      	b.n	d4ab4 <loop+0x398>
        case 20 :
          data.particles_05um = dataval;
   d480c:	4b31      	ldr	r3, [pc, #196]	; (d48d4 <loop+0x1b8>)
   d480e:	8218      	strh	r0, [r3, #16]
        break;
   d4810:	e150      	b.n	d4ab4 <loop+0x398>
        case 22 :
          data.particles_10um = dataval;
   d4812:	4b30      	ldr	r3, [pc, #192]	; (d48d4 <loop+0x1b8>)
   d4814:	8258      	strh	r0, [r3, #18]
        break;
   d4816:	e14d      	b.n	d4ab4 <loop+0x398>
        case 24 :
          data.particles_25um = dataval;
   d4818:	4b2e      	ldr	r3, [pc, #184]	; (d48d4 <loop+0x1b8>)
   d481a:	8298      	strh	r0, [r3, #20]
        break;
   d481c:	e14a      	b.n	d4ab4 <loop+0x398>
        case 26 :
          data.particles_50um = dataval;
   d481e:	4b2d      	ldr	r3, [pc, #180]	; (d48d4 <loop+0x1b8>)
   d4820:	82d8      	strh	r0, [r3, #22]
        break;
   d4822:	e147      	b.n	d4ab4 <loop+0x398>
        case 28 :
          data.particles_100um = dataval;
   d4824:	4b2b      	ldr	r3, [pc, #172]	; (d48d4 <loop+0x1b8>)
   d4826:	8318      	strh	r0, [r3, #24]
        break;
   d4828:	e144      	b.n	d4ab4 <loop+0x398>
        case 32 :
          data.checksum = dataval;
   d482a:	4c2a      	ldr	r4, [pc, #168]	; (d48d4 <loop+0x1b8>)
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
   d482c:	4d2a      	ldr	r5, [pc, #168]	; (d48d8 <loop+0x1bc>)
        break;
        case 28 :
          data.particles_100um = dataval;
        break;
        case 32 :
          data.checksum = dataval;
   d482e:	8360      	strh	r0, [r4, #26]
          //RTC data collection
          now = rtc.now();
   d4830:	a817      	add	r0, sp, #92	; 0x5c
   d4832:	f002 f8c5 	bl	d69c0 <_ZN10RTC_DS32313nowEv>
   d4836:	4b29      	ldr	r3, [pc, #164]	; (d48dc <loop+0x1c0>)
   d4838:	9817      	ldr	r0, [sp, #92]	; 0x5c
   d483a:	6018      	str	r0, [r3, #0]
   d483c:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
          //Temp and humidity code
          humd = htu.readHumidity();
   d4840:	4827      	ldr	r0, [pc, #156]	; (d48e0 <loop+0x1c4>)
          data.particles_100um = dataval;
        break;
        case 32 :
          data.checksum = dataval;
          //RTC data collection
          now = rtc.now();
   d4842:	809a      	strh	r2, [r3, #4]
          //Temp and humidity code
          humd = htu.readHumidity();
   d4844:	f000 fa02 	bl	d4c4c <_ZN15Adafruit_Si702112readHumidityEv>
          temp = htu.readTemperature();
   d4848:	4825      	ldr	r0, [pc, #148]	; (d48e0 <loop+0x1c4>)
        case 32 :
          data.checksum = dataval;
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
   d484a:	ed85 0a00 	vstr	s0, [r5]
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
   d484e:	ed9f 8a25 	vldr	s16, [pc, #148]	; d48e4 <loop+0x1c8>
          data.checksum = dataval;
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
   d4852:	f000 fa41 	bl	d4cd8 <_ZN15Adafruit_Si702115readTemperatureEv>
          humd = round(100*humd)/100;
   d4856:	edd5 7a00 	vldr	s15, [r5]
   d485a:	ee67 7a88 	vmul.f32	s15, s15, s16
          data.checksum = dataval;
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
   d485e:	eef0 8a40 	vmov.f32	s17, s0
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   d4862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d486a:	46a8      	mov	r8, r5
   d486c:	ee17 0a90 	vmov	r0, s15
   d4870:	db06      	blt.n	d4880 <loop+0x164>
   d4872:	f004 f8a7 	bl	d89c4 <__aeabi_f2d>
   d4876:	2200      	movs	r2, #0
   d4878:	4b1b      	ldr	r3, [pc, #108]	; (d48e8 <loop+0x1cc>)
   d487a:	f003 ff45 	bl	d8708 <__adddf3>
   d487e:	e005      	b.n	d488c <loop+0x170>
   d4880:	f004 f8a0 	bl	d89c4 <__aeabi_f2d>
   d4884:	2200      	movs	r2, #0
   d4886:	4b18      	ldr	r3, [pc, #96]	; (d48e8 <loop+0x1cc>)
   d4888:	f003 ff3c 	bl	d8704 <__aeabi_dsub>
   d488c:	f004 fb00 	bl	d8e90 <__aeabi_d2iz>
   d4890:	ee07 0a90 	vmov	s15, r0
   d4894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          humd = round(100*humd)/100;
          temp = round(100*temp)/100;
   d4898:	ee28 0a88 	vmul.f32	s0, s17, s16
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
   d489c:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d48a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d48a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48a8:	ed88 7a00 	vstr	s14, [r8]
   d48ac:	ee10 0a10 	vmov	r0, s0
   d48b0:	db1c      	blt.n	d48ec <loop+0x1d0>
   d48b2:	f004 f887 	bl	d89c4 <__aeabi_f2d>
   d48b6:	2200      	movs	r2, #0
   d48b8:	4b0b      	ldr	r3, [pc, #44]	; (d48e8 <loop+0x1cc>)
   d48ba:	f003 ff25 	bl	d8708 <__adddf3>
   d48be:	e01b      	b.n	d48f8 <loop+0x1dc>
   d48c0:	2003e704 	.word	0x2003e704
   d48c4:	000d92e8 	.word	0x000d92e8
   d48c8:	2003d194 	.word	0x2003d194
   d48cc:	80000001 	.word	0x80000001
   d48d0:	2003d26c 	.word	0x2003d26c
   d48d4:	2003df90 	.word	0x2003df90
   d48d8:	2003dfbc 	.word	0x2003dfbc
   d48dc:	2003d74c 	.word	0x2003d74c
   d48e0:	2003dfb0 	.word	0x2003dfb0
   d48e4:	42c80000 	.word	0x42c80000
   d48e8:	3fe00000 	.word	0x3fe00000
   d48ec:	f004 f86a 	bl	d89c4 <__aeabi_f2d>
   d48f0:	2200      	movs	r2, #0
   d48f2:	4b77      	ldr	r3, [pc, #476]	; (d4ad0 <loop+0x3b4>)
   d48f4:	f003 ff06 	bl	d8704 <__aeabi_dsub>
   d48f8:	f004 faca 	bl	d8e90 <__aeabi_d2iz>
   d48fc:	ee07 0a90 	vmov	s15, r0
   d4900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          temp = round(100*temp)/100;
          //Print header
          if(header_done>0){
   d4904:	f8df a220 	ldr.w	sl, [pc, #544]	; d4b28 <loop+0x40c>
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
          temp = round(100*temp)/100;
   d4908:	4b72      	ldr	r3, [pc, #456]	; (d4ad4 <loop+0x3b8>)
          //Print header
          if(header_done>0){
   d490a:	f8da 2000 	ldr.w	r2, [sl]
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
          temp = round(100*temp)/100;
   d490e:	ee87 7a88 	vdiv.f32	s14, s15, s16
          //Print header
          if(header_done>0){
   d4912:	2a00      	cmp	r2, #0
   d4914:	4699      	mov	r9, r3
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
          temp = round(100*temp)/100;
   d4916:	ed83 7a00 	vstr	s14, [r3]
          //Print header
          if(header_done>0){
   d491a:	dc16      	bgt.n	d494a <loop+0x22e>
//==============================================================================
/**
 * \class PrintFile
 * \brief FatFile with Print.
 */
class PrintFile : public FatFile, public Print {
   d491c:	f8df e20c 	ldr.w	lr, [pc, #524]	; d4b2c <loop+0x410>
   d4920:	f10e 0608 	add.w	r6, lr, #8
   d4924:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4926:	ad19      	add	r5, sp, #100	; 0x64
   d4928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d492a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d492c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d492e:	6833      	ldr	r3, [r6, #0]
   d4930:	602b      	str	r3, [r5, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d4932:	f8de 3004 	ldr.w	r3, [lr, #4]
   d4936:	9318      	str	r3, [sp, #96]	; 0x60
          }
          else{
            writeHeader1(sdfile1, sdfilename);
   d4938:	4967      	ldr	r1, [pc, #412]	; (d4ad8 <loop+0x3bc>)
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d493a:	4b68      	ldr	r3, [pc, #416]	; (d4adc <loop+0x3c0>)
   d493c:	9317      	str	r3, [sp, #92]	; 0x5c
   d493e:	a817      	add	r0, sp, #92	; 0x5c
   d4940:	f7ff fd04 	bl	d434c <_Z12writeHeader16SdFilePc>
            header_done=1;  
   d4944:	2301      	movs	r3, #1
   d4946:	f8ca 3000 	str.w	r3, [sl]
          }
          //Send data to database
          if ((millis()-starttime) > sampletime_ms){
   d494a:	4e65      	ldr	r6, [pc, #404]	; (d4ae0 <loop+0x3c4>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d494c:	f002 f934 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>
   d4950:	6833      	ldr	r3, [r6, #0]
   d4952:	1ac0      	subs	r0, r0, r3
   d4954:	4b63      	ldr	r3, [pc, #396]	; (d4ae4 <loop+0x3c8>)
   d4956:	681b      	ldr	r3, [r3, #0]
   d4958:	4298      	cmp	r0, r3
   d495a:	f240 80a0 	bls.w	d4a9e <loop+0x382>
            snprintf(pathdata, sizeof(pathdata), "/indata01.php?unix=%ld&username=%s&password=%s&dbname=%s&tablename=%s&pm10_std=%d&pm25_std=%d&pm100_std=%d&pm10_env=%d&pm25_env=%d&pm100_env=%d&p3=%d&p5=%d&p10=%d&p25=%d&p50=%d&p100=%d&checksum=%d&Temperature=%f&Humidity=%f", now.unixtime(), username, password, dbname, tablename, data.pm10_standard, data.pm25_standard, data.pm100_standard, data.pm10_env, data.pm25_env, data.pm100_env, data.particles_03um, data.particles_05um, data.particles_10um, data.particles_25um, data.particles_50um, data.particles_100um, data.checksum, temp, humd);
   d495e:	4862      	ldr	r0, [pc, #392]	; (d4ae8 <loop+0x3cc>)
   d4960:	f002 f808 	bl	d6974 <_ZNK8DateTime8unixtimeEv>
   d4964:	4605      	mov	r5, r0
   d4966:	f8d8 0000 	ldr.w	r0, [r8]
   d496a:	f004 f82b 	bl	d89c4 <__aeabi_f2d>
   d496e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   d4972:	f8d9 0000 	ldr.w	r0, [r9]
   d4976:	f004 f825 	bl	d89c4 <__aeabi_f2d>
   d497a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   d497e:	8b63      	ldrh	r3, [r4, #26]
   d4980:	9310      	str	r3, [sp, #64]	; 0x40
   d4982:	8b23      	ldrh	r3, [r4, #24]
   d4984:	930f      	str	r3, [sp, #60]	; 0x3c
   d4986:	8ae3      	ldrh	r3, [r4, #22]
   d4988:	930e      	str	r3, [sp, #56]	; 0x38
   d498a:	8aa3      	ldrh	r3, [r4, #20]
   d498c:	930d      	str	r3, [sp, #52]	; 0x34
   d498e:	8a63      	ldrh	r3, [r4, #18]
   d4990:	930c      	str	r3, [sp, #48]	; 0x30
   d4992:	8a23      	ldrh	r3, [r4, #16]
   d4994:	930b      	str	r3, [sp, #44]	; 0x2c
   d4996:	89e3      	ldrh	r3, [r4, #14]
   d4998:	930a      	str	r3, [sp, #40]	; 0x28
   d499a:	89a3      	ldrh	r3, [r4, #12]
   d499c:	9309      	str	r3, [sp, #36]	; 0x24
   d499e:	8963      	ldrh	r3, [r4, #10]
   d49a0:	9308      	str	r3, [sp, #32]
   d49a2:	8923      	ldrh	r3, [r4, #8]
   d49a4:	9307      	str	r3, [sp, #28]
   d49a6:	88e3      	ldrh	r3, [r4, #6]
   d49a8:	9306      	str	r3, [sp, #24]
   d49aa:	88a3      	ldrh	r3, [r4, #4]
   d49ac:	9305      	str	r3, [sp, #20]
   d49ae:	8863      	ldrh	r3, [r4, #2]
   d49b0:	9304      	str	r3, [sp, #16]
   d49b2:	4b4e      	ldr	r3, [pc, #312]	; (d4aec <loop+0x3d0>)
   d49b4:	9303      	str	r3, [sp, #12]
   d49b6:	4b4e      	ldr	r3, [pc, #312]	; (d4af0 <loop+0x3d4>)
   d49b8:	9302      	str	r3, [sp, #8]
   d49ba:	4b4e      	ldr	r3, [pc, #312]	; (d4af4 <loop+0x3d8>)
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	4b4e      	ldr	r3, [pc, #312]	; (d4af8 <loop+0x3dc>)
   d49c0:	4a4e      	ldr	r2, [pc, #312]	; (d4afc <loop+0x3e0>)
   d49c2:	9300      	str	r3, [sp, #0]
   d49c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d49c8:	462b      	mov	r3, r5
   d49ca:	484d      	ldr	r0, [pc, #308]	; (d4b00 <loop+0x3e4>)
   d49cc:	f002 fb18 	bl	d7000 <snprintf>
            snprintf(jsondata, sizeof(jsondata), "{\"time\": \"%ld\", \"pm10\":\"%d\", \"pm25\":\"%d\", \"pm100\":\"%d\", \"pn03\":\"%d\", \"pn05\":\"%d\", \"pn10\":\"%d\", \"pn25\":\"%d\", \"pn50\":\"%d\", \"pn100\":\"%d\", \"temp\":\"%f\", \"humidity\":\"%f\"}", now.unixtime(), data.pm10_standard, data.pm25_standard, data.pm100_standard, data.particles_03um, data.particles_05um, data.particles_10um, data.particles_25um, data.particles_50um, data.particles_100um, temp, humd);
   d49d0:	4845      	ldr	r0, [pc, #276]	; (d4ae8 <loop+0x3cc>)
   d49d2:	f001 ffcf 	bl	d6974 <_ZNK8DateTime8unixtimeEv>
   d49d6:	4605      	mov	r5, r0
   d49d8:	f8d8 0000 	ldr.w	r0, [r8]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d49dc:	f8df 8150 	ldr.w	r8, [pc, #336]	; d4b30 <loop+0x414>
   d49e0:	f003 fff0 	bl	d89c4 <__aeabi_f2d>
   d49e4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d49e8:	f8d9 0000 	ldr.w	r0, [r9]
   d49ec:	f003 ffea 	bl	d89c4 <__aeabi_f2d>
   d49f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d49f4:	8b23      	ldrh	r3, [r4, #24]
   d49f6:	9308      	str	r3, [sp, #32]
   d49f8:	8ae3      	ldrh	r3, [r4, #22]
   d49fa:	9307      	str	r3, [sp, #28]
   d49fc:	8aa3      	ldrh	r3, [r4, #20]
   d49fe:	9306      	str	r3, [sp, #24]
   d4a00:	8a63      	ldrh	r3, [r4, #18]
   d4a02:	9305      	str	r3, [sp, #20]
   d4a04:	8a23      	ldrh	r3, [r4, #16]
   d4a06:	9304      	str	r3, [sp, #16]
   d4a08:	89e3      	ldrh	r3, [r4, #14]
   d4a0a:	9303      	str	r3, [sp, #12]
   d4a0c:	88e3      	ldrh	r3, [r4, #6]
   d4a0e:	9302      	str	r3, [sp, #8]
   d4a10:	88a3      	ldrh	r3, [r4, #4]
   d4a12:	9301      	str	r3, [sp, #4]
   d4a14:	8863      	ldrh	r3, [r4, #2]
   d4a16:	9300      	str	r3, [sp, #0]
   d4a18:	4a3a      	ldr	r2, [pc, #232]	; (d4b04 <loop+0x3e8>)
   d4a1a:	483b      	ldr	r0, [pc, #236]	; (d4b08 <loop+0x3ec>)
   d4a1c:	462b      	mov	r3, r5
   d4a1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4a22:	f002 faed 	bl	d7000 <snprintf>
   d4a26:	f8df e104 	ldr.w	lr, [pc, #260]	; d4b2c <loop+0x410>
   d4a2a:	f10e 0508 	add.w	r5, lr, #8
   d4a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4a30:	ac19      	add	r4, sp, #100	; 0x64
   d4a32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a38:	682b      	ldr	r3, [r5, #0]
   d4a3a:	6023      	str	r3, [r4, #0]
   d4a3c:	f8de 3004 	ldr.w	r3, [lr, #4]
   d4a40:	9318      	str	r3, [sp, #96]	; 0x60
            logData1(sdfile1, sdfilename); //log data to SD card
   d4a42:	4925      	ldr	r1, [pc, #148]	; (d4ad8 <loop+0x3bc>)
   d4a44:	4b25      	ldr	r3, [pc, #148]	; (d4adc <loop+0x3c0>)
   d4a46:	9317      	str	r3, [sp, #92]	; 0x5c
   d4a48:	a817      	add	r0, sp, #92	; 0x5c
   d4a4a:	f7ff fd19 	bl	d4480 <_Z8logData16SdFilePc>

            request.ip = IPAddress(128, 153, 15, 208);
   d4a4e:	23d0      	movs	r3, #208	; 0xd0
   d4a50:	9300      	str	r3, [sp, #0]
   d4a52:	2299      	movs	r2, #153	; 0x99
   d4a54:	230f      	movs	r3, #15
   d4a56:	2180      	movs	r1, #128	; 0x80
   d4a58:	a817      	add	r0, sp, #92	; 0x5c
   d4a5a:	ad18      	add	r5, sp, #96	; 0x60
   d4a5c:	f002 feb6 	bl	d77cc <_ZN9IPAddressC1Ehhhh>
   d4a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4a62:	f108 0414 	add.w	r4, r8, #20
   d4a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4a68:	682b      	ldr	r3, [r5, #0]
   d4a6a:	7023      	strb	r3, [r4, #0]
            request.port = portnum;
   d4a6c:	4b27      	ldr	r3, [pc, #156]	; (d4b0c <loop+0x3f0>)
            request.path = pathdata;
   d4a6e:	4924      	ldr	r1, [pc, #144]	; (d4b00 <loop+0x3e4>)
            snprintf(pathdata, sizeof(pathdata), "/indata01.php?unix=%ld&username=%s&password=%s&dbname=%s&tablename=%s&pm10_std=%d&pm25_std=%d&pm100_std=%d&pm10_env=%d&pm25_env=%d&pm100_env=%d&p3=%d&p5=%d&p10=%d&p25=%d&p50=%d&p100=%d&checksum=%d&Temperature=%f&Humidity=%f", now.unixtime(), username, password, dbname, tablename, data.pm10_standard, data.pm25_standard, data.pm100_standard, data.pm10_env, data.pm25_env, data.pm100_env, data.particles_03um, data.particles_05um, data.particles_10um, data.particles_25um, data.particles_50um, data.particles_100um, data.checksum, temp, humd);
            snprintf(jsondata, sizeof(jsondata), "{\"time\": \"%ld\", \"pm10\":\"%d\", \"pm25\":\"%d\", \"pm100\":\"%d\", \"pn03\":\"%d\", \"pn05\":\"%d\", \"pn10\":\"%d\", \"pn25\":\"%d\", \"pn50\":\"%d\", \"pn100\":\"%d\", \"temp\":\"%f\", \"humidity\":\"%f\"}", now.unixtime(), data.pm10_standard, data.pm25_standard, data.pm100_standard, data.particles_03um, data.particles_05um, data.particles_10um, data.particles_25um, data.particles_50um, data.particles_100um, temp, humd);
            logData1(sdfile1, sdfilename); //log data to SD card

            request.ip = IPAddress(128, 153, 15, 208);
            request.port = portnum;
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
            request.path = pathdata;
   d4a76:	f108 0028 	add.w	r0, r8, #40	; 0x28
   d4a7a:	f002 fc43 	bl	d7304 <_ZN6StringaSEPKc>
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   d4a7e:	4b24      	ldr	r3, [pc, #144]	; (d4b10 <loop+0x3f4>)
   d4a80:	4a24      	ldr	r2, [pc, #144]	; (d4b14 <loop+0x3f8>)
   d4a82:	9300      	str	r3, [sp, #0]
   d4a84:	4641      	mov	r1, r8
   d4a86:	4b24      	ldr	r3, [pc, #144]	; (d4b18 <loop+0x3fc>)
   d4a88:	4824      	ldr	r0, [pc, #144]	; (d4b1c <loop+0x400>)
   d4a8a:	f000 fab3 	bl	d4ff4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
            http.get(request, response, headers);
            Serial.println("Sending Data");
   d4a8e:	f002 ff05 	bl	d789c <_Z16_fetch_usbserialv>
   d4a92:	4923      	ldr	r1, [pc, #140]	; (d4b20 <loop+0x404>)
   d4a94:	f002 fcde 	bl	d7454 <_ZN5Print7printlnEPKc>
   d4a98:	f002 f88e 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>
            starttime = millis();
   d4a9c:	6030      	str	r0, [r6, #0]
          }
          Serial1.end();
   d4a9e:	f002 ff6d 	bl	d797c <_Z22__fetch_global_Serial1v>
   d4aa2:	f002 ff65 	bl	d7970 <_ZN11USARTSerial3endEv>
          Serial1.begin(9600, SERIAL_8N1);
   d4aa6:	f002 ff69 	bl	d797c <_Z22__fetch_global_Serial1v>
   d4aaa:	2200      	movs	r2, #0
   d4aac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4ab0:	f002 ff5a 	bl	d7968 <_ZN11USARTSerial5beginEmm>
        break;
        default :
        break;
      }
      count++;
   d4ab4:	683b      	ldr	r3, [r7, #0]
   d4ab6:	3301      	adds	r3, #1
   d4ab8:	603b      	str	r3, [r7, #0]
    }
    if(count == 33){
   d4aba:	683b      	ldr	r3, [r7, #0]
   d4abc:	2b21      	cmp	r3, #33	; 0x21
      count = 1;
   d4abe:	bf02      	ittt	eq
   d4ac0:	4b18      	ldreq	r3, [pc, #96]	; (d4b24 <loop+0x408>)
   d4ac2:	2201      	moveq	r2, #1
   d4ac4:	601a      	streq	r2, [r3, #0]
    }
  }
}
   d4ac6:	b022      	add	sp, #136	; 0x88
   d4ac8:	ecbd 8b02 	vpop	{d8}
   d4acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4ad0:	3fe00000 	.word	0x3fe00000
   d4ad4:	2003e3bc 	.word	0x2003e3bc
   d4ad8:	2003d1b0 	.word	0x2003d1b0
   d4adc:	000d91e8 	.word	0x000d91e8
   d4ae0:	2003d270 	.word	0x2003d270
   d4ae4:	2003d198 	.word	0x2003d198
   d4ae8:	2003d74c 	.word	0x2003d74c
   d4aec:	2003d15c 	.word	0x2003d15c
   d4af0:	2003d1d4 	.word	0x2003d1d4
   d4af4:	2003d19c 	.word	0x2003d19c
   d4af8:	2003d170 	.word	0x2003d170
   d4afc:	000d92f6 	.word	0x000d92f6
   d4b00:	2003dfd4 	.word	0x2003dfd4
   d4b04:	000d93d6 	.word	0x000d93d6
   d4b08:	2003db9c 	.word	0x2003db9c
   d4b0c:	2003d1f8 	.word	0x2003d1f8
   d4b10:	000d947b 	.word	0x000d947b
   d4b14:	2003dfc0 	.word	0x2003dfc0
   d4b18:	2003d1c4 	.word	0x2003d1c4
   d4b1c:	2003d754 	.word	0x2003d754
   d4b20:	000d947f 	.word	0x000d947f
   d4b24:	2003d194 	.word	0x2003d194
   d4b28:	2003df8c 	.word	0x2003df8c
   d4b2c:	2003db70 	.word	0x2003db70
   d4b30:	2003d27c 	.word	0x2003d27c

000d4b34 <_GLOBAL__sub_I_wifissid>:
  file.print(humdl);
  file.print('.');
  file.print(humdr);
  file.println();
  file.close();
   d4b34:	b570      	push	{r4, r5, r6, lr}
// char sensorType[] = "POTS006";
// char ch1[20] = "1001";
// char ch2[20] = "1002";
char token[200] = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0aW1lc3RhbXAiOjE1MzI0NTY0ODcsImRldmljZV9pZCI6IkRFVklDRTAwMSIsImFjY291bnRfaWQiOiJQT1RTREFNMDEifQ.2-uok5PvRILXwSINDMdo0vT-KM8hHcVJr-BDuOEx-GQ";
//Http variables
HttpClient http;
   d4b36:	4c30      	ldr	r4, [pc, #192]	; (d4bf8 <_GLOBAL__sub_I_wifissid+0xc4>)
   d4b38:	4d30      	ldr	r5, [pc, #192]	; (d4bfc <_GLOBAL__sub_I_wifissid+0xc8>)
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
   d4b3a:	4e31      	ldr	r6, [pc, #196]	; (d4c00 <_GLOBAL__sub_I_wifissid+0xcc>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4b3c:	f001 ffc4 	bl	d6ac8 <HAL_Pin_Map>
#include "Sdfat.h"
#include "HTU21D.h"
#include "HttpClient.h"
#include "Adafruit_Si7021.h"

SYSTEM_THREAD(ENABLED); //to be able to use without wifi (the code will still run when wifi is down)
   d4b40:	2100      	movs	r1, #0
   d4b42:	2001      	movs	r0, #1
   d4b44:	f002 f9c0 	bl	d6ec8 <system_thread_set_state>
// char sensorType[] = "POTS006";
// char ch1[20] = "1001";
// char ch2[20] = "1002";
char token[200] = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0aW1lc3RhbXAiOjE1MzI0NTY0ODcsImRldmljZV9pZCI6IkRFVklDRTAwMSIsImFjY291bnRfaWQiOiJQT1RTREFNMDEifQ.2-uok5PvRILXwSINDMdo0vT-KM8hHcVJr-BDuOEx-GQ";
//Http variables
HttpClient http;
   d4b48:	4620      	mov	r0, r4
   d4b4a:	f000 fa26 	bl	d4f9a <_ZN10HttpClientC1Ev>
   d4b4e:	4620      	mov	r0, r4
   d4b50:	4c2c      	ldr	r4, [pc, #176]	; (d4c04 <_GLOBAL__sub_I_wifissid+0xd0>)
   d4b52:	492d      	ldr	r1, [pc, #180]	; (d4c08 <_GLOBAL__sub_I_wifissid+0xd4>)
   d4b54:	462a      	mov	r2, r5
   d4b56:	f003 fc83 	bl	d8460 <__aeabi_atexit>
   d4b5a:	4631      	mov	r1, r6
   d4b5c:	4620      	mov	r0, r4
   d4b5e:	f002 fbbe 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4b62:	f104 0010 	add.w	r0, r4, #16
   d4b66:	f002 fded 	bl	d7744 <_ZN9IPAddressC1Ev>
   d4b6a:	4631      	mov	r1, r6
   d4b6c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4b70:	f002 fbb5 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d4b74:	4631      	mov	r1, r6
   d4b76:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4b7a:	f002 fbb0 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
http_header_t headers[] = {
    { "Accept" , "*/*"},
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};
http_request_t request;
   d4b7e:	4620      	mov	r0, r4
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
   d4b80:	4c22      	ldr	r4, [pc, #136]	; (d4c0c <_GLOBAL__sub_I_wifissid+0xd8>)
   d4b82:	4923      	ldr	r1, [pc, #140]	; (d4c10 <_GLOBAL__sub_I_wifissid+0xdc>)
   d4b84:	462a      	mov	r2, r5
   d4b86:	f003 fc6b 	bl	d8460 <__aeabi_atexit>
   d4b8a:	4631      	mov	r1, r6
   d4b8c:	1d20      	adds	r0, r4, #4
   d4b8e:	f002 fba6 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   d4b92:	462a      	mov	r2, r5
   d4b94:	491f      	ldr	r1, [pc, #124]	; (d4c14 <_GLOBAL__sub_I_wifissid+0xe0>)
   d4b96:	4620      	mov	r0, r4
   d4b98:	f003 fc62 	bl	d8460 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4b9c:	4b1e      	ldr	r3, [pc, #120]	; (d4c18 <_GLOBAL__sub_I_wifissid+0xe4>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4b9e:	481f      	ldr	r0, [pc, #124]	; (d4c1c <_GLOBAL__sub_I_wifissid+0xe8>)
//SD card (filename above)
const uint8_t chipSelect = A5;
const uint32_t SAMPLE_INTERVAL_MS = 1000;
int header_done = 0;
SdFat sd;
SdFile sdfile1; 
   d4ba0:	491f      	ldr	r1, [pc, #124]	; (d4c20 <_GLOBAL__sub_I_wifissid+0xec>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4ba2:	2264      	movs	r2, #100	; 0x64
   d4ba4:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d4ba8:	4a1e      	ldr	r2, [pc, #120]	; (d4c24 <_GLOBAL__sub_I_wifissid+0xf0>)
   d4baa:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d4bae:	2201      	movs	r2, #1
   d4bb0:	2400      	movs	r4, #0
   d4bb2:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4bb6:	4a1c      	ldr	r2, [pc, #112]	; (d4c28 <_GLOBAL__sub_I_wifissid+0xf4>)
   d4bb8:	71dc      	strb	r4, [r3, #7]
   d4bba:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d4bbe:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d4bc2:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d4bc6:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d4bca:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d4bce:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d4bd2:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d4bd6:	7204      	strb	r4, [r0, #8]
 public:
  SdFile() {}
   d4bd8:	4b14      	ldr	r3, [pc, #80]	; (d4c2c <_GLOBAL__sub_I_wifissid+0xf8>)
   d4bda:	7244      	strb	r4, [r0, #9]
   d4bdc:	462a      	mov	r2, r5
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4bde:	6044      	str	r4, [r0, #4]
   d4be0:	6003      	str	r3, [r0, #0]
   d4be2:	f003 fc3d 	bl	d8460 <__aeabi_atexit>
//RTC
DateTime now;
   d4be6:	4621      	mov	r1, r4
   d4be8:	4811      	ldr	r0, [pc, #68]	; (d4c30 <_GLOBAL__sub_I_wifissid+0xfc>)
   d4bea:	f001 fe75 	bl	d68d8 <_ZN8DateTimeC1Em>
RTC_DS3231 rtc;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
//temp and humidity
Adafruit_Si7021 htu;
   d4bee:	4811      	ldr	r0, [pc, #68]	; (d4c34 <_GLOBAL__sub_I_wifissid+0x100>)
  file.print(humdl);
  file.print('.');
  file.print(humdr);
  file.println();
  file.close();
   d4bf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
//RTC
DateTime now;
RTC_DS3231 rtc;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
//temp and humidity
Adafruit_Si7021 htu;
   d4bf4:	f000 b824 	b.w	d4c40 <_ZN15Adafruit_Si7021C1Ev>
   d4bf8:	2003d754 	.word	0x2003d754
   d4bfc:	2003d268 	.word	0x2003d268
   d4c00:	000d94d1 	.word	0x000d94d1
   d4c04:	2003d27c 	.word	0x2003d27c
   d4c08:	000d4199 	.word	0x000d4199
   d4c0c:	2003dfc0 	.word	0x2003dfc0
   d4c10:	000d4147 	.word	0x000d4147
   d4c14:	000d4139 	.word	0x000d4139
   d4c18:	2003d2c8 	.word	0x2003d2c8
   d4c1c:	2003db70 	.word	0x2003db70
   d4c20:	000d40b3 	.word	0x000d40b3
   d4c24:	000d91dc 	.word	0x000d91dc
   d4c28:	2003e714 	.word	0x2003e714
   d4c2c:	000d91e8 	.word	0x000d91e8
   d4c30:	2003d74c 	.word	0x2003d74c
   d4c34:	2003dfb0 	.word	0x2003dfb0

000d4c38 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4c38:	6803      	ldr	r3, [r0, #0]
   d4c3a:	b2c9      	uxtb	r1, r1
   d4c3c:	689b      	ldr	r3, [r3, #8]
   d4c3e:	4718      	bx	r3

000d4c40 <_ZN15Adafruit_Si7021C1Ev>:


/**************************************************************************/

Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
   d4c40:	2240      	movs	r2, #64	; 0x40
   d4c42:	7202      	strb	r2, [r0, #8]
  sernum_a = sernum_b = 0;
   d4c44:	2200      	movs	r2, #0
   d4c46:	6042      	str	r2, [r0, #4]
   d4c48:	6002      	str	r2, [r0, #0]
}
   d4c4a:	4770      	bx	lr

000d4c4c <_ZN15Adafruit_Si702112readHumidityEv>:
  //Serial.println(sernum_b, HEX);

  return true;
}

float Adafruit_Si7021::readHumidity(void) {
   d4c4c:	b510      	push	{r4, lr}
   d4c4e:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4c50:	f003 fbe6 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4c54:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4c58:	f002 ff0f 	bl	d7a7a <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASRH_NOHOLD_CMD);
   d4c5c:	f003 fbe0 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4c60:	6803      	ldr	r3, [r0, #0]
   d4c62:	21f5      	movs	r1, #245	; 0xf5
   d4c64:	689b      	ldr	r3, [r3, #8]
   d4c66:	4798      	blx	r3
  Wire.endTransmission(false);
   d4c68:	f003 fbda 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4c6c:	2100      	movs	r1, #0
   d4c6e:	f002 ff07 	bl	d7a80 <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d4c72:	2019      	movs	r0, #25
   d4c74:	f002 fca2 	bl	d75bc <delay>

  Wire.requestFrom(_i2caddr, 3);
   d4c78:	f003 fbd2 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4c7c:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4c80:	2203      	movs	r2, #3
   d4c82:	f002 fef1 	bl	d7a68 <_ZN7TwoWire11requestFromEii>
  uint16_t hum = Wire.read();
   d4c86:	f003 fbcb 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4c8a:	6803      	ldr	r3, [r0, #0]
   d4c8c:	695b      	ldr	r3, [r3, #20]
   d4c8e:	4798      	blx	r3
   d4c90:	b284      	uxth	r4, r0
  hum <<= 8;
  hum |= Wire.read();
   d4c92:	f003 fbc5 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4c96:	6803      	ldr	r3, [r0, #0]
   d4c98:	695b      	ldr	r3, [r3, #20]
   d4c9a:	4798      	blx	r3
   d4c9c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4ca0:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d4ca2:	f003 fbbd 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4ca6:	6803      	ldr	r3, [r0, #0]
   d4ca8:	695b      	ldr	r3, [r3, #20]
   d4caa:	4798      	blx	r3

  float humidity = hum;
   d4cac:	b2a3      	uxth	r3, r4
   d4cae:	ee07 3a90 	vmov	s15, r3
  humidity *= 125;
   d4cb2:	ed9f 7a06 	vldr	s14, [pc, #24]	; d4ccc <_ZN15Adafruit_Si702112readHumidityEv+0x80>
  uint16_t hum = Wire.read();
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
   d4cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
  humidity *= 125;
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d4cba:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
  humidity *= 125;
   d4cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d4cc2:	ed9f 7a03 	vldr	s14, [pc, #12]	; d4cd0 <_ZN15Adafruit_Si702112readHumidityEv+0x84>
   d4cc6:	eea7 0a87 	vfma.f32	s0, s15, s14
   d4cca:	bd10      	pop	{r4, pc}
   d4ccc:	42fa0000 	.word	0x42fa0000
   d4cd0:	37800000 	.word	0x37800000
   d4cd4:	00000000 	.word	0x00000000

000d4cd8 <_ZN15Adafruit_Si702115readTemperatureEv>:

float Adafruit_Si7021::readTemperature(void) {
   d4cd8:	b510      	push	{r4, lr}
   d4cda:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4cdc:	f003 fba0 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4ce0:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4ce4:	f002 fec9 	bl	d7a7a <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASTEMP_NOHOLD_CMD);
   d4ce8:	f003 fb9a 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4cec:	6803      	ldr	r3, [r0, #0]
   d4cee:	21f3      	movs	r1, #243	; 0xf3
   d4cf0:	689b      	ldr	r3, [r3, #8]
   d4cf2:	4798      	blx	r3
  Wire.endTransmission(false);
   d4cf4:	f003 fb94 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4cf8:	2100      	movs	r1, #0
   d4cfa:	f002 fec1 	bl	d7a80 <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d4cfe:	2019      	movs	r0, #25
   d4d00:	f002 fc5c 	bl	d75bc <delay>

  Wire.requestFrom(_i2caddr, 3);
   d4d04:	f003 fb8c 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4d08:	2203      	movs	r2, #3
   d4d0a:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4d0e:	f002 feab 	bl	d7a68 <_ZN7TwoWire11requestFromEii>
  uint16_t temp = Wire.read();
   d4d12:	f003 fb85 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4d16:	6803      	ldr	r3, [r0, #0]
   d4d18:	695b      	ldr	r3, [r3, #20]
   d4d1a:	4798      	blx	r3
   d4d1c:	b284      	uxth	r4, r0
  temp <<= 8;
  temp |= Wire.read();
   d4d1e:	f003 fb7f 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4d22:	6803      	ldr	r3, [r0, #0]
   d4d24:	695b      	ldr	r3, [r3, #20]
   d4d26:	4798      	blx	r3
   d4d28:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4d2c:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d4d2e:	f003 fb77 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4d32:	6803      	ldr	r3, [r0, #0]
   d4d34:	695b      	ldr	r3, [r3, #20]
   d4d36:	4798      	blx	r3

  float temperature = temp;
  temperature *= 175.72;
   d4d38:	b2a0      	uxth	r0, r4
   d4d3a:	ee07 0a90 	vmov	s15, r0
   d4d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4d42:	ee17 0a90 	vmov	r0, s15
   d4d46:	f003 fe3d 	bl	d89c4 <__aeabi_f2d>
   d4d4a:	a310      	add	r3, pc, #64	; (adr r3, d4d8c <_ZN15Adafruit_Si702115readTemperatureEv+0xb4>)
   d4d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d50:	f003 fe8c 	bl	d8a6c <__aeabi_dmul>
   d4d54:	f004 f8c4 	bl	d8ee0 <__aeabi_d2f>
  temperature /= 65536;
  temperature -= 46.85;
   d4d58:	eddf 7a0b 	vldr	s15, [pc, #44]	; d4d88 <_ZN15Adafruit_Si702115readTemperatureEv+0xb0>
   d4d5c:	ee07 0a10 	vmov	s14, r0
   d4d60:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4d64:	ee17 0a90 	vmov	r0, s15
   d4d68:	f003 fe2c 	bl	d89c4 <__aeabi_f2d>
   d4d6c:	a304      	add	r3, pc, #16	; (adr r3, d4d80 <_ZN15Adafruit_Si702115readTemperatureEv+0xa8>)
   d4d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4d72:	f003 fcc7 	bl	d8704 <__aeabi_dsub>

  return temperature;
   d4d76:	f004 f8b3 	bl	d8ee0 <__aeabi_d2f>
}
   d4d7a:	ee00 0a10 	vmov	s0, r0
   d4d7e:	bd10      	pop	{r4, pc}
   d4d80:	cccccccd 	.word	0xcccccccd
   d4d84:	40476ccc 	.word	0x40476ccc
   d4d88:	37800000 	.word	0x37800000
   d4d8c:	3d70a3d7 	.word	0x3d70a3d7
   d4d90:	4065f70a 	.word	0x4065f70a

000d4d94 <_ZN15Adafruit_Si70215resetEv>:

void Adafruit_Si7021::reset(void) {
   d4d94:	b510      	push	{r4, lr}
   d4d96:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4d98:	f003 fb42 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4d9c:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4da0:	f002 fe6b 	bl	d7a7a <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_RESET_CMD);
   d4da4:	f003 fb3c 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4da8:	6803      	ldr	r3, [r0, #0]
   d4daa:	21fe      	movs	r1, #254	; 0xfe
   d4dac:	689b      	ldr	r3, [r3, #8]
   d4dae:	4798      	blx	r3
  Wire.endTransmission();
   d4db0:	f003 fb36 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4db4:	f002 fe68 	bl	d7a88 <_ZN7TwoWire15endTransmissionEv>
  delay(50);
   d4db8:	2032      	movs	r0, #50	; 0x32
}
   d4dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Adafruit_Si7021::reset(void) {
  Wire.beginTransmission(_i2caddr);
  Wire.write((uint8_t)SI7021_RESET_CMD);
  Wire.endTransmission();
  delay(50);
   d4dbe:	f002 bbfd 	b.w	d75bc <delay>

000d4dc2 <_ZN15Adafruit_Si702116readSerialNumberEv>:
}

void Adafruit_Si7021::readSerialNumber(void) {
   d4dc2:	b510      	push	{r4, lr}
   d4dc4:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4dc6:	f003 fb2b 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4dca:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4dce:	f002 fe54 	bl	d7a7a <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID1_CMD>>8);
   d4dd2:	f003 fb25 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4dd6:	2100      	movs	r1, #0
   d4dd8:	f7ff ff2e 	bl	d4c38 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID1_CMD&0xFF);
   d4ddc:	f003 fb20 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4de0:	210f      	movs	r1, #15
   d4de2:	f7ff ff29 	bl	d4c38 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d4de6:	f003 fb1b 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4dea:	f002 fe4d 	bl	d7a88 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d4dee:	f003 fb17 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4df2:	2208      	movs	r2, #8
   d4df4:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4df8:	f002 fe36 	bl	d7a68 <_ZN7TwoWire11requestFromEii>
  sernum_a = Wire.read();
   d4dfc:	f003 fb10 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e00:	6803      	ldr	r3, [r0, #0]
   d4e02:	695b      	ldr	r3, [r3, #20]
   d4e04:	4798      	blx	r3
   d4e06:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4e08:	f003 fb0a 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e0c:	6803      	ldr	r3, [r0, #0]
   d4e0e:	695b      	ldr	r3, [r3, #20]
   d4e10:	4798      	blx	r3
  sernum_a <<= 8;
   d4e12:	6823      	ldr	r3, [r4, #0]
   d4e14:	021b      	lsls	r3, r3, #8
   d4e16:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4e18:	f003 fb02 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e1c:	6803      	ldr	r3, [r0, #0]
   d4e1e:	695b      	ldr	r3, [r3, #20]
   d4e20:	4798      	blx	r3
   d4e22:	6823      	ldr	r3, [r4, #0]
   d4e24:	4318      	orrs	r0, r3
   d4e26:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4e28:	f003 fafa 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e2c:	6803      	ldr	r3, [r0, #0]
   d4e2e:	695b      	ldr	r3, [r3, #20]
   d4e30:	4798      	blx	r3
  sernum_a <<= 8;
   d4e32:	6823      	ldr	r3, [r4, #0]
   d4e34:	021b      	lsls	r3, r3, #8
   d4e36:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4e38:	f003 faf2 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e3c:	6803      	ldr	r3, [r0, #0]
   d4e3e:	695b      	ldr	r3, [r3, #20]
   d4e40:	4798      	blx	r3
   d4e42:	6823      	ldr	r3, [r4, #0]
   d4e44:	4318      	orrs	r0, r3
   d4e46:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4e48:	f003 faea 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e4c:	6803      	ldr	r3, [r0, #0]
   d4e4e:	695b      	ldr	r3, [r3, #20]
   d4e50:	4798      	blx	r3
  sernum_a <<= 8;
   d4e52:	6823      	ldr	r3, [r4, #0]
   d4e54:	021b      	lsls	r3, r3, #8
   d4e56:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4e58:	f003 fae2 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e5c:	6803      	ldr	r3, [r0, #0]
   d4e5e:	695b      	ldr	r3, [r3, #20]
   d4e60:	4798      	blx	r3
   d4e62:	6823      	ldr	r3, [r4, #0]
   d4e64:	4318      	orrs	r0, r3
   d4e66:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4e68:	f003 fada 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e6c:	6803      	ldr	r3, [r0, #0]
   d4e6e:	695b      	ldr	r3, [r3, #20]
   d4e70:	4798      	blx	r3

  Wire.beginTransmission(_i2caddr);
   d4e72:	f003 fad5 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e76:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4e7a:	f002 fdfe 	bl	d7a7a <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID2_CMD>>8);
   d4e7e:	f003 facf 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e82:	2100      	movs	r1, #0
   d4e84:	f7ff fed8 	bl	d4c38 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID2_CMD&0xFF);
   d4e88:	f003 faca 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e8c:	21c9      	movs	r1, #201	; 0xc9
   d4e8e:	f7ff fed3 	bl	d4c38 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d4e92:	f003 fac5 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e96:	f002 fdf7 	bl	d7a88 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d4e9a:	f003 fac1 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4e9e:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4ea2:	2208      	movs	r2, #8
   d4ea4:	f002 fde0 	bl	d7a68 <_ZN7TwoWire11requestFromEii>
  sernum_b = Wire.read();
   d4ea8:	f003 faba 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4eac:	6803      	ldr	r3, [r0, #0]
   d4eae:	695b      	ldr	r3, [r3, #20]
   d4eb0:	4798      	blx	r3
   d4eb2:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4eb4:	f003 fab4 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4eb8:	6803      	ldr	r3, [r0, #0]
   d4eba:	695b      	ldr	r3, [r3, #20]
   d4ebc:	4798      	blx	r3
  sernum_b <<= 8;
   d4ebe:	6863      	ldr	r3, [r4, #4]
   d4ec0:	021b      	lsls	r3, r3, #8
   d4ec2:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d4ec4:	f003 faac 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4ec8:	6803      	ldr	r3, [r0, #0]
   d4eca:	695b      	ldr	r3, [r3, #20]
   d4ecc:	4798      	blx	r3
   d4ece:	6863      	ldr	r3, [r4, #4]
   d4ed0:	4318      	orrs	r0, r3
   d4ed2:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4ed4:	f003 faa4 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4ed8:	6803      	ldr	r3, [r0, #0]
   d4eda:	695b      	ldr	r3, [r3, #20]
   d4edc:	4798      	blx	r3
  sernum_b <<= 8;
   d4ede:	6863      	ldr	r3, [r4, #4]
   d4ee0:	021b      	lsls	r3, r3, #8
   d4ee2:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d4ee4:	f003 fa9c 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4ee8:	6803      	ldr	r3, [r0, #0]
   d4eea:	695b      	ldr	r3, [r3, #20]
   d4eec:	4798      	blx	r3
   d4eee:	6863      	ldr	r3, [r4, #4]
   d4ef0:	4318      	orrs	r0, r3
   d4ef2:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4ef4:	f003 fa94 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4ef8:	6803      	ldr	r3, [r0, #0]
   d4efa:	695b      	ldr	r3, [r3, #20]
   d4efc:	4798      	blx	r3
  sernum_b <<= 8;
   d4efe:	6863      	ldr	r3, [r4, #4]
   d4f00:	021b      	lsls	r3, r3, #8
   d4f02:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d4f04:	f003 fa8c 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4f08:	6803      	ldr	r3, [r0, #0]
   d4f0a:	695b      	ldr	r3, [r3, #20]
   d4f0c:	4798      	blx	r3
   d4f0e:	6863      	ldr	r3, [r4, #4]
   d4f10:	4318      	orrs	r0, r3
   d4f12:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4f14:	f003 fa84 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4f18:	6803      	ldr	r3, [r0, #0]
}
   d4f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
   d4f1e:	695b      	ldr	r3, [r3, #20]
   d4f20:	4718      	bx	r3

000d4f22 <_ZN15Adafruit_Si702113readRegister8Eh>:
  Wire.endTransmission();

  //Serial.print("Wrote $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
}

uint8_t Adafruit_Si7021::readRegister8(uint8_t reg) {
   d4f22:	b538      	push	{r3, r4, r5, lr}
   d4f24:	4604      	mov	r4, r0
   d4f26:	460d      	mov	r5, r1
  uint8_t value;
  Wire.beginTransmission(_i2caddr);
   d4f28:	f003 fa7a 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4f2c:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4f30:	f002 fda3 	bl	d7a7a <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)reg);
   d4f34:	f003 fa74 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4f38:	6803      	ldr	r3, [r0, #0]
   d4f3a:	4629      	mov	r1, r5
   d4f3c:	689b      	ldr	r3, [r3, #8]
   d4f3e:	4798      	blx	r3
  Wire.endTransmission(false);
   d4f40:	f003 fa6e 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4f44:	2100      	movs	r1, #0
   d4f46:	f002 fd9b 	bl	d7a80 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(_i2caddr, 1);
   d4f4a:	f003 fa69 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4f4e:	2201      	movs	r2, #1
   d4f50:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4f54:	f002 fd88 	bl	d7a68 <_ZN7TwoWire11requestFromEii>
  value = Wire.read();
   d4f58:	f003 fa62 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4f5c:	6803      	ldr	r3, [r0, #0]
   d4f5e:	695b      	ldr	r3, [r3, #20]
   d4f60:	4798      	blx	r3

  //Serial.print("Read $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
  return value;
}
   d4f62:	b2c0      	uxtb	r0, r0
   d4f64:	bd38      	pop	{r3, r4, r5, pc}

000d4f66 <_ZN15Adafruit_Si70215beginEv>:
Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
  sernum_a = sernum_b = 0;
}

bool Adafruit_Si7021::begin(void) {
   d4f66:	b510      	push	{r4, lr}
   d4f68:	4604      	mov	r4, r0
  Wire.begin();
   d4f6a:	f003 fa59 	bl	d8420 <_Z19__fetch_global_Wirev>
   d4f6e:	f002 fd69 	bl	d7a44 <_ZN7TwoWire5beginEv>

  reset();
   d4f72:	4620      	mov	r0, r4
   d4f74:	f7ff ff0e 	bl	d4d94 <_ZN15Adafruit_Si70215resetEv>
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d4f78:	21e7      	movs	r1, #231	; 0xe7
   d4f7a:	4620      	mov	r0, r4
   d4f7c:	f7ff ffd1 	bl	d4f22 <_ZN15Adafruit_Si702113readRegister8Eh>
   d4f80:	283a      	cmp	r0, #58	; 0x3a
   d4f82:	d104      	bne.n	d4f8e <_ZN15Adafruit_Si70215beginEv+0x28>

  readSerialNumber();
   d4f84:	4620      	mov	r0, r4
   d4f86:	f7ff ff1c 	bl	d4dc2 <_ZN15Adafruit_Si702116readSerialNumberEv>

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
   d4f8a:	2001      	movs	r0, #1
   d4f8c:	bd10      	pop	{r4, pc}

bool Adafruit_Si7021::begin(void) {
  Wire.begin();

  reset();
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d4f8e:	2000      	movs	r0, #0

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
}
   d4f90:	bd10      	pop	{r4, pc}

000d4f92 <_GLOBAL__sub_I__ZN15Adafruit_Si7021C2Ev>:
   d4f92:	f001 bd99 	b.w	d6ac8 <HAL_Pin_Map>

000d4f96 <_GLOBAL__sub_I__ZN6HTU21DC2Ev>:
   d4f96:	f001 bd97 	b.w	d6ac8 <HAL_Pin_Map>

000d4f9a <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d4f9a:	b510      	push	{r4, lr}
   d4f9c:	4604      	mov	r4, r0
   d4f9e:	f003 f8cf 	bl	d8140 <_ZN9TCPClientC1Ev>
{

}
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	bd10      	pop	{r4, pc}
	...

000d4fa8 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d4fa8:	b538      	push	{r3, r4, r5, lr}
   d4faa:	4604      	mov	r4, r0
   d4fac:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d4fae:	f002 fa3e 	bl	d742e <_ZN5Print5printEPKc>
    client.print(": ");
   d4fb2:	4905      	ldr	r1, [pc, #20]	; (d4fc8 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   d4fb4:	4620      	mov	r0, r4
   d4fb6:	f002 fa3a 	bl	d742e <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d4fba:	4629      	mov	r1, r5
   d4fbc:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d4fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d4fc2:	f002 ba47 	b.w	d7454 <_ZN5Print7printlnEPKc>
   d4fc6:	bf00      	nop
   d4fc8:	000d954d 	.word	0x000d954d

000d4fcc <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   d4fcc:	b538      	push	{r3, r4, r5, lr}
   d4fce:	4604      	mov	r4, r0
   d4fd0:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d4fd2:	f002 fa2c 	bl	d742e <_ZN5Print5printEPKc>
    client.print(": ");
   d4fd6:	4905      	ldr	r1, [pc, #20]	; (d4fec <_ZN10HttpClient10sendHeaderEPKci+0x20>)
   d4fd8:	4620      	mov	r0, r4
   d4fda:	f002 fa28 	bl	d742e <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d4fde:	4629      	mov	r1, r5
   d4fe0:	4620      	mov	r0, r4
   d4fe2:	220a      	movs	r2, #10
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d4fe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d4fe8:	f002 ba91 	b.w	d750e <_ZN5Print7printlnEii>
   d4fec:	000d954d 	.word	0x000d954d

000d4ff0 <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
   d4ff0:	f001 bd6a 	b.w	d6ac8 <HAL_Pin_Map>

000d4ff4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d4ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ff8:	460d      	mov	r5, r1
   d4ffa:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d4ffc:	f04f 33ff 	mov.w	r3, #4294967295
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d5000:	b08f      	sub	sp, #60	; 0x3c
   d5002:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d5004:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5006:	2100      	movs	r1, #0
   d5008:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d500a:	4617      	mov	r7, r2
   d500c:	f002 f9a6 	bl	d735c <_ZNK6String6equalsEPKc>
   d5010:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d5014:	b960      	cbnz	r0, d5030 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
   d5016:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d5018:	f1b8 0f00 	cmp.w	r8, #0
   d501c:	d002      	beq.n	d5024 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
   d501e:	fa1f f288 	uxth.w	r2, r8
   d5022:	e000      	b.n	d5026 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
   d5024:	2250      	movs	r2, #80	; 0x50
   d5026:	2300      	movs	r3, #0
   d5028:	4620      	mov	r0, r4
   d502a:	f002 fe2f 	bl	d7c8c <_ZN9TCPClient7connectEPKctm>
   d502e:	e014      	b.n	d505a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x66>
   d5030:	4b74      	ldr	r3, [pc, #464]	; (d5204 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
   d5032:	9308      	str	r3, [sp, #32]
   d5034:	f105 0c14 	add.w	ip, r5, #20
   d5038:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d503c:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
   d5040:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5044:	f8dc 3000 	ldr.w	r3, [ip]
   d5048:	f88e 3000 	strb.w	r3, [lr]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d504c:	fa1f f288 	uxth.w	r2, r8
   d5050:	2300      	movs	r3, #0
   d5052:	a908      	add	r1, sp, #32
   d5054:	4620      	mov	r0, r4
   d5056:	f002 ff43 	bl	d7ee0 <_ZN9TCPClient7connectE9IPAddresstm>
   d505a:	3000      	adds	r0, #0
   d505c:	bf18      	it	ne
   d505e:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   d5060:	b918      	cbnz	r0, d506a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   d5062:	4620      	mov	r0, r4
   d5064:	f002 ffb9 	bl	d7fda <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
   d5068:	e0c8      	b.n	d51fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d506a:	9918      	ldr	r1, [sp, #96]	; 0x60
   d506c:	4620      	mov	r0, r4
   d506e:	f002 f9de 	bl	d742e <_ZN5Print5printEPKc>
    client.print(" ");
   d5072:	4965      	ldr	r1, [pc, #404]	; (d5208 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
   d5074:	4620      	mov	r0, r4
   d5076:	f002 f9da 	bl	d742e <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d507a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   d507c:	4620      	mov	r0, r4
   d507e:	f002 f9d6 	bl	d742e <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d5082:	4962      	ldr	r1, [pc, #392]	; (d520c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
   d5084:	4620      	mov	r0, r4
   d5086:	f002 f9d2 	bl	d742e <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d508a:	4961      	ldr	r1, [pc, #388]	; (d5210 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x21c>)
   d508c:	4a61      	ldr	r2, [pc, #388]	; (d5214 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x220>)
   d508e:	4620      	mov	r0, r4
   d5090:	f7ff ff8a 	bl	d4fa8 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d5094:	2100      	movs	r1, #0
   d5096:	4628      	mov	r0, r5
   d5098:	f002 f960 	bl	d735c <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d509c:	b920      	cbnz	r0, d50a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   d509e:	682a      	ldr	r2, [r5, #0]
   d50a0:	495d      	ldr	r1, [pc, #372]	; (d5218 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
   d50a2:	4620      	mov	r0, r4
   d50a4:	f7ff ff80 	bl	d4fa8 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d50a8:	f105 083c 	add.w	r8, r5, #60	; 0x3c
   d50ac:	2100      	movs	r1, #0
   d50ae:	4640      	mov	r0, r8
   d50b0:	f002 f954 	bl	d735c <_ZNK6String6equalsEPKc>
   d50b4:	b908      	cbnz	r0, d50ba <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc6>
        sendHeader("Content-Length", (aRequest.body).length());
   d50b6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   d50b8:	e005      	b.n	d50c6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd2>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d50ba:	4958      	ldr	r1, [pc, #352]	; (d521c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
   d50bc:	9818      	ldr	r0, [sp, #96]	; 0x60
   d50be:	f003 ffbb 	bl	d9038 <strcmp>
   d50c2:	4602      	mov	r2, r0
   d50c4:	b918      	cbnz	r0, d50ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xda>
        sendHeader("Content-Length", 0);
   d50c6:	4956      	ldr	r1, [pc, #344]	; (d5220 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   d50c8:	4620      	mov	r0, r4
   d50ca:	f7ff ff7f 	bl	d4fcc <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
   d50ce:	b15e      	cbz	r6, d50e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    {
        int i = 0;
        while (headers[i].header != NULL)
   d50d0:	6831      	ldr	r1, [r6, #0]
   d50d2:	b149      	cbz	r1, d50e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
        {
            if (headers[i].value != NULL) {
   d50d4:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
   d50d6:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
   d50d8:	b112      	cbz	r2, d50e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xec>
                sendHeader(headers[i].header, headers[i].value);
   d50da:	f7ff ff65 	bl	d4fa8 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d50de:	e001      	b.n	d50e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf0>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
   d50e0:	f002 f9b8 	bl	d7454 <_ZN5Print7printlnEPKc>
   d50e4:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
   d50e6:	e7f3      	b.n	d50d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
   d50e8:	4620      	mov	r0, r4
   d50ea:	f002 f9a7 	bl	d743c <_ZN5Print7printlnEv>
    client.flush();
   d50ee:	4620      	mov	r0, r4
   d50f0:	f002 fd9e 	bl	d7c30 <_ZN9TCPClient5flushEv>
   d50f4:	2100      	movs	r1, #0
   d50f6:	4640      	mov	r0, r8
   d50f8:	f002 f930 	bl	d735c <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
   d50fc:	b918      	cbnz	r0, d5106 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x112>
        client.println(aRequest.body);
   d50fe:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d5100:	4620      	mov	r0, r4
   d5102:	f002 f9a7 	bl	d7454 <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
   d5106:	f104 081c 	add.w	r8, r4, #28
   d510a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d510e:	2100      	movs	r1, #0
   d5110:	4640      	mov	r0, r8
   d5112:	f003 ff61 	bl	d8fd8 <memset>
   d5116:	f001 fd4f 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>
   d511a:	4681      	mov	r9, r0
   d511c:	f001 fd4c 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>
    // timeout or an error.

    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
   d5120:	2600      	movs	r6, #0
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
   d5122:	4635      	mov	r5, r6
        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
            delay(200);
        }
    } while (client.connected() && !timeout && !error);
   d5124:	f241 3a88 	movw	sl, #5000	; 0x1388
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d5128:	4620      	mov	r0, r4
   d512a:	f002 ff6d 	bl	d8008 <_ZN9TCPClient9availableEv>
   d512e:	b1d8      	cbz	r0, d5168 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x174>
            char c = client.read();
   d5130:	4620      	mov	r0, r4
   d5132:	f002 fe8a 	bl	d7e4a <_ZN9TCPClient4readEv>
   d5136:	4683      	mov	fp, r0
   d5138:	f001 fd3e 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>

                break;
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
   d513c:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d5140:	429d      	cmp	r5, r3
   d5142:	4681      	mov	r9, r0
   d5144:	d803      	bhi.n	d514e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15a>
                buffer[bufferPosition] = c;
   d5146:	1963      	adds	r3, r4, r5
   d5148:	f883 b01c 	strb.w	fp, [r3, #28]
   d514c:	e00a      	b.n	d5164 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d514e:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d5152:	429d      	cmp	r5, r3
   d5154:	d106      	bne.n	d5164 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d5156:	2300      	movs	r3, #0
   d5158:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d515c:	4620      	mov	r0, r4
   d515e:	f002 ff3c 	bl	d7fda <_ZN9TCPClient4stopEv>
                error = true;
   d5162:	2601      	movs	r6, #1

                #ifdef LOGGING
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
   d5164:	3501      	adds	r5, #1
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d5166:	e7df      	b.n	d5128 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
        }
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d5168:	1963      	adds	r3, r4, r5
   d516a:	7718      	strb	r0, [r3, #28]
   d516c:	f001 fd24 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > TIMEOUT;
   d5170:	ebc9 0b00 	rsb	fp, r9, r0

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
   d5174:	b926      	cbnz	r6, d5180 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
   d5176:	45d3      	cmp	fp, sl
   d5178:	d802      	bhi.n	d5180 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
            delay(200);
   d517a:	20c8      	movs	r0, #200	; 0xc8
   d517c:	f002 fa1e 	bl	d75bc <delay>
        }
    } while (client.connected() && !timeout && !error);
   d5180:	4620      	mov	r0, r4
   d5182:	f002 fd56 	bl	d7c32 <_ZN9TCPClient9connectedEv>
   d5186:	b118      	cbz	r0, d5190 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
   d5188:	45d3      	cmp	fp, sl
   d518a:	d801      	bhi.n	d5190 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
   d518c:	2e00      	cmp	r6, #0
   d518e:	d0cb      	beq.n	d5128 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
   d5190:	4620      	mov	r0, r4
   d5192:	f002 ff22 	bl	d7fda <_ZN9TCPClient4stopEv>

    String raw_response(buffer);
   d5196:	4641      	mov	r1, r8
   d5198:	4668      	mov	r0, sp
   d519a:	f002 f8a0 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>

    // Not super elegant way of finding the status code, but it works.
    String statusCode = raw_response.substring(9,12);
   d519e:	230c      	movs	r3, #12
   d51a0:	2209      	movs	r2, #9
   d51a2:	4669      	mov	r1, sp
   d51a4:	a804      	add	r0, sp, #16
   d51a6:	f002 f8fd 	bl	d73a4 <_ZNK6String9substringEjj>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(statusCode);
    #endif

    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d51aa:	491e      	ldr	r1, [pc, #120]	; (d5224 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   d51ac:	a808      	add	r0, sp, #32
   d51ae:	f002 f896 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
   d51b2:	a908      	add	r1, sp, #32
   d51b4:	4668      	mov	r0, sp
   d51b6:	f002 f8f2 	bl	d739e <_ZNK6String7indexOfERKS_>
   d51ba:	4604      	mov	r4, r0
   d51bc:	a808      	add	r0, sp, #32
   d51be:	f002 f847 	bl	d7250 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d51c2:	1c63      	adds	r3, r4, #1
   d51c4:	d014      	beq.n	d51f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fc>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
   d51c6:	1d3d      	adds	r5, r7, #4
   d51c8:	4917      	ldr	r1, [pc, #92]	; (d5228 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   d51ca:	4628      	mov	r0, r5
   d51cc:	f002 f89a 	bl	d7304 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d51d0:	1d22      	adds	r2, r4, #4
   d51d2:	4669      	mov	r1, sp
   d51d4:	a808      	add	r0, sp, #32
   d51d6:	f002 f90d 	bl	d73f4 <_ZNK6String9substringEj>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d51da:	a908      	add	r1, sp, #32
   d51dc:	4628      	mov	r0, r5
   d51de:	f002 f8b9 	bl	d7354 <_ZN6String6concatERKS_>
   d51e2:	a808      	add	r0, sp, #32
   d51e4:	f002 f834 	bl	d7250 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d51e8:	9804      	ldr	r0, [sp, #16]
   d51ea:	f003 fec9 	bl	d8f80 <atoi>
   d51ee:	6038      	str	r0, [r7, #0]
    if (bodyPos == -1) {
        #ifdef LOGGING
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
        #endif

        return;
   d51f0:	a804      	add	r0, sp, #16
   d51f2:	f002 f82d 	bl	d7250 <_ZN6StringD1Ev>
   d51f6:	4668      	mov	r0, sp
   d51f8:	f002 f82a 	bl	d7250 <_ZN6StringD1Ev>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d51fc:	b00f      	add	sp, #60	; 0x3c
   d51fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5202:	bf00      	nop
   d5204:	000d9638 	.word	0x000d9638
   d5208:	000d9549 	.word	0x000d9549
   d520c:	000d9497 	.word	0x000d9497
   d5210:	000d94a9 	.word	0x000d94a9
   d5214:	000d94a3 	.word	0x000d94a3
   d5218:	000d94b4 	.word	0x000d94b4
   d521c:	000d94c8 	.word	0x000d94c8
   d5220:	000d94b9 	.word	0x000d94b9
   d5224:	000d94cd 	.word	0x000d94cd
   d5228:	000d94d1 	.word	0x000d94d1

000d522c <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d522c:	f001 bc4c 	b.w	d6ac8 <HAL_Pin_Map>

000d5230 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5230:	f001 bc4a 	b.w	d6ac8 <HAL_Pin_Map>

000d5234 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5234:	b510      	push	{r4, lr}
   d5236:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5238:	3024      	adds	r0, #36	; 0x24
   d523a:	f000 fe7b 	bl	d5f34 <_ZN8FatCache4syncEv>
   d523e:	b128      	cbz	r0, d524c <_ZN9FatVolume9cacheSyncEv+0x18>
   d5240:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5248:	f000 be74 	b.w	d5f34 <_ZN8FatCache4syncEv>
  }
   d524c:	bd10      	pop	{r4, pc}

000d524e <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d524e:	1e41      	subs	r1, r0, #1
   d5250:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d5254:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5256:	0843      	lsrs	r3, r0, #1
   d5258:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d525c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d5260:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5264:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d5266:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5268:	d1f5      	bne.n	d5256 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d526a:	4770      	bx	lr

000d526c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d526c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d5270:	7803      	ldrb	r3, [r0, #0]
   d5272:	2b20      	cmp	r3, #32
   d5274:	f100 0401 	add.w	r4, r0, #1
   d5278:	d101      	bne.n	d527e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d527a:	4620      	mov	r0, r4
   d527c:	e7f8      	b.n	d5270 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d527e:	4f70      	ldr	r7, [pc, #448]	; (d5440 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d5280:	6088      	str	r0, [r1, #8]
   d5282:	4605      	mov	r5, r0
   d5284:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d5286:	462e      	mov	r6, r5
   d5288:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d528c:	b30b      	cbz	r3, d52d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d528e:	2b2f      	cmp	r3, #47	; 0x2f
   d5290:	d101      	bne.n	d5296 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d5292:	1903      	adds	r3, r0, r4
   d5294:	e017      	b.n	d52c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5296:	2b5c      	cmp	r3, #92	; 0x5c
   d5298:	d102      	bne.n	d52a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d529a:	2000      	movs	r0, #0
   d529c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d52a0:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d52a4:	b2e4      	uxtb	r4, r4
   d52a6:	2c1d      	cmp	r4, #29
   d52a8:	d803      	bhi.n	d52b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d52aa:	fa27 f404 	lsr.w	r4, r7, r4
   d52ae:	07e4      	lsls	r4, r4, #31
   d52b0:	d4f3      	bmi.n	d529a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d52b2:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d52b6:	2c3c      	cmp	r4, #60	; 0x3c
   d52b8:	d0ef      	beq.n	d529a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d52ba:	3b20      	subs	r3, #32
   d52bc:	2b5e      	cmp	r3, #94	; 0x5e
   d52be:	d9e1      	bls.n	d5284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d52c0:	e7eb      	b.n	d529a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d52c2:	2d2f      	cmp	r5, #47	; 0x2f
   d52c4:	d105      	bne.n	d52d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d52c6:	461e      	mov	r6, r3
   d52c8:	f813 5b01 	ldrb.w	r5, [r3], #1
   d52cc:	2d20      	cmp	r5, #32
   d52ce:	d1f8      	bne.n	d52c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d52d0:	e7f9      	b.n	d52c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d52d2:	6016      	str	r6, [r2, #0]
   d52d4:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d52d6:	4298      	cmp	r0, r3
   d52d8:	ebc0 0803 	rsb	r8, r0, r3
   d52dc:	d009      	beq.n	d52f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d52de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d52e2:	2a2e      	cmp	r2, #46	; 0x2e
   d52e4:	d0f7      	beq.n	d52d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d52e6:	2a20      	cmp	r2, #32
   d52e8:	d0f5      	beq.n	d52d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d52ea:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d52ee:	dcd4      	bgt.n	d529a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d52f0:	e001      	b.n	d52f6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d52f2:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d52f6:	f8c1 8004 	str.w	r8, [r1, #4]
   d52fa:	f101 030c 	add.w	r3, r1, #12
   d52fe:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d5302:	2420      	movs	r4, #32
   d5304:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d5308:	4293      	cmp	r3, r2
   d530a:	d1fb      	bne.n	d5304 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d530c:	4603      	mov	r3, r0
   d530e:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d5310:	f813 4b01 	ldrb.w	r4, [r3], #1
   d5314:	2c2e      	cmp	r4, #46	; 0x2e
   d5316:	d0fa      	beq.n	d530e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d5318:	2c20      	cmp	r4, #32
   d531a:	d0f8      	beq.n	d530e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d531c:	fab2 f482 	clz	r4, r2
   d5320:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d5322:	f108 36ff 	add.w	r6, r8, #4294967295
   d5326:	1c73      	adds	r3, r6, #1
   d5328:	d107      	bne.n	d533a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d532a:	2700      	movs	r7, #0
   d532c:	f04f 0e07 	mov.w	lr, #7
   d5330:	463d      	mov	r5, r7
   d5332:	46ba      	mov	sl, r7
   d5334:	f04f 0908 	mov.w	r9, #8
   d5338:	e009      	b.n	d534e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d533a:	5d83      	ldrb	r3, [r0, r6]
   d533c:	2b2e      	cmp	r3, #46	; 0x2e
   d533e:	d0f4      	beq.n	d532a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d5340:	3e01      	subs	r6, #1
   d5342:	e7f0      	b.n	d5326 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d5344:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d5346:	2b20      	cmp	r3, #32
   d5348:	d104      	bne.n	d5354 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d534a:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d534c:	3201      	adds	r2, #1
   d534e:	4542      	cmp	r2, r8
   d5350:	dbf8      	blt.n	d5344 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d5352:	e04b      	b.n	d53ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d5354:	2b2e      	cmp	r3, #46	; 0x2e
   d5356:	d102      	bne.n	d535e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d5358:	42b2      	cmp	r2, r6
   d535a:	d1f6      	bne.n	d534a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d535c:	e003      	b.n	d5366 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d535e:	2b22      	cmp	r3, #34	; 0x22
   d5360:	d017      	beq.n	d5392 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d5362:	2b7c      	cmp	r3, #124	; 0x7c
   d5364:	d015      	beq.n	d5392 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d5366:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d536a:	f1bc 0f05 	cmp.w	ip, #5
   d536e:	d801      	bhi.n	d5374 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d5370:	2b2d      	cmp	r3, #45	; 0x2d
   d5372:	d10e      	bne.n	d5392 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d5374:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d5378:	f1bc 0f05 	cmp.w	ip, #5
   d537c:	d909      	bls.n	d5392 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d537e:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d5382:	f1bc 0f02 	cmp.w	ip, #2
   d5386:	d904      	bls.n	d5392 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d5388:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d538c:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5390:	d902      	bls.n	d5398 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d5392:	42b2      	cmp	r2, r6
   d5394:	d10e      	bne.n	d53b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d5396:	e049      	b.n	d542c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5398:	42b2      	cmp	r2, r6
   d539a:	d047      	beq.n	d542c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d539c:	4575      	cmp	r5, lr
   d539e:	d821      	bhi.n	d53e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d53a0:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d53a4:	f1bc 0f19 	cmp.w	ip, #25
   d53a8:	d808      	bhi.n	d53bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d53aa:	3b20      	subs	r3, #32
   d53ac:	b2db      	uxtb	r3, r3
        lc |= bit;
   d53ae:	ea49 0707 	orr.w	r7, r9, r7
   d53b2:	e00a      	b.n	d53ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d53b4:	4575      	cmp	r5, lr
   d53b6:	d815      	bhi.n	d53e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d53b8:	2400      	movs	r4, #0
      c = '_';
   d53ba:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d53bc:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d53c0:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d53c4:	bf98      	it	ls
   d53c6:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d53ca:	f105 0c01 	add.w	ip, r5, #1
   d53ce:	fa5f fc8c 	uxtb.w	ip, ip
   d53d2:	440d      	add	r5, r1
      if (i < 7) {
   d53d4:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d53d8:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d53da:	d801      	bhi.n	d53e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d53dc:	f881 c00c 	strb.w	ip, [r1, #12]
   d53e0:	4665      	mov	r5, ip
   d53e2:	e7b3      	b.n	d534c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d53e4:	f1be 0f0a 	cmp.w	lr, #10
   d53e8:	d117      	bne.n	d541a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d53ea:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d53ec:	7b4b      	ldrb	r3, [r1, #13]
   d53ee:	2b20      	cmp	r3, #32
   d53f0:	f43f af53 	beq.w	d529a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d53f4:	b13c      	cbz	r4, d5406 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d53f6:	ea1a 0f07 	tst.w	sl, r7
   d53fa:	bf18      	it	ne
   d53fc:	2702      	movne	r7, #2
   d53fe:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d5400:	2001      	movs	r0, #1
   d5402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d5406:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d5408:	2001      	movs	r0, #1
   d540a:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d540c:	4419      	add	r1, r3
   d540e:	237e      	movs	r3, #126	; 0x7e
   d5410:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d5412:	2331      	movs	r3, #49	; 0x31
   d5414:	738b      	strb	r3, [r1, #14]
   d5416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d541a:	42b2      	cmp	r2, r6
   d541c:	dce5      	bgt.n	d53ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d541e:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5420:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5424:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5426:	f04f 0910 	mov.w	r9, #16
   d542a:	e78e      	b.n	d534a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d542c:	f1be 0f0a 	cmp.w	lr, #10
   d5430:	d0db      	beq.n	d53ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d5432:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d5434:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5438:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d543a:	f04f 0910 	mov.w	r9, #16
   d543e:	e785      	b.n	d534c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d5440:	31000101 	.word	0x31000101

000d5444 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5448:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d544c:	4606      	mov	r6, r0
   d544e:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5450:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5452:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d5454:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d5458:	6869      	ldr	r1, [r5, #4]
   d545a:	68aa      	ldr	r2, [r5, #8]
   d545c:	1863      	adds	r3, r4, r1
   d545e:	b29b      	uxth	r3, r3
   d5460:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d5462:	4291      	cmp	r1, r2
   d5464:	d006      	beq.n	d5474 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d5466:	f812 0b01 	ldrb.w	r0, [r2], #1
   d546a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d546e:	4043      	eors	r3, r0
   d5470:	b29b      	uxth	r3, r3
   d5472:	e7f6      	b.n	d5462 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d5474:	f1b9 0f03 	cmp.w	r9, #3
   d5478:	bf28      	it	cs
   d547a:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d547e:	f109 0204 	add.w	r2, r9, #4
   d5482:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d5484:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5488:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d548a:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d548c:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d548e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5490:	bf94      	ite	ls
   d5492:	3130      	addls	r1, #48	; 0x30
   d5494:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5496:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5498:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d549a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d549e:	d3f1      	bcc.n	d5484 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d54a0:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d54a4:	2100      	movs	r1, #0
   d54a6:	735f      	strb	r7, [r3, #13]
   d54a8:	4630      	mov	r0, r6
   d54aa:	f000 fb1e 	bl	d5aea <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d54ae:	2101      	movs	r1, #1
   d54b0:	4630      	mov	r0, r6
   d54b2:	f000 fafd 	bl	d5ab0 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d54b6:	4601      	mov	r1, r0
   d54b8:	b928      	cbnz	r0, d54c6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d54ba:	7870      	ldrb	r0, [r6, #1]
   d54bc:	fab0 f080 	clz	r0, r0
   d54c0:	0940      	lsrs	r0, r0, #5
   d54c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d54c6:	7803      	ldrb	r3, [r0, #0]
   d54c8:	b14b      	cbz	r3, d54de <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d54ca:	7ac3      	ldrb	r3, [r0, #11]
   d54cc:	071b      	lsls	r3, r3, #28
   d54ce:	d4ee      	bmi.n	d54ae <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d54d0:	220b      	movs	r2, #11
   d54d2:	4640      	mov	r0, r8
   d54d4:	f003 fd66 	bl	d8fa4 <memcmp>
   d54d8:	2800      	cmp	r0, #0
   d54da:	d1e8      	bne.n	d54ae <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d54dc:	e002      	b.n	d54e4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d54de:	2001      	movs	r0, #1
   d54e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d54e4:	3401      	adds	r4, #1
   d54e6:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d54e8:	2c64      	cmp	r4, #100	; 0x64
   d54ea:	d1b5      	bne.n	d5458 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d54ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d54f0 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d54f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d54f4:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d54f6:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d54f8:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d54fa:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d54fe:	9005      	str	r0, [sp, #20]
   d5500:	460e      	mov	r6, r1
   d5502:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d5504:	d101      	bne.n	d550a <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d5506:	2000      	movs	r0, #0
   d5508:	e1a0      	b.n	d584c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d550a:	9b05      	ldr	r3, [sp, #20]
   d550c:	781b      	ldrb	r3, [r3, #0]
   d550e:	2b00      	cmp	r3, #0
   d5510:	d1f9      	bne.n	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d5512:	6853      	ldr	r3, [r2, #4]
   d5514:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5516:	7813      	ldrb	r3, [r2, #0]
   d5518:	079b      	lsls	r3, r3, #30
   d551a:	f000 818d 	beq.w	d5838 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d551e:	9b02      	ldr	r3, [sp, #8]
   d5520:	270d      	movs	r7, #13
   d5522:	330c      	adds	r3, #12
   d5524:	fbb3 f7f7 	udiv	r7, r3, r7
   d5528:	3701      	adds	r7, #1
   d552a:	b2ff      	uxtb	r7, r7
   d552c:	2100      	movs	r1, #0
   d552e:	4630      	mov	r0, r6
   d5530:	f000 fadb 	bl	d5aea <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d5534:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5538:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d553c:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d5540:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d5542:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d5544:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d5546:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d554a:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d554c:	6972      	ldr	r2, [r6, #20]
   d554e:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5550:	2101      	movs	r1, #1
   d5552:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5554:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d5558:	f000 faaa 	bl	d5ab0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d555c:	9b07      	ldr	r3, [sp, #28]
   d555e:	b920      	cbnz	r0, d556a <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d5560:	7873      	ldrb	r3, [r6, #1]
   d5562:	2b00      	cmp	r3, #0
   d5564:	f000 8090 	beq.w	d5688 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d5568:	e7cd      	b.n	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d556a:	7802      	ldrb	r2, [r0, #0]
   d556c:	2ae5      	cmp	r2, #229	; 0xe5
   d556e:	d000      	beq.n	d5572 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d5570:	b942      	cbnz	r2, d5584 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5572:	2c00      	cmp	r4, #0
   d5574:	bf08      	it	eq
   d5576:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d5578:	42bc      	cmp	r4, r7
        freeFound++;
   d557a:	bf3c      	itt	cc
   d557c:	3401      	addcc	r4, #1
   d557e:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5580:	b922      	cbnz	r2, d558c <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d5582:	e081      	b.n	d5688 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d5584:	42bc      	cmp	r4, r7
   d5586:	bf38      	it	cc
   d5588:	2400      	movcc	r4, #0
   d558a:	e003      	b.n	d5594 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d558c:	2ae5      	cmp	r2, #229	; 0xe5
   d558e:	d101      	bne.n	d5594 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d5590:	2500      	movs	r5, #0
   d5592:	e7db      	b.n	d554c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5594:	2a2e      	cmp	r2, #46	; 0x2e
   d5596:	d0fb      	beq.n	d5590 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5598:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d559a:	290f      	cmp	r1, #15
   d559c:	d152      	bne.n	d5644 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d559e:	b93d      	cbnz	r5, d55b0 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d55a0:	0651      	lsls	r1, r2, #25
   d55a2:	d5d3      	bpl.n	d554c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d55a4:	7b43      	ldrb	r3, [r0, #13]
   d55a6:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d55a8:	f002 051f 	and.w	r5, r2, #31
   d55ac:	462b      	mov	r3, r5
   d55ae:	e007      	b.n	d55c0 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d55b0:	3b01      	subs	r3, #1
   d55b2:	b2db      	uxtb	r3, r3
   d55b4:	429a      	cmp	r2, r3
   d55b6:	d1eb      	bne.n	d5590 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d55b8:	7b42      	ldrb	r2, [r0, #13]
   d55ba:	9903      	ldr	r1, [sp, #12]
   d55bc:	4291      	cmp	r1, r2
   d55be:	d1e7      	bne.n	d5590 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d55c0:	1e5a      	subs	r2, r3, #1
   d55c2:	f04f 0c0d 	mov.w	ip, #13
   d55c6:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d55ca:	9a02      	ldr	r2, [sp, #8]
   d55cc:	4562      	cmp	r2, ip
   d55ce:	d9df      	bls.n	d5590 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d55d0:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d55d4:	f1be 0f04 	cmp.w	lr, #4
   d55d8:	fa5f f28e 	uxtb.w	r2, lr
   d55dc:	d804      	bhi.n	d55e8 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d55de:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d55e2:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d55e6:	e00c      	b.n	d5602 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d55e8:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d55ea:	bf95      	itete	ls
   d55ec:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d55f0:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d55f4:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d55f8:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d55fc:	bf94      	ite	ls
   d55fe:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d5600:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d5602:	9902      	ldr	r1, [sp, #8]
   d5604:	4561      	cmp	r1, ip
   d5606:	d103      	bne.n	d5610 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d5608:	2a00      	cmp	r2, #0
   d560a:	bf18      	it	ne
   d560c:	2500      	movne	r5, #0
   d560e:	e79d      	b.n	d554c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5610:	2aff      	cmp	r2, #255	; 0xff
   d5612:	d8bd      	bhi.n	d5590 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5614:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5616:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d561a:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d561c:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d5620:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5624:	bf98      	it	ls
   d5626:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5628:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d562c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d5630:	bf98      	it	ls
   d5632:	b2d2      	uxtbls	r2, r2
   d5634:	f1bc 0f19 	cmp.w	ip, #25
   d5638:	bf9c      	itt	ls
   d563a:	3120      	addls	r1, #32
   d563c:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d563e:	4291      	cmp	r1, r2
   d5640:	d1a6      	bne.n	d5590 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5642:	e0fb      	b.n	d583c <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5644:	0709      	lsls	r1, r1, #28
   d5646:	d4a3      	bmi.n	d5590 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d5648:	b14d      	cbz	r5, d565e <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d564a:	2b01      	cmp	r3, #1
   d564c:	f47f af5b 	bne.w	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5650:	f7ff fdfd 	bl	d524e <_ZN7FatFile11lfnChecksumEPh>
   d5654:	9b03      	ldr	r3, [sp, #12]
   d5656:	4283      	cmp	r3, r0
   d5658:	f47f af55 	bne.w	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d565c:	e00f      	b.n	d567e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d565e:	220b      	movs	r2, #11
   d5660:	9906      	ldr	r1, [sp, #24]
   d5662:	9307      	str	r3, [sp, #28]
   d5664:	f003 fc9e 	bl	d8fa4 <memcmp>
   d5668:	9b07      	ldr	r3, [sp, #28]
   d566a:	2800      	cmp	r0, #0
   d566c:	f47f af6e 	bne.w	d554c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d5670:	f899 2000 	ldrb.w	r2, [r9]
   d5674:	07d2      	lsls	r2, r2, #31
   d5676:	d502      	bpl.n	d567e <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d5678:	2201      	movs	r2, #1
   d567a:	9204      	str	r2, [sp, #16]
   d567c:	e766      	b.n	d554c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d567e:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d5682:	f000 80d1 	beq.w	d5828 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d5686:	e73e      	b.n	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d5688:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d568c:	f43f af3b 	beq.w	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5690:	f00b 0303 	and.w	r3, fp, #3
   d5694:	3b01      	subs	r3, #1
   d5696:	2b01      	cmp	r3, #1
   d5698:	f63f af35 	bhi.w	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d569c:	2c00      	cmp	r4, #0
   d569e:	bf08      	it	eq
   d56a0:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d56a2:	42bc      	cmp	r4, r7
   d56a4:	d302      	bcc.n	d56ac <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d56a6:	9b04      	ldr	r3, [sp, #16]
   d56a8:	b9cb      	cbnz	r3, d56de <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d56aa:	e01f      	b.n	d56ec <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d56ac:	2100      	movs	r1, #0
   d56ae:	4630      	mov	r0, r6
   d56b0:	f000 f9fe 	bl	d5ab0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d56b4:	b910      	cbnz	r0, d56bc <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d56b6:	7873      	ldrb	r3, [r6, #1]
   d56b8:	b15b      	cbz	r3, d56d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d56ba:	e724      	b.n	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d56bc:	3401      	adds	r4, #1
   d56be:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d56c0:	e7ef      	b.n	d56a2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d56c2:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d56c4:	791b      	ldrb	r3, [r3, #4]
   d56c6:	2b01      	cmp	r3, #1
   d56c8:	d8ed      	bhi.n	d56a6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d56ca:	3410      	adds	r4, #16
   d56cc:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d56ce:	42a7      	cmp	r7, r4
   d56d0:	d9e9      	bls.n	d56a6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d56d2:	4630      	mov	r0, r6
   d56d4:	f000 f8d2 	bl	d587c <_ZN7FatFile13addDirClusterEv>
   d56d8:	2800      	cmp	r0, #0
   d56da:	d1f2      	bne.n	d56c2 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d56dc:	e713      	b.n	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d56de:	4649      	mov	r1, r9
   d56e0:	4630      	mov	r0, r6
   d56e2:	f7ff feaf 	bl	d5444 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d56e6:	2800      	cmp	r0, #0
   d56e8:	f43f af0d 	beq.w	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d56ec:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d56f0:	4630      	mov	r0, r6
   d56f2:	f000 f9fa 	bl	d5aea <_ZN7FatFile7seekSetEm>
   d56f6:	2800      	cmp	r0, #0
   d56f8:	f43f af05 	beq.w	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d56fc:	1e7d      	subs	r5, r7, #1
   d56fe:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5700:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d5702:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d5706:	f04f 080f 	mov.w	r8, #15
   d570a:	e041      	b.n	d5790 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d570c:	2100      	movs	r1, #0
   d570e:	4630      	mov	r0, r6
   d5710:	f000 f9ce 	bl	d5ab0 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d5714:	4607      	mov	r7, r0
   d5716:	2800      	cmp	r0, #0
   d5718:	f43f aef5 	beq.w	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d571c:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d571e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5722:	42ac      	cmp	r4, r5
   d5724:	f043 0301 	orr.w	r3, r3, #1
   d5728:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d572c:	bf0c      	ite	eq
   d572e:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d5732:	4622      	movne	r2, r4
   d5734:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d5736:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d573a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d573e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d5742:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5744:	f7ff fd83 	bl	d524e <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5748:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d574a:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d574c:	f887 a01a 	strb.w	sl, [r7, #26]
   d5750:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5754:	f002 021f 	and.w	r2, r2, #31
   d5758:	230d      	movs	r3, #13
   d575a:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d575c:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5760:	435a      	muls	r2, r3
   d5762:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5764:	9902      	ldr	r1, [sp, #8]
   d5766:	4291      	cmp	r1, r2
   d5768:	d915      	bls.n	d5796 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d576a:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d576e:	2b04      	cmp	r3, #4
   d5770:	fa5f fc83 	uxtb.w	ip, r3
   d5774:	f103 0001 	add.w	r0, r3, #1
   d5778:	d813      	bhi.n	d57a2 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d577a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d577e:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d5782:	280d      	cmp	r0, #13
   d5784:	f102 0201 	add.w	r2, r2, #1
   d5788:	4603      	mov	r3, r0
   d578a:	d1eb      	bne.n	d5764 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d578c:	3c01      	subs	r4, #1
   d578e:	b2e4      	uxtb	r4, r4
   d5790:	2c00      	cmp	r4, #0
   d5792:	d1bb      	bne.n	d570c <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d5794:	e00e      	b.n	d57b4 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d5796:	bf14      	ite	ne
   d5798:	f04f 31ff 	movne.w	r1, #4294967295
   d579c:	2100      	moveq	r1, #0
   d579e:	b289      	uxth	r1, r1
   d57a0:	e7e5      	b.n	d576e <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d57a2:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d57a6:	bf94      	ite	ls
   d57a8:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d57ac:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d57b0:	8099      	strh	r1, [r3, #4]
   d57b2:	e7e6      	b.n	d5782 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d57b4:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d57b6:	4621      	mov	r1, r4
   d57b8:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d57ba:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d57be:	f000 f977 	bl	d5ab0 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d57c2:	4607      	mov	r7, r0
   d57c4:	2800      	cmp	r0, #0
   d57c6:	f43f ae9e 	beq.w	d5506 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d57ca:	2220      	movs	r2, #32
   d57cc:	4621      	mov	r1, r4
   d57ce:	f003 fc03 	bl	d8fd8 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d57d2:	464b      	mov	r3, r9
   d57d4:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d57d8:	603a      	str	r2, [r7, #0]
   d57da:	685a      	ldr	r2, [r3, #4]
   d57dc:	607a      	str	r2, [r7, #4]
   d57de:	891a      	ldrh	r2, [r3, #8]
   d57e0:	813a      	strh	r2, [r7, #8]
   d57e2:	7a9b      	ldrb	r3, [r3, #10]
   d57e4:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d57e6:	f899 3000 	ldrb.w	r3, [r9]
   d57ea:	f003 0318 	and.w	r3, r3, #24
   d57ee:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d57f0:	4b18      	ldr	r3, [pc, #96]	; (d5854 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d57f2:	681b      	ldr	r3, [r3, #0]
   d57f4:	b12b      	cbz	r3, d5802 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d57f6:	f107 010e 	add.w	r1, r7, #14
   d57fa:	f107 0010 	add.w	r0, r7, #16
   d57fe:	4798      	blx	r3
   d5800:	e006      	b.n	d5810 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d5802:	2321      	movs	r3, #33	; 0x21
   d5804:	743b      	strb	r3, [r7, #16]
   d5806:	2328      	movs	r3, #40	; 0x28
   d5808:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d580a:	2308      	movs	r3, #8
   d580c:	73bc      	strb	r4, [r7, #14]
   d580e:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d5810:	8a3b      	ldrh	r3, [r7, #16]
   d5812:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d5814:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d5816:	89fb      	ldrh	r3, [r7, #14]
   d5818:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d581a:	68b2      	ldr	r2, [r6, #8]
   d581c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d5820:	f043 0301 	orr.w	r3, r3, #1
   d5824:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5828:	9500      	str	r5, [sp, #0]
   d582a:	465b      	mov	r3, fp
   d582c:	4652      	mov	r2, sl
   d582e:	4631      	mov	r1, r6
   d5830:	9805      	ldr	r0, [sp, #20]
   d5832:	f000 f9a3 	bl	d5b7c <_ZN7FatFile15openCachedEntryEPS_tih>
   d5836:	e009      	b.n	d584c <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5838:	2701      	movs	r7, #1
   d583a:	e677      	b.n	d552c <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d583c:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5840:	f1be 0f0d 	cmp.w	lr, #13
   d5844:	f43f ae82 	beq.w	d554c <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5848:	46d4      	mov	ip, sl
   d584a:	e6c3      	b.n	d55d4 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d584c:	b009      	add	sp, #36	; 0x24
   d584e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5852:	bf00      	nop
   d5854:	2003e3c4 	.word	0x2003e3c4

000d5858 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5858:	f001 b936 	b.w	d6ac8 <HAL_Pin_Map>

000d585c <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d585c:	f001 b934 	b.w	d6ac8 <HAL_Pin_Map>

000d5860 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5860:	f001 b932 	b.w	d6ac8 <HAL_Pin_Map>

000d5864 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d5864:	f001 b930 	b.w	d6ac8 <HAL_Pin_Map>

000d5868 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5868:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d586a:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d586c:	f043 0304 	orr.w	r3, r3, #4
   d5870:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5872:	f100 0210 	add.w	r2, r0, #16
   d5876:	6880      	ldr	r0, [r0, #8]
   d5878:	f000 bc12 	b.w	d60a0 <_ZN9FatVolume15allocateClusterEmPm>

000d587c <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d587c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5880:	7803      	ldrb	r3, [r0, #0]
   d5882:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5886:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5888:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d588c:	b10b      	cbz	r3, d5892 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d588e:	2600      	movs	r6, #0
   d5890:	e02e      	b.n	d58f0 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d5892:	6942      	ldr	r2, [r0, #20]
   d5894:	4b18      	ldr	r3, [pc, #96]	; (d58f8 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d5896:	429a      	cmp	r2, r3
   d5898:	d8f9      	bhi.n	d588e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d589a:	f7ff ffe5 	bl	d5868 <_ZN7FatFile10addClusterEv>
   d589e:	4606      	mov	r6, r0
   d58a0:	2800      	cmp	r0, #0
   d58a2:	d0f4      	beq.n	d588e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d58a4:	6921      	ldr	r1, [r4, #16]
   d58a6:	68a0      	ldr	r0, [r4, #8]
   d58a8:	f000 fb8f 	bl	d5fca <_ZNK9FatVolume17clusterFirstBlockEm>
   d58ac:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d58ae:	68a0      	ldr	r0, [r4, #8]
   d58b0:	2205      	movs	r2, #5
   d58b2:	4639      	mov	r1, r7
   d58b4:	3024      	adds	r0, #36	; 0x24
   d58b6:	f000 fb64 	bl	d5f82 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d58ba:	4680      	mov	r8, r0
   d58bc:	2800      	cmp	r0, #0
   d58be:	d0e6      	beq.n	d588e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d58c0:	4629      	mov	r1, r5
   d58c2:	f44f 7200 	mov.w	r2, #512	; 0x200
   d58c6:	f003 fb87 	bl	d8fd8 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d58ca:	2501      	movs	r5, #1
   d58cc:	68a3      	ldr	r3, [r4, #8]
   d58ce:	791a      	ldrb	r2, [r3, #4]
   d58d0:	42aa      	cmp	r2, r5
   d58d2:	d909      	bls.n	d58e8 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d58d4:	4642      	mov	r2, r8
   d58d6:	19e9      	adds	r1, r5, r7
   d58d8:	6818      	ldr	r0, [r3, #0]
   d58da:	f000 fecf 	bl	d667c <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d58de:	2800      	cmp	r0, #0
   d58e0:	d0d5      	beq.n	d588e <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d58e2:	3501      	adds	r5, #1
   d58e4:	b2ed      	uxtb	r5, r5
   d58e6:	e7f1      	b.n	d58cc <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d58e8:	6963      	ldr	r3, [r4, #20]
   d58ea:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d58ee:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d58f0:	4630      	mov	r0, r6
   d58f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58f6:	bf00      	nop
   d58f8:	001ffdff 	.word	0x001ffdff

000d58fc <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d58fc:	b510      	push	{r4, lr}
   d58fe:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5900:	6880      	ldr	r0, [r0, #8]
   d5902:	460a      	mov	r2, r1
   d5904:	3024      	adds	r0, #36	; 0x24
   d5906:	69a1      	ldr	r1, [r4, #24]
   d5908:	f000 fb3b 	bl	d5f82 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d590c:	b120      	cbz	r0, d5918 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d590e:	88a3      	ldrh	r3, [r4, #4]
   d5910:	f003 030f 	and.w	r3, r3, #15
   d5914:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5918:	bd10      	pop	{r4, pc}

000d591a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d591a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d591c:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d591e:	4605      	mov	r5, r0
   d5920:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d5922:	b984      	cbnz	r4, d5946 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5924:	2224      	movs	r2, #36	; 0x24
   d5926:	4621      	mov	r1, r4
   d5928:	f003 fb56 	bl	d8fd8 <memset>

  m_vol = vol;
   d592c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d592e:	79f3      	ldrb	r3, [r6, #7]
   d5930:	2b10      	cmp	r3, #16
   d5932:	d003      	beq.n	d593c <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5934:	2b20      	cmp	r3, #32
   d5936:	d106      	bne.n	d5946 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5938:	2340      	movs	r3, #64	; 0x40
   d593a:	e000      	b.n	d593e <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d593c:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d593e:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5940:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5942:	70a8      	strb	r0, [r5, #2]
   d5944:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5946:	2000      	movs	r0, #0
   d5948:	bd70      	pop	{r4, r5, r6, pc}

000d594a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d594a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d594e:	7803      	ldrb	r3, [r0, #0]
   d5950:	4604      	mov	r4, r0
   d5952:	4689      	mov	r9, r1
   d5954:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5956:	b14b      	cbz	r3, d596c <_ZN7FatFile4readEPvj+0x22>
   d5958:	7882      	ldrb	r2, [r0, #2]
   d595a:	07d1      	lsls	r1, r2, #31
   d595c:	d506      	bpl.n	d596c <_ZN7FatFile4readEPvj+0x22>
   d595e:	e00c      	b.n	d597a <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5960:	465a      	mov	r2, fp
   d5962:	6921      	ldr	r1, [r4, #16]
   d5964:	f000 fb37 	bl	d5fd6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5968:	2800      	cmp	r0, #0
   d596a:	da3d      	bge.n	d59e8 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d596c:	7863      	ldrb	r3, [r4, #1]
   d596e:	f043 0302 	orr.w	r3, r3, #2
   d5972:	7063      	strb	r3, [r4, #1]
  return -1;
   d5974:	f04f 30ff 	mov.w	r0, #4294967295
   d5978:	e097      	b.n	d5aaa <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d597a:	071a      	lsls	r2, r3, #28
   d597c:	d503      	bpl.n	d5986 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d597e:	69e3      	ldr	r3, [r4, #28]
   d5980:	6962      	ldr	r2, [r4, #20]
   d5982:	1a9b      	subs	r3, r3, r2
   d5984:	e007      	b.n	d5996 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5986:	069a      	lsls	r2, r3, #26
   d5988:	d508      	bpl.n	d599c <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d598a:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d598c:	891a      	ldrh	r2, [r3, #8]
   d598e:	6963      	ldr	r3, [r4, #20]
   d5990:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5994:	b29b      	uxth	r3, r3
   d5996:	429d      	cmp	r5, r3
   d5998:	bf28      	it	cs
   d599a:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d599c:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d599e:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d59a2:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d59a6:	2e00      	cmp	r6, #0
   d59a8:	d035      	beq.n	d5a16 <_ZN7FatFile4readEPvj+0xcc>
   d59aa:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d59ac:	6963      	ldr	r3, [r4, #20]
   d59ae:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d59b0:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d59b4:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d59b8:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d59bc:	d002      	beq.n	d59c4 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d59be:	6a03      	ldr	r3, [r0, #32]
   d59c0:	4419      	add	r1, r3
   d59c2:	e01d      	b.n	d5a00 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d59c4:	f890 8005 	ldrb.w	r8, [r0, #5]
   d59c8:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d59cc:	f1ba 0f00 	cmp.w	sl, #0
   d59d0:	d110      	bne.n	d59f4 <_ZN7FatFile4readEPvj+0xaa>
   d59d2:	f1b8 0f00 	cmp.w	r8, #0
   d59d6:	d10d      	bne.n	d59f4 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d59d8:	2b00      	cmp	r3, #0
   d59da:	d1c1      	bne.n	d5960 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d59dc:	0653      	lsls	r3, r2, #25
   d59de:	bf4c      	ite	mi
   d59e0:	6a03      	ldrmi	r3, [r0, #32]
   d59e2:	6a23      	ldrpl	r3, [r4, #32]
   d59e4:	6123      	str	r3, [r4, #16]
   d59e6:	e005      	b.n	d59f4 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d59e8:	d104      	bne.n	d59f4 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d59ea:	7823      	ldrb	r3, [r4, #0]
   d59ec:	f013 0f70 	tst.w	r3, #112	; 0x70
   d59f0:	d111      	bne.n	d5a16 <_ZN7FatFile4readEPvj+0xcc>
   d59f2:	e7bb      	b.n	d596c <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d59f4:	6921      	ldr	r1, [r4, #16]
   d59f6:	68a0      	ldr	r0, [r4, #8]
   d59f8:	f000 fae7 	bl	d5fca <_ZNK9FatVolume17clusterFirstBlockEm>
   d59fc:	eb08 0100 	add.w	r1, r8, r0
   d5a00:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5a02:	f1ba 0f00 	cmp.w	sl, #0
   d5a06:	d135      	bne.n	d5a74 <_ZN7FatFile4readEPvj+0x12a>
   d5a08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5a0c:	d332      	bcc.n	d5a74 <_ZN7FatFile4readEPvj+0x12a>
   d5a0e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5a10:	4299      	cmp	r1, r3
   d5a12:	d102      	bne.n	d5a1a <_ZN7FatFile4readEPvj+0xd0>
   d5a14:	e02e      	b.n	d5a74 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5a16:	1ba8      	subs	r0, r5, r6
   d5a18:	e047      	b.n	d5aaa <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5a1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5a1e:	d31b      	bcc.n	d5a58 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5a20:	7822      	ldrb	r2, [r4, #0]
   d5a22:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5a24:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5a28:	d406      	bmi.n	d5a38 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5a2a:	7902      	ldrb	r2, [r0, #4]
   d5a2c:	ebc8 0202 	rsb	r2, r8, r2
   d5a30:	b2d2      	uxtb	r2, r2
   d5a32:	4592      	cmp	sl, r2
   d5a34:	bf28      	it	cs
   d5a36:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a38:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5a3a:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a3e:	d207      	bcs.n	d5a50 <_ZN7FatFile4readEPvj+0x106>
   d5a40:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5a42:	4653      	mov	r3, sl
   d5a44:	464a      	mov	r2, r9
   d5a46:	6800      	ldr	r0, [r0, #0]
   d5a48:	f000 fdd6 	bl	d65f8 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5a4c:	b960      	cbnz	r0, d5a68 <_ZN7FatFile4readEPvj+0x11e>
   d5a4e:	e78d      	b.n	d596c <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5a50:	4453      	add	r3, sl
   d5a52:	4299      	cmp	r1, r3
   d5a54:	d321      	bcc.n	d5a9a <_ZN7FatFile4readEPvj+0x150>
   d5a56:	e7f3      	b.n	d5a40 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5a58:	464a      	mov	r2, r9
   d5a5a:	6800      	ldr	r0, [r0, #0]
   d5a5c:	f000 fd84 	bl	d6568 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5a60:	2800      	cmp	r0, #0
   d5a62:	d083      	beq.n	d596c <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5a64:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5a68:	6963      	ldr	r3, [r4, #20]
   d5a6a:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5a6c:	44b9      	add	r9, r7
    m_curPosition += n;
   d5a6e:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5a70:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5a72:	e798      	b.n	d59a6 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5a74:	2200      	movs	r2, #0
   d5a76:	3024      	adds	r0, #36	; 0x24
   d5a78:	f000 fa83 	bl	d5f82 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5a7c:	2800      	cmp	r0, #0
   d5a7e:	f43f af75 	beq.w	d596c <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5a82:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5a86:	42b7      	cmp	r7, r6
   d5a88:	bf28      	it	cs
   d5a8a:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5a8c:	eb00 010a 	add.w	r1, r0, sl
   d5a90:	463a      	mov	r2, r7
   d5a92:	4648      	mov	r0, r9
   d5a94:	f003 fa95 	bl	d8fc2 <memcpy>
   d5a98:	e7e6      	b.n	d5a68 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5a9a:	3024      	adds	r0, #36	; 0x24
   d5a9c:	9101      	str	r1, [sp, #4]
   d5a9e:	f000 fa49 	bl	d5f34 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5aa2:	9901      	ldr	r1, [sp, #4]
   d5aa4:	2800      	cmp	r0, #0
   d5aa6:	d1cb      	bne.n	d5a40 <_ZN7FatFile4readEPvj+0xf6>
   d5aa8:	e760      	b.n	d596c <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5aaa:	b003      	add	sp, #12
   d5aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5ab0 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5ab2:	6943      	ldr	r3, [r0, #20]
   d5ab4:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5ab8:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5aba:	b105      	cbz	r5, d5abe <_ZN7FatFile12readDirCacheEb+0xe>
   d5abc:	b969      	cbnz	r1, d5ada <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5abe:	2201      	movs	r2, #1
   d5ac0:	f10d 0107 	add.w	r1, sp, #7
   d5ac4:	4620      	mov	r0, r4
   d5ac6:	f7ff ff40 	bl	d594a <_ZN7FatFile4readEPvj>
   d5aca:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5acc:	2801      	cmp	r0, #1
   d5ace:	d001      	beq.n	d5ad4 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5ad0:	2000      	movs	r0, #0
   d5ad2:	e008      	b.n	d5ae6 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5ad4:	6963      	ldr	r3, [r4, #20]
   d5ad6:	331f      	adds	r3, #31
   d5ad8:	e000      	b.n	d5adc <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5ada:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5adc:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5ade:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5ae0:	3030      	adds	r0, #48	; 0x30
   d5ae2:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5ae6:	b003      	add	sp, #12
   d5ae8:	bd30      	pop	{r4, r5, pc}

000d5aea <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5aee:	460e      	mov	r6, r1
   d5af0:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5af2:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5af4:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5af6:	2900      	cmp	r1, #0
   d5af8:	d039      	beq.n	d5b6e <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5afa:	6945      	ldr	r5, [r0, #20]
   d5afc:	42b5      	cmp	r5, r6
   d5afe:	d03a      	beq.n	d5b76 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5b00:	b90e      	cbnz	r6, d5b06 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5b02:	6106      	str	r6, [r0, #16]
    goto done;
   d5b04:	e031      	b.n	d5b6a <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5b06:	070b      	lsls	r3, r1, #28
   d5b08:	d503      	bpl.n	d5b12 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5b0a:	69c3      	ldr	r3, [r0, #28]
   d5b0c:	429e      	cmp	r6, r3
   d5b0e:	d82e      	bhi.n	d5b6e <_ZN7FatFile7seekSetEm+0x84>
   d5b10:	e007      	b.n	d5b22 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5b12:	0688      	lsls	r0, r1, #26
   d5b14:	d505      	bpl.n	d5b22 <_ZN7FatFile7seekSetEm+0x38>
   d5b16:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5b18:	891b      	ldrh	r3, [r3, #8]
   d5b1a:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5b1e:	d826      	bhi.n	d5b6e <_ZN7FatFile7seekSetEm+0x84>
   d5b20:	e023      	b.n	d5b6a <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b22:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5b26:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5b2a:	1e6a      	subs	r2, r5, #1
   d5b2c:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b30:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b32:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5b34:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5b36:	429a      	cmp	r2, r3
   d5b38:	d800      	bhi.n	d5b3c <_ZN7FatFile7seekSetEm+0x52>
   d5b3a:	b94d      	cbnz	r5, d5b50 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5b3c:	064a      	lsls	r2, r1, #25
   d5b3e:	bf4c      	ite	mi
   d5b40:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5b44:	6a22      	ldrpl	r2, [r4, #32]
   d5b46:	6122      	str	r2, [r4, #16]
   d5b48:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5b4a:	f104 0810 	add.w	r8, r4, #16
   d5b4e:	e00a      	b.n	d5b66 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5b50:	1a9b      	subs	r3, r3, r2
   d5b52:	e7f9      	b.n	d5b48 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5b54:	4642      	mov	r2, r8
   d5b56:	6921      	ldr	r1, [r4, #16]
   d5b58:	68a0      	ldr	r0, [r4, #8]
   d5b5a:	f000 fa3c 	bl	d5fd6 <_ZN9FatVolume6fatGetEmPm>
   d5b5e:	2800      	cmp	r0, #0
   d5b60:	f105 35ff 	add.w	r5, r5, #4294967295
   d5b64:	dd03      	ble.n	d5b6e <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5b66:	2d00      	cmp	r5, #0
   d5b68:	d1f4      	bne.n	d5b54 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5b6a:	6166      	str	r6, [r4, #20]
   d5b6c:	e003      	b.n	d5b76 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5b6e:	6127      	str	r7, [r4, #16]
  return false;
   d5b70:	2000      	movs	r0, #0
   d5b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5b76:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5b7c <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b7e:	460f      	mov	r7, r1
   d5b80:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5b82:	2100      	movs	r1, #0
   d5b84:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5b86:	4604      	mov	r4, r0
   d5b88:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5b8a:	f003 fa25 	bl	d8fd8 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d5b8e:	68b8      	ldr	r0, [r7, #8]
   d5b90:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5b92:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5b96:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5b98:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d5b9c:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d5b9e:	6a3b      	ldr	r3, [r7, #32]
   d5ba0:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5ba2:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5ba4:	7acb      	ldrb	r3, [r1, #11]
   d5ba6:	071d      	lsls	r5, r3, #28
   d5ba8:	d44c      	bmi.n	d5c44 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5baa:	1883      	adds	r3, r0, r2
   d5bac:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5bb0:	f003 0317 	and.w	r3, r3, #23
   d5bb4:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5bb6:	7ac9      	ldrb	r1, [r1, #11]
   d5bb8:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5bbc:	bf04      	itt	eq
   d5bbe:	f043 0308 	orreq.w	r3, r3, #8
   d5bc2:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5bc4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5bc8:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5bca:	f006 0303 	and.w	r3, r6, #3
   d5bce:	2b01      	cmp	r3, #1
   d5bd0:	d009      	beq.n	d5be6 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5bd2:	2b02      	cmp	r3, #2
   d5bd4:	d005      	beq.n	d5be2 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5bd6:	2b00      	cmp	r3, #0
   d5bd8:	d134      	bne.n	d5c44 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5bda:	0571      	lsls	r1, r6, #21
   d5bdc:	d432      	bmi.n	d5c44 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5bde:	2301      	movs	r3, #1
   d5be0:	e002      	b.n	d5be8 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5be2:	2303      	movs	r3, #3
   d5be4:	e000      	b.n	d5be8 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5be6:	2302      	movs	r3, #2
   d5be8:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5bea:	78a1      	ldrb	r1, [r4, #2]
   d5bec:	078b      	lsls	r3, r1, #30
   d5bee:	d503      	bpl.n	d5bf8 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5bf0:	7823      	ldrb	r3, [r4, #0]
   d5bf2:	f013 0f11 	tst.w	r3, #17
   d5bf6:	d125      	bne.n	d5c44 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5bf8:	b24b      	sxtb	r3, r1
   d5bfa:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5bfe:	f006 0108 	and.w	r1, r6, #8
   d5c02:	bf14      	ite	ne
   d5c04:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5c08:	2700      	moveq	r7, #0
   d5c0a:	4319      	orrs	r1, r3
   d5c0c:	4339      	orrs	r1, r7
   d5c0e:	70a1      	strb	r1, [r4, #2]
   d5c10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5c12:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5c14:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5c16:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5c18:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5c1c:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5c20:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5c24:	d504      	bpl.n	d5c30 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5c26:	b181      	cbz	r1, d5c4a <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5c28:	f000 fa75 	bl	d6116 <_ZN9FatVolume9freeChainEm>
   d5c2c:	b968      	cbnz	r0, d5c4a <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5c2e:	e009      	b.n	d5c44 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5c30:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5c32:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5c34:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5c36:	0473      	lsls	r3, r6, #17
   d5c38:	d50c      	bpl.n	d5c54 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5c3a:	69e1      	ldr	r1, [r4, #28]
   d5c3c:	4620      	mov	r0, r4
   d5c3e:	f7ff ff54 	bl	d5aea <_ZN7FatFile7seekSetEm>
   d5c42:	b938      	cbnz	r0, d5c54 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5c44:	2000      	movs	r0, #0
   d5c46:	7020      	strb	r0, [r4, #0]
  return false;
   d5c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5c4a:	78a3      	ldrb	r3, [r4, #2]
   d5c4c:	f043 0304 	orr.w	r3, r3, #4
   d5c50:	70a3      	strb	r3, [r4, #2]
   d5c52:	e7f0      	b.n	d5c36 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5c54:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c58 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5c58:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5c5a:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5c5c:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5c5e:	b90b      	cbnz	r3, d5c64 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5c60:	2001      	movs	r0, #1
   d5c62:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5c64:	7883      	ldrb	r3, [r0, #2]
   d5c66:	075a      	lsls	r2, r3, #29
   d5c68:	d523      	bpl.n	d5cb2 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5c6a:	2101      	movs	r1, #1
   d5c6c:	f7ff fe46 	bl	d58fc <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5c70:	4605      	mov	r5, r0
   d5c72:	b928      	cbnz	r0, d5c80 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5c74:	7863      	ldrb	r3, [r4, #1]
   d5c76:	f043 0301 	orr.w	r3, r3, #1
   d5c7a:	7063      	strb	r3, [r4, #1]
  return false;
   d5c7c:	2000      	movs	r0, #0
   d5c7e:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5c80:	7803      	ldrb	r3, [r0, #0]
   d5c82:	2be5      	cmp	r3, #229	; 0xe5
   d5c84:	d0f6      	beq.n	d5c74 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5c86:	7823      	ldrb	r3, [r4, #0]
   d5c88:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5c8a:	bf44      	itt	mi
   d5c8c:	69e3      	ldrmi	r3, [r4, #28]
   d5c8e:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5c90:	8c23      	ldrh	r3, [r4, #32]
   d5c92:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5c94:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5c96:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5c98:	4b09      	ldr	r3, [pc, #36]	; (d5cc0 <_ZN7FatFile4syncEv+0x68>)
   d5c9a:	681b      	ldr	r3, [r3, #0]
   d5c9c:	b12b      	cbz	r3, d5caa <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5c9e:	f100 0116 	add.w	r1, r0, #22
   d5ca2:	3018      	adds	r0, #24
   d5ca4:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5ca6:	8b2b      	ldrh	r3, [r5, #24]
   d5ca8:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5caa:	78a3      	ldrb	r3, [r4, #2]
   d5cac:	f023 0304 	bic.w	r3, r3, #4
   d5cb0:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5cb2:	68a0      	ldr	r0, [r4, #8]
   d5cb4:	f7ff fabe 	bl	d5234 <_ZN9FatVolume9cacheSyncEv>
   d5cb8:	2800      	cmp	r0, #0
   d5cba:	d0db      	beq.n	d5c74 <_ZN7FatFile4syncEv+0x1c>
   d5cbc:	e7d0      	b.n	d5c60 <_ZN7FatFile4syncEv+0x8>
   d5cbe:	bf00      	nop
   d5cc0:	2003e3c4 	.word	0x2003e3c4

000d5cc4 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5cc4:	b510      	push	{r4, lr}
   d5cc6:	4604      	mov	r4, r0
  bool rtn = sync();
   d5cc8:	f7ff ffc6 	bl	d5c58 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5ccc:	2300      	movs	r3, #0
   d5cce:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5cd0:	bd10      	pop	{r4, pc}

000d5cd2 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5cd4:	b093      	sub	sp, #76	; 0x4c
   d5cd6:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5cd8:	2300      	movs	r3, #0
   d5cda:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5cde:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5ce2:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5ce4:	9201      	str	r2, [sp, #4]
   d5ce6:	4606      	mov	r6, r0
   d5ce8:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5cea:	b10b      	cbz	r3, d5cf0 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5cec:	2000      	movs	r0, #0
   d5cee:	e03d      	b.n	d5d6c <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5cf0:	780b      	ldrb	r3, [r1, #0]
   d5cf2:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5cf6:	d0f9      	beq.n	d5cec <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5cf8:	7813      	ldrb	r3, [r2, #0]
   d5cfa:	2b2f      	cmp	r3, #47	; 0x2f
   d5cfc:	d112      	bne.n	d5d24 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d5cfe:	9b01      	ldr	r3, [sp, #4]
   d5d00:	781a      	ldrb	r2, [r3, #0]
   d5d02:	2a2f      	cmp	r2, #47	; 0x2f
   d5d04:	d102      	bne.n	d5d0c <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5d06:	3301      	adds	r3, #1
   d5d08:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d5d0a:	e7f8      	b.n	d5cfe <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5d0c:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d5d0e:	b91a      	cbnz	r2, d5d18 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5d10:	4630      	mov	r0, r6
   d5d12:	f7ff fe02 	bl	d591a <_ZN7FatFile8openRootEP9FatVolume>
   d5d16:	e029      	b.n	d5d6c <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5d18:	a809      	add	r0, sp, #36	; 0x24
   d5d1a:	f7ff fdfe 	bl	d591a <_ZN7FatFile8openRootEP9FatVolume>
   d5d1e:	2800      	cmp	r0, #0
   d5d20:	d0e4      	beq.n	d5cec <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5d22:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5d24:	aa01      	add	r2, sp, #4
   d5d26:	a903      	add	r1, sp, #12
   d5d28:	9801      	ldr	r0, [sp, #4]
   d5d2a:	f7ff fa9f 	bl	d526c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5d2e:	2800      	cmp	r0, #0
   d5d30:	d0dc      	beq.n	d5cec <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5d32:	9b01      	ldr	r3, [sp, #4]
   d5d34:	781b      	ldrb	r3, [r3, #0]
   d5d36:	b19b      	cbz	r3, d5d60 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5d38:	2300      	movs	r3, #0
   d5d3a:	aa03      	add	r2, sp, #12
   d5d3c:	4621      	mov	r1, r4
   d5d3e:	4630      	mov	r0, r6
   d5d40:	f7ff fbd6 	bl	d54f0 <_ZN7FatFile4openEPS_P7fname_ti>
   d5d44:	2800      	cmp	r0, #0
   d5d46:	d0d1      	beq.n	d5cec <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5d48:	4635      	mov	r5, r6
   d5d4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d4c:	ac09      	add	r4, sp, #36	; 0x24
   d5d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5d54:	682b      	ldr	r3, [r5, #0]
   d5d56:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5d58:	4630      	mov	r0, r6
   d5d5a:	f7ff ffb3 	bl	d5cc4 <_ZN7FatFile5closeEv>
   d5d5e:	e7e0      	b.n	d5d22 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d5d60:	463b      	mov	r3, r7
   d5d62:	aa03      	add	r2, sp, #12
   d5d64:	4621      	mov	r1, r4
   d5d66:	4630      	mov	r0, r6
   d5d68:	f7ff fbc2 	bl	d54f0 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d5d6c:	b013      	add	sp, #76	; 0x4c
   d5d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d70 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5d74:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5d76:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5d78:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5d7a:	4604      	mov	r4, r0
   d5d7c:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5d7e:	d508      	bpl.n	d5d92 <_ZN7FatFile5writeEPKvj+0x22>
   d5d80:	7883      	ldrb	r3, [r0, #2]
   d5d82:	079a      	lsls	r2, r3, #30
   d5d84:	d505      	bpl.n	d5d92 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5d86:	071b      	lsls	r3, r3, #28
   d5d88:	d50b      	bpl.n	d5da2 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5d8a:	69e1      	ldr	r1, [r4, #28]
   d5d8c:	f7ff fead 	bl	d5aea <_ZN7FatFile7seekSetEm>
   d5d90:	b938      	cbnz	r0, d5da2 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5d92:	7863      	ldrb	r3, [r4, #1]
   d5d94:	f043 0301 	orr.w	r3, r3, #1
   d5d98:	7063      	strb	r3, [r4, #1]
  return -1;
   d5d9a:	f04f 30ff 	mov.w	r0, #4294967295
   d5d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5da2:	6963      	ldr	r3, [r4, #20]
   d5da4:	43db      	mvns	r3, r3
   d5da6:	4598      	cmp	r8, r3
   d5da8:	d8f3      	bhi.n	d5d92 <_ZN7FatFile5writeEPKvj+0x22>
   d5daa:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5dac:	f04f 0a00 	mov.w	sl, #0
   d5db0:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5db2:	2e00      	cmp	r6, #0
   d5db4:	f000 8081 	beq.w	d5eba <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5db8:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5dba:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5dbc:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5dc0:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5dc4:	d11c      	bne.n	d5e00 <_ZN7FatFile5writeEPKvj+0x90>
   d5dc6:	b9df      	cbnz	r7, d5e00 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5dc8:	6921      	ldr	r1, [r4, #16]
   d5dca:	b171      	cbz	r1, d5dea <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5dcc:	f104 0210 	add.w	r2, r4, #16
   d5dd0:	f000 f901 	bl	d5fd6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5dd4:	2800      	cmp	r0, #0
   d5dd6:	dbdc      	blt.n	d5d92 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5dd8:	f040 808e 	bne.w	d5ef8 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5ddc:	4620      	mov	r0, r4
   d5dde:	f7ff fd43 	bl	d5868 <_ZN7FatFile10addClusterEv>
   d5de2:	2800      	cmp	r0, #0
   d5de4:	f040 8088 	bne.w	d5ef8 <_ZN7FatFile5writeEPKvj+0x188>
   d5de8:	e7d3      	b.n	d5d92 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5dea:	6a23      	ldr	r3, [r4, #32]
   d5dec:	b93b      	cbnz	r3, d5dfe <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5dee:	4620      	mov	r0, r4
   d5df0:	f7ff fd3a 	bl	d5868 <_ZN7FatFile10addClusterEv>
   d5df4:	2800      	cmp	r0, #0
   d5df6:	d0cc      	beq.n	d5d92 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5df8:	6923      	ldr	r3, [r4, #16]
   d5dfa:	6223      	str	r3, [r4, #32]
   d5dfc:	e000      	b.n	d5e00 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5dfe:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5e00:	6921      	ldr	r1, [r4, #16]
   d5e02:	68a0      	ldr	r0, [r4, #8]
   d5e04:	f000 f8e1 	bl	d5fca <_ZNK9FatVolume17clusterFirstBlockEm>
   d5e08:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5e0a:	b917      	cbnz	r7, d5e12 <_ZN7FatFile5writeEPKvj+0xa2>
   d5e0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5e10:	d221      	bcs.n	d5e56 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5e12:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5e16:	42b5      	cmp	r5, r6
   d5e18:	bf28      	it	cs
   d5e1a:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5e1c:	b937      	cbnz	r7, d5e2c <_ZN7FatFile5writeEPKvj+0xbc>
   d5e1e:	6963      	ldr	r3, [r4, #20]
   d5e20:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5e22:	4293      	cmp	r3, r2
   d5e24:	bf34      	ite	cc
   d5e26:	2201      	movcc	r2, #1
   d5e28:	2205      	movcs	r2, #5
   d5e2a:	e000      	b.n	d5e2e <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5e2c:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5e2e:	68a0      	ldr	r0, [r4, #8]
   d5e30:	3024      	adds	r0, #36	; 0x24
   d5e32:	f000 f8a6 	bl	d5f82 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5e36:	2800      	cmp	r0, #0
   d5e38:	d0ab      	beq.n	d5d92 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5e3a:	4438      	add	r0, r7
   d5e3c:	462a      	mov	r2, r5
   d5e3e:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5e40:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5e42:	f003 f8be 	bl	d8fc2 <memcpy>
      if (512 == (n + blockOffset)) {
   d5e46:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5e4a:	d130      	bne.n	d5eae <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5e4c:	68a0      	ldr	r0, [r4, #8]
   d5e4e:	3024      	adds	r0, #36	; 0x24
   d5e50:	f000 f870 	bl	d5f34 <_ZN8FatCache4syncEv>
   d5e54:	e017      	b.n	d5e86 <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5e56:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5e5a:	68a0      	ldr	r0, [r4, #8]
   d5e5c:	d315      	bcc.n	d5e8a <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5e5e:	7902      	ldrb	r2, [r0, #4]
   d5e60:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5e62:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5e64:	b2d2      	uxtb	r2, r2
   d5e66:	4293      	cmp	r3, r2
   d5e68:	bf28      	it	cs
   d5e6a:	4613      	movcs	r3, r2
   d5e6c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5e6e:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5e70:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5e74:	d302      	bcc.n	d5e7c <_ZN7FatFile5writeEPKvj+0x10c>
   d5e76:	441a      	add	r2, r3
   d5e78:	4291      	cmp	r1, r2
   d5e7a:	d337      	bcc.n	d5eec <_ZN7FatFile5writeEPKvj+0x17c>
   d5e7c:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5e7e:	464a      	mov	r2, r9
   d5e80:	6838      	ldr	r0, [r7, #0]
   d5e82:	f000 fc6d 	bl	d6760 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5e86:	b990      	cbnz	r0, d5eae <_ZN7FatFile5writeEPKvj+0x13e>
   d5e88:	e783      	b.n	d5d92 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5e8a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5e8c:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5e8e:	bf02      	ittt	eq
   d5e90:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5e94:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5e98:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5e9a:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5e9c:	464a      	mov	r2, r9
   d5e9e:	6818      	ldr	r0, [r3, #0]
   d5ea0:	f000 fbec 	bl	d667c <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5ea4:	2800      	cmp	r0, #0
   d5ea6:	f43f af74 	beq.w	d5d92 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5eaa:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5eae:	6963      	ldr	r3, [r4, #20]
   d5eb0:	442b      	add	r3, r5
   d5eb2:	6163      	str	r3, [r4, #20]
    src += n;
   d5eb4:	44a9      	add	r9, r5
    nToWrite -= n;
   d5eb6:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5eb8:	e77a      	b.n	d5db0 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5eba:	69e2      	ldr	r2, [r4, #28]
   d5ebc:	4293      	cmp	r3, r2
   d5ebe:	d901      	bls.n	d5ec4 <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5ec0:	61e3      	str	r3, [r4, #28]
   d5ec2:	e002      	b.n	d5eca <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5ec4:	4b0f      	ldr	r3, [pc, #60]	; (d5f04 <_ZN7FatFile5writeEPKvj+0x194>)
   d5ec6:	681b      	ldr	r3, [r3, #0]
   d5ec8:	b11b      	cbz	r3, d5ed2 <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5eca:	78a3      	ldrb	r3, [r4, #2]
   d5ecc:	f043 0304 	orr.w	r3, r3, #4
   d5ed0:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5ed2:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5ed6:	2b00      	cmp	r3, #0
   d5ed8:	db02      	blt.n	d5ee0 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5eda:	4640      	mov	r0, r8
   d5edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5ee0:	4620      	mov	r0, r4
   d5ee2:	f7ff feb9 	bl	d5c58 <_ZN7FatFile4syncEv>
   d5ee6:	2800      	cmp	r0, #0
   d5ee8:	d1f7      	bne.n	d5eda <_ZN7FatFile5writeEPKvj+0x16a>
   d5eea:	e752      	b.n	d5d92 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5eec:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5ef0:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5ef4:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5ef6:	e7c1      	b.n	d5e7c <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5ef8:	6921      	ldr	r1, [r4, #16]
   d5efa:	68a0      	ldr	r0, [r4, #8]
   d5efc:	f000 f865 	bl	d5fca <_ZNK9FatVolume17clusterFirstBlockEm>
   d5f00:	4601      	mov	r1, r0
   d5f02:	e783      	b.n	d5e0c <_ZN7FatFile5writeEPKvj+0x9c>
   d5f04:	2003e3c4 	.word	0x2003e3c4

000d5f08 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5f08:	f000 bdde 	b.w	d6ac8 <HAL_Pin_Map>

000d5f0c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5f0c:	b570      	push	{r4, r5, r6, lr}
   d5f0e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5f10:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5f12:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5f14:	b149      	cbz	r1, d5f2a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5f16:	f003 f8a1 	bl	d905c <strlen>
   d5f1a:	682b      	ldr	r3, [r5, #0]
   d5f1c:	4602      	mov	r2, r0
   d5f1e:	4621      	mov	r1, r4
   d5f20:	4628      	mov	r0, r5
   d5f22:	68db      	ldr	r3, [r3, #12]
    }
   d5f24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5f28:	4718      	bx	r3
    }
   d5f2a:	bd70      	pop	{r4, r5, r6, pc}

000d5f2c <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d5f2c:	f000 bdcc 	b.w	d6ac8 <HAL_Pin_Map>

000d5f30 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d5f30:	f000 bdca 	b.w	d6ac8 <HAL_Pin_Map>

000d5f34 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5f34:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d5f36:	7803      	ldrb	r3, [r0, #0]
   d5f38:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d5f3a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d5f3c:	d51e      	bpl.n	d5f7c <_ZN8FatCache4syncEv+0x48>
   d5f3e:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5f40:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d5f42:	f100 060c 	add.w	r6, r0, #12
   d5f46:	4632      	mov	r2, r6
   d5f48:	6818      	ldr	r0, [r3, #0]
   d5f4a:	f000 fb97 	bl	d667c <_ZN9SdSpiCard10writeBlockEmPKh>
   d5f4e:	4605      	mov	r5, r0
   d5f50:	b908      	cbnz	r0, d5f56 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d5f52:	2500      	movs	r5, #0
   d5f54:	e013      	b.n	d5f7e <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d5f56:	7823      	ldrb	r3, [r4, #0]
   d5f58:	079b      	lsls	r3, r3, #30
   d5f5a:	d404      	bmi.n	d5f66 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d5f5c:	7823      	ldrb	r3, [r4, #0]
   d5f5e:	f023 0301 	bic.w	r3, r3, #1
   d5f62:	7023      	strb	r3, [r4, #0]
   d5f64:	e00b      	b.n	d5f7e <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d5f66:	6863      	ldr	r3, [r4, #4]
   d5f68:	68a0      	ldr	r0, [r4, #8]
   d5f6a:	6919      	ldr	r1, [r3, #16]
   d5f6c:	4632      	mov	r2, r6
   d5f6e:	4401      	add	r1, r0
   d5f70:	6818      	ldr	r0, [r3, #0]
   d5f72:	f000 fb83 	bl	d667c <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d5f76:	2800      	cmp	r0, #0
   d5f78:	d1f0      	bne.n	d5f5c <_ZN8FatCache4syncEv+0x28>
   d5f7a:	e7ea      	b.n	d5f52 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d5f7c:	2501      	movs	r5, #1

fail:
  return false;
}
   d5f7e:	4628      	mov	r0, r5
   d5f80:	bd70      	pop	{r4, r5, r6, pc}

000d5f82 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5f82:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d5f84:	6883      	ldr	r3, [r0, #8]
   d5f86:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d5f88:	4604      	mov	r4, r0
   d5f8a:	460e      	mov	r6, r1
   d5f8c:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d5f8e:	d014      	beq.n	d5fba <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d5f90:	f7ff ffd0 	bl	d5f34 <_ZN8FatCache4syncEv>
   d5f94:	b908      	cbnz	r0, d5f9a <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d5f96:	2000      	movs	r0, #0
   d5f98:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d5f9a:	076b      	lsls	r3, r5, #29
   d5f9c:	d503      	bpl.n	d5fa6 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d5f9e:	2300      	movs	r3, #0
   d5fa0:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d5fa2:	60a6      	str	r6, [r4, #8]
   d5fa4:	e009      	b.n	d5fba <_ZN8FatCache4readEmh+0x38>
   d5fa6:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5fa8:	f104 020c 	add.w	r2, r4, #12
   d5fac:	4631      	mov	r1, r6
   d5fae:	6818      	ldr	r0, [r3, #0]
   d5fb0:	f000 fada 	bl	d6568 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d5fb4:	2800      	cmp	r0, #0
   d5fb6:	d1f2      	bne.n	d5f9e <_ZN8FatCache4readEmh+0x1c>
   d5fb8:	e7ed      	b.n	d5f96 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d5fba:	7823      	ldrb	r3, [r4, #0]
   d5fbc:	4620      	mov	r0, r4
   d5fbe:	f005 0503 	and.w	r5, r5, #3
   d5fc2:	431d      	orrs	r5, r3
   d5fc4:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d5fc8:	bd70      	pop	{r4, r5, r6, pc}

000d5fca <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d5fca:	7983      	ldrb	r3, [r0, #6]
   d5fcc:	6940      	ldr	r0, [r0, #20]
   d5fce:	3902      	subs	r1, #2
   d5fd0:	4099      	lsls	r1, r3
}
   d5fd2:	4408      	add	r0, r1
   d5fd4:	4770      	bx	lr

000d5fd6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5fd6:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d5fd8:	b570      	push	{r4, r5, r6, lr}
   d5fda:	4605      	mov	r5, r0
   d5fdc:	460c      	mov	r4, r1
   d5fde:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5fe0:	d802      	bhi.n	d5fe8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d5fe2:	f04f 30ff 	mov.w	r0, #4294967295
   d5fe6:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d5fe8:	69c3      	ldr	r3, [r0, #28]
   d5fea:	4299      	cmp	r1, r3
   d5fec:	d8f9      	bhi.n	d5fe2 <_ZN9FatVolume6fatGetEmPm+0xc>
   d5fee:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d5ff0:	2b20      	cmp	r3, #32
   d5ff2:	d110      	bne.n	d6016 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d5ff4:	6981      	ldr	r1, [r0, #24]
   d5ff6:	2202      	movs	r2, #2
   d5ff8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d5ffc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6000:	f7ff ffbf 	bl	d5f82 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6004:	2800      	cmp	r0, #0
   d6006:	d0ec      	beq.n	d5fe2 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d6008:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d600c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d6010:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d6014:	e00f      	b.n	d6036 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d6016:	2b10      	cmp	r3, #16
   d6018:	d1e3      	bne.n	d5fe2 <_ZN9FatVolume6fatGetEmPm+0xc>
   d601a:	6983      	ldr	r3, [r0, #24]
   d601c:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6020:	2202      	movs	r2, #2
   d6022:	4419      	add	r1, r3
   d6024:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6028:	f7ff ffab 	bl	d5f82 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d602c:	2800      	cmp	r0, #0
   d602e:	d0d8      	beq.n	d5fe2 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d6030:	b2e4      	uxtb	r4, r4
   d6032:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d6036:	69ea      	ldr	r2, [r5, #28]
   d6038:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d603a:	bf9a      	itte	ls
   d603c:	6033      	strls	r3, [r6, #0]
  return 1;
   d603e:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d6040:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d6042:	bd70      	pop	{r4, r5, r6, pc}

000d6044 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6044:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d6046:	b538      	push	{r3, r4, r5, lr}
   d6048:	460c      	mov	r4, r1
   d604a:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d604c:	d801      	bhi.n	d6052 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d604e:	2000      	movs	r0, #0
   d6050:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6052:	69c3      	ldr	r3, [r0, #28]
   d6054:	4299      	cmp	r1, r3
   d6056:	d8fa      	bhi.n	d604e <_ZN9FatVolume6fatPutEmm+0xa>
   d6058:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d605a:	2b20      	cmp	r3, #32
   d605c:	d10e      	bne.n	d607c <_ZN9FatVolume6fatPutEmm+0x38>
   d605e:	6981      	ldr	r1, [r0, #24]
   d6060:	2203      	movs	r2, #3
   d6062:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6066:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d606a:	f7ff ff8a 	bl	d5f82 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d606e:	2800      	cmp	r0, #0
   d6070:	d0ed      	beq.n	d604e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d6072:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6076:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d607a:	e00f      	b.n	d609c <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d607c:	2b10      	cmp	r3, #16
   d607e:	d1e6      	bne.n	d604e <_ZN9FatVolume6fatPutEmm+0xa>
   d6080:	6983      	ldr	r3, [r0, #24]
   d6082:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6086:	2203      	movs	r2, #3
   d6088:	4419      	add	r1, r3
   d608a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d608e:	f7ff ff78 	bl	d5f82 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6092:	2800      	cmp	r0, #0
   d6094:	d0db      	beq.n	d604e <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d6096:	b2e4      	uxtb	r4, r4
   d6098:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d609c:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d609e:	bd38      	pop	{r3, r4, r5, pc}

000d60a0 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d60a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d60a4:	68c4      	ldr	r4, [r0, #12]
   d60a6:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d60a8:	4605      	mov	r5, r0
   d60aa:	460e      	mov	r6, r1
   d60ac:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d60ae:	d207      	bcs.n	d60c0 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d60b0:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d60b2:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d60b4:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d60b6:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d60b8:	429c      	cmp	r4, r3
   d60ba:	d903      	bls.n	d60c4 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d60bc:	b9cf      	cbnz	r7, d60f2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d60be:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d60c0:	2701      	movs	r7, #1
   d60c2:	e7f7      	b.n	d60b4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d60c4:	42a6      	cmp	r6, r4
   d60c6:	d014      	beq.n	d60f2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d60c8:	aa01      	add	r2, sp, #4
   d60ca:	4621      	mov	r1, r4
   d60cc:	4628      	mov	r0, r5
   d60ce:	f7ff ff82 	bl	d5fd6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d60d2:	2800      	cmp	r0, #0
   d60d4:	db0d      	blt.n	d60f2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d60d6:	d0ed      	beq.n	d60b4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d60d8:	9b01      	ldr	r3, [sp, #4]
   d60da:	2b00      	cmp	r3, #0
   d60dc:	d1ea      	bne.n	d60b4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d60de:	b107      	cbz	r7, d60e2 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d60e0:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d60e2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d60e6:	4621      	mov	r1, r4
   d60e8:	4628      	mov	r0, r5
   d60ea:	f7ff ffab 	bl	d6044 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d60ee:	4607      	mov	r7, r0
   d60f0:	b908      	cbnz	r0, d60f6 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d60f2:	2700      	movs	r7, #0
   d60f4:	e00b      	b.n	d610e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d60f6:	b916      	cbnz	r6, d60fe <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d60f8:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d60fc:	e007      	b.n	d610e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d60fe:	4622      	mov	r2, r4
   d6100:	4631      	mov	r1, r6
   d6102:	4628      	mov	r0, r5
   d6104:	f7ff ff9e 	bl	d6044 <_ZN9FatVolume6fatPutEmm>
   d6108:	2800      	cmp	r0, #0
   d610a:	d1f5      	bne.n	d60f8 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d610c:	e7f1      	b.n	d60f2 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d610e:	4638      	mov	r0, r7
   d6110:	b002      	add	sp, #8
   d6112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6116 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d6116:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6118:	4605      	mov	r5, r0
   d611a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d611c:	aa01      	add	r2, sp, #4
   d611e:	4621      	mov	r1, r4
   d6120:	4628      	mov	r0, r5
   d6122:	f7ff ff58 	bl	d5fd6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6126:	1e06      	subs	r6, r0, #0
   d6128:	da01      	bge.n	d612e <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d612a:	2000      	movs	r0, #0
   d612c:	e00f      	b.n	d614e <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d612e:	2200      	movs	r2, #0
   d6130:	4621      	mov	r1, r4
   d6132:	4628      	mov	r0, r5
   d6134:	f7ff ff86 	bl	d6044 <_ZN9FatVolume6fatPutEmm>
   d6138:	2800      	cmp	r0, #0
   d613a:	d0f6      	beq.n	d612a <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d613c:	68eb      	ldr	r3, [r5, #12]
   d613e:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d6140:	bf9c      	itt	ls
   d6142:	f104 34ff 	addls.w	r4, r4, #4294967295
   d6146:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d6148:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d614a:	2e00      	cmp	r6, #0
   d614c:	d1e6      	bne.n	d611c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d614e:	b002      	add	sp, #8
   d6150:	bd70      	pop	{r4, r5, r6, pc}

000d6152 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6152:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d6154:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d6156:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6158:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d615a:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d615c:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6160:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d6162:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6164:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6166:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d616a:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d616c:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6170:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6174:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d6178:	b1a1      	cbz	r1, d61a4 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d617a:	2904      	cmp	r1, #4
   d617c:	d85d      	bhi.n	d623a <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d617e:	4611      	mov	r1, r2
   d6180:	3024      	adds	r0, #36	; 0x24
   d6182:	f7ff fefe 	bl	d5f82 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6186:	2800      	cmp	r0, #0
   d6188:	d057      	beq.n	d623a <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d618a:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d618e:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d6192:	065b      	lsls	r3, r3, #25
   d6194:	d151      	bne.n	d623a <_ZN9FatVolume4initEh+0xe8>
   d6196:	351b      	adds	r5, #27
   d6198:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d619c:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d61a0:	2d00      	cmp	r5, #0
   d61a2:	d04a      	beq.n	d623a <_ZN9FatVolume4initEh+0xe8>
   d61a4:	2200      	movs	r2, #0
   d61a6:	4629      	mov	r1, r5
   d61a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d61ac:	f7ff fee9 	bl	d5f82 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d61b0:	2800      	cmp	r0, #0
   d61b2:	d042      	beq.n	d623a <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d61b4:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d61b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d61bc:	d13d      	bne.n	d623a <_ZN9FatVolume4initEh+0xe8>
   d61be:	7c03      	ldrb	r3, [r0, #16]
   d61c0:	2b02      	cmp	r3, #2
   d61c2:	d13a      	bne.n	d623a <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d61c4:	89c3      	ldrh	r3, [r0, #14]
   d61c6:	2b00      	cmp	r3, #0
   d61c8:	d037      	beq.n	d623a <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d61ca:	7b41      	ldrb	r1, [r0, #13]
   d61cc:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d61ce:	1e4b      	subs	r3, r1, #1
   d61d0:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d61d2:	2300      	movs	r3, #0
   d61d4:	71a3      	strb	r3, [r4, #6]
   d61d6:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d61d8:	2301      	movs	r3, #1
   d61da:	428b      	cmp	r3, r1
   d61dc:	d007      	beq.n	d61ee <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d61de:	3e01      	subs	r6, #1
   d61e0:	d02b      	beq.n	d623a <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d61e2:	79a2      	ldrb	r2, [r4, #6]
   d61e4:	005b      	lsls	r3, r3, #1
   d61e6:	3201      	adds	r2, #1
   d61e8:	b2db      	uxtb	r3, r3
   d61ea:	71a2      	strb	r2, [r4, #6]
   d61ec:	e7f5      	b.n	d61da <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d61ee:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d61f0:	b902      	cbnz	r2, d61f4 <_ZN9FatVolume4initEh+0xa2>
   d61f2:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d61f4:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d61f6:	89c6      	ldrh	r6, [r0, #14]
   d61f8:	442e      	add	r6, r5
   d61fa:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d61fc:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d6200:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d6202:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d6206:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d6208:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d620c:	0152      	lsls	r2, r2, #5
   d620e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d6212:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d6216:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d6218:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d621c:	b903      	cbnz	r3, d6220 <_ZN9FatVolume4initEh+0xce>
   d621e:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6220:	1aad      	subs	r5, r5, r2
   d6222:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d6224:	79a5      	ldrb	r5, [r4, #6]
   d6226:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d622a:	1c6b      	adds	r3, r5, #1
   d622c:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d622e:	f640 73f4 	movw	r3, #4084	; 0xff4
   d6232:	429d      	cmp	r5, r3
   d6234:	d803      	bhi.n	d623e <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d6236:	230c      	movs	r3, #12
   d6238:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d623a:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d623c:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d623e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d6242:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d6244:	bf85      	ittet	hi
   d6246:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d6248:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d624a:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d624c:	2320      	movhi	r3, #32
   d624e:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d6250:	2001      	movs	r0, #1

fail:
  return false;
}
   d6252:	bd70      	pop	{r4, r5, r6, pc}

000d6254 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d6254:	f000 bc38 	b.w	d6ac8 <HAL_Pin_Map>

000d6258 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d6258:	f000 bc36 	b.w	d6ac8 <HAL_Pin_Map>

000d625c <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d625c:	f000 bc34 	b.w	d6ac8 <HAL_Pin_Map>

000d6260 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6260:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6262:	4c0e      	ldr	r4, [pc, #56]	; (d629c <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6264:	460e      	mov	r6, r1
   d6266:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6268:	f000 fc9e 	bl	d6ba8 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d626c:	6823      	ldr	r3, [r4, #0]
   d626e:	1ac0      	subs	r0, r0, r3
   d6270:	4b0b      	ldr	r3, [pc, #44]	; (d62a0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d6272:	4298      	cmp	r0, r3
   d6274:	d908      	bls.n	d6288 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6276:	f000 fc9f 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d627a:	4b0a      	ldr	r3, [pc, #40]	; (d62a4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d627c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d627e:	f000 fe97 	bl	d6fb0 <spark_process>
   d6282:	f000 fc91 	bl	d6ba8 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d6286:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6288:	f000 fc96 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d628c:	b280      	uxth	r0, r0
   d628e:	1b80      	subs	r0, r0, r6
}
   d6290:	42a8      	cmp	r0, r5
   d6292:	bfd4      	ite	le
   d6294:	2000      	movle	r0, #0
   d6296:	2001      	movgt	r0, #1
   d6298:	bd70      	pop	{r4, r5, r6, pc}
   d629a:	bf00      	nop
   d629c:	2003e3c8 	.word	0x2003e3c8
   d62a0:	000186a0 	.word	0x000186a0
   d62a4:	2003e734 	.word	0x2003e734

000d62a8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d62a8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d62aa:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d62ac:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d62ae:	b94d      	cbnz	r5, d62c4 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d62b0:	6840      	ldr	r0, [r0, #4]
   d62b2:	f000 fa7d 	bl	d67b0 <_ZN14SdSpiAltDriver8activateEv>
   d62b6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d62b8:	4629      	mov	r1, r5
   d62ba:	7d18      	ldrb	r0, [r3, #20]
   d62bc:	f002 f875 	bl	d83aa <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d62c0:	2301      	movs	r3, #1
   d62c2:	7223      	strb	r3, [r4, #8]
   d62c4:	bd38      	pop	{r3, r4, r5, pc}

000d62c6 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d62c6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d62c8:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d62ca:	4604      	mov	r4, r0
  if (m_spiActive) {
   d62cc:	b16b      	cbz	r3, d62ea <_ZN9SdSpiCard7spiStopEv+0x24>
   d62ce:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d62d0:	2101      	movs	r1, #1
   d62d2:	7d18      	ldrb	r0, [r3, #20]
   d62d4:	f002 f869 	bl	d83aa <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d62d8:	21ff      	movs	r1, #255	; 0xff
   d62da:	6860      	ldr	r0, [r4, #4]
   d62dc:	f000 fa9a 	bl	d6814 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d62e0:	6860      	ldr	r0, [r4, #4]
   d62e2:	f000 fa79 	bl	d67d8 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d62e6:	2300      	movs	r3, #0
   d62e8:	7223      	strb	r3, [r4, #8]
   d62ea:	bd10      	pop	{r4, pc}

000d62ec <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d62ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d62ee:	4604      	mov	r4, r0
   d62f0:	460d      	mov	r5, r1
   d62f2:	4616      	mov	r6, r2
   d62f4:	f000 fc60 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d62f8:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d62fa:	6860      	ldr	r0, [r4, #4]
   d62fc:	f000 fa6f 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d6300:	28ff      	cmp	r0, #255	; 0xff
   d6302:	7260      	strb	r0, [r4, #9]
   d6304:	d109      	bne.n	d631a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d6306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d630a:	4639      	mov	r1, r7
   d630c:	4620      	mov	r0, r4
   d630e:	f7ff ffa7 	bl	d6260 <_ZN9SdSpiCard10isTimedOutEtt>
   d6312:	2800      	cmp	r0, #0
   d6314:	d0f1      	beq.n	d62fa <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6316:	2355      	movs	r3, #85	; 0x55
   d6318:	e00b      	b.n	d6332 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d631a:	28fe      	cmp	r0, #254	; 0xfe
   d631c:	d001      	beq.n	d6322 <_ZN9SdSpiCard8readDataEPhj+0x36>
   d631e:	2350      	movs	r3, #80	; 0x50
   d6320:	e007      	b.n	d6332 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d6322:	4632      	mov	r2, r6
   d6324:	4629      	mov	r1, r5
   d6326:	6860      	ldr	r0, [r4, #4]
   d6328:	f000 fa5e 	bl	d67e8 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d632c:	7260      	strb	r0, [r4, #9]
   d632e:	b130      	cbz	r0, d633e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6330:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d6332:	4620      	mov	r0, r4
   d6334:	7023      	strb	r3, [r4, #0]
   d6336:	f7ff ffc6 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d633a:	2000      	movs	r0, #0
}
   d633c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d633e:	6860      	ldr	r0, [r4, #4]
   d6340:	f000 fa4d 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
   d6344:	6860      	ldr	r0, [r4, #4]
   d6346:	f000 fa4a 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
   d634a:	2001      	movs	r0, #1
   d634c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d634e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d634e:	b570      	push	{r4, r5, r6, lr}
   d6350:	4604      	mov	r4, r0
   d6352:	460e      	mov	r6, r1
   d6354:	f000 fc30 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>
   d6358:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d635a:	4632      	mov	r2, r6
   d635c:	4629      	mov	r1, r5
   d635e:	4620      	mov	r0, r4
   d6360:	f7ff ff7e 	bl	d6260 <_ZN9SdSpiCard10isTimedOutEtt>
   d6364:	b930      	cbnz	r0, d6374 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d6366:	6860      	ldr	r0, [r4, #4]
   d6368:	f000 fa39 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d636c:	28ff      	cmp	r0, #255	; 0xff
   d636e:	d1f4      	bne.n	d635a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6370:	2001      	movs	r0, #1
   d6372:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d6374:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d6376:	bd70      	pop	{r4, r5, r6, pc}

000d6378 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d637a:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d637c:	9201      	str	r2, [sp, #4]
   d637e:	4604      	mov	r4, r0
   d6380:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d6382:	b90b      	cbnz	r3, d6388 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6384:	f7ff ff90 	bl	d62a8 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6388:	b125      	cbz	r5, d6394 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d638a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d638e:	4620      	mov	r0, r4
   d6390:	f7ff ffdd 	bl	d634e <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6394:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6398:	6860      	ldr	r0, [r4, #4]
   d639a:	f000 fa3b 	bl	d6814 <_ZN14SdSpiAltDriver4sendEh>
   d639e:	f10d 0607 	add.w	r6, sp, #7
   d63a2:	f10d 0703 	add.w	r7, sp, #3
   d63a6:	f816 1901 	ldrb.w	r1, [r6], #-1
   d63aa:	6860      	ldr	r0, [r4, #4]
   d63ac:	f000 fa32 	bl	d6814 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d63b0:	42be      	cmp	r6, r7
   d63b2:	d1f8      	bne.n	d63a6 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d63b4:	2d00      	cmp	r5, #0
   d63b6:	bf0c      	ite	eq
   d63b8:	2195      	moveq	r1, #149	; 0x95
   d63ba:	2187      	movne	r1, #135	; 0x87
   d63bc:	6860      	ldr	r0, [r4, #4]
   d63be:	f000 fa29 	bl	d6814 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d63c2:	6860      	ldr	r0, [r4, #4]
   d63c4:	f000 fa0b 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
   d63c8:	250b      	movs	r5, #11
   d63ca:	6860      	ldr	r0, [r4, #4]
   d63cc:	f000 fa07 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d63d0:	0603      	lsls	r3, r0, #24
   d63d2:	7260      	strb	r0, [r4, #9]
   d63d4:	d503      	bpl.n	d63de <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d63d6:	3d01      	subs	r5, #1
   d63d8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d63dc:	d1f5      	bne.n	d63ca <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d63de:	b003      	add	sp, #12
   d63e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d63e2 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d63e2:	b570      	push	{r4, r5, r6, lr}
   d63e4:	4604      	mov	r4, r0
   d63e6:	460d      	mov	r5, r1
   d63e8:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d63ea:	2137      	movs	r1, #55	; 0x37
   d63ec:	2200      	movs	r2, #0
   d63ee:	f7ff ffc3 	bl	d6378 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d63f2:	4632      	mov	r2, r6
   d63f4:	4629      	mov	r1, r5
   d63f6:	4620      	mov	r0, r4
  }
   d63f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d63fc:	f7ff bfbc 	b.w	d6378 <_ZN9SdSpiCard11cardCommandEhm>

000d6400 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d6404:	2500      	movs	r5, #0
   d6406:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d6408:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d640a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d640c:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d640e:	4604      	mov	r4, r0
   d6410:	4690      	mov	r8, r2
   d6412:	461e      	mov	r6, r3
   d6414:	f000 fbd0 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d6418:	4641      	mov	r1, r8
   d641a:	4607      	mov	r7, r0
   d641c:	6860      	ldr	r0, [r4, #4]
   d641e:	f000 f9cb 	bl	d67b8 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d6422:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d6424:	4a4f      	ldr	r2, [pc, #316]	; (d6564 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d6426:	721d      	strb	r5, [r3, #8]
   d6428:	f04f 0801 	mov.w	r8, #1
   d642c:	60da      	str	r2, [r3, #12]
   d642e:	745d      	strb	r5, [r3, #17]
   d6430:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d6434:	4620      	mov	r0, r4
   d6436:	f7ff ff37 	bl	d62a8 <_ZN9SdSpiCard8spiStartEv>
   d643a:	6863      	ldr	r3, [r4, #4]
   d643c:	4641      	mov	r1, r8
   d643e:	7d18      	ldrb	r0, [r3, #20]
   d6440:	f001 ffb3 	bl	d83aa <digitalWrite>
   d6444:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6446:	21ff      	movs	r1, #255	; 0xff
   d6448:	6860      	ldr	r0, [r4, #4]
   d644a:	3d01      	subs	r5, #1
   d644c:	f000 f9e2 	bl	d6814 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d6450:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6454:	d1f7      	bne.n	d6446 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d6456:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6458:	4629      	mov	r1, r5
   d645a:	7d18      	ldrb	r0, [r3, #20]
   d645c:	f001 ffa5 	bl	d83aa <digitalWrite>
   d6460:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d6462:	2200      	movs	r2, #0
   d6464:	4611      	mov	r1, r2
   d6466:	4620      	mov	r0, r4
   d6468:	f7ff ff86 	bl	d6378 <_ZN9SdSpiCard11cardCommandEhm>
   d646c:	2801      	cmp	r0, #1
   d646e:	4680      	mov	r8, r0
   d6470:	d012      	beq.n	d6498 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d6472:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d6474:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6478:	d101      	bne.n	d647e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d647a:	2320      	movs	r3, #32
   d647c:	e057      	b.n	d652e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d647e:	21fd      	movs	r1, #253	; 0xfd
   d6480:	6860      	ldr	r0, [r4, #4]
   d6482:	f000 f9c7 	bl	d6814 <_ZN14SdSpiAltDriver4sendEh>
   d6486:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d648a:	6860      	ldr	r0, [r4, #4]
   d648c:	f000 f9a7 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6490:	f1b8 0801 	subs.w	r8, r8, #1
   d6494:	d1f9      	bne.n	d648a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d6496:	e7e4      	b.n	d6462 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6498:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d649c:	2108      	movs	r1, #8
   d649e:	4620      	mov	r0, r4
   d64a0:	f7ff ff6a 	bl	d6378 <_ZN9SdSpiCard11cardCommandEhm>
   d64a4:	2805      	cmp	r0, #5
   d64a6:	d102      	bne.n	d64ae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d64a8:	f884 800a 	strb.w	r8, [r4, #10]
   d64ac:	e00f      	b.n	d64ce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d64ae:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d64b0:	6860      	ldr	r0, [r4, #4]
   d64b2:	f000 f994 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
   d64b6:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d64b8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d64bc:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d64be:	d1f7      	bne.n	d64b0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d64c0:	28aa      	cmp	r0, #170	; 0xaa
   d64c2:	d102      	bne.n	d64ca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d64c4:	2302      	movs	r3, #2
   d64c6:	72a3      	strb	r3, [r4, #10]
   d64c8:	e001      	b.n	d64ce <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d64ca:	2325      	movs	r3, #37	; 0x25
   d64cc:	e02f      	b.n	d652e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d64ce:	7aa3      	ldrb	r3, [r4, #10]
   d64d0:	2b02      	cmp	r3, #2
   d64d2:	bf0c      	ite	eq
   d64d4:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d64d8:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d64da:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d64dc:	462a      	mov	r2, r5
   d64de:	2129      	movs	r1, #41	; 0x29
   d64e0:	4620      	mov	r0, r4
   d64e2:	f7ff ff7e 	bl	d63e2 <_ZN9SdSpiCard8cardAcmdEhm>
   d64e6:	4602      	mov	r2, r0
   d64e8:	b148      	cbz	r0, d64fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d64ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d64ee:	4639      	mov	r1, r7
   d64f0:	4620      	mov	r0, r4
   d64f2:	f7ff feb5 	bl	d6260 <_ZN9SdSpiCard10isTimedOutEtt>
   d64f6:	2800      	cmp	r0, #0
   d64f8:	d0f0      	beq.n	d64dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d64fa:	2343      	movs	r3, #67	; 0x43
   d64fc:	e017      	b.n	d652e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d64fe:	7aa3      	ldrb	r3, [r4, #10]
   d6500:	2b02      	cmp	r3, #2
   d6502:	d00e      	beq.n	d6522 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d6504:	4620      	mov	r0, r4
   d6506:	f7ff fede 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d650a:	6863      	ldr	r3, [r4, #4]
   d650c:	68b0      	ldr	r0, [r6, #8]
   d650e:	7934      	ldrb	r4, [r6, #4]
   d6510:	7b31      	ldrb	r1, [r6, #12]
   d6512:	7b72      	ldrb	r2, [r6, #13]
   d6514:	745a      	strb	r2, [r3, #17]
   d6516:	60d8      	str	r0, [r3, #12]
   d6518:	721c      	strb	r4, [r3, #8]
   d651a:	7419      	strb	r1, [r3, #16]
  return true;
   d651c:	2001      	movs	r0, #1
   d651e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d6522:	213a      	movs	r1, #58	; 0x3a
   d6524:	4620      	mov	r0, r4
   d6526:	f7ff ff27 	bl	d6378 <_ZN9SdSpiCard11cardCommandEhm>
   d652a:	b138      	cbz	r0, d653c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d652c:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d652e:	4620      	mov	r0, r4
   d6530:	7023      	strb	r3, [r4, #0]
   d6532:	f7ff fec8 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6536:	2000      	movs	r0, #0
}
   d6538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d653c:	6860      	ldr	r0, [r4, #4]
   d653e:	f000 f94e 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d6542:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d6546:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6548:	bf04      	itt	eq
   d654a:	2303      	moveq	r3, #3
   d654c:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d654e:	6860      	ldr	r0, [r4, #4]
   d6550:	f000 f945 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
   d6554:	6860      	ldr	r0, [r4, #4]
   d6556:	f000 f942 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
   d655a:	6860      	ldr	r0, [r4, #4]
   d655c:	f000 f93f 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
   d6560:	e7d0      	b.n	d6504 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d6562:	bf00      	nop
   d6564:	0003d090 	.word	0x0003d090

000d6568 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6568:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d656a:	7a83      	ldrb	r3, [r0, #10]
   d656c:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d656e:	bf18      	it	ne
   d6570:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6572:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6574:	460a      	mov	r2, r1
   d6576:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6578:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d657a:	f7ff fefd 	bl	d6378 <_ZN9SdSpiCard11cardCommandEhm>
   d657e:	b110      	cbz	r0, d6586 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6580:	2330      	movs	r3, #48	; 0x30
   d6582:	7023      	strb	r3, [r4, #0]
   d6584:	e00b      	b.n	d659e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d6586:	4629      	mov	r1, r5
   d6588:	f44f 7200 	mov.w	r2, #512	; 0x200
   d658c:	4620      	mov	r0, r4
   d658e:	f7ff fead 	bl	d62ec <_ZN9SdSpiCard8readDataEPhj>
   d6592:	4605      	mov	r5, r0
   d6594:	b118      	cbz	r0, d659e <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d6596:	4620      	mov	r0, r4
   d6598:	f7ff fe95 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d659c:	e003      	b.n	d65a6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d659e:	4620      	mov	r0, r4
   d65a0:	f7ff fe91 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65a4:	2500      	movs	r5, #0
}
   d65a6:	4628      	mov	r0, r5
   d65a8:	bd38      	pop	{r3, r4, r5, pc}

000d65aa <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d65aa:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d65ac:	7a83      	ldrb	r3, [r0, #10]
   d65ae:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d65b0:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d65b2:	bf18      	it	ne
   d65b4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d65b6:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d65b8:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d65ba:	f7ff fedd 	bl	d6378 <_ZN9SdSpiCard11cardCommandEhm>
   d65be:	b130      	cbz	r0, d65ce <_ZN9SdSpiCard9readStartEm+0x24>
   d65c0:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d65c2:	4620      	mov	r0, r4
   d65c4:	7023      	strb	r3, [r4, #0]
   d65c6:	f7ff fe7e 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65ca:	2000      	movs	r0, #0
   d65cc:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d65ce:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d65d0:	bd10      	pop	{r4, pc}

000d65d2 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d65d2:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d65d4:	2200      	movs	r2, #0
   d65d6:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d65d8:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d65da:	f7ff fecd 	bl	d6378 <_ZN9SdSpiCard11cardCommandEhm>
   d65de:	b130      	cbz	r0, d65ee <_ZN9SdSpiCard8readStopEv+0x1c>
   d65e0:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d65e2:	4620      	mov	r0, r4
   d65e4:	7023      	strb	r3, [r4, #0]
   d65e6:	f7ff fe6e 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d65ea:	2000      	movs	r0, #0
   d65ec:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d65ee:	4620      	mov	r0, r4
   d65f0:	f7ff fe69 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d65f4:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d65f6:	bd10      	pop	{r4, pc}

000d65f8 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d65f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65fa:	4605      	mov	r5, r0
   d65fc:	4616      	mov	r6, r2
   d65fe:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6600:	f7ff ffd3 	bl	d65aa <_ZN9SdSpiCard9readStartEm>
   d6604:	b198      	cbz	r0, d662e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d6606:	2400      	movs	r4, #0
   d6608:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d660a:	429f      	cmp	r7, r3
   d660c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d6610:	d908      	bls.n	d6624 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d6612:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6616:	4628      	mov	r0, r5
   d6618:	f7ff fe68 	bl	d62ec <_ZN9SdSpiCard8readDataEPhj>
   d661c:	3401      	adds	r4, #1
   d661e:	2800      	cmp	r0, #0
   d6620:	d1f2      	bne.n	d6608 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d6622:	e004      	b.n	d662e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d6624:	4628      	mov	r0, r5
}
   d6626:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d662a:	f7ff bfd2 	b.w	d65d2 <_ZN9SdSpiCard8readStopEv>
}
   d662e:	2000      	movs	r0, #0
   d6630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6632 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6632:	b538      	push	{r3, r4, r5, lr}
   d6634:	4604      	mov	r4, r0
   d6636:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6638:	6840      	ldr	r0, [r0, #4]
   d663a:	f000 f8eb 	bl	d6814 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d663e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6642:	4629      	mov	r1, r5
   d6644:	6860      	ldr	r0, [r4, #4]
   d6646:	f000 f8e9 	bl	d681c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d664a:	21ff      	movs	r1, #255	; 0xff
   d664c:	6860      	ldr	r0, [r4, #4]
   d664e:	f000 f8e1 	bl	d6814 <_ZN14SdSpiAltDriver4sendEh>
   d6652:	21ff      	movs	r1, #255	; 0xff
   d6654:	6860      	ldr	r0, [r4, #4]
   d6656:	f000 f8dd 	bl	d6814 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d665a:	6860      	ldr	r0, [r4, #4]
   d665c:	f000 f8bf 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6660:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6662:	f000 001f 	and.w	r0, r0, #31
   d6666:	2805      	cmp	r0, #5
   d6668:	d006      	beq.n	d6678 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d666a:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d666c:	4620      	mov	r0, r4
   d666e:	7023      	strb	r3, [r4, #0]
   d6670:	f7ff fe29 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6674:	2000      	movs	r0, #0
   d6676:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6678:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d667a:	bd38      	pop	{r3, r4, r5, pc}

000d667c <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d667c:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d667e:	7a83      	ldrb	r3, [r0, #10]
   d6680:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6682:	bf18      	it	ne
   d6684:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6686:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6688:	460a      	mov	r2, r1
   d668a:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d668c:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d668e:	f7ff fe73 	bl	d6378 <_ZN9SdSpiCard11cardCommandEhm>
   d6692:	4606      	mov	r6, r0
   d6694:	b108      	cbz	r0, d669a <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d6696:	2332      	movs	r3, #50	; 0x32
   d6698:	e01d      	b.n	d66d6 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d669a:	462a      	mov	r2, r5
   d669c:	21fe      	movs	r1, #254	; 0xfe
   d669e:	4620      	mov	r0, r4
   d66a0:	f7ff ffc7 	bl	d6632 <_ZN9SdSpiCard9writeDataEhPKh>
   d66a4:	b1c0      	cbz	r0, d66d8 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d66a6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d66aa:	4620      	mov	r0, r4
   d66ac:	f7ff fe4f 	bl	d634e <_ZN9SdSpiCard11waitNotBusyEt>
   d66b0:	4605      	mov	r5, r0
   d66b2:	b908      	cbnz	r0, d66b8 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d66b4:	235a      	movs	r3, #90	; 0x5a
   d66b6:	e00e      	b.n	d66d6 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d66b8:	4632      	mov	r2, r6
   d66ba:	210d      	movs	r1, #13
   d66bc:	4620      	mov	r0, r4
   d66be:	f7ff fe5b 	bl	d6378 <_ZN9SdSpiCard11cardCommandEhm>
   d66c2:	b938      	cbnz	r0, d66d4 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d66c4:	6860      	ldr	r0, [r4, #4]
   d66c6:	f000 f88a 	bl	d67de <_ZN14SdSpiAltDriver7receiveEv>
   d66ca:	b918      	cbnz	r0, d66d4 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d66cc:	4620      	mov	r0, r4
   d66ce:	f7ff fdfa 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   d66d2:	e005      	b.n	d66e0 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d66d4:	2329      	movs	r3, #41	; 0x29
   d66d6:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d66d8:	4620      	mov	r0, r4
   d66da:	f7ff fdf4 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d66de:	2500      	movs	r5, #0
}
   d66e0:	4628      	mov	r0, r5
   d66e2:	bd70      	pop	{r4, r5, r6, pc}

000d66e4 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d66e4:	b538      	push	{r3, r4, r5, lr}
   d66e6:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d66e8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d66ec:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d66ee:	f7ff fe2e 	bl	d634e <_ZN9SdSpiCard11waitNotBusyEt>
   d66f2:	b910      	cbnz	r0, d66fa <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d66f4:	235b      	movs	r3, #91	; 0x5b
   d66f6:	7023      	strb	r3, [r4, #0]
   d66f8:	e005      	b.n	d6706 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d66fa:	462a      	mov	r2, r5
   d66fc:	21fc      	movs	r1, #252	; 0xfc
   d66fe:	4620      	mov	r0, r4
   d6700:	f7ff ff97 	bl	d6632 <_ZN9SdSpiCard9writeDataEhPKh>
   d6704:	b918      	cbnz	r0, d670e <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6706:	4620      	mov	r0, r4
   d6708:	f7ff fddd 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d670c:	2000      	movs	r0, #0
}
   d670e:	bd38      	pop	{r3, r4, r5, pc}

000d6710 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6710:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6712:	7a83      	ldrb	r3, [r0, #10]
   d6714:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6716:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d6718:	bf18      	it	ne
   d671a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d671c:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d671e:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6720:	f7ff fe2a 	bl	d6378 <_ZN9SdSpiCard11cardCommandEhm>
   d6724:	b130      	cbz	r0, d6734 <_ZN9SdSpiCard10writeStartEm+0x24>
   d6726:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6728:	4620      	mov	r0, r4
   d672a:	7023      	strb	r3, [r4, #0]
   d672c:	f7ff fdcb 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6730:	2000      	movs	r0, #0
   d6732:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d6734:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6736:	bd10      	pop	{r4, pc}

000d6738 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6738:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d673a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d673e:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6740:	f7ff fe05 	bl	d634e <_ZN9SdSpiCard11waitNotBusyEt>
   d6744:	4605      	mov	r5, r0
   d6746:	b120      	cbz	r0, d6752 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6748:	21fd      	movs	r1, #253	; 0xfd
   d674a:	6860      	ldr	r0, [r4, #4]
   d674c:	f000 f862 	bl	d6814 <_ZN14SdSpiAltDriver4sendEh>
   d6750:	e001      	b.n	d6756 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6752:	2356      	movs	r3, #86	; 0x56
   d6754:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d6756:	4620      	mov	r0, r4
   d6758:	f7ff fdb5 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d675c:	4628      	mov	r0, r5
   d675e:	bd38      	pop	{r3, r4, r5, pc}

000d6760 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6762:	4605      	mov	r5, r0
   d6764:	4616      	mov	r6, r2
   d6766:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6768:	f7ff ffd2 	bl	d6710 <_ZN9SdSpiCard10writeStartEm>
   d676c:	b170      	cbz	r0, d678c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d676e:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6770:	42bc      	cmp	r4, r7
   d6772:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6776:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6778:	d004      	beq.n	d6784 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d677a:	f7ff ffb3 	bl	d66e4 <_ZN9SdSpiCard9writeDataEPKh>
   d677e:	b128      	cbz	r0, d678c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6780:	3401      	adds	r4, #1
   d6782:	e7f5      	b.n	d6770 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d6784:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6788:	f7ff bfd6 	b.w	d6738 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d678c:	4628      	mov	r0, r5
   d678e:	f7ff fd9a 	bl	d62c6 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6792:	2000      	movs	r0, #0
   d6794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6796 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d6796:	f000 b997 	b.w	d6ac8 <HAL_Pin_Map>

000d679a <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d679a:	f000 b995 	b.w	d6ac8 <HAL_Pin_Map>

000d679e <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d679e:	f000 b993 	b.w	d6ac8 <HAL_Pin_Map>
	...

000d67a4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d67a4:	4b01      	ldr	r3, [pc, #4]	; (d67ac <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d67a6:	2201      	movs	r2, #1
   d67a8:	701a      	strb	r2, [r3, #0]
   d67aa:	4770      	bx	lr
   d67ac:	2003e3cc 	.word	0x2003e3cc

000d67b0 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d67b0:	1d01      	adds	r1, r0, #4
   d67b2:	6800      	ldr	r0, [r0, #0]
   d67b4:	f000 bcb4 	b.w	d7120 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d67b8 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d67b8:	b510      	push	{r4, lr}
   d67ba:	4604      	mov	r4, r0
  m_csPin = csPin;
   d67bc:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d67be:	6800      	ldr	r0, [r0, #0]
   d67c0:	f000 fc90 	bl	d70e4 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d67c4:	7d20      	ldrb	r0, [r4, #20]
   d67c6:	2101      	movs	r1, #1
   d67c8:	f001 fdde 	bl	d8388 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d67cc:	7d20      	ldrb	r0, [r4, #20]
   d67ce:	2101      	movs	r1, #1
}
   d67d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d67d4:	f001 bde9 	b.w	d83aa <digitalWrite>

000d67d8 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d67d8:	6800      	ldr	r0, [r0, #0]
   d67da:	f000 bc88 	b.w	d70ee <_ZN8SPIClass14endTransactionEv>

000d67de <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d67de:	21ff      	movs	r1, #255	; 0xff
   d67e0:	6800      	ldr	r0, [r0, #0]
   d67e2:	f000 bd0d 	b.w	d7200 <_ZN8SPIClass8transferEh>
	...

000d67e8 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d67e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d67ea:	4b08      	ldr	r3, [pc, #32]	; (d680c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d67ec:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d67ee:	2500      	movs	r5, #0
   d67f0:	4c07      	ldr	r4, [pc, #28]	; (d6810 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d67f2:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d67f4:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d67f6:	4613      	mov	r3, r2
   d67f8:	460a      	mov	r2, r1
   d67fa:	4629      	mov	r1, r5
   d67fc:	f000 fd06 	bl	d720c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d6800:	7823      	ldrb	r3, [r4, #0]
   d6802:	2b00      	cmp	r3, #0
   d6804:	d0fc      	beq.n	d6800 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d6806:	2000      	movs	r0, #0
   d6808:	b003      	add	sp, #12
   d680a:	bd30      	pop	{r4, r5, pc}
   d680c:	000d67a5 	.word	0x000d67a5
   d6810:	2003e3cc 	.word	0x2003e3cc

000d6814 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d6814:	6800      	ldr	r0, [r0, #0]
   d6816:	f000 bcf3 	b.w	d7200 <_ZN8SPIClass8transferEh>
	...

000d681c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d681c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d681e:	4b07      	ldr	r3, [pc, #28]	; (d683c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d6820:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6822:	2500      	movs	r5, #0
   d6824:	4c06      	ldr	r4, [pc, #24]	; (d6840 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6826:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6828:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d682a:	4613      	mov	r3, r2
   d682c:	462a      	mov	r2, r5
   d682e:	f000 fced 	bl	d720c <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d6832:	7823      	ldrb	r3, [r4, #0]
   d6834:	2b00      	cmp	r3, #0
   d6836:	d0fc      	beq.n	d6832 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6838:	b003      	add	sp, #12
   d683a:	bd30      	pop	{r4, r5, pc}
   d683c:	000d67a5 	.word	0x000d67a5
   d6840:	2003e3cc 	.word	0x2003e3cc

000d6844 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d6844:	f000 b940 	b.w	d6ac8 <HAL_Pin_Map>

000d6848 <_ZL9date2daysthh>:

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
   d6848:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
// utility code, some of this could be exposed in the DateTime API if needed

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
   d684c:	b530      	push	{r4, r5, lr}
    if (y >= 2000)
        y -= 2000;
   d684e:	bf28      	it	cs
   d6850:	f5a0 60fa 	subcs.w	r0, r0, #2000	; 0x7d0
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
        days += pgm_read_byte(daysInMonth + i - 1);
   d6854:	4d10      	ldr	r5, [pc, #64]	; (d6898 <_ZL9date2daysthh+0x50>)
const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
   d6856:	bf28      	it	cs
   d6858:	b280      	uxthcs	r0, r0
    uint16_t days = d;
   d685a:	b292      	uxth	r2, r2
   d685c:	2300      	movs	r3, #0
   d685e:	3301      	adds	r3, #1
    for (uint8_t i = 1; i < m; ++i)
   d6860:	b2dc      	uxtb	r4, r3
   d6862:	42a1      	cmp	r1, r4
   d6864:	d905      	bls.n	d6872 <_ZL9date2daysthh+0x2a>
        days += pgm_read_byte(daysInMonth + i - 1);
   d6866:	18ec      	adds	r4, r5, r3
   d6868:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   d686c:	4422      	add	r2, r4
   d686e:	b292      	uxth	r2, r2
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
   d6870:	e7f5      	b.n	d685e <_ZL9date2daysthh+0x16>
        days += pgm_read_byte(daysInMonth + i - 1);
    if (m > 2 && y % 4 == 0)
   d6872:	2902      	cmp	r1, #2
   d6874:	d903      	bls.n	d687e <_ZL9date2daysthh+0x36>
   d6876:	0783      	lsls	r3, r0, #30
        ++days;
   d6878:	bf04      	itt	eq
   d687a:	3201      	addeq	r2, #1
   d687c:	b292      	uxtheq	r2, r2
    return days + 365 * y + (y + 3) / 4 - 1;
   d687e:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   d6882:	1cc1      	adds	r1, r0, #3
   d6884:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   d6888:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d688c:	1e43      	subs	r3, r0, #1
   d688e:	eb03 00a1 	add.w	r0, r3, r1, asr #2
   d6892:	4410      	add	r0, r2
}
   d6894:	b280      	uxth	r0, r0
   d6896:	bd30      	pop	{r4, r5, pc}
   d6898:	000d94d2 	.word	0x000d94d2

000d689c <_ZL17read_i2c_registerhh.constprop.8>:
 #define _I2C_WRITE send
 #define _I2C_READ  receive
#endif


static uint8_t read_i2c_register(uint8_t addr, uint8_t reg) {
   d689c:	b510      	push	{r4, lr}
   d689e:	4604      	mov	r4, r0
  Wire.beginTransmission(addr);
   d68a0:	f001 fdbe 	bl	d8420 <_Z19__fetch_global_Wirev>
   d68a4:	2168      	movs	r1, #104	; 0x68
   d68a6:	f001 f8e4 	bl	d7a72 <_ZN7TwoWire17beginTransmissionEh>
  Wire._I2C_WRITE((byte)reg);
   d68aa:	f001 fdb9 	bl	d8420 <_Z19__fetch_global_Wirev>
   d68ae:	6803      	ldr	r3, [r0, #0]
   d68b0:	4621      	mov	r1, r4
   d68b2:	689b      	ldr	r3, [r3, #8]
   d68b4:	4798      	blx	r3
  Wire.endTransmission();
   d68b6:	f001 fdb3 	bl	d8420 <_Z19__fetch_global_Wirev>
   d68ba:	f001 f8e5 	bl	d7a88 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(addr, (byte)1);
   d68be:	f001 fdaf 	bl	d8420 <_Z19__fetch_global_Wirev>
   d68c2:	2201      	movs	r2, #1
   d68c4:	2168      	movs	r1, #104	; 0x68
   d68c6:	f001 f8cc 	bl	d7a62 <_ZN7TwoWire11requestFromEhh>
  return Wire._I2C_READ();
   d68ca:	f001 fda9 	bl	d8420 <_Z19__fetch_global_Wirev>
   d68ce:	6803      	ldr	r3, [r0, #0]
   d68d0:	695b      	ldr	r3, [r3, #20]
   d68d2:	4798      	blx	r3
}
   d68d4:	b2c0      	uxtb	r0, r0
   d68d6:	bd10      	pop	{r4, pc}

000d68d8 <_ZN8DateTimeC1Em>:
////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970
   d68d8:	4b23      	ldr	r3, [pc, #140]	; (d6968 <_ZN8DateTimeC1Em+0x90>)

    ss = t % 60;
   d68da:	223c      	movs	r2, #60	; 0x3c
////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970
   d68dc:	440b      	add	r3, r1

////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
   d68de:	b530      	push	{r4, r5, lr}
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970

    ss = t % 60;
   d68e0:	fbb3 f4f2 	udiv	r4, r3, r2
   d68e4:	fb02 3114 	mls	r1, r2, r4, r3
   d68e8:	7141      	strb	r1, [r0, #5]
    t /= 60;
    mm = t % 60;
   d68ea:	fbb4 f1f2 	udiv	r1, r4, r2
   d68ee:	fb02 4211 	mls	r2, r2, r1, r4
    t /= 60;
    hh = t % 24;
   d68f2:	2418      	movs	r4, #24
DateTime::DateTime (uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970

    ss = t % 60;
    t /= 60;
    mm = t % 60;
   d68f4:	7102      	strb	r2, [r0, #4]
    t /= 60;
    hh = t % 24;
   d68f6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   d68fa:	fbb3 f2f2 	udiv	r2, r3, r2
   d68fe:	fbb2 f1f4 	udiv	r1, r2, r4
   d6902:	fb04 2211 	mls	r2, r4, r1, r2
   d6906:	70c2      	strb	r2, [r0, #3]
    uint16_t days = t / 24;
   d6908:	4a18      	ldr	r2, [pc, #96]	; (d696c <_ZN8DateTimeC1Em+0x94>)
   d690a:	fbb3 f3f2 	udiv	r3, r3, r2
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   d690e:	2200      	movs	r2, #0
    ss = t % 60;
    t /= 60;
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
   d6910:	b29b      	uxth	r3, r3
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   d6912:	7002      	strb	r2, [r0, #0]
        leap = yOff % 4 == 0;
   d6914:	7801      	ldrb	r1, [r0, #0]
   d6916:	f011 0403 	ands.w	r4, r1, #3
   d691a:	bf0c      	ite	eq
   d691c:	2201      	moveq	r2, #1
   d691e:	2200      	movne	r2, #0
        if (days < 365 + leap)
   d6920:	f502 75b6 	add.w	r5, r2, #364	; 0x16c
   d6924:	429d      	cmp	r5, r3
   d6926:	da07      	bge.n	d6938 <_ZN8DateTimeC1Em+0x60>
            break;
        days -= 365 + leap;
   d6928:	f5c2 427e 	rsb	r2, r2, #65024	; 0xfe00
   d692c:	3293      	adds	r2, #147	; 0x93
   d692e:	4413      	add	r3, r2
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   d6930:	3101      	adds	r1, #1
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
   d6932:	b29b      	uxth	r3, r3
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   d6934:	7001      	strb	r1, [r0, #0]
   d6936:	e7ed      	b.n	d6914 <_ZN8DateTimeC1Em+0x3c>
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   d6938:	2201      	movs	r2, #1
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   d693a:	4d0d      	ldr	r5, [pc, #52]	; (d6970 <_ZN8DateTimeC1Em+0x98>)
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   d693c:	7042      	strb	r2, [r0, #1]
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   d693e:	7841      	ldrb	r1, [r0, #1]
   d6940:	186a      	adds	r2, r5, r1
   d6942:	f812 2c01 	ldrb.w	r2, [r2, #-1]
        if (leap && m == 2)
   d6946:	b91c      	cbnz	r4, d6950 <_ZN8DateTimeC1Em+0x78>
   d6948:	2902      	cmp	r1, #2
            ++daysPerMonth;
   d694a:	bf04      	itt	eq
   d694c:	3201      	addeq	r2, #1
   d694e:	b2d2      	uxtbeq	r2, r2
        if (days < daysPerMonth)
   d6950:	b292      	uxth	r2, r2
   d6952:	4293      	cmp	r3, r2
   d6954:	d304      	bcc.n	d6960 <_ZN8DateTimeC1Em+0x88>
            break;
        days -= daysPerMonth;
   d6956:	1a9b      	subs	r3, r3, r2
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   d6958:	3101      	adds	r1, #1
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
        if (leap && m == 2)
            ++daysPerMonth;
        if (days < daysPerMonth)
            break;
        days -= daysPerMonth;
   d695a:	b29b      	uxth	r3, r3
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   d695c:	7041      	strb	r1, [r0, #1]
   d695e:	e7ee      	b.n	d693e <_ZN8DateTimeC1Em+0x66>
            ++daysPerMonth;
        if (days < daysPerMonth)
            break;
        days -= daysPerMonth;
    }
    d = days + 1;
   d6960:	3301      	adds	r3, #1
   d6962:	7083      	strb	r3, [r0, #2]
}
   d6964:	bd30      	pop	{r4, r5, pc}
   d6966:	bf00      	nop
   d6968:	c792bc80 	.word	0xc792bc80
   d696c:	00015180 	.word	0x00015180
   d6970:	000d94d2 	.word	0x000d94d2

000d6974 <_ZNK8DateTime8unixtimeEv>:
uint8_t DateTime::dayOfTheWeek() const {    
    uint16_t day = date2days(yOff, m, d);
    return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
}

uint32_t DateTime::unixtime(void) const {
   d6974:	b510      	push	{r4, lr}
   d6976:	4604      	mov	r4, r0
  uint32_t t;
  uint16_t days = date2days(yOff, m, d);
   d6978:	7882      	ldrb	r2, [r0, #2]
   d697a:	7841      	ldrb	r1, [r0, #1]
   d697c:	7800      	ldrb	r0, [r0, #0]
   d697e:	f7ff ff63 	bl	d6848 <_ZL9date2daysthh>
  t = time2long(days, hh, mm, ss);
   d6982:	78e2      	ldrb	r2, [r4, #3]
   d6984:	2318      	movs	r3, #24
   d6986:	fb03 2000 	mla	r0, r3, r0, r2
   d698a:	7923      	ldrb	r3, [r4, #4]
   d698c:	223c      	movs	r2, #60	; 0x3c
   d698e:	fb02 3000 	mla	r0, r2, r0, r3
   d6992:	7963      	ldrb	r3, [r4, #5]
   d6994:	fb02 3300 	mla	r3, r2, r0, r3
  t += SECONDS_FROM_1970_TO_2000;  // seconds from 1970 to 2000

  return t;
}
   d6998:	4801      	ldr	r0, [pc, #4]	; (d69a0 <_ZNK8DateTime8unixtimeEv+0x2c>)
   d699a:	4418      	add	r0, r3
   d699c:	bd10      	pop	{r4, pc}
   d699e:	bf00      	nop
   d69a0:	386d4380 	.word	0x386d4380

000d69a4 <_ZN10RTC_DS32315beginEv>:


////////////////////////////////////////////////////////////////////////////////
// RTC_DS3231 implementation

boolean RTC_DS3231::begin(void) {
   d69a4:	b508      	push	{r3, lr}
  Wire.begin();
   d69a6:	f001 fd3b 	bl	d8420 <_Z19__fetch_global_Wirev>
   d69aa:	f001 f84b 	bl	d7a44 <_ZN7TwoWire5beginEv>
  return true;
}
   d69ae:	2001      	movs	r0, #1
   d69b0:	bd08      	pop	{r3, pc}

000d69b2 <_ZN10RTC_DS32319lostPowerEv>:

bool RTC_DS3231::lostPower(void) {
   d69b2:	b508      	push	{r3, lr}
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
   d69b4:	200f      	movs	r0, #15
   d69b6:	f7ff ff71 	bl	d689c <_ZL17read_i2c_registerhh.constprop.8>
}
   d69ba:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   d69be:	bd08      	pop	{r3, pc}

000d69c0 <_ZN10RTC_DS32313nowEv>:
  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}

DateTime RTC_DS3231::now() {
   d69c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d69c4:	4604      	mov	r4, r0
  Wire.beginTransmission(DS3231_ADDRESS);
   d69c6:	f001 fd2b 	bl	d8420 <_Z19__fetch_global_Wirev>
   d69ca:	2168      	movs	r1, #104	; 0x68
   d69cc:	f001 f855 	bl	d7a7a <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0);	
   d69d0:	f001 fd26 	bl	d8420 <_Z19__fetch_global_Wirev>
   d69d4:	6803      	ldr	r3, [r0, #0]
   d69d6:	2100      	movs	r1, #0
   d69d8:	689b      	ldr	r3, [r3, #8]
   d69da:	4798      	blx	r3
  Wire.endTransmission();
   d69dc:	f001 fd20 	bl	d8420 <_Z19__fetch_global_Wirev>
   d69e0:	f001 f852 	bl	d7a88 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(DS3231_ADDRESS, 7);
   d69e4:	f001 fd1c 	bl	d8420 <_Z19__fetch_global_Wirev>
   d69e8:	2207      	movs	r2, #7
   d69ea:	2168      	movs	r1, #104	; 0x68
   d69ec:	f001 f83c 	bl	d7a68 <_ZN7TwoWire11requestFromEii>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   d69f0:	f001 fd16 	bl	d8420 <_Z19__fetch_global_Wirev>
   d69f4:	6803      	ldr	r3, [r0, #0]
   d69f6:	695b      	ldr	r3, [r3, #20]
   d69f8:	4798      	blx	r3
   d69fa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d69fe:	1105      	asrs	r5, r0, #4
   d6a00:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
   d6a04:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   d6a08:	b2c5      	uxtb	r5, r0
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS3231_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   d6a0a:	f001 fd09 	bl	d8420 <_Z19__fetch_global_Wirev>
   d6a0e:	6803      	ldr	r3, [r0, #0]
   d6a10:	695b      	ldr	r3, [r3, #20]
   d6a12:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d6a14:	f3c0 1603 	ubfx	r6, r0, #4, #4
   d6a18:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   d6a1c:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   d6a20:	b2c6      	uxtb	r6, r0
  Wire.endTransmission();

  Wire.requestFrom(DS3231_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   d6a22:	f001 fcfd 	bl	d8420 <_Z19__fetch_global_Wirev>
   d6a26:	6803      	ldr	r3, [r0, #0]
   d6a28:	695b      	ldr	r3, [r3, #20]
   d6a2a:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d6a2c:	f3c0 1703 	ubfx	r7, r0, #4, #4
   d6a30:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   d6a34:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   d6a38:	b2c7      	uxtb	r7, r0

  Wire.requestFrom(DS3231_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   d6a3a:	f001 fcf1 	bl	d8420 <_Z19__fetch_global_Wirev>
   d6a3e:	6803      	ldr	r3, [r0, #0]
   d6a40:	695b      	ldr	r3, [r3, #20]
   d6a42:	4798      	blx	r3
  uint8_t d = bcd2bin(Wire._I2C_READ());
   d6a44:	f001 fcec 	bl	d8420 <_Z19__fetch_global_Wirev>
   d6a48:	6803      	ldr	r3, [r0, #0]
   d6a4a:	695b      	ldr	r3, [r3, #20]
   d6a4c:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d6a4e:	f3c0 1803 	ubfx	r8, r0, #4, #4
   d6a52:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   d6a56:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   d6a5a:	fa5f f880 	uxtb.w	r8, r0
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   d6a5e:	f001 fcdf 	bl	d8420 <_Z19__fetch_global_Wirev>
   d6a62:	6803      	ldr	r3, [r0, #0]
   d6a64:	695b      	ldr	r3, [r3, #20]
   d6a66:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d6a68:	f3c0 1903 	ubfx	r9, r0, #4, #4
   d6a6c:	eba9 0989 	sub.w	r9, r9, r9, lsl #2
   d6a70:	eb00 0049 	add.w	r0, r0, r9, lsl #1
   d6a74:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   d6a78:	f001 fcd2 	bl	d8420 <_Z19__fetch_global_Wirev>
   d6a7c:	6803      	ldr	r3, [r0, #0]
   d6a7e:	695b      	ldr	r3, [r3, #20]
   d6a80:	4798      	blx	r3
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   d6a82:	f3c0 1303 	ubfx	r3, r0, #4, #4
   d6a86:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d6a8a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d6a8e:	7020      	strb	r0, [r4, #0]
    m = month;
   d6a90:	f884 9001 	strb.w	r9, [r4, #1]
    d = day;
   d6a94:	f884 8002 	strb.w	r8, [r4, #2]
    hh = hour;
   d6a98:	70e7      	strb	r7, [r4, #3]
    mm = min;
   d6a9a:	7126      	strb	r6, [r4, #4]
    ss = sec;
   d6a9c:	7165      	strb	r5, [r4, #5]
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
   d6a9e:	4620      	mov	r0, r4
   d6aa0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6aa4 <_GLOBAL__sub_I__ZN8DateTimeC2Em>:
   d6aa4:	f000 b810 	b.w	d6ac8 <HAL_Pin_Map>

000d6aa8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6aa8:	b508      	push	{r3, lr}
   d6aaa:	4b02      	ldr	r3, [pc, #8]	; (d6ab4 <netdb_freeaddrinfo+0xc>)
   d6aac:	681b      	ldr	r3, [r3, #0]
   d6aae:	689b      	ldr	r3, [r3, #8]
   d6ab0:	9301      	str	r3, [sp, #4]
   d6ab2:	bd08      	pop	{r3, pc}
   d6ab4:	00030268 	.word	0x00030268

000d6ab8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6ab8:	b508      	push	{r3, lr}
   d6aba:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <netdb_getaddrinfo+0xc>)
   d6abc:	681b      	ldr	r3, [r3, #0]
   d6abe:	68db      	ldr	r3, [r3, #12]
   d6ac0:	9301      	str	r3, [sp, #4]
   d6ac2:	bd08      	pop	{r3, pc}
   d6ac4:	00030268 	.word	0x00030268

000d6ac8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d6ac8:	b508      	push	{r3, lr}
   d6aca:	4b02      	ldr	r3, [pc, #8]	; (d6ad4 <HAL_Pin_Map+0xc>)
   d6acc:	681b      	ldr	r3, [r3, #0]
   d6ace:	681b      	ldr	r3, [r3, #0]
   d6ad0:	9301      	str	r3, [sp, #4]
   d6ad2:	bd08      	pop	{r3, pc}
   d6ad4:	0003022c 	.word	0x0003022c

000d6ad8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6ad8:	b508      	push	{r3, lr}
   d6ada:	4b02      	ldr	r3, [pc, #8]	; (d6ae4 <HAL_Pin_Mode+0xc>)
   d6adc:	681b      	ldr	r3, [r3, #0]
   d6ade:	689b      	ldr	r3, [r3, #8]
   d6ae0:	9301      	str	r3, [sp, #4]
   d6ae2:	bd08      	pop	{r3, pc}
   d6ae4:	0003022c 	.word	0x0003022c

000d6ae8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6ae8:	b508      	push	{r3, lr}
   d6aea:	4b02      	ldr	r3, [pc, #8]	; (d6af4 <HAL_Get_Pin_Mode+0xc>)
   d6aec:	681b      	ldr	r3, [r3, #0]
   d6aee:	68db      	ldr	r3, [r3, #12]
   d6af0:	9301      	str	r3, [sp, #4]
   d6af2:	bd08      	pop	{r3, pc}
   d6af4:	0003022c 	.word	0x0003022c

000d6af8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6af8:	b508      	push	{r3, lr}
   d6afa:	4b02      	ldr	r3, [pc, #8]	; (d6b04 <HAL_GPIO_Write+0xc>)
   d6afc:	681b      	ldr	r3, [r3, #0]
   d6afe:	691b      	ldr	r3, [r3, #16]
   d6b00:	9301      	str	r3, [sp, #4]
   d6b02:	bd08      	pop	{r3, pc}
   d6b04:	0003022c 	.word	0x0003022c

000d6b08 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6b08:	b508      	push	{r3, lr}
   d6b0a:	4b02      	ldr	r3, [pc, #8]	; (d6b14 <HAL_SPI_Begin+0xc>)
   d6b0c:	681b      	ldr	r3, [r3, #0]
   d6b0e:	681b      	ldr	r3, [r3, #0]
   d6b10:	9301      	str	r3, [sp, #4]
   d6b12:	bd08      	pop	{r3, pc}
   d6b14:	00030230 	.word	0x00030230

000d6b18 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6b18:	b508      	push	{r3, lr}
   d6b1a:	4b02      	ldr	r3, [pc, #8]	; (d6b24 <HAL_SPI_Send_Receive_Data+0xc>)
   d6b1c:	681b      	ldr	r3, [r3, #0]
   d6b1e:	695b      	ldr	r3, [r3, #20]
   d6b20:	9301      	str	r3, [sp, #4]
   d6b22:	bd08      	pop	{r3, pc}
   d6b24:	00030230 	.word	0x00030230

000d6b28 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6b28:	b508      	push	{r3, lr}
   d6b2a:	4b02      	ldr	r3, [pc, #8]	; (d6b34 <HAL_SPI_Init+0xc>)
   d6b2c:	681b      	ldr	r3, [r3, #0]
   d6b2e:	69db      	ldr	r3, [r3, #28]
   d6b30:	9301      	str	r3, [sp, #4]
   d6b32:	bd08      	pop	{r3, pc}
   d6b34:	00030230 	.word	0x00030230

000d6b38 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6b38:	b508      	push	{r3, lr}
   d6b3a:	4b02      	ldr	r3, [pc, #8]	; (d6b44 <HAL_SPI_Is_Enabled+0xc>)
   d6b3c:	681b      	ldr	r3, [r3, #0]
   d6b3e:	6a1b      	ldr	r3, [r3, #32]
   d6b40:	9301      	str	r3, [sp, #4]
   d6b42:	bd08      	pop	{r3, pc}
   d6b44:	00030230 	.word	0x00030230

000d6b48 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6b48:	b508      	push	{r3, lr}
   d6b4a:	4b02      	ldr	r3, [pc, #8]	; (d6b54 <HAL_SPI_Info+0xc>)
   d6b4c:	681b      	ldr	r3, [r3, #0]
   d6b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b50:	9301      	str	r3, [sp, #4]
   d6b52:	bd08      	pop	{r3, pc}
   d6b54:	00030230 	.word	0x00030230

000d6b58 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d6b58:	b508      	push	{r3, lr}
   d6b5a:	4b02      	ldr	r3, [pc, #8]	; (d6b64 <HAL_SPI_DMA_Transfer+0xc>)
   d6b5c:	681b      	ldr	r3, [r3, #0]
   d6b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b60:	9301      	str	r3, [sp, #4]
   d6b62:	bd08      	pop	{r3, pc}
   d6b64:	00030230 	.word	0x00030230

000d6b68 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d6b68:	b508      	push	{r3, lr}
   d6b6a:	4b02      	ldr	r3, [pc, #8]	; (d6b74 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6b6c:	681b      	ldr	r3, [r3, #0]
   d6b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6b70:	9301      	str	r3, [sp, #4]
   d6b72:	bd08      	pop	{r3, pc}
   d6b74:	00030230 	.word	0x00030230

000d6b78 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6b78:	b508      	push	{r3, lr}
   d6b7a:	4b02      	ldr	r3, [pc, #8]	; (d6b84 <HAL_SPI_Set_Settings+0xc>)
   d6b7c:	681b      	ldr	r3, [r3, #0]
   d6b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6b80:	9301      	str	r3, [sp, #4]
   d6b82:	bd08      	pop	{r3, pc}
   d6b84:	00030230 	.word	0x00030230

000d6b88 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6b88:	b508      	push	{r3, lr}
   d6b8a:	4b02      	ldr	r3, [pc, #8]	; (d6b94 <if_index_to_name+0xc>)
   d6b8c:	681b      	ldr	r3, [r3, #0]
   d6b8e:	695b      	ldr	r3, [r3, #20]
   d6b90:	9301      	str	r3, [sp, #4]
   d6b92:	bd08      	pop	{r3, pc}
   d6b94:	0003026c 	.word	0x0003026c

000d6b98 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6b98:	b508      	push	{r3, lr}
   d6b9a:	4b02      	ldr	r3, [pc, #8]	; (d6ba4 <HAL_RNG_GetRandomNumber+0xc>)
   d6b9c:	681b      	ldr	r3, [r3, #0]
   d6b9e:	685b      	ldr	r3, [r3, #4]
   d6ba0:	9301      	str	r3, [sp, #4]
   d6ba2:	bd08      	pop	{r3, pc}
   d6ba4:	00030218 	.word	0x00030218

000d6ba8 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6ba8:	b508      	push	{r3, lr}
   d6baa:	4b02      	ldr	r3, [pc, #8]	; (d6bb4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6bac:	681b      	ldr	r3, [r3, #0]
   d6bae:	691b      	ldr	r3, [r3, #16]
   d6bb0:	9301      	str	r3, [sp, #4]
   d6bb2:	bd08      	pop	{r3, pc}
   d6bb4:	00030218 	.word	0x00030218

000d6bb8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6bb8:	b508      	push	{r3, lr}
   d6bba:	4b02      	ldr	r3, [pc, #8]	; (d6bc4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6bbc:	681b      	ldr	r3, [r3, #0]
   d6bbe:	695b      	ldr	r3, [r3, #20]
   d6bc0:	9301      	str	r3, [sp, #4]
   d6bc2:	bd08      	pop	{r3, pc}
   d6bc4:	00030218 	.word	0x00030218

000d6bc8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6bc8:	b508      	push	{r3, lr}
   d6bca:	4b02      	ldr	r3, [pc, #8]	; (d6bd4 <os_thread_is_current+0xc>)
   d6bcc:	681b      	ldr	r3, [r3, #0]
   d6bce:	689b      	ldr	r3, [r3, #8]
   d6bd0:	9301      	str	r3, [sp, #4]
   d6bd2:	bd08      	pop	{r3, pc}
   d6bd4:	00030248 	.word	0x00030248

000d6bd8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6bd8:	b508      	push	{r3, lr}
   d6bda:	4b02      	ldr	r3, [pc, #8]	; (d6be4 <os_thread_join+0xc>)
   d6bdc:	681b      	ldr	r3, [r3, #0]
   d6bde:	691b      	ldr	r3, [r3, #16]
   d6be0:	9301      	str	r3, [sp, #4]
   d6be2:	bd08      	pop	{r3, pc}
   d6be4:	00030248 	.word	0x00030248

000d6be8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6be8:	b508      	push	{r3, lr}
   d6bea:	4b02      	ldr	r3, [pc, #8]	; (d6bf4 <os_thread_cleanup+0xc>)
   d6bec:	681b      	ldr	r3, [r3, #0]
   d6bee:	695b      	ldr	r3, [r3, #20]
   d6bf0:	9301      	str	r3, [sp, #4]
   d6bf2:	bd08      	pop	{r3, pc}
   d6bf4:	00030248 	.word	0x00030248

000d6bf8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6bf8:	b508      	push	{r3, lr}
   d6bfa:	4b02      	ldr	r3, [pc, #8]	; (d6c04 <os_mutex_create+0xc>)
   d6bfc:	681b      	ldr	r3, [r3, #0]
   d6bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c00:	9301      	str	r3, [sp, #4]
   d6c02:	bd08      	pop	{r3, pc}
   d6c04:	00030248 	.word	0x00030248

000d6c08 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6c08:	b508      	push	{r3, lr}
   d6c0a:	4b02      	ldr	r3, [pc, #8]	; (d6c14 <os_mutex_lock+0xc>)
   d6c0c:	681b      	ldr	r3, [r3, #0]
   d6c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6c10:	9301      	str	r3, [sp, #4]
   d6c12:	bd08      	pop	{r3, pc}
   d6c14:	00030248 	.word	0x00030248

000d6c18 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6c18:	b508      	push	{r3, lr}
   d6c1a:	4b02      	ldr	r3, [pc, #8]	; (d6c24 <os_mutex_unlock+0xc>)
   d6c1c:	681b      	ldr	r3, [r3, #0]
   d6c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c20:	9301      	str	r3, [sp, #4]
   d6c22:	bd08      	pop	{r3, pc}
   d6c24:	00030248 	.word	0x00030248

000d6c28 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6c28:	b508      	push	{r3, lr}
   d6c2a:	4b02      	ldr	r3, [pc, #8]	; (d6c34 <os_mutex_recursive_create+0xc>)
   d6c2c:	681b      	ldr	r3, [r3, #0]
   d6c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6c30:	9301      	str	r3, [sp, #4]
   d6c32:	bd08      	pop	{r3, pc}
   d6c34:	00030248 	.word	0x00030248

000d6c38 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6c38:	b508      	push	{r3, lr}
   d6c3a:	4b02      	ldr	r3, [pc, #8]	; (d6c44 <inet_inet_ntop+0xc>)
   d6c3c:	681b      	ldr	r3, [r3, #0]
   d6c3e:	695b      	ldr	r3, [r3, #20]
   d6c40:	9301      	str	r3, [sp, #4]
   d6c42:	bd08      	pop	{r3, pc}
   d6c44:	00030264 	.word	0x00030264

000d6c48 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6c48:	b508      	push	{r3, lr}
   d6c4a:	4b02      	ldr	r3, [pc, #8]	; (d6c54 <inet_htonl+0xc>)
   d6c4c:	681b      	ldr	r3, [r3, #0]
   d6c4e:	6a1b      	ldr	r3, [r3, #32]
   d6c50:	9301      	str	r3, [sp, #4]
   d6c52:	bd08      	pop	{r3, pc}
   d6c54:	00030264 	.word	0x00030264

000d6c58 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6c58:	b508      	push	{r3, lr}
   d6c5a:	4b02      	ldr	r3, [pc, #8]	; (d6c64 <inet_htons+0xc>)
   d6c5c:	681b      	ldr	r3, [r3, #0]
   d6c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c60:	9301      	str	r3, [sp, #4]
   d6c62:	bd08      	pop	{r3, pc}
   d6c64:	00030264 	.word	0x00030264

000d6c68 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6c68:	b508      	push	{r3, lr}
   d6c6a:	4b02      	ldr	r3, [pc, #8]	; (d6c74 <HAL_USART_Init+0xc>)
   d6c6c:	681b      	ldr	r3, [r3, #0]
   d6c6e:	681b      	ldr	r3, [r3, #0]
   d6c70:	9301      	str	r3, [sp, #4]
   d6c72:	bd08      	pop	{r3, pc}
   d6c74:	0003023c 	.word	0x0003023c

000d6c78 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d6c78:	b508      	push	{r3, lr}
   d6c7a:	4b02      	ldr	r3, [pc, #8]	; (d6c84 <HAL_USART_End+0xc>)
   d6c7c:	681b      	ldr	r3, [r3, #0]
   d6c7e:	689b      	ldr	r3, [r3, #8]
   d6c80:	9301      	str	r3, [sp, #4]
   d6c82:	bd08      	pop	{r3, pc}
   d6c84:	0003023c 	.word	0x0003023c

000d6c88 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6c88:	b508      	push	{r3, lr}
   d6c8a:	4b02      	ldr	r3, [pc, #8]	; (d6c94 <HAL_USART_Write_Data+0xc>)
   d6c8c:	681b      	ldr	r3, [r3, #0]
   d6c8e:	68db      	ldr	r3, [r3, #12]
   d6c90:	9301      	str	r3, [sp, #4]
   d6c92:	bd08      	pop	{r3, pc}
   d6c94:	0003023c 	.word	0x0003023c

000d6c98 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6c98:	b508      	push	{r3, lr}
   d6c9a:	4b02      	ldr	r3, [pc, #8]	; (d6ca4 <HAL_USART_Available_Data+0xc>)
   d6c9c:	681b      	ldr	r3, [r3, #0]
   d6c9e:	691b      	ldr	r3, [r3, #16]
   d6ca0:	9301      	str	r3, [sp, #4]
   d6ca2:	bd08      	pop	{r3, pc}
   d6ca4:	0003023c 	.word	0x0003023c

000d6ca8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6ca8:	b508      	push	{r3, lr}
   d6caa:	4b02      	ldr	r3, [pc, #8]	; (d6cb4 <HAL_USART_Read_Data+0xc>)
   d6cac:	681b      	ldr	r3, [r3, #0]
   d6cae:	695b      	ldr	r3, [r3, #20]
   d6cb0:	9301      	str	r3, [sp, #4]
   d6cb2:	bd08      	pop	{r3, pc}
   d6cb4:	0003023c 	.word	0x0003023c

000d6cb8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6cb8:	b508      	push	{r3, lr}
   d6cba:	4b02      	ldr	r3, [pc, #8]	; (d6cc4 <HAL_USART_Peek_Data+0xc>)
   d6cbc:	681b      	ldr	r3, [r3, #0]
   d6cbe:	699b      	ldr	r3, [r3, #24]
   d6cc0:	9301      	str	r3, [sp, #4]
   d6cc2:	bd08      	pop	{r3, pc}
   d6cc4:	0003023c 	.word	0x0003023c

000d6cc8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6cc8:	b508      	push	{r3, lr}
   d6cca:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <HAL_USART_Flush_Data+0xc>)
   d6ccc:	681b      	ldr	r3, [r3, #0]
   d6cce:	69db      	ldr	r3, [r3, #28]
   d6cd0:	9301      	str	r3, [sp, #4]
   d6cd2:	bd08      	pop	{r3, pc}
   d6cd4:	0003023c 	.word	0x0003023c

000d6cd8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6cd8:	b508      	push	{r3, lr}
   d6cda:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <HAL_USART_Is_Enabled+0xc>)
   d6cdc:	681b      	ldr	r3, [r3, #0]
   d6cde:	6a1b      	ldr	r3, [r3, #32]
   d6ce0:	9301      	str	r3, [sp, #4]
   d6ce2:	bd08      	pop	{r3, pc}
   d6ce4:	0003023c 	.word	0x0003023c

000d6ce8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6ce8:	b508      	push	{r3, lr}
   d6cea:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <HAL_USART_Available_Data_For_Write+0xc>)
   d6cec:	681b      	ldr	r3, [r3, #0]
   d6cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6cf0:	9301      	str	r3, [sp, #4]
   d6cf2:	bd08      	pop	{r3, pc}
   d6cf4:	0003023c 	.word	0x0003023c

000d6cf8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d6cf8:	b508      	push	{r3, lr}
   d6cfa:	4b02      	ldr	r3, [pc, #8]	; (d6d04 <HAL_USART_BeginConfig+0xc>)
   d6cfc:	681b      	ldr	r3, [r3, #0]
   d6cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d00:	9301      	str	r3, [sp, #4]
   d6d02:	bd08      	pop	{r3, pc}
   d6d04:	0003023c 	.word	0x0003023c

000d6d08 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6d08:	b508      	push	{r3, lr}
   d6d0a:	4b02      	ldr	r3, [pc, #8]	; (d6d14 <HAL_I2C_Begin+0xc>)
   d6d0c:	681b      	ldr	r3, [r3, #0]
   d6d0e:	68db      	ldr	r3, [r3, #12]
   d6d10:	9301      	str	r3, [sp, #4]
   d6d12:	bd08      	pop	{r3, pc}
   d6d14:	00030228 	.word	0x00030228

000d6d18 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d6d18:	b508      	push	{r3, lr}
   d6d1a:	4b02      	ldr	r3, [pc, #8]	; (d6d24 <HAL_I2C_Request_Data+0xc>)
   d6d1c:	681b      	ldr	r3, [r3, #0]
   d6d1e:	695b      	ldr	r3, [r3, #20]
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	bd08      	pop	{r3, pc}
   d6d24:	00030228 	.word	0x00030228

000d6d28 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d6d28:	b508      	push	{r3, lr}
   d6d2a:	4b02      	ldr	r3, [pc, #8]	; (d6d34 <HAL_I2C_Begin_Transmission+0xc>)
   d6d2c:	681b      	ldr	r3, [r3, #0]
   d6d2e:	699b      	ldr	r3, [r3, #24]
   d6d30:	9301      	str	r3, [sp, #4]
   d6d32:	bd08      	pop	{r3, pc}
   d6d34:	00030228 	.word	0x00030228

000d6d38 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6d38:	b508      	push	{r3, lr}
   d6d3a:	4b02      	ldr	r3, [pc, #8]	; (d6d44 <HAL_I2C_End_Transmission+0xc>)
   d6d3c:	681b      	ldr	r3, [r3, #0]
   d6d3e:	69db      	ldr	r3, [r3, #28]
   d6d40:	9301      	str	r3, [sp, #4]
   d6d42:	bd08      	pop	{r3, pc}
   d6d44:	00030228 	.word	0x00030228

000d6d48 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6d48:	b508      	push	{r3, lr}
   d6d4a:	4b02      	ldr	r3, [pc, #8]	; (d6d54 <HAL_I2C_Write_Data+0xc>)
   d6d4c:	681b      	ldr	r3, [r3, #0]
   d6d4e:	6a1b      	ldr	r3, [r3, #32]
   d6d50:	9301      	str	r3, [sp, #4]
   d6d52:	bd08      	pop	{r3, pc}
   d6d54:	00030228 	.word	0x00030228

000d6d58 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6d58:	b508      	push	{r3, lr}
   d6d5a:	4b02      	ldr	r3, [pc, #8]	; (d6d64 <HAL_I2C_Available_Data+0xc>)
   d6d5c:	681b      	ldr	r3, [r3, #0]
   d6d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d60:	9301      	str	r3, [sp, #4]
   d6d62:	bd08      	pop	{r3, pc}
   d6d64:	00030228 	.word	0x00030228

000d6d68 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6d68:	b508      	push	{r3, lr}
   d6d6a:	4b02      	ldr	r3, [pc, #8]	; (d6d74 <HAL_I2C_Read_Data+0xc>)
   d6d6c:	681b      	ldr	r3, [r3, #0]
   d6d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d70:	9301      	str	r3, [sp, #4]
   d6d72:	bd08      	pop	{r3, pc}
   d6d74:	00030228 	.word	0x00030228

000d6d78 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6d78:	b508      	push	{r3, lr}
   d6d7a:	4b02      	ldr	r3, [pc, #8]	; (d6d84 <HAL_I2C_Peek_Data+0xc>)
   d6d7c:	681b      	ldr	r3, [r3, #0]
   d6d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d80:	9301      	str	r3, [sp, #4]
   d6d82:	bd08      	pop	{r3, pc}
   d6d84:	00030228 	.word	0x00030228

000d6d88 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b02      	ldr	r3, [pc, #8]	; (d6d94 <HAL_I2C_Flush_Data+0xc>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d90:	9301      	str	r3, [sp, #4]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	00030228 	.word	0x00030228

000d6d98 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <HAL_I2C_Is_Enabled+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	00030228 	.word	0x00030228

000d6da8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <HAL_I2C_Init+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	00030228 	.word	0x00030228

000d6db8 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <sock_setsockopt+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	699b      	ldr	r3, [r3, #24]
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	00030238 	.word	0x00030238

000d6dc8 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <sock_close+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	69db      	ldr	r3, [r3, #28]
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030238 	.word	0x00030238

000d6dd8 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <sock_connect+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	6a1b      	ldr	r3, [r3, #32]
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030238 	.word	0x00030238

000d6de8 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <sock_recv+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030238 	.word	0x00030238

000d6df8 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <sock_send+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030238 	.word	0x00030238

000d6e08 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <sock_socket+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	00030238 	.word	0x00030238

000d6e18 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <HAL_USB_USART_Init+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	681b      	ldr	r3, [r3, #0]
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	0003024c 	.word	0x0003024c

000d6e28 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <HAL_USB_USART_Begin+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	685b      	ldr	r3, [r3, #4]
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	0003024c 	.word	0x0003024c

000d6e38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <HAL_USB_USART_Available_Data+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	691b      	ldr	r3, [r3, #16]
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	0003024c 	.word	0x0003024c

000d6e48 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	695b      	ldr	r3, [r3, #20]
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	0003024c 	.word	0x0003024c

000d6e58 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <HAL_USB_USART_Receive_Data+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	699b      	ldr	r3, [r3, #24]
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	0003024c 	.word	0x0003024c

000d6e68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <HAL_USB_USART_Send_Data+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	69db      	ldr	r3, [r3, #28]
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	0003024c 	.word	0x0003024c

000d6e78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <HAL_USB_USART_Flush_Data+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	6a1b      	ldr	r3, [r3, #32]
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	0003024c 	.word	0x0003024c

000d6e88 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <HAL_USB_USART_Is_Enabled+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	0003024c 	.word	0x0003024c

000d6e98 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6e98:	b508      	push	{r3, lr}
   d6e9a:	4b02      	ldr	r3, [pc, #8]	; (d6ea4 <log_message+0xc>)
   d6e9c:	681b      	ldr	r3, [r3, #0]
   d6e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6ea0:	9301      	str	r3, [sp, #4]
   d6ea2:	bd08      	pop	{r3, pc}
   d6ea4:	00030260 	.word	0x00030260

000d6ea8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6ea8:	b508      	push	{r3, lr}
   d6eaa:	4b02      	ldr	r3, [pc, #8]	; (d6eb4 <set_system_mode+0xc>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	685b      	ldr	r3, [r3, #4]
   d6eb0:	9301      	str	r3, [sp, #4]
   d6eb2:	bd08      	pop	{r3, pc}
   d6eb4:	00030220 	.word	0x00030220

000d6eb8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6eb8:	b508      	push	{r3, lr}
   d6eba:	4b02      	ldr	r3, [pc, #8]	; (d6ec4 <system_delay_ms+0xc>)
   d6ebc:	681b      	ldr	r3, [r3, #0]
   d6ebe:	695b      	ldr	r3, [r3, #20]
   d6ec0:	9301      	str	r3, [sp, #4]
   d6ec2:	bd08      	pop	{r3, pc}
   d6ec4:	00030220 	.word	0x00030220

000d6ec8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6ec8:	b508      	push	{r3, lr}
   d6eca:	4b02      	ldr	r3, [pc, #8]	; (d6ed4 <system_thread_set_state+0xc>)
   d6ecc:	681b      	ldr	r3, [r3, #0]
   d6ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ed0:	9301      	str	r3, [sp, #4]
   d6ed2:	bd08      	pop	{r3, pc}
   d6ed4:	00030220 	.word	0x00030220

000d6ed8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6ed8:	b508      	push	{r3, lr}
   d6eda:	4b03      	ldr	r3, [pc, #12]	; (d6ee8 <system_ctrl_set_app_request_handler+0x10>)
   d6edc:	681b      	ldr	r3, [r3, #0]
   d6ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6ee2:	9301      	str	r3, [sp, #4]
   d6ee4:	bd08      	pop	{r3, pc}
   d6ee6:	0000      	.short	0x0000
   d6ee8:	00030220 	.word	0x00030220

000d6eec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6eec:	b508      	push	{r3, lr}
   d6eee:	4b03      	ldr	r3, [pc, #12]	; (d6efc <system_ctrl_set_result+0x10>)
   d6ef0:	681b      	ldr	r3, [r3, #0]
   d6ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6ef6:	9301      	str	r3, [sp, #4]
   d6ef8:	bd08      	pop	{r3, pc}
   d6efa:	0000      	.short	0x0000
   d6efc:	00030220 	.word	0x00030220

000d6f00 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6f00:	b508      	push	{r3, lr}
   d6f02:	4b02      	ldr	r3, [pc, #8]	; (d6f0c <network_connect+0xc>)
   d6f04:	681b      	ldr	r3, [r3, #0]
   d6f06:	685b      	ldr	r3, [r3, #4]
   d6f08:	9301      	str	r3, [sp, #4]
   d6f0a:	bd08      	pop	{r3, pc}
   d6f0c:	00030240 	.word	0x00030240

000d6f10 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6f10:	b508      	push	{r3, lr}
   d6f12:	4b02      	ldr	r3, [pc, #8]	; (d6f1c <network_connecting+0xc>)
   d6f14:	681b      	ldr	r3, [r3, #0]
   d6f16:	689b      	ldr	r3, [r3, #8]
   d6f18:	9301      	str	r3, [sp, #4]
   d6f1a:	bd08      	pop	{r3, pc}
   d6f1c:	00030240 	.word	0x00030240

000d6f20 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6f20:	b508      	push	{r3, lr}
   d6f22:	4b02      	ldr	r3, [pc, #8]	; (d6f2c <network_disconnect+0xc>)
   d6f24:	681b      	ldr	r3, [r3, #0]
   d6f26:	68db      	ldr	r3, [r3, #12]
   d6f28:	9301      	str	r3, [sp, #4]
   d6f2a:	bd08      	pop	{r3, pc}
   d6f2c:	00030240 	.word	0x00030240

000d6f30 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6f30:	b508      	push	{r3, lr}
   d6f32:	4b02      	ldr	r3, [pc, #8]	; (d6f3c <network_ready+0xc>)
   d6f34:	681b      	ldr	r3, [r3, #0]
   d6f36:	691b      	ldr	r3, [r3, #16]
   d6f38:	9301      	str	r3, [sp, #4]
   d6f3a:	bd08      	pop	{r3, pc}
   d6f3c:	00030240 	.word	0x00030240

000d6f40 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6f40:	b508      	push	{r3, lr}
   d6f42:	4b02      	ldr	r3, [pc, #8]	; (d6f4c <network_on+0xc>)
   d6f44:	681b      	ldr	r3, [r3, #0]
   d6f46:	695b      	ldr	r3, [r3, #20]
   d6f48:	9301      	str	r3, [sp, #4]
   d6f4a:	bd08      	pop	{r3, pc}
   d6f4c:	00030240 	.word	0x00030240

000d6f50 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6f50:	b508      	push	{r3, lr}
   d6f52:	4b02      	ldr	r3, [pc, #8]	; (d6f5c <network_off+0xc>)
   d6f54:	681b      	ldr	r3, [r3, #0]
   d6f56:	699b      	ldr	r3, [r3, #24]
   d6f58:	9301      	str	r3, [sp, #4]
   d6f5a:	bd08      	pop	{r3, pc}
   d6f5c:	00030240 	.word	0x00030240

000d6f60 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6f60:	b508      	push	{r3, lr}
   d6f62:	4b02      	ldr	r3, [pc, #8]	; (d6f6c <network_listen+0xc>)
   d6f64:	681b      	ldr	r3, [r3, #0]
   d6f66:	69db      	ldr	r3, [r3, #28]
   d6f68:	9301      	str	r3, [sp, #4]
   d6f6a:	bd08      	pop	{r3, pc}
   d6f6c:	00030240 	.word	0x00030240

000d6f70 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6f70:	b508      	push	{r3, lr}
   d6f72:	4b02      	ldr	r3, [pc, #8]	; (d6f7c <network_listening+0xc>)
   d6f74:	681b      	ldr	r3, [r3, #0]
   d6f76:	6a1b      	ldr	r3, [r3, #32]
   d6f78:	9301      	str	r3, [sp, #4]
   d6f7a:	bd08      	pop	{r3, pc}
   d6f7c:	00030240 	.word	0x00030240

000d6f80 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d6f80:	b508      	push	{r3, lr}
   d6f82:	4b02      	ldr	r3, [pc, #8]	; (d6f8c <network_set_credentials+0xc>)
   d6f84:	681b      	ldr	r3, [r3, #0]
   d6f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f88:	9301      	str	r3, [sp, #4]
   d6f8a:	bd08      	pop	{r3, pc}
   d6f8c:	00030240 	.word	0x00030240

000d6f90 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6f90:	b508      	push	{r3, lr}
   d6f92:	4b02      	ldr	r3, [pc, #8]	; (d6f9c <network_set_listen_timeout+0xc>)
   d6f94:	681b      	ldr	r3, [r3, #0]
   d6f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f98:	9301      	str	r3, [sp, #4]
   d6f9a:	bd08      	pop	{r3, pc}
   d6f9c:	00030240 	.word	0x00030240

000d6fa0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6fa0:	b508      	push	{r3, lr}
   d6fa2:	4b02      	ldr	r3, [pc, #8]	; (d6fac <network_get_listen_timeout+0xc>)
   d6fa4:	681b      	ldr	r3, [r3, #0]
   d6fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6fa8:	9301      	str	r3, [sp, #4]
   d6faa:	bd08      	pop	{r3, pc}
   d6fac:	00030240 	.word	0x00030240

000d6fb0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6fb0:	b508      	push	{r3, lr}
   d6fb2:	4b02      	ldr	r3, [pc, #8]	; (d6fbc <spark_process+0xc>)
   d6fb4:	681b      	ldr	r3, [r3, #0]
   d6fb6:	689b      	ldr	r3, [r3, #8]
   d6fb8:	9301      	str	r3, [sp, #4]
   d6fba:	bd08      	pop	{r3, pc}
   d6fbc:	00030244 	.word	0x00030244

000d6fc0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6fc0:	b508      	push	{r3, lr}
   d6fc2:	4b02      	ldr	r3, [pc, #8]	; (d6fcc <spark_set_random_seed_from_cloud_handler+0xc>)
   d6fc4:	681b      	ldr	r3, [r3, #0]
   d6fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6fc8:	9301      	str	r3, [sp, #4]
   d6fca:	bd08      	pop	{r3, pc}
   d6fcc:	00030244 	.word	0x00030244

000d6fd0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6fd0:	b508      	push	{r3, lr}
   d6fd2:	4b02      	ldr	r3, [pc, #8]	; (d6fdc <malloc+0xc>)
   d6fd4:	681b      	ldr	r3, [r3, #0]
   d6fd6:	681b      	ldr	r3, [r3, #0]
   d6fd8:	9301      	str	r3, [sp, #4]
   d6fda:	bd08      	pop	{r3, pc}
   d6fdc:	0003021c 	.word	0x0003021c

000d6fe0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6fe0:	b508      	push	{r3, lr}
   d6fe2:	4b02      	ldr	r3, [pc, #8]	; (d6fec <free+0xc>)
   d6fe4:	681b      	ldr	r3, [r3, #0]
   d6fe6:	685b      	ldr	r3, [r3, #4]
   d6fe8:	9301      	str	r3, [sp, #4]
   d6fea:	bd08      	pop	{r3, pc}
   d6fec:	0003021c 	.word	0x0003021c

000d6ff0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6ff0:	b508      	push	{r3, lr}
   d6ff2:	4b02      	ldr	r3, [pc, #8]	; (d6ffc <realloc+0xc>)
   d6ff4:	681b      	ldr	r3, [r3, #0]
   d6ff6:	689b      	ldr	r3, [r3, #8]
   d6ff8:	9301      	str	r3, [sp, #4]
   d6ffa:	bd08      	pop	{r3, pc}
   d6ffc:	0003021c 	.word	0x0003021c

000d7000 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7000:	b508      	push	{r3, lr}
   d7002:	4b02      	ldr	r3, [pc, #8]	; (d700c <snprintf+0xc>)
   d7004:	681b      	ldr	r3, [r3, #0]
   d7006:	69db      	ldr	r3, [r3, #28]
   d7008:	9301      	str	r3, [sp, #4]
   d700a:	bd08      	pop	{r3, pc}
   d700c:	0003021c 	.word	0x0003021c

000d7010 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7010:	b508      	push	{r3, lr}
   d7012:	4b02      	ldr	r3, [pc, #8]	; (d701c <vsnprintf+0xc>)
   d7014:	681b      	ldr	r3, [r3, #0]
   d7016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7018:	9301      	str	r3, [sp, #4]
   d701a:	bd08      	pop	{r3, pc}
   d701c:	0003021c 	.word	0x0003021c

000d7020 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7020:	b508      	push	{r3, lr}
   d7022:	4b02      	ldr	r3, [pc, #8]	; (d702c <__errno+0xc>)
   d7024:	681b      	ldr	r3, [r3, #0]
   d7026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7028:	9301      	str	r3, [sp, #4]
   d702a:	bd08      	pop	{r3, pc}
   d702c:	0003021c 	.word	0x0003021c

000d7030 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7030:	2200      	movs	r2, #0
   d7032:	4611      	mov	r1, r2
   d7034:	6840      	ldr	r0, [r0, #4]
   d7036:	f7ff bf9b 	b.w	d6f70 <network_listening>

000d703a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d703a:	2200      	movs	r2, #0
   d703c:	4611      	mov	r1, r2
   d703e:	6840      	ldr	r0, [r0, #4]
   d7040:	f7ff bfae 	b.w	d6fa0 <network_get_listen_timeout>

000d7044 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7044:	2200      	movs	r2, #0
   d7046:	6840      	ldr	r0, [r0, #4]
   d7048:	f7ff bfa2 	b.w	d6f90 <network_set_listen_timeout>

000d704c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d704c:	2200      	movs	r2, #0
   d704e:	f081 0101 	eor.w	r1, r1, #1
   d7052:	6840      	ldr	r0, [r0, #4]
   d7054:	f7ff bf84 	b.w	d6f60 <network_listen>

000d7058 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7058:	2300      	movs	r3, #0
   d705a:	461a      	mov	r2, r3
   d705c:	4619      	mov	r1, r3
   d705e:	6840      	ldr	r0, [r0, #4]
   d7060:	f7ff bf76 	b.w	d6f50 <network_off>

000d7064 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7064:	2300      	movs	r3, #0
   d7066:	461a      	mov	r2, r3
   d7068:	4619      	mov	r1, r3
   d706a:	6840      	ldr	r0, [r0, #4]
   d706c:	f7ff bf68 	b.w	d6f40 <network_on>

000d7070 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7070:	2200      	movs	r2, #0
   d7072:	4611      	mov	r1, r2
   d7074:	6840      	ldr	r0, [r0, #4]
   d7076:	f7ff bf5b 	b.w	d6f30 <network_ready>

000d707a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d707a:	2200      	movs	r2, #0
   d707c:	4611      	mov	r1, r2
   d707e:	6840      	ldr	r0, [r0, #4]
   d7080:	f7ff bf46 	b.w	d6f10 <network_connecting>

000d7084 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7084:	2200      	movs	r2, #0
   d7086:	2102      	movs	r1, #2
   d7088:	6840      	ldr	r0, [r0, #4]
   d708a:	f7ff bf49 	b.w	d6f20 <network_disconnect>

000d708e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d708e:	2300      	movs	r3, #0
   d7090:	461a      	mov	r2, r3
   d7092:	6840      	ldr	r0, [r0, #4]
   d7094:	f7ff bf34 	b.w	d6f00 <network_connect>

000d7098 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7098:	4b02      	ldr	r3, [pc, #8]	; (d70a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d709a:	2203      	movs	r2, #3
   d709c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d709e:	4a02      	ldr	r2, [pc, #8]	; (d70a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d70a0:	601a      	str	r2, [r3, #0]
   d70a2:	4770      	bx	lr
   d70a4:	2003e3d0 	.word	0x2003e3d0
   d70a8:	000d94e8 	.word	0x000d94e8

000d70ac <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d70ac:	4770      	bx	lr

000d70ae <_ZN8SPIClassD0Ev>:
   d70ae:	b510      	push	{r4, lr}
   d70b0:	4604      	mov	r4, r0
   d70b2:	f7fc fff2 	bl	d409a <_ZdlPv>
   d70b6:	4620      	mov	r0, r4
   d70b8:	bd10      	pop	{r4, pc}
	...

000d70bc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d70bc:	b570      	push	{r4, r5, r6, lr}
   d70be:	4b08      	ldr	r3, [pc, #32]	; (d70e0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d70c0:	6003      	str	r3, [r0, #0]
   d70c2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d70c4:	2500      	movs	r5, #0
   d70c6:	460e      	mov	r6, r1
   d70c8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d70cc:	f7ff fd94 	bl	d6bf8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d70d0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d70d2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d70d4:	f7ff fd28 	bl	d6b28 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d70d8:	60a5      	str	r5, [r4, #8]
}
   d70da:	4620      	mov	r0, r4
   d70dc:	bd70      	pop	{r4, r5, r6, pc}
   d70de:	bf00      	nop
   d70e0:	000d951c 	.word	0x000d951c

000d70e4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d70e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d70e8:	7900      	ldrb	r0, [r0, #4]
   d70ea:	f7ff bd0d 	b.w	d6b08 <HAL_SPI_Begin>

000d70ee <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d70ee:	68c0      	ldr	r0, [r0, #12]
   d70f0:	f7ff bd92 	b.w	d6c18 <os_mutex_unlock>

000d70f4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d70f4:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d70f6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d70f8:	6018      	str	r0, [r3, #0]
   d70fa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d70fc:	6818      	ldr	r0, [r3, #0]
   d70fe:	4288      	cmp	r0, r1
   d7100:	b2e5      	uxtb	r5, r4
   d7102:	d906      	bls.n	d7112 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7104:	3401      	adds	r4, #1
   d7106:	2c08      	cmp	r4, #8
   d7108:	d002      	beq.n	d7110 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d710a:	0840      	lsrs	r0, r0, #1
   d710c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d710e:	e7f5      	b.n	d70fc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7110:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d7112:	4b02      	ldr	r3, [pc, #8]	; (d711c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7114:	5d5b      	ldrb	r3, [r3, r5]
   d7116:	7013      	strb	r3, [r2, #0]
   d7118:	bd30      	pop	{r4, r5, pc}
   d711a:	bf00      	nop
   d711c:	000d9524 	.word	0x000d9524

000d7120 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7120:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7124:	4680      	mov	r8, r0
   d7126:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d7128:	68c0      	ldr	r0, [r0, #12]
   d712a:	460f      	mov	r7, r1
   d712c:	f7ff fd6c 	bl	d6c08 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d7130:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d7134:	2214      	movs	r2, #20
   d7136:	2100      	movs	r1, #0
   d7138:	a809      	add	r0, sp, #36	; 0x24
   d713a:	f001 ff4d 	bl	d8fd8 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d713e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d7140:	4620      	mov	r0, r4
   d7142:	2200      	movs	r2, #0
   d7144:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d7146:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d714a:	f7ff fcfd 	bl	d6b48 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d714e:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7152:	b14c      	cbz	r4, d7168 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d7154:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7158:	b92d      	cbnz	r5, d7166 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d715a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d715c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7160:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7164:	e003      	b.n	d716e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d7166:	2400      	movs	r4, #0
   d7168:	46a1      	mov	r9, r4
   d716a:	4626      	mov	r6, r4
   d716c:	2501      	movs	r5, #1
   d716e:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7170:	b10d      	cbz	r5, d7176 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d7172:	2b00      	cmp	r3, #0
   d7174:	d140      	bne.n	d71f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d7176:	429d      	cmp	r5, r3
   d7178:	d10b      	bne.n	d7192 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d717a:	68ba      	ldr	r2, [r7, #8]
   d717c:	42b2      	cmp	r2, r6
   d717e:	d108      	bne.n	d7192 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d7180:	f88d 9020 	strb.w	r9, [sp, #32]
   d7184:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d7188:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d718c:	89ba      	ldrh	r2, [r7, #12]
   d718e:	4291      	cmp	r1, r2
   d7190:	d032      	beq.n	d71f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d7192:	bb23      	cbnz	r3, d71de <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d7194:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d7198:	f10d 020f 	add.w	r2, sp, #15
   d719c:	ab04      	add	r3, sp, #16
   d719e:	68b9      	ldr	r1, [r7, #8]
   d71a0:	980a      	ldr	r0, [sp, #40]	; 0x28
   d71a2:	f7ff ffa7 	bl	d70f4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d71a6:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d71a8:	b105      	cbz	r5, d71ac <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d71aa:	bb13      	cbnz	r3, d71f2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d71ac:	42ab      	cmp	r3, r5
   d71ae:	d009      	beq.n	d71c4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d71b0:	2100      	movs	r1, #0
   d71b2:	7b3b      	ldrb	r3, [r7, #12]
   d71b4:	9101      	str	r1, [sp, #4]
   d71b6:	7b7c      	ldrb	r4, [r7, #13]
   d71b8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d71bc:	f898 0004 	ldrb.w	r0, [r8, #4]
   d71c0:	9400      	str	r4, [sp, #0]
   d71c2:	e013      	b.n	d71ec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d71c4:	68bb      	ldr	r3, [r7, #8]
   d71c6:	42b3      	cmp	r3, r6
   d71c8:	d3f2      	bcc.n	d71b0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d71ca:	f88d 9020 	strb.w	r9, [sp, #32]
   d71ce:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d71d2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d71d6:	89bb      	ldrh	r3, [r7, #12]
   d71d8:	429a      	cmp	r2, r3
   d71da:	d1e9      	bne.n	d71b0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d71dc:	e009      	b.n	d71f2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d71de:	2300      	movs	r3, #0
   d71e0:	f898 0004 	ldrb.w	r0, [r8, #4]
   d71e4:	9301      	str	r3, [sp, #4]
   d71e6:	9300      	str	r3, [sp, #0]
   d71e8:	461a      	mov	r2, r3
   d71ea:	2101      	movs	r1, #1
   d71ec:	f7ff fcc4 	bl	d6b78 <HAL_SPI_Set_Settings>
   d71f0:	e002      	b.n	d71f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d71f2:	9b04      	ldr	r3, [sp, #16]
   d71f4:	42b3      	cmp	r3, r6
   d71f6:	d1db      	bne.n	d71b0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d71f8:	2000      	movs	r0, #0
   d71fa:	b00f      	add	sp, #60	; 0x3c
   d71fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7200 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7200:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d7202:	7900      	ldrb	r0, [r0, #4]
   d7204:	f7ff fc88 	bl	d6b18 <HAL_SPI_Send_Receive_Data>
}
   d7208:	b2c0      	uxtb	r0, r0
   d720a:	bd08      	pop	{r3, pc}

000d720c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d720c:	b530      	push	{r4, r5, lr}
   d720e:	b087      	sub	sp, #28
   d7210:	4604      	mov	r4, r0
   d7212:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7214:	7900      	ldrb	r0, [r0, #4]
   d7216:	9500      	str	r5, [sp, #0]
   d7218:	f7ff fc9e 	bl	d6b58 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
   d721c:	b93d      	cbnz	r5, d722e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d721e:	a902      	add	r1, sp, #8
   d7220:	7920      	ldrb	r0, [r4, #4]
   d7222:	f7ff fca1 	bl	d6b68 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
   d7226:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d722a:	07db      	lsls	r3, r3, #31
   d722c:	d4f7      	bmi.n	d721e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
   d722e:	b007      	add	sp, #28
   d7230:	bd30      	pop	{r4, r5, pc}

000d7232 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d7232:	7900      	ldrb	r0, [r0, #4]
   d7234:	f7ff bc80 	b.w	d6b38 <HAL_SPI_Is_Enabled>

000d7238 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d7238:	4b04      	ldr	r3, [pc, #16]	; (d724c <_GLOBAL__sub_I_System+0x14>)
   d723a:	2000      	movs	r0, #0
   d723c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7240:	7018      	strb	r0, [r3, #0]
   d7242:	8058      	strh	r0, [r3, #2]
   d7244:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7246:	f7ff be2f 	b.w	d6ea8 <set_system_mode>
   d724a:	bf00      	nop
   d724c:	2003e3d8 	.word	0x2003e3d8

000d7250 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7250:	b510      	push	{r4, lr}
   d7252:	4604      	mov	r4, r0
{
	free(buffer);
   d7254:	6800      	ldr	r0, [r0, #0]
   d7256:	f7ff fec3 	bl	d6fe0 <free>
}
   d725a:	4620      	mov	r0, r4
   d725c:	bd10      	pop	{r4, pc}

000d725e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d725e:	b510      	push	{r4, lr}
   d7260:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7262:	6800      	ldr	r0, [r0, #0]
   d7264:	b108      	cbz	r0, d726a <_ZN6String10invalidateEv+0xc>
   d7266:	f7ff febb 	bl	d6fe0 <free>
	buffer = NULL;
   d726a:	2300      	movs	r3, #0
   d726c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d726e:	60a3      	str	r3, [r4, #8]
   d7270:	6063      	str	r3, [r4, #4]
   d7272:	bd10      	pop	{r4, pc}

000d7274 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7274:	b538      	push	{r3, r4, r5, lr}
   d7276:	4604      	mov	r4, r0
   d7278:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d727a:	6800      	ldr	r0, [r0, #0]
   d727c:	3101      	adds	r1, #1
   d727e:	f7ff feb7 	bl	d6ff0 <realloc>
	if (newbuffer) {
   d7282:	b110      	cbz	r0, d728a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7284:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7288:	2001      	movs	r0, #1
	}
	return 0;
}
   d728a:	bd38      	pop	{r3, r4, r5, pc}

000d728c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d728c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d728e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d7290:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7292:	b113      	cbz	r3, d729a <_ZN6String7reserveEj+0xe>
   d7294:	6843      	ldr	r3, [r0, #4]
   d7296:	428b      	cmp	r3, r1
   d7298:	d207      	bcs.n	d72aa <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d729a:	4620      	mov	r0, r4
   d729c:	f7ff ffea 	bl	d7274 <_ZN6String12changeBufferEj>
   d72a0:	b120      	cbz	r0, d72ac <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d72a2:	68a3      	ldr	r3, [r4, #8]
   d72a4:	b90b      	cbnz	r3, d72aa <_ZN6String7reserveEj+0x1e>
   d72a6:	6822      	ldr	r2, [r4, #0]
   d72a8:	7013      	strb	r3, [r2, #0]
   d72aa:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d72ac:	bd10      	pop	{r4, pc}

000d72ae <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d72ae:	b570      	push	{r4, r5, r6, lr}
   d72b0:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d72b2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d72b4:	4604      	mov	r4, r0
   d72b6:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d72b8:	f7ff ffe8 	bl	d728c <_ZN6String7reserveEj>
   d72bc:	b918      	cbnz	r0, d72c6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d72be:	4620      	mov	r0, r4
   d72c0:	f7ff ffcd 	bl	d725e <_ZN6String10invalidateEv>
		return *this;
   d72c4:	e009      	b.n	d72da <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d72c6:	462a      	mov	r2, r5
   d72c8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d72ca:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d72cc:	6820      	ldr	r0, [r4, #0]
   d72ce:	f001 fe78 	bl	d8fc2 <memcpy>
	buffer[len] = 0;
   d72d2:	6822      	ldr	r2, [r4, #0]
   d72d4:	68a3      	ldr	r3, [r4, #8]
   d72d6:	2100      	movs	r1, #0
   d72d8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d72da:	4620      	mov	r0, r4
   d72dc:	bd70      	pop	{r4, r5, r6, pc}

000d72de <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d72de:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d72e0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d72e2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d72e4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d72e6:	6043      	str	r3, [r0, #4]
	len = 0;
   d72e8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d72ea:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d72ec:	460d      	mov	r5, r1
   d72ee:	b139      	cbz	r1, d7300 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d72f0:	4608      	mov	r0, r1
   d72f2:	f001 feb3 	bl	d905c <strlen>
   d72f6:	4629      	mov	r1, r5
   d72f8:	4602      	mov	r2, r0
   d72fa:	4620      	mov	r0, r4
   d72fc:	f7ff ffd7 	bl	d72ae <_ZN6String4copyEPKcj>
}
   d7300:	4620      	mov	r0, r4
   d7302:	bd38      	pop	{r3, r4, r5, pc}

000d7304 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7304:	b538      	push	{r3, r4, r5, lr}
   d7306:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7308:	460c      	mov	r4, r1
   d730a:	b141      	cbz	r1, d731e <_ZN6StringaSEPKc+0x1a>
   d730c:	4608      	mov	r0, r1
   d730e:	f001 fea5 	bl	d905c <strlen>
   d7312:	4621      	mov	r1, r4
   d7314:	4602      	mov	r2, r0
   d7316:	4628      	mov	r0, r5
   d7318:	f7ff ffc9 	bl	d72ae <_ZN6String4copyEPKcj>
   d731c:	e001      	b.n	d7322 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d731e:	f7ff ff9e 	bl	d725e <_ZN6String10invalidateEv>

	return *this;
}
   d7322:	4628      	mov	r0, r5
   d7324:	bd38      	pop	{r3, r4, r5, pc}

000d7326 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d7326:	b570      	push	{r4, r5, r6, lr}
   d7328:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d732a:	460e      	mov	r6, r1
   d732c:	b909      	cbnz	r1, d7332 <_ZN6String6concatEPKcj+0xc>
   d732e:	2000      	movs	r0, #0
   d7330:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7332:	b16a      	cbz	r2, d7350 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d7334:	6883      	ldr	r3, [r0, #8]
   d7336:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d7338:	4629      	mov	r1, r5
   d733a:	f7ff ffa7 	bl	d728c <_ZN6String7reserveEj>
   d733e:	2800      	cmp	r0, #0
   d7340:	d0f5      	beq.n	d732e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7342:	6820      	ldr	r0, [r4, #0]
   d7344:	68a3      	ldr	r3, [r4, #8]
   d7346:	4631      	mov	r1, r6
   d7348:	4418      	add	r0, r3
   d734a:	f001 fe7f 	bl	d904c <strcpy>
	len = newlen;
   d734e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d7350:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7352:	bd70      	pop	{r4, r5, r6, pc}

000d7354 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d7354:	688a      	ldr	r2, [r1, #8]
   d7356:	6809      	ldr	r1, [r1, #0]
   d7358:	f7ff bfe5 	b.w	d7326 <_ZN6String6concatEPKcj>

000d735c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d735c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d735e:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7360:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7362:	b912      	cbnz	r2, d736a <_ZNK6String6equalsEPKc+0xe>
   d7364:	b919      	cbnz	r1, d736e <_ZNK6String6equalsEPKc+0x12>
   d7366:	2001      	movs	r0, #1
   d7368:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d736a:	b911      	cbnz	r1, d7372 <_ZNK6String6equalsEPKc+0x16>
   d736c:	6803      	ldr	r3, [r0, #0]
   d736e:	7818      	ldrb	r0, [r3, #0]
   d7370:	e002      	b.n	d7378 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d7372:	6800      	ldr	r0, [r0, #0]
   d7374:	f001 fe60 	bl	d9038 <strcmp>
   d7378:	fab0 f080 	clz	r0, r0
   d737c:	0940      	lsrs	r0, r0, #5
}
   d737e:	bd08      	pop	{r3, pc}

000d7380 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d7380:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d7382:	6883      	ldr	r3, [r0, #8]
   d7384:	4293      	cmp	r3, r2
   d7386:	d907      	bls.n	d7398 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d7388:	6804      	ldr	r4, [r0, #0]
   d738a:	6809      	ldr	r1, [r1, #0]
   d738c:	18a0      	adds	r0, r4, r2
   d738e:	f001 fe6d 	bl	d906c <strstr>
	if (found == NULL) return -1;
   d7392:	b108      	cbz	r0, d7398 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d7394:	1b00      	subs	r0, r0, r4
   d7396:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
   d7398:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
   d739c:	bd10      	pop	{r4, pc}

000d739e <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
   d739e:	2200      	movs	r2, #0
   d73a0:	f7ff bfee 	b.w	d7380 <_ZNK6String7indexOfERKS_j>

000d73a4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d73a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   d73a8:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d73aa:	460e      	mov	r6, r1
   d73ac:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d73ae:	4910      	ldr	r1, [pc, #64]	; (d73f0 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d73b0:	bf88      	it	hi
   d73b2:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d73b4:	4615      	mov	r5, r2
   d73b6:	4607      	mov	r7, r0
	if (left > right) {
   d73b8:	bf84      	itt	hi
   d73ba:	4625      	movhi	r5, r4
   d73bc:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d73be:	f7ff ff8e 	bl	d72de <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d73c2:	68b1      	ldr	r1, [r6, #8]
   d73c4:	428d      	cmp	r5, r1
   d73c6:	d80f      	bhi.n	d73e8 <_ZNK6String9substringEjj+0x44>
   d73c8:	428c      	cmp	r4, r1
   d73ca:	bf28      	it	cs
   d73cc:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d73ce:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   d73d0:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d73d2:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   d73d6:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   d73d8:	6831      	ldr	r1, [r6, #0]
   d73da:	4638      	mov	r0, r7
   d73dc:	4429      	add	r1, r5
   d73de:	f7ff ff91 	bl	d7304 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   d73e2:	6833      	ldr	r3, [r6, #0]
   d73e4:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   d73e8:	4638      	mov	r0, r7
   d73ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d73ee:	bf00      	nop
   d73f0:	000d94d1 	.word	0x000d94d1

000d73f4 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   d73f4:	b510      	push	{r4, lr}
   d73f6:	4604      	mov	r4, r0
	return substring(left, len);
   d73f8:	688b      	ldr	r3, [r1, #8]
   d73fa:	f7ff ffd3 	bl	d73a4 <_ZNK6String9substringEjj>
}
   d73fe:	4620      	mov	r0, r4
   d7400:	bd10      	pop	{r4, pc}

000d7402 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7404:	4606      	mov	r6, r0
   d7406:	460d      	mov	r5, r1
   d7408:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d740a:	2400      	movs	r4, #0
  while (size--) {
   d740c:	42bd      	cmp	r5, r7
   d740e:	d00c      	beq.n	d742a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7410:	6833      	ldr	r3, [r6, #0]
   d7412:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7416:	689b      	ldr	r3, [r3, #8]
   d7418:	4630      	mov	r0, r6
   d741a:	4798      	blx	r3
     if (chunk>=0)
   d741c:	2800      	cmp	r0, #0
   d741e:	db01      	blt.n	d7424 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7420:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7422:	e7f3      	b.n	d740c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7424:	2c00      	cmp	r4, #0
   d7426:	bf08      	it	eq
   d7428:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d742a:	4620      	mov	r0, r4
   d742c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d742e <_ZN5Print5printEPKc>:
   d742e:	b508      	push	{r3, lr}
   d7430:	f7fe fd6c 	bl	d5f0c <_ZN5Print5writeEPKc>
   d7434:	bd08      	pop	{r3, pc}

000d7436 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7436:	6803      	ldr	r3, [r0, #0]
   d7438:	689b      	ldr	r3, [r3, #8]
   d743a:	4718      	bx	r3

000d743c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d743c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d743e:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7440:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7442:	f7ff fff8 	bl	d7436 <_ZN5Print5printEc>
  n += print('\n');
   d7446:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7448:	4604      	mov	r4, r0
  n += print('\n');
   d744a:	4628      	mov	r0, r5
   d744c:	f7ff fff3 	bl	d7436 <_ZN5Print5printEc>
  return n;
}
   d7450:	4420      	add	r0, r4
   d7452:	bd38      	pop	{r3, r4, r5, pc}

000d7454 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7454:	b538      	push	{r3, r4, r5, lr}
   d7456:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7458:	f7fe fd58 	bl	d5f0c <_ZN5Print5writeEPKc>
   d745c:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d745e:	4628      	mov	r0, r5
   d7460:	f7ff ffec 	bl	d743c <_ZN5Print7printlnEv>
  return n;
}
   d7464:	4420      	add	r0, r4
   d7466:	bd38      	pop	{r3, r4, r5, pc}

000d7468 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7468:	b530      	push	{r4, r5, lr}
   d746a:	b08b      	sub	sp, #44	; 0x2c
   d746c:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d746e:	2100      	movs	r1, #0
   d7470:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7474:	2a01      	cmp	r2, #1
   d7476:	bf98      	it	ls
   d7478:	220a      	movls	r2, #10
   d747a:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d747e:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d7482:	fb05 3312 	mls	r3, r5, r2, r3
   d7486:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d748a:	2b09      	cmp	r3, #9
   d748c:	bf94      	ite	ls
   d748e:	3330      	addls	r3, #48	; 0x30
   d7490:	3337      	addhi	r3, #55	; 0x37
   d7492:	b2db      	uxtb	r3, r3
   d7494:	4621      	mov	r1, r4
   d7496:	f804 3901 	strb.w	r3, [r4], #-1
   d749a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d749c:	2d00      	cmp	r5, #0
   d749e:	d1ee      	bne.n	d747e <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d74a0:	f7fe fd34 	bl	d5f0c <_ZN5Print5writeEPKc>
}
   d74a4:	b00b      	add	sp, #44	; 0x2c
   d74a6:	bd30      	pop	{r4, r5, pc}

000d74a8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d74a8:	b410      	push	{r4}
  if (base == 0) return write(n);
   d74aa:	b92a      	cbnz	r2, d74b8 <_ZN5Print5printEmi+0x10>
   d74ac:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d74ae:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d74b2:	689b      	ldr	r3, [r3, #8]
   d74b4:	b2c9      	uxtb	r1, r1
   d74b6:	4718      	bx	r3
  else return printNumber(n, base);
   d74b8:	b2d2      	uxtb	r2, r2
}
   d74ba:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d74be:	f7ff bfd3 	b.w	d7468 <_ZN5Print11printNumberEmh>

000d74c2 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d74c2:	f7ff bff1 	b.w	d74a8 <_ZN5Print5printEmi>

000d74c6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d74c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d74ca:	4607      	mov	r7, r0
   d74cc:	460e      	mov	r6, r1
  if (base == 0) {
   d74ce:	4615      	mov	r5, r2
   d74d0:	b92a      	cbnz	r2, d74de <_ZN5Print5printEli+0x18>
    return write(n);
   d74d2:	6803      	ldr	r3, [r0, #0]
   d74d4:	b2c9      	uxtb	r1, r1
   d74d6:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d74d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d74dc:	4718      	bx	r3
  } else if (base == 10) {
   d74de:	2a0a      	cmp	r2, #10
   d74e0:	d102      	bne.n	d74e8 <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d74e2:	2900      	cmp	r1, #0
   d74e4:	da01      	bge.n	d74ea <_ZN5Print5printEli+0x24>
   d74e6:	e004      	b.n	d74f2 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d74e8:	b2d2      	uxtb	r2, r2
  }
}
   d74ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d74ee:	f7ff bfbb 	b.w	d7468 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d74f2:	212d      	movs	r1, #45	; 0x2d
   d74f4:	f7ff ff9f 	bl	d7436 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d74f8:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d74fa:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d74fc:	4271      	negs	r1, r6
   d74fe:	4638      	mov	r0, r7
   d7500:	f7ff ffb2 	bl	d7468 <_ZN5Print11printNumberEmh>
   d7504:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d7506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d750a <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d750a:	f7ff bfdc 	b.w	d74c6 <_ZN5Print5printEli>

000d750e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d750e:	b538      	push	{r3, r4, r5, lr}
   d7510:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d7512:	f7ff ffd8 	bl	d74c6 <_ZN5Print5printEli>
   d7516:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d7518:	4628      	mov	r0, r5
   d751a:	f7ff ff8f 	bl	d743c <_ZN5Print7printlnEv>
  return n;
}
   d751e:	4420      	add	r0, r4
   d7520:	bd38      	pop	{r3, r4, r5, pc}

000d7522 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7522:	b40c      	push	{r2, r3}
   d7524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7528:	b087      	sub	sp, #28
   d752a:	af00      	add	r7, sp, #0
   d752c:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7530:	4605      	mov	r5, r0
   d7532:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7536:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7538:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d753a:	4623      	mov	r3, r4
   d753c:	464a      	mov	r2, r9
   d753e:	2114      	movs	r1, #20
   d7540:	1d38      	adds	r0, r7, #4
   d7542:	f7ff fd65 	bl	d7010 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7546:	2813      	cmp	r0, #19
   d7548:	d805      	bhi.n	d7556 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d754a:	1d39      	adds	r1, r7, #4
   d754c:	4628      	mov	r0, r5
   d754e:	f7fe fcdd 	bl	d5f0c <_ZN5Print5writeEPKc>
   d7552:	4604      	mov	r4, r0
   d7554:	e013      	b.n	d757e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7556:	f100 0308 	add.w	r3, r0, #8
   d755a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d755e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7560:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7564:	1c41      	adds	r1, r0, #1
   d7566:	4623      	mov	r3, r4
   d7568:	464a      	mov	r2, r9
   d756a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d756c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d756e:	f7ff fd4f 	bl	d7010 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7572:	4669      	mov	r1, sp
   d7574:	4628      	mov	r0, r5
   d7576:	f7fe fcc9 	bl	d5f0c <_ZN5Print5writeEPKc>
   d757a:	4604      	mov	r4, r0
   d757c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d757e:	b11e      	cbz	r6, d7588 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7580:	4628      	mov	r0, r5
   d7582:	f7ff ff5b 	bl	d743c <_ZN5Print7printlnEv>
   d7586:	4404      	add	r4, r0
    return n;
}
   d7588:	4620      	mov	r0, r4
   d758a:	371c      	adds	r7, #28
   d758c:	46bd      	mov	sp, r7
   d758e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7592:	b002      	add	sp, #8
   d7594:	4770      	bx	lr
	...

000d7598 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7598:	4b01      	ldr	r3, [pc, #4]	; (d75a0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d759a:	4a02      	ldr	r2, [pc, #8]	; (d75a4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d759c:	601a      	str	r2, [r3, #0]
   d759e:	4770      	bx	lr
   d75a0:	2003e3e0 	.word	0x2003e3e0
   d75a4:	000d95dc 	.word	0x000d95dc

000d75a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d75a8:	4b02      	ldr	r3, [pc, #8]	; (d75b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d75aa:	681a      	ldr	r2, [r3, #0]
   d75ac:	4b02      	ldr	r3, [pc, #8]	; (d75b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d75ae:	601a      	str	r2, [r3, #0]
   d75b0:	4770      	bx	lr
   d75b2:	bf00      	nop
   d75b4:	2003d1fc 	.word	0x2003d1fc
   d75b8:	2003e3e4 	.word	0x2003e3e4

000d75bc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d75bc:	2100      	movs	r1, #0
   d75be:	f7ff bc7b 	b.w	d6eb8 <system_delay_ms>

000d75c2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d75c2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d75c4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d75c6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d75c8:	b113      	cbz	r3, d75d0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d75ca:	2203      	movs	r2, #3
   d75cc:	4601      	mov	r1, r0
   d75ce:	4798      	blx	r3
    }
   d75d0:	4620      	mov	r0, r4
   d75d2:	bd10      	pop	{r4, pc}

000d75d4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d75d4:	b510      	push	{r4, lr}
   d75d6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d75d8:	f7ff fff3 	bl	d75c2 <_ZNSt14_Function_baseD1Ev>
   d75dc:	4620      	mov	r0, r4
   d75de:	bd10      	pop	{r4, pc}

000d75e0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d75e0:	4803      	ldr	r0, [pc, #12]	; (d75f0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d75e2:	4a04      	ldr	r2, [pc, #16]	; (d75f4 <_GLOBAL__sub_I_RGB+0x14>)
   d75e4:	4904      	ldr	r1, [pc, #16]	; (d75f8 <_GLOBAL__sub_I_RGB+0x18>)
   d75e6:	2300      	movs	r3, #0
   d75e8:	6083      	str	r3, [r0, #8]
   d75ea:	f000 bf39 	b.w	d8460 <__aeabi_atexit>
   d75ee:	bf00      	nop
   d75f0:	2003e3e8 	.word	0x2003e3e8
   d75f4:	2003d268 	.word	0x2003d268
   d75f8:	000d75d5 	.word	0x000d75d5

000d75fc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d75fc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d75fe:	4b0c      	ldr	r3, [pc, #48]	; (d7630 <serialEventRun+0x34>)
   d7600:	b133      	cbz	r3, d7610 <serialEventRun+0x14>
   d7602:	f000 f94b 	bl	d789c <_Z16_fetch_usbserialv>
   d7606:	6803      	ldr	r3, [r0, #0]
   d7608:	691b      	ldr	r3, [r3, #16]
   d760a:	4798      	blx	r3
   d760c:	2800      	cmp	r0, #0
   d760e:	dc09      	bgt.n	d7624 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7610:	4b08      	ldr	r3, [pc, #32]	; (d7634 <serialEventRun+0x38>)
   d7612:	b163      	cbz	r3, d762e <serialEventRun+0x32>
   d7614:	f000 f9b2 	bl	d797c <_Z22__fetch_global_Serial1v>
   d7618:	6803      	ldr	r3, [r0, #0]
   d761a:	691b      	ldr	r3, [r3, #16]
   d761c:	4798      	blx	r3
   d761e:	2800      	cmp	r0, #0
   d7620:	dc03      	bgt.n	d762a <serialEventRun+0x2e>
   d7622:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7624:	f3af 8000 	nop.w
   d7628:	e7f2      	b.n	d7610 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d762a:	f3af 8000 	nop.w
   d762e:	bd08      	pop	{r3, pc}
	...

000d7638 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7638:	b508      	push	{r3, lr}
	serialEventRun();
   d763a:	f7ff ffdf 	bl	d75fc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d763e:	f7ff fabb 	bl	d6bb8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7642:	4b01      	ldr	r3, [pc, #4]	; (d7648 <_post_loop+0x10>)
   d7644:	6018      	str	r0, [r3, #0]
   d7646:	bd08      	pop	{r3, pc}
   d7648:	2003e734 	.word	0x2003e734

000d764c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d764c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d764e:	2300      	movs	r3, #0
   d7650:	9300      	str	r3, [sp, #0]
   d7652:	461a      	mov	r2, r3
   d7654:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7658:	f7ff fc48 	bl	d6eec <system_ctrl_set_result>
}
   d765c:	b003      	add	sp, #12
   d765e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7664 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7664:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7666:	8843      	ldrh	r3, [r0, #2]
   d7668:	2b0a      	cmp	r3, #10
   d766a:	d008      	beq.n	d767e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d766c:	2b50      	cmp	r3, #80	; 0x50
   d766e:	d109      	bne.n	d7684 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7670:	4b09      	ldr	r3, [pc, #36]	; (d7698 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7672:	681b      	ldr	r3, [r3, #0]
   d7674:	b13b      	cbz	r3, d7686 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7676:	b003      	add	sp, #12
   d7678:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d767c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d767e:	f7ff ffe5 	bl	d764c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7682:	e006      	b.n	d7692 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7684:	2300      	movs	r3, #0
   d7686:	9300      	str	r3, [sp, #0]
   d7688:	461a      	mov	r2, r3
   d768a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d768e:	f7ff fc2d 	bl	d6eec <system_ctrl_set_result>
        break;
    }
}
   d7692:	b003      	add	sp, #12
   d7694:	f85d fb04 	ldr.w	pc, [sp], #4
   d7698:	2003e3f8 	.word	0x2003e3f8

000d769c <module_user_init_hook>:

void module_user_init_hook()
{
   d769c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d769e:	f7ff fa7b 	bl	d6b98 <HAL_RNG_GetRandomNumber>
   d76a2:	4604      	mov	r4, r0
    srand(seed);
   d76a4:	f001 fca0 	bl	d8fe8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d76a8:	4b07      	ldr	r3, [pc, #28]	; (d76c8 <module_user_init_hook+0x2c>)
   d76aa:	b113      	cbz	r3, d76b2 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d76ac:	4620      	mov	r0, r4
   d76ae:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d76b2:	2100      	movs	r1, #0
   d76b4:	4804      	ldr	r0, [pc, #16]	; (d76c8 <module_user_init_hook+0x2c>)
   d76b6:	f7ff fc83 	bl	d6fc0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d76ba:	2100      	movs	r1, #0
   d76bc:	4803      	ldr	r0, [pc, #12]	; (d76cc <module_user_init_hook+0x30>)
}
   d76be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d76c2:	f7ff bc09 	b.w	d6ed8 <system_ctrl_set_app_request_handler>
   d76c6:	bf00      	nop
   d76c8:	00000000 	.word	0x00000000
   d76cc:	000d7665 	.word	0x000d7665

000d76d0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d76d0:	4770      	bx	lr

000d76d2 <_ZN9IPAddressD0Ev>:
   d76d2:	b510      	push	{r4, lr}
   d76d4:	4604      	mov	r4, r0
   d76d6:	f7fc fce0 	bl	d409a <_ZdlPv>
   d76da:	4620      	mov	r0, r4
   d76dc:	bd10      	pop	{r4, pc}

000d76de <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d76de:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d76e0:	7d03      	ldrb	r3, [r0, #20]
   d76e2:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d76e4:	b08d      	sub	sp, #52	; 0x34
   d76e6:	460e      	mov	r6, r1
   d76e8:	f100 0704 	add.w	r7, r0, #4
   d76ec:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d76f0:	d002      	beq.n	d76f8 <_ZNK9IPAddress7printToER5Print+0x1a>
   d76f2:	f100 0508 	add.w	r5, r0, #8
   d76f6:	e018      	b.n	d772a <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d76f8:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d76fa:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d76fc:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7700:	232f      	movs	r3, #47	; 0x2f
   d7702:	462a      	mov	r2, r5
   d7704:	200a      	movs	r0, #10
   d7706:	f7ff fa97 	bl	d6c38 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d770a:	4628      	mov	r0, r5
   d770c:	f001 fca6 	bl	d905c <strlen>
   d7710:	6833      	ldr	r3, [r6, #0]
   d7712:	4602      	mov	r2, r0
   d7714:	68db      	ldr	r3, [r3, #12]
   d7716:	4629      	mov	r1, r5
   d7718:	4630      	mov	r0, r6
   d771a:	4798      	blx	r3
   d771c:	e00f      	b.n	d773e <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d771e:	b124      	cbz	r4, d772a <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7720:	212e      	movs	r1, #46	; 0x2e
   d7722:	4630      	mov	r0, r6
   d7724:	f7ff fe87 	bl	d7436 <_ZN5Print5printEc>
   d7728:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d772a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d772e:	220a      	movs	r2, #10
   d7730:	4630      	mov	r0, r6
   d7732:	f7ff fec6 	bl	d74c2 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7736:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7738:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d773a:	d1f0      	bne.n	d771e <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d773c:	4620      	mov	r0, r4
    }
    return n;
}
   d773e:	b00d      	add	sp, #52	; 0x34
   d7740:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7744 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7744:	b510      	push	{r4, lr}
   d7746:	4b05      	ldr	r3, [pc, #20]	; (d775c <_ZN9IPAddressC1Ev+0x18>)
   d7748:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d774a:	2211      	movs	r2, #17
   d774c:	f840 3b04 	str.w	r3, [r0], #4
   d7750:	2100      	movs	r1, #0
   d7752:	f001 fc41 	bl	d8fd8 <memset>
{
    clear();
}
   d7756:	4620      	mov	r0, r4
   d7758:	bd10      	pop	{r4, pc}
   d775a:	bf00      	nop
   d775c:	000d9638 	.word	0x000d9638

000d7760 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7760:	4603      	mov	r3, r0
   d7762:	4a07      	ldr	r2, [pc, #28]	; (d7780 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7764:	b510      	push	{r4, lr}
   d7766:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d776a:	f101 0210 	add.w	r2, r1, #16
   d776e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7772:	f843 4b04 	str.w	r4, [r3], #4
   d7776:	4291      	cmp	r1, r2
   d7778:	d1f9      	bne.n	d776e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d777a:	780a      	ldrb	r2, [r1, #0]
   d777c:	701a      	strb	r2, [r3, #0]
}
   d777e:	bd10      	pop	{r4, pc}
   d7780:	000d9638 	.word	0x000d9638

000d7784 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d7784:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d7786:	2b04      	cmp	r3, #4
   d7788:	d101      	bne.n	d778e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d778a:	6840      	ldr	r0, [r0, #4]
   d778c:	e008      	b.n	d77a0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d778e:	2b06      	cmp	r3, #6
   d7790:	d10a      	bne.n	d77a8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d7792:	6843      	ldr	r3, [r0, #4]
   d7794:	b153      	cbz	r3, d77ac <_ZNK9IPAddresscvbEv+0x28>
   d7796:	6883      	ldr	r3, [r0, #8]
   d7798:	b143      	cbz	r3, d77ac <_ZNK9IPAddresscvbEv+0x28>
   d779a:	68c3      	ldr	r3, [r0, #12]
   d779c:	b133      	cbz	r3, d77ac <_ZNK9IPAddresscvbEv+0x28>
   d779e:	6900      	ldr	r0, [r0, #16]
   d77a0:	3000      	adds	r0, #0
   d77a2:	bf18      	it	ne
   d77a4:	2001      	movne	r0, #1
   d77a6:	4770      	bx	lr
   d77a8:	2000      	movs	r0, #0
   d77aa:	4770      	bx	lr
   d77ac:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d77ae:	4770      	bx	lr

000d77b0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d77b0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d77b2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d77b6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d77ba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d77be:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d77c2:	2304      	movs	r3, #4
   d77c4:	6041      	str	r1, [r0, #4]
   d77c6:	7503      	strb	r3, [r0, #20]
   d77c8:	bd10      	pop	{r4, pc}
	...

000d77cc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d77cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d77ce:	4d04      	ldr	r5, [pc, #16]	; (d77e0 <_ZN9IPAddressC1Ehhhh+0x14>)
   d77d0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d77d2:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d77d6:	9500      	str	r5, [sp, #0]
   d77d8:	f7ff ffea 	bl	d77b0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d77dc:	b003      	add	sp, #12
   d77de:	bd30      	pop	{r4, r5, pc}
   d77e0:	000d9638 	.word	0x000d9638

000d77e4 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d77e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d77e6:	780d      	ldrb	r5, [r1, #0]
   d77e8:	788b      	ldrb	r3, [r1, #2]
   d77ea:	784a      	ldrb	r2, [r1, #1]
   d77ec:	78c9      	ldrb	r1, [r1, #3]
   d77ee:	9100      	str	r1, [sp, #0]
   d77f0:	4629      	mov	r1, r5
   d77f2:	f7ff ffdd 	bl	d77b0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d77f6:	b003      	add	sp, #12
   d77f8:	bd30      	pop	{r4, r5, pc}

000d77fa <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d77fa:	7441      	strb	r1, [r0, #17]
   d77fc:	4770      	bx	lr

000d77fe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d77fe:	4770      	bx	lr

000d7800 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d7800:	2100      	movs	r1, #0
   d7802:	7c00      	ldrb	r0, [r0, #16]
   d7804:	f7ff bb28 	b.w	d6e58 <HAL_USB_USART_Receive_Data>

000d7808 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d7808:	2101      	movs	r1, #1
   d780a:	7c00      	ldrb	r0, [r0, #16]
   d780c:	f7ff bb24 	b.w	d6e58 <HAL_USB_USART_Receive_Data>

000d7810 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d7810:	7c00      	ldrb	r0, [r0, #16]
   d7812:	f7ff bb19 	b.w	d6e48 <HAL_USB_USART_Available_Data_For_Write>

000d7816 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d7816:	7c00      	ldrb	r0, [r0, #16]
   d7818:	f7ff bb0e 	b.w	d6e38 <HAL_USB_USART_Available_Data>

000d781c <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d781c:	b538      	push	{r3, r4, r5, lr}
   d781e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7820:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d7822:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7824:	f7ff fb10 	bl	d6e48 <HAL_USB_USART_Available_Data_For_Write>
   d7828:	2800      	cmp	r0, #0
   d782a:	dc01      	bgt.n	d7830 <_ZN9USBSerial5writeEh+0x14>
   d782c:	7c60      	ldrb	r0, [r4, #17]
   d782e:	b120      	cbz	r0, d783a <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d7830:	4629      	mov	r1, r5
   d7832:	7c20      	ldrb	r0, [r4, #16]
   d7834:	f7ff fb18 	bl	d6e68 <HAL_USB_USART_Send_Data>
    return 1;
   d7838:	2001      	movs	r0, #1
  }
  return 0;
}
   d783a:	bd38      	pop	{r3, r4, r5, pc}

000d783c <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d783c:	7c00      	ldrb	r0, [r0, #16]
   d783e:	f7ff bb1b 	b.w	d6e78 <HAL_USB_USART_Flush_Data>

000d7842 <_ZN9USBSerialD0Ev>:
   d7842:	b510      	push	{r4, lr}
   d7844:	4604      	mov	r4, r0
   d7846:	f7fc fc28 	bl	d409a <_ZdlPv>
   d784a:	4620      	mov	r0, r4
   d784c:	bd10      	pop	{r4, pc}
	...

000d7850 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7850:	b510      	push	{r4, lr}
   d7852:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7854:	2300      	movs	r3, #0
   d7856:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d785c:	60a3      	str	r3, [r4, #8]
   d785e:	4b05      	ldr	r3, [pc, #20]	; (d7874 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7860:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7862:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7864:	4608      	mov	r0, r1
{
  _serial = serial;
   d7866:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7868:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d786a:	4611      	mov	r1, r2
   d786c:	f7ff fad4 	bl	d6e18 <HAL_USB_USART_Init>
}
   d7870:	4620      	mov	r0, r4
   d7872:	bd10      	pop	{r4, pc}
   d7874:	000d964c 	.word	0x000d964c

000d7878 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7878:	2200      	movs	r2, #0
   d787a:	7c00      	ldrb	r0, [r0, #16]
   d787c:	f7ff bad4 	b.w	d6e28 <HAL_USB_USART_Begin>

000d7880 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d7880:	7c00      	ldrb	r0, [r0, #16]
   d7882:	f7ff bb01 	b.w	d6e88 <HAL_USB_USART_Is_Enabled>

000d7886 <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
   d7886:	f7ff bffb 	b.w	d7880 <_ZN9USBSerial9isEnabledEv>

000d788a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d788a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d788c:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d788e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7890:	2100      	movs	r1, #0
   d7892:	f001 fba1 	bl	d8fd8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7896:	4620      	mov	r0, r4
   d7898:	bd10      	pop	{r4, pc}
	...

000d789c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d789c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d789e:	4d0e      	ldr	r5, [pc, #56]	; (d78d8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d78a0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d78a2:	a801      	add	r0, sp, #4
   d78a4:	f7ff fff1 	bl	d788a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d78a8:	6829      	ldr	r1, [r5, #0]
   d78aa:	f011 0401 	ands.w	r4, r1, #1
   d78ae:	d110      	bne.n	d78d2 <_Z16_fetch_usbserialv+0x36>
   d78b0:	4628      	mov	r0, r5
   d78b2:	f7fc fbf6 	bl	d40a2 <__cxa_guard_acquire>
   d78b6:	b160      	cbz	r0, d78d2 <_Z16_fetch_usbserialv+0x36>
   d78b8:	aa01      	add	r2, sp, #4
   d78ba:	4621      	mov	r1, r4
   d78bc:	4807      	ldr	r0, [pc, #28]	; (d78dc <_Z16_fetch_usbserialv+0x40>)
   d78be:	f7ff ffc7 	bl	d7850 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d78c2:	4628      	mov	r0, r5
   d78c4:	f7fc fbf2 	bl	d40ac <__cxa_guard_release>
   d78c8:	4a05      	ldr	r2, [pc, #20]	; (d78e0 <_Z16_fetch_usbserialv+0x44>)
   d78ca:	4906      	ldr	r1, [pc, #24]	; (d78e4 <_Z16_fetch_usbserialv+0x48>)
   d78cc:	4803      	ldr	r0, [pc, #12]	; (d78dc <_Z16_fetch_usbserialv+0x40>)
   d78ce:	f000 fdc7 	bl	d8460 <__aeabi_atexit>
	return _usbserial;
}
   d78d2:	4802      	ldr	r0, [pc, #8]	; (d78dc <_Z16_fetch_usbserialv+0x40>)
   d78d4:	b007      	add	sp, #28
   d78d6:	bd30      	pop	{r4, r5, pc}
   d78d8:	2003e3fc 	.word	0x2003e3fc
   d78dc:	2003e400 	.word	0x2003e400
   d78e0:	2003d268 	.word	0x2003d268
   d78e4:	000d77ff 	.word	0x000d77ff

000d78e8 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d78e8:	4770      	bx	lr

000d78ea <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d78ea:	7441      	strb	r1, [r0, #17]
   d78ec:	4770      	bx	lr

000d78ee <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d78ee:	7c00      	ldrb	r0, [r0, #16]
   d78f0:	f7ff b9fa 	b.w	d6ce8 <HAL_USART_Available_Data_For_Write>

000d78f4 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d78f4:	7c00      	ldrb	r0, [r0, #16]
   d78f6:	f7ff b9cf 	b.w	d6c98 <HAL_USART_Available_Data>

000d78fa <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d78fa:	7c00      	ldrb	r0, [r0, #16]
   d78fc:	f7ff b9dc 	b.w	d6cb8 <HAL_USART_Peek_Data>

000d7900 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d7900:	7c00      	ldrb	r0, [r0, #16]
   d7902:	f7ff b9d1 	b.w	d6ca8 <HAL_USART_Read_Data>

000d7906 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7906:	7c00      	ldrb	r0, [r0, #16]
   d7908:	f7ff b9de 	b.w	d6cc8 <HAL_USART_Flush_Data>

000d790c <_ZN11USARTSerialD0Ev>:
   d790c:	b510      	push	{r4, lr}
   d790e:	4604      	mov	r4, r0
   d7910:	f7fc fbc3 	bl	d409a <_ZdlPv>
   d7914:	4620      	mov	r0, r4
   d7916:	bd10      	pop	{r4, pc}

000d7918 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7918:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d791a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d791c:	4604      	mov	r4, r0
   d791e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7920:	b925      	cbnz	r5, d792c <_ZN11USARTSerial5writeEh+0x14>
   d7922:	7c00      	ldrb	r0, [r0, #16]
   d7924:	f7ff f9e0 	bl	d6ce8 <HAL_USART_Available_Data_For_Write>
   d7928:	2800      	cmp	r0, #0
   d792a:	dd05      	ble.n	d7938 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d792c:	4631      	mov	r1, r6
   d792e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7934:	f7ff b9a8 	b.w	d6c88 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7938:	4628      	mov	r0, r5
   d793a:	bd70      	pop	{r4, r5, r6, pc}

000d793c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d793c:	b510      	push	{r4, lr}
   d793e:	4604      	mov	r4, r0
   d7940:	4608      	mov	r0, r1
   d7942:	4611      	mov	r1, r2
   d7944:	2200      	movs	r2, #0
   d7946:	6062      	str	r2, [r4, #4]
   d7948:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d794c:	60a2      	str	r2, [r4, #8]
   d794e:	4a05      	ldr	r2, [pc, #20]	; (d7964 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7950:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7952:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7954:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7956:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7958:	461a      	mov	r2, r3
   d795a:	f7ff f985 	bl	d6c68 <HAL_USART_Init>
}
   d795e:	4620      	mov	r0, r4
   d7960:	bd10      	pop	{r4, pc}
   d7962:	bf00      	nop
   d7964:	000d967c 	.word	0x000d967c

000d7968 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7968:	2300      	movs	r3, #0
   d796a:	7c00      	ldrb	r0, [r0, #16]
   d796c:	f7ff b9c4 	b.w	d6cf8 <HAL_USART_BeginConfig>

000d7970 <_ZN11USARTSerial3endEv>:
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d7970:	7c00      	ldrb	r0, [r0, #16]
   d7972:	f7ff b981 	b.w	d6c78 <HAL_USART_End>

000d7976 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7976:	7c00      	ldrb	r0, [r0, #16]
   d7978:	f7ff b9ae 	b.w	d6cd8 <HAL_USART_Is_Enabled>

000d797c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d797c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d797e:	4d0c      	ldr	r5, [pc, #48]	; (d79b0 <_Z22__fetch_global_Serial1v+0x34>)
   d7980:	6829      	ldr	r1, [r5, #0]
   d7982:	f011 0401 	ands.w	r4, r1, #1
   d7986:	d111      	bne.n	d79ac <_Z22__fetch_global_Serial1v+0x30>
   d7988:	4628      	mov	r0, r5
   d798a:	f7fc fb8a 	bl	d40a2 <__cxa_guard_acquire>
   d798e:	b168      	cbz	r0, d79ac <_Z22__fetch_global_Serial1v+0x30>
   d7990:	4a08      	ldr	r2, [pc, #32]	; (d79b4 <_Z22__fetch_global_Serial1v+0x38>)
   d7992:	4b09      	ldr	r3, [pc, #36]	; (d79b8 <_Z22__fetch_global_Serial1v+0x3c>)
   d7994:	4809      	ldr	r0, [pc, #36]	; (d79bc <_Z22__fetch_global_Serial1v+0x40>)
   d7996:	4621      	mov	r1, r4
   d7998:	f7ff ffd0 	bl	d793c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d799c:	4628      	mov	r0, r5
   d799e:	f7fc fb85 	bl	d40ac <__cxa_guard_release>
   d79a2:	4a07      	ldr	r2, [pc, #28]	; (d79c0 <_Z22__fetch_global_Serial1v+0x44>)
   d79a4:	4907      	ldr	r1, [pc, #28]	; (d79c4 <_Z22__fetch_global_Serial1v+0x48>)
   d79a6:	4805      	ldr	r0, [pc, #20]	; (d79bc <_Z22__fetch_global_Serial1v+0x40>)
   d79a8:	f000 fd5a 	bl	d8460 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d79ac:	4803      	ldr	r0, [pc, #12]	; (d79bc <_Z22__fetch_global_Serial1v+0x40>)
   d79ae:	bd38      	pop	{r3, r4, r5, pc}
   d79b0:	2003e4ac 	.word	0x2003e4ac
   d79b4:	2003e4b0 	.word	0x2003e4b0
   d79b8:	2003e428 	.word	0x2003e428
   d79bc:	2003e414 	.word	0x2003e414
   d79c0:	2003d268 	.word	0x2003d268
   d79c4:	000d78e9 	.word	0x000d78e9

000d79c8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d79c8:	4770      	bx	lr

000d79ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d79ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d79cc:	4606      	mov	r6, r0
   d79ce:	4615      	mov	r5, r2
   d79d0:	460c      	mov	r4, r1
   d79d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d79d4:	42bc      	cmp	r4, r7
   d79d6:	d006      	beq.n	d79e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d79d8:	6833      	ldr	r3, [r6, #0]
   d79da:	f814 1b01 	ldrb.w	r1, [r4], #1
   d79de:	689b      	ldr	r3, [r3, #8]
   d79e0:	4630      	mov	r0, r6
   d79e2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d79e4:	e7f6      	b.n	d79d4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d79e6:	4628      	mov	r0, r5
   d79e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d79ea <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d79ea:	2200      	movs	r2, #0
   d79ec:	7c00      	ldrb	r0, [r0, #16]
   d79ee:	f7ff b9ab 	b.w	d6d48 <HAL_I2C_Write_Data>

000d79f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d79f2:	2100      	movs	r1, #0
   d79f4:	7c00      	ldrb	r0, [r0, #16]
   d79f6:	f7ff b9af 	b.w	d6d58 <HAL_I2C_Available_Data>

000d79fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d79fa:	2100      	movs	r1, #0
   d79fc:	7c00      	ldrb	r0, [r0, #16]
   d79fe:	f7ff b9b3 	b.w	d6d68 <HAL_I2C_Read_Data>

000d7a02 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7a02:	2100      	movs	r1, #0
   d7a04:	7c00      	ldrb	r0, [r0, #16]
   d7a06:	f7ff b9b7 	b.w	d6d78 <HAL_I2C_Peek_Data>

000d7a0a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7a0a:	2100      	movs	r1, #0
   d7a0c:	7c00      	ldrb	r0, [r0, #16]
   d7a0e:	f7ff b9bb 	b.w	d6d88 <HAL_I2C_Flush_Data>

000d7a12 <_ZN7TwoWireD0Ev>:
   d7a12:	b510      	push	{r4, lr}
   d7a14:	4604      	mov	r4, r0
   d7a16:	f7fc fb40 	bl	d409a <_ZdlPv>
   d7a1a:	4620      	mov	r0, r4
   d7a1c:	bd10      	pop	{r4, pc}
	...

000d7a20 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7a20:	b510      	push	{r4, lr}
   d7a22:	4604      	mov	r4, r0
   d7a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7a28:	4608      	mov	r0, r1
   d7a2a:	60a3      	str	r3, [r4, #8]
   d7a2c:	2100      	movs	r1, #0
   d7a2e:	4b04      	ldr	r3, [pc, #16]	; (d7a40 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d7a30:	7420      	strb	r0, [r4, #16]
   d7a32:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7a34:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d7a36:	f7ff f9b7 	bl	d6da8 <HAL_I2C_Init>

}
   d7a3a:	4620      	mov	r0, r4
   d7a3c:	bd10      	pop	{r4, pc}
   d7a3e:	bf00      	nop
   d7a40:	000d96ac 	.word	0x000d96ac

000d7a44 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7a44:	2300      	movs	r3, #0
   d7a46:	461a      	mov	r2, r3
   d7a48:	4619      	mov	r1, r3
   d7a4a:	7c00      	ldrb	r0, [r0, #16]
   d7a4c:	f7ff b95c 	b.w	d6d08 <HAL_I2C_Begin>

000d7a50 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d7a50:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d7a52:	2400      	movs	r4, #0
   d7a54:	7c00      	ldrb	r0, [r0, #16]
   d7a56:	9400      	str	r4, [sp, #0]
   d7a58:	f7ff f95e 	bl	d6d18 <HAL_I2C_Request_Data>
  return result;
}
   d7a5c:	b2c0      	uxtb	r0, r0
   d7a5e:	b002      	add	sp, #8
   d7a60:	bd10      	pop	{r4, pc}

000d7a62 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d7a62:	2301      	movs	r3, #1
   d7a64:	f7ff bff4 	b.w	d7a50 <_ZN7TwoWire11requestFromEhhh>

000d7a68 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d7a68:	2301      	movs	r3, #1
   d7a6a:	b2d2      	uxtb	r2, r2
   d7a6c:	b2c9      	uxtb	r1, r1
   d7a6e:	f7ff bfef 	b.w	d7a50 <_ZN7TwoWire11requestFromEhhh>

000d7a72 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7a72:	2200      	movs	r2, #0
   d7a74:	7c00      	ldrb	r0, [r0, #16]
   d7a76:	f7ff b957 	b.w	d6d28 <HAL_I2C_Begin_Transmission>

000d7a7a <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7a7a:	b2c9      	uxtb	r1, r1
   d7a7c:	f7ff bff9 	b.w	d7a72 <_ZN7TwoWire17beginTransmissionEh>

000d7a80 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7a80:	2200      	movs	r2, #0
   d7a82:	7c00      	ldrb	r0, [r0, #16]
   d7a84:	f7ff b958 	b.w	d6d38 <HAL_I2C_End_Transmission>

000d7a88 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7a88:	2101      	movs	r1, #1
   d7a8a:	f7ff bff9 	b.w	d7a80 <_ZN7TwoWire15endTransmissionEh>

000d7a8e <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7a8e:	2100      	movs	r1, #0
   d7a90:	7c00      	ldrb	r0, [r0, #16]
   d7a92:	f7ff b981 	b.w	d6d98 <HAL_I2C_Is_Enabled>

000d7a96 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7a96:	2200      	movs	r2, #0
   d7a98:	4611      	mov	r1, r2
   d7a9a:	6840      	ldr	r0, [r0, #4]
   d7a9c:	f7ff ba68 	b.w	d6f70 <network_listening>

000d7aa0 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7aa0:	2200      	movs	r2, #0
   d7aa2:	4611      	mov	r1, r2
   d7aa4:	6840      	ldr	r0, [r0, #4]
   d7aa6:	f7ff ba7b 	b.w	d6fa0 <network_get_listen_timeout>

000d7aaa <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7aaa:	2200      	movs	r2, #0
   d7aac:	6840      	ldr	r0, [r0, #4]
   d7aae:	f7ff ba6f 	b.w	d6f90 <network_set_listen_timeout>

000d7ab2 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7ab2:	2200      	movs	r2, #0
   d7ab4:	f081 0101 	eor.w	r1, r1, #1
   d7ab8:	6840      	ldr	r0, [r0, #4]
   d7aba:	f7ff ba51 	b.w	d6f60 <network_listen>

000d7abe <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7abe:	2300      	movs	r3, #0
   d7ac0:	461a      	mov	r2, r3
   d7ac2:	4619      	mov	r1, r3
   d7ac4:	6840      	ldr	r0, [r0, #4]
   d7ac6:	f7ff ba43 	b.w	d6f50 <network_off>

000d7aca <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7aca:	2300      	movs	r3, #0
   d7acc:	461a      	mov	r2, r3
   d7ace:	4619      	mov	r1, r3
   d7ad0:	6840      	ldr	r0, [r0, #4]
   d7ad2:	f7ff ba35 	b.w	d6f40 <network_on>

000d7ad6 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7ad6:	2200      	movs	r2, #0
   d7ad8:	4611      	mov	r1, r2
   d7ada:	6840      	ldr	r0, [r0, #4]
   d7adc:	f7ff ba28 	b.w	d6f30 <network_ready>

000d7ae0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7ae0:	2200      	movs	r2, #0
   d7ae2:	4611      	mov	r1, r2
   d7ae4:	6840      	ldr	r0, [r0, #4]
   d7ae6:	f7ff ba13 	b.w	d6f10 <network_connecting>

000d7aea <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7aea:	2200      	movs	r2, #0
   d7aec:	2102      	movs	r1, #2
   d7aee:	6840      	ldr	r0, [r0, #4]
   d7af0:	f7ff ba16 	b.w	d6f20 <network_disconnect>

000d7af4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7af4:	2300      	movs	r3, #0
   d7af6:	461a      	mov	r2, r3
   d7af8:	6840      	ldr	r0, [r0, #4]
   d7afa:	f7ff ba01 	b.w	d6f00 <network_connect>

000d7afe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7afe:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7b00:	4605      	mov	r5, r0
   d7b02:	b178      	cbz	r0, d7b24 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b04:	6804      	ldr	r4, [r0, #0]
   d7b06:	b144      	cbz	r4, d7b1a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    ~_Function_base()
    {
      if (_M_manager)
   d7b08:	68a3      	ldr	r3, [r4, #8]
   d7b0a:	b11b      	cbz	r3, d7b14 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7b0c:	2203      	movs	r2, #3
   d7b0e:	4621      	mov	r1, r4
   d7b10:	4620      	mov	r0, r4
   d7b12:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7b14:	4620      	mov	r0, r4
   d7b16:	f7fc fac0 	bl	d409a <_ZdlPv>
   d7b1a:	4628      	mov	r0, r5
      }
   d7b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7b20:	f7fc babb 	b.w	d409a <_ZdlPv>
   d7b24:	bd38      	pop	{r3, r4, r5, pc}

000d7b26 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d7b26:	b110      	cbz	r0, d7b2e <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d7b28:	6803      	ldr	r3, [r0, #0]
   d7b2a:	685b      	ldr	r3, [r3, #4]
   d7b2c:	4718      	bx	r3
   d7b2e:	4770      	bx	lr

000d7b30 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7b30:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7b32:	6803      	ldr	r3, [r0, #0]
   d7b34:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7b36:	b1bb      	cbz	r3, d7b68 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7b38:	6858      	ldr	r0, [r3, #4]
   d7b3a:	f7ff f845 	bl	d6bc8 <os_thread_is_current>
   d7b3e:	b978      	cbnz	r0, d7b60 <_ZN6ThreadD1Ev+0x30>
   d7b40:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7b42:	7c5a      	ldrb	r2, [r3, #17]
   d7b44:	b912      	cbnz	r2, d7b4c <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7b46:	6858      	ldr	r0, [r3, #4]
   d7b48:	f7ff f846 	bl	d6bd8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7b4c:	6823      	ldr	r3, [r4, #0]
   d7b4e:	6858      	ldr	r0, [r3, #4]
   d7b50:	f7ff f84a 	bl	d6be8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b54:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7b56:	2300      	movs	r3, #0
   d7b58:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7b5a:	b128      	cbz	r0, d7b68 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7b5c:	f7ff ffcf 	bl	d7afe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b60:	6820      	ldr	r0, [r4, #0]
   d7b62:	b108      	cbz	r0, d7b68 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7b64:	f7ff ffcb 	bl	d7afe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d7b68:	4620      	mov	r0, r4
   d7b6a:	bd10      	pop	{r4, pc}

000d7b6c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7b6c:	b538      	push	{r3, r4, r5, lr}
   d7b6e:	4b0b      	ldr	r3, [pc, #44]	; (d7b9c <_ZN5spark9MeshClassD1Ev+0x30>)
   d7b70:	6003      	str	r3, [r0, #0]
   d7b72:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b74:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d7b78:	b108      	cbz	r0, d7b7e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7b7a:	f7fc fa90 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b7e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d7b82:	b12d      	cbz	r5, d7b90 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7b84:	4628      	mov	r0, r5
   d7b86:	f7ff ffd3 	bl	d7b30 <_ZN6ThreadD1Ev>
   d7b8a:	4628      	mov	r0, r5
   d7b8c:	f7fc fa85 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7b90:	68a0      	ldr	r0, [r4, #8]
   d7b92:	b108      	cbz	r0, d7b98 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d7b94:	f7ff ffc7 	bl	d7b26 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d7b98:	4620      	mov	r0, r4
   d7b9a:	bd38      	pop	{r3, r4, r5, pc}
   d7b9c:	000d96d4 	.word	0x000d96d4

000d7ba0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7ba0:	b538      	push	{r3, r4, r5, lr}
   d7ba2:	4c0d      	ldr	r4, [pc, #52]	; (d7bd8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d7ba4:	4b0d      	ldr	r3, [pc, #52]	; (d7bdc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d7ba6:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7ba8:	2500      	movs	r5, #0
   d7baa:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7bac:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7bb0:	6063      	str	r3, [r4, #4]
   d7bb2:	60a5      	str	r5, [r4, #8]
   d7bb4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7bb8:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7bbc:	f7ff f834 	bl	d6c28 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7bc0:	4b07      	ldr	r3, [pc, #28]	; (d7be0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d7bc2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d7bc6:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7bc8:	4620      	mov	r0, r4
   d7bca:	4a06      	ldr	r2, [pc, #24]	; (d7be4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d7bcc:	4906      	ldr	r1, [pc, #24]	; (d7be8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d7bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7bd2:	f000 bc45 	b.w	d8460 <__aeabi_atexit>
   d7bd6:	bf00      	nop
   d7bd8:	2003e534 	.word	0x2003e534
   d7bdc:	000d97bc 	.word	0x000d97bc
   d7be0:	000d96d4 	.word	0x000d96d4
   d7be4:	2003d268 	.word	0x2003d268
   d7be8:	000d7b6d 	.word	0x000d7b6d

000d7bec <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d7bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7bee:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7bf0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d7bf2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7bf6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7bf8:	2201      	movs	r2, #1
   d7bfa:	f04f 33ff 	mov.w	r3, #4294967295
   d7bfe:	4621      	mov	r1, r4
   d7c00:	47a8      	blx	r5
}
   d7c02:	b003      	add	sp, #12
   d7c04:	bd30      	pop	{r4, r5, pc}

000d7c06 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7c06:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7c08:	6803      	ldr	r3, [r0, #0]
   d7c0a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7c0c:	f04f 33ff 	mov.w	r3, #4294967295
   d7c10:	46a4      	mov	ip, r4
}
   d7c12:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7c16:	4760      	bx	ip

000d7c18 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7c1a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7c1c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7c1e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7c22:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7c24:	4621      	mov	r1, r4
   d7c26:	4613      	mov	r3, r2
   d7c28:	2201      	movs	r2, #1
   d7c2a:	47a8      	blx	r5
}
   d7c2c:	b003      	add	sp, #12
   d7c2e:	bd30      	pop	{r4, r5, pc}

000d7c30 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7c30:	4770      	bx	lr

000d7c32 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7c32:	b538      	push	{r3, r4, r5, lr}
   d7c34:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7c36:	681a      	ldr	r2, [r3, #0]
   d7c38:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7c3a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7c3c:	da05      	bge.n	d7c4a <_ZN9TCPClient9connectedEv+0x18>
   d7c3e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7c42:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7c46:	429a      	cmp	r2, r3
   d7c48:	d001      	beq.n	d7c4e <_ZN9TCPClient9connectedEv+0x1c>
   d7c4a:	2501      	movs	r5, #1
   d7c4c:	e00b      	b.n	d7c66 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7c4e:	6803      	ldr	r3, [r0, #0]
   d7c50:	691b      	ldr	r3, [r3, #16]
   d7c52:	4798      	blx	r3
   d7c54:	2800      	cmp	r0, #0
   d7c56:	bf14      	ite	ne
   d7c58:	2501      	movne	r5, #1
   d7c5a:	2500      	moveq	r5, #0
        if (!rv) {
   d7c5c:	d103      	bne.n	d7c66 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7c5e:	6823      	ldr	r3, [r4, #0]
   d7c60:	4620      	mov	r0, r4
   d7c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7c64:	4798      	blx	r3
        }
    }
    return rv;
}
   d7c66:	4628      	mov	r0, r5
   d7c68:	bd38      	pop	{r3, r4, r5, pc}

000d7c6a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7c6a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7c6c:	6818      	ldr	r0, [r3, #0]
}
   d7c6e:	43c0      	mvns	r0, r0
   d7c70:	0fc0      	lsrs	r0, r0, #31
   d7c72:	4770      	bx	lr

000d7c74 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7c74:	4770      	bx	lr

000d7c76 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7c76:	2000      	movs	r0, #0
   d7c78:	4770      	bx	lr

000d7c7a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7c7a:	b510      	push	{r4, lr}
   d7c7c:	4604      	mov	r4, r0
   d7c7e:	f7fc fa0c 	bl	d409a <_ZdlPv>
   d7c82:	4620      	mov	r0, r4
   d7c84:	bd10      	pop	{r4, pc}

000d7c86 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7c86:	f7fc ba08 	b.w	d409a <_ZdlPv>
	...

000d7c8c <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7c90:	4698      	mov	r8, r3
    stop();
   d7c92:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7c94:	b093      	sub	sp, #76	; 0x4c
    stop();
   d7c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7c98:	460c      	mov	r4, r1
   d7c9a:	4606      	mov	r6, r0
   d7c9c:	4617      	mov	r7, r2
    stop();
   d7c9e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d7ca0:	ab12      	add	r3, sp, #72	; 0x48
   d7ca2:	2500      	movs	r5, #0
   d7ca4:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d7ca8:	462a      	mov	r2, r5
   d7caa:	4629      	mov	r1, r5
   d7cac:	4620      	mov	r0, r4
   d7cae:	f7fe ff03 	bl	d6ab8 <netdb_getaddrinfo>
   d7cb2:	2800      	cmp	r0, #0
   d7cb4:	db3a      	blt.n	d7d2c <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7cb6:	9b00      	ldr	r3, [sp, #0]
   d7cb8:	2b00      	cmp	r3, #0
   d7cba:	d039      	beq.n	d7d30 <_ZN9TCPClient7connectEPKctm+0xa4>
   d7cbc:	695b      	ldr	r3, [r3, #20]
   d7cbe:	2b00      	cmp	r3, #0
   d7cc0:	d036      	beq.n	d7d30 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d7cc2:	a806      	add	r0, sp, #24
   d7cc4:	f7ff fd3e 	bl	d7744 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7cc8:	9b00      	ldr	r3, [sp, #0]
   d7cca:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7ccc:	7863      	ldrb	r3, [r4, #1]
   d7cce:	2b02      	cmp	r3, #2
   d7cd0:	d101      	bne.n	d7cd6 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7cd2:	1d21      	adds	r1, r4, #4
   d7cd4:	e013      	b.n	d7cfe <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7cd6:	2b0a      	cmp	r3, #10
   d7cd8:	d114      	bne.n	d7d04 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7cda:	2211      	movs	r2, #17
   d7cdc:	4629      	mov	r1, r5
   d7cde:	a801      	add	r0, sp, #4
   d7ce0:	f001 f97a 	bl	d8fd8 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7ce4:	68a3      	ldr	r3, [r4, #8]
   d7ce6:	bb33      	cbnz	r3, d7d36 <_ZN9TCPClient7connectEPKctm+0xaa>
   d7ce8:	68e3      	ldr	r3, [r4, #12]
   d7cea:	bb23      	cbnz	r3, d7d36 <_ZN9TCPClient7connectEPKctm+0xaa>
   d7cec:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7cf0:	6925      	ldr	r5, [r4, #16]
   d7cf2:	f7fe ffa9 	bl	d6c48 <inet_htonl>
   d7cf6:	4285      	cmp	r5, r0
   d7cf8:	d11d      	bne.n	d7d36 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7cfa:	f104 0114 	add.w	r1, r4, #20
   d7cfe:	a806      	add	r0, sp, #24
   d7d00:	f7ff fd70 	bl	d77e4 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7d04:	a806      	add	r0, sp, #24
   d7d06:	f7ff fd3d 	bl	d7784 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7d0a:	b188      	cbz	r0, d7d30 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d7d0c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7d0e:	ad07      	add	r5, sp, #28
   d7d10:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7d14:	4b18      	ldr	r3, [pc, #96]	; (d7d78 <_ZN9TCPClient7connectEPKctm+0xec>)
   d7d16:	930c      	str	r3, [sp, #48]	; 0x30
   d7d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d1a:	ac0d      	add	r4, sp, #52	; 0x34
   d7d1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d1e:	682b      	ldr	r3, [r5, #0]
   d7d20:	7023      	strb	r3, [r4, #0]
   d7d22:	463a      	mov	r2, r7
   d7d24:	4643      	mov	r3, r8
   d7d26:	a90c      	add	r1, sp, #48	; 0x30
   d7d28:	4630      	mov	r0, r6
   d7d2a:	47c8      	blx	r9
   d7d2c:	4604      	mov	r4, r0
   d7d2e:	e01c      	b.n	d7d6a <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d7d30:	f04f 34ff 	mov.w	r4, #4294967295
   d7d34:	e019      	b.n	d7d6a <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7d36:	f104 0308 	add.w	r3, r4, #8
   d7d3a:	ad01      	add	r5, sp, #4
   d7d3c:	3418      	adds	r4, #24
   d7d3e:	6818      	ldr	r0, [r3, #0]
   d7d40:	6859      	ldr	r1, [r3, #4]
   d7d42:	462a      	mov	r2, r5
   d7d44:	c203      	stmia	r2!, {r0, r1}
   d7d46:	3308      	adds	r3, #8
   d7d48:	42a3      	cmp	r3, r4
   d7d4a:	4615      	mov	r5, r2
   d7d4c:	d1f7      	bne.n	d7d3e <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d7d4e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7d50:	a901      	add	r1, sp, #4
   d7d52:	a80c      	add	r0, sp, #48	; 0x30
   d7d54:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7d56:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7d5a:	f7ff fd01 	bl	d7760 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7d5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d60:	ac07      	add	r4, sp, #28
   d7d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d64:	682b      	ldr	r3, [r5, #0]
   d7d66:	7023      	strb	r3, [r4, #0]
   d7d68:	e7cc      	b.n	d7d04 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7d6a:	9800      	ldr	r0, [sp, #0]
   d7d6c:	f7fe fe9c 	bl	d6aa8 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d7d70:	4620      	mov	r0, r4
   d7d72:	b013      	add	sp, #76	; 0x4c
   d7d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7d78:	000d9638 	.word	0x000d9638

000d7d7c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7d7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7d7e:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7d80:	2200      	movs	r2, #0
   d7d82:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7d84:	9202      	str	r2, [sp, #8]
   d7d86:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7d88:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7d8a:	4604      	mov	r4, r0
   d7d8c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7d8e:	d008      	beq.n	d7da2 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7d94:	fbb3 f1f2 	udiv	r1, r3, r2
   d7d98:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7d9a:	fb02 3111 	mls	r1, r2, r1, r3
   d7d9e:	434a      	muls	r2, r1
   d7da0:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7da2:	6960      	ldr	r0, [r4, #20]
   d7da4:	2308      	movs	r3, #8
   d7da6:	9300      	str	r3, [sp, #0]
   d7da8:	f241 0205 	movw	r2, #4101	; 0x1005
   d7dac:	446b      	add	r3, sp
   d7dae:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7db2:	6800      	ldr	r0, [r0, #0]
   d7db4:	f7ff f800 	bl	d6db8 <sock_setsockopt>
    if (ret < 0) {
   d7db8:	2800      	cmp	r0, #0
   d7dba:	db08      	blt.n	d7dce <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7dbc:	6960      	ldr	r0, [r4, #20]
   d7dbe:	2300      	movs	r3, #0
   d7dc0:	4632      	mov	r2, r6
   d7dc2:	4629      	mov	r1, r5
   d7dc4:	6800      	ldr	r0, [r0, #0]
   d7dc6:	f7ff f817 	bl	d6df8 <sock_send>
    if (ret < 0) {
   d7dca:	2800      	cmp	r0, #0
   d7dcc:	da04      	bge.n	d7dd8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7dce:	f7ff f927 	bl	d7020 <__errno>
   d7dd2:	6803      	ldr	r3, [r0, #0]
   d7dd4:	6063      	str	r3, [r4, #4]
   d7dd6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d7dd8:	b004      	add	sp, #16
   d7dda:	bd70      	pop	{r4, r5, r6, pc}

000d7ddc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7ddc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7dde:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7de0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d7de2:	689b      	ldr	r3, [r3, #8]
   d7de4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7de6:	68a3      	ldr	r3, [r4, #8]
   d7de8:	3b01      	subs	r3, #1
   d7dea:	60a3      	str	r3, [r4, #8]
   d7dec:	b92b      	cbnz	r3, d7dfa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d7dee:	6823      	ldr	r3, [r4, #0]
   d7df0:	4620      	mov	r0, r4
   d7df2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d7df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d7df8:	4718      	bx	r3
   d7dfa:	bd10      	pop	{r4, pc}

000d7dfc <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d7dfc:	b570      	push	{r4, r5, r6, lr}
   d7dfe:	4604      	mov	r4, r0
   d7e00:	694d      	ldr	r5, [r1, #20]
   d7e02:	4b05      	ldr	r3, [pc, #20]	; (d7e18 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7e04:	f844 3b04 	str.w	r3, [r4], #4
   d7e08:	358c      	adds	r5, #140	; 0x8c
   d7e0a:	4606      	mov	r6, r0
   d7e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7e10:	682b      	ldr	r3, [r5, #0]
   d7e12:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7e14:	4630      	mov	r0, r6
   d7e16:	bd70      	pop	{r4, r5, r6, pc}
   d7e18:	000d9638 	.word	0x000d9638

000d7e1c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7e1c:	b510      	push	{r4, lr}
   d7e1e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7e20:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7e24:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7e28:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7e2a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7e2c:	d005      	beq.n	d7e3a <_ZN9TCPClient4peekEv+0x1e>
   d7e2e:	6962      	ldr	r2, [r4, #20]
   d7e30:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7e34:	4413      	add	r3, r2
   d7e36:	7918      	ldrb	r0, [r3, #4]
   d7e38:	bd10      	pop	{r4, pc}
   d7e3a:	6803      	ldr	r3, [r0, #0]
   d7e3c:	691b      	ldr	r3, [r3, #16]
   d7e3e:	4798      	blx	r3
   d7e40:	2800      	cmp	r0, #0
   d7e42:	d1f4      	bne.n	d7e2e <_ZN9TCPClient4peekEv+0x12>
   d7e44:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7e48:	bd10      	pop	{r4, pc}

000d7e4a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7e4a:	b510      	push	{r4, lr}
   d7e4c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7e4e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7e52:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7e56:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7e58:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7e5a:	d008      	beq.n	d7e6e <_ZN9TCPClient4readEv+0x24>
   d7e5c:	6962      	ldr	r2, [r4, #20]
   d7e5e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7e62:	1c59      	adds	r1, r3, #1
   d7e64:	4413      	add	r3, r2
   d7e66:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d7e6a:	7918      	ldrb	r0, [r3, #4]
   d7e6c:	bd10      	pop	{r4, pc}
   d7e6e:	6803      	ldr	r3, [r0, #0]
   d7e70:	691b      	ldr	r3, [r3, #16]
   d7e72:	4798      	blx	r3
   d7e74:	2800      	cmp	r0, #0
   d7e76:	d1f1      	bne.n	d7e5c <_ZN9TCPClient4readEv+0x12>
   d7e78:	f04f 30ff 	mov.w	r0, #4294967295
}
   d7e7c:	bd10      	pop	{r4, pc}

000d7e7e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7e80:	6943      	ldr	r3, [r0, #20]
   d7e82:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7e84:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7e88:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7e8c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7e8e:	4605      	mov	r5, r0
   d7e90:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7e92:	d106      	bne.n	d7ea2 <_ZN9TCPClient4readEPhj+0x24>
   d7e94:	6803      	ldr	r3, [r0, #0]
   d7e96:	691b      	ldr	r3, [r3, #16]
   d7e98:	4798      	blx	r3
   d7e9a:	b910      	cbnz	r0, d7ea2 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7e9c:	f04f 34ff 	mov.w	r4, #4294967295
   d7ea0:	e014      	b.n	d7ecc <_ZN9TCPClient4readEPhj+0x4e>
   d7ea2:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7ea4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7ea8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7eac:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7eae:	42bc      	cmp	r4, r7
   d7eb0:	bf28      	it	cs
   d7eb2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7eb4:	4419      	add	r1, r3
   d7eb6:	4622      	mov	r2, r4
   d7eb8:	3104      	adds	r1, #4
   d7eba:	4630      	mov	r0, r6
   d7ebc:	f001 f881 	bl	d8fc2 <memcpy>
   d7ec0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7ec2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7ec6:	4423      	add	r3, r4
   d7ec8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7ecc:	4620      	mov	r0, r4
   d7ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ed0 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7ed0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7ed2:	2300      	movs	r3, #0
   d7ed4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7ed8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7eda:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7ede:	4770      	bx	lr

000d7ee0 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7ee4:	4698      	mov	r8, r3
    stop();
   d7ee6:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7ee8:	460d      	mov	r5, r1
   d7eea:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7eee:	4606      	mov	r6, r0
   d7ef0:	4617      	mov	r7, r2
    stop();
   d7ef2:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7ef4:	7d2b      	ldrb	r3, [r5, #20]
   d7ef6:	6974      	ldr	r4, [r6, #20]
   d7ef8:	2b04      	cmp	r3, #4
   d7efa:	bf0c      	ite	eq
   d7efc:	2002      	moveq	r0, #2
   d7efe:	200a      	movne	r0, #10
   d7f00:	2206      	movs	r2, #6
   d7f02:	2101      	movs	r1, #1
   d7f04:	f7fe ff80 	bl	d6e08 <sock_socket>
   d7f08:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d7f0a:	6973      	ldr	r3, [r6, #20]
   d7f0c:	681c      	ldr	r4, [r3, #0]
   d7f0e:	2c00      	cmp	r4, #0
   d7f10:	db5b      	blt.n	d7fca <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d7f12:	4630      	mov	r0, r6
   d7f14:	f7ff ffdc 	bl	d7ed0 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7f18:	f1b8 0f00 	cmp.w	r8, #0
   d7f1c:	d017      	beq.n	d7f4e <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d7f1e:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d7f20:	a903      	add	r1, sp, #12
   d7f22:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7f26:	9303      	str	r3, [sp, #12]
   d7f28:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d7f2c:	f7fe fe2c 	bl	d6b88 <if_index_to_name>
   d7f30:	2800      	cmp	r0, #0
   d7f32:	db49      	blt.n	d7fc8 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d7f34:	6970      	ldr	r0, [r6, #20]
   d7f36:	2306      	movs	r3, #6
   d7f38:	9300      	str	r3, [sp, #0]
   d7f3a:	f241 020b 	movw	r2, #4107	; 0x100b
   d7f3e:	ab03      	add	r3, sp, #12
   d7f40:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7f44:	6800      	ldr	r0, [r0, #0]
   d7f46:	f7fe ff37 	bl	d6db8 <sock_setsockopt>
   d7f4a:	2800      	cmp	r0, #0
   d7f4c:	db3c      	blt.n	d7fc8 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7f4e:	241c      	movs	r4, #28
   d7f50:	4622      	mov	r2, r4
   d7f52:	2100      	movs	r1, #0
   d7f54:	a803      	add	r0, sp, #12
   d7f56:	f001 f83f 	bl	d8fd8 <memset>
    if (ip.version() == 4) {
   d7f5a:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7f5c:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d7f60:	2b04      	cmp	r3, #4
   d7f62:	d10c      	bne.n	d7f7e <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7f64:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7f66:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7f68:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7f6c:	f7fe fe74 	bl	d6c58 <inet_htons>
   d7f70:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7f74:	6868      	ldr	r0, [r5, #4]
   d7f76:	f7fe fe67 	bl	d6c48 <inet_htonl>
   d7f7a:	9004      	str	r0, [sp, #16]
   d7f7c:	e013      	b.n	d7fa6 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7f7e:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7f80:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7f82:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7f86:	f7fe fe67 	bl	d6c58 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7f8a:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7f8c:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7f90:	1d2b      	adds	r3, r5, #4
   d7f92:	f105 0714 	add.w	r7, r5, #20
   d7f96:	6818      	ldr	r0, [r3, #0]
   d7f98:	6859      	ldr	r1, [r3, #4]
   d7f9a:	4622      	mov	r2, r4
   d7f9c:	c203      	stmia	r2!, {r0, r1}
   d7f9e:	3308      	adds	r3, #8
   d7fa0:	42bb      	cmp	r3, r7
   d7fa2:	4614      	mov	r4, r2
   d7fa4:	d1f7      	bne.n	d7f96 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d7fa6:	6973      	ldr	r3, [r6, #20]
   d7fa8:	221c      	movs	r2, #28
   d7faa:	a903      	add	r1, sp, #12
   d7fac:	6818      	ldr	r0, [r3, #0]
   d7fae:	f7fe ff13 	bl	d6dd8 <sock_connect>
   d7fb2:	2800      	cmp	r0, #0
   d7fb4:	db08      	blt.n	d7fc8 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d7fb6:	1d2c      	adds	r4, r5, #4
   d7fb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7fba:	6976      	ldr	r6, [r6, #20]
   d7fbc:	368c      	adds	r6, #140	; 0x8c
   d7fbe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d7fc0:	6823      	ldr	r3, [r4, #0]
   d7fc2:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d7fc4:	2401      	movs	r4, #1
   d7fc6:	e004      	b.n	d7fd2 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d7fc8:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7fca:	6833      	ldr	r3, [r6, #0]
   d7fcc:	4630      	mov	r0, r6
   d7fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7fd0:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d7fd2:	4620      	mov	r0, r4
   d7fd4:	b00a      	add	sp, #40	; 0x28
   d7fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7fda <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7fda:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7fdc:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7fde:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7fe0:	6818      	ldr	r0, [r3, #0]
   d7fe2:	2800      	cmp	r0, #0
   d7fe4:	db01      	blt.n	d7fea <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7fe6:	f7fe feef 	bl	d6dc8 <sock_close>
   d7fea:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7fec:	f04f 32ff 	mov.w	r2, #4294967295
   d7ff0:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7ff2:	6960      	ldr	r0, [r4, #20]
   d7ff4:	2211      	movs	r2, #17
   d7ff6:	2100      	movs	r1, #0
   d7ff8:	308c      	adds	r0, #140	; 0x8c
   d7ffa:	f000 ffed 	bl	d8fd8 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7ffe:	4620      	mov	r0, r4
}
   d8000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d8004:	f7ff bf64 	b.w	d7ed0 <_ZN9TCPClient12flush_bufferEv>

000d8008 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8008:	b530      	push	{r4, r5, lr}
   d800a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d800c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8010:	b08b      	sub	sp, #44	; 0x2c
   d8012:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8014:	b11b      	cbz	r3, d801e <_ZN9TCPClient9availableEv+0x16>
   d8016:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d801a:	429a      	cmp	r2, r3
   d801c:	d040      	beq.n	d80a0 <_ZN9TCPClient9availableEv+0x98>
   d801e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d8020:	6818      	ldr	r0, [r3, #0]
   d8022:	2800      	cmp	r0, #0
   d8024:	db3f      	blt.n	d80a6 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d8026:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d802a:	2d7f      	cmp	r5, #127	; 0x7f
   d802c:	d83b      	bhi.n	d80a6 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d802e:	1d19      	adds	r1, r3, #4
   d8030:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8034:	2308      	movs	r3, #8
   d8036:	4429      	add	r1, r5
   d8038:	f7fe fed6 	bl	d6de8 <sock_recv>
            if (ret > 0) {
   d803c:	2800      	cmp	r0, #0
   d803e:	dd0c      	ble.n	d805a <_ZN9TCPClient9availableEv+0x52>
   d8040:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8042:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8046:	b90a      	cbnz	r2, d804c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8048:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d804c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d804e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8052:	4418      	add	r0, r3
   d8054:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8058:	e025      	b.n	d80a6 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d805a:	f7fe ffe1 	bl	d7020 <__errno>
   d805e:	6803      	ldr	r3, [r0, #0]
   d8060:	2b0b      	cmp	r3, #11
   d8062:	d020      	beq.n	d80a6 <_ZN9TCPClient9availableEv+0x9e>
   d8064:	f7fe ffdc 	bl	d7020 <__errno>
   d8068:	6803      	ldr	r3, [r0, #0]
   d806a:	2b0b      	cmp	r3, #11
   d806c:	d01b      	beq.n	d80a6 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d806e:	2320      	movs	r3, #32
   d8070:	2500      	movs	r5, #0
   d8072:	9302      	str	r3, [sp, #8]
   d8074:	9503      	str	r5, [sp, #12]
   d8076:	f7fe ffd3 	bl	d7020 <__errno>
   d807a:	6803      	ldr	r3, [r0, #0]
   d807c:	9301      	str	r3, [sp, #4]
   d807e:	4b0e      	ldr	r3, [pc, #56]	; (d80b8 <_ZN9TCPClient9availableEv+0xb0>)
   d8080:	9300      	str	r3, [sp, #0]
   d8082:	aa02      	add	r2, sp, #8
   d8084:	462b      	mov	r3, r5
   d8086:	490d      	ldr	r1, [pc, #52]	; (d80bc <_ZN9TCPClient9availableEv+0xb4>)
   d8088:	2032      	movs	r0, #50	; 0x32
   d808a:	f7fe ff05 	bl	d6e98 <log_message>
                    sock_close(d_->sock);
   d808e:	6963      	ldr	r3, [r4, #20]
   d8090:	6818      	ldr	r0, [r3, #0]
   d8092:	f7fe fe99 	bl	d6dc8 <sock_close>
   d8096:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8098:	f04f 32ff 	mov.w	r2, #4294967295
   d809c:	601a      	str	r2, [r3, #0]
   d809e:	e002      	b.n	d80a6 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d80a0:	f7ff ff16 	bl	d7ed0 <_ZN9TCPClient12flush_bufferEv>
   d80a4:	e7bb      	b.n	d801e <_ZN9TCPClient9availableEv+0x16>
   d80a6:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d80a8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d80ac:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d80b0:	1a18      	subs	r0, r3, r0
}
   d80b2:	b00b      	add	sp, #44	; 0x2c
   d80b4:	bd30      	pop	{r4, r5, pc}
   d80b6:	bf00      	nop
   d80b8:	000d976f 	.word	0x000d976f
   d80bc:	000d9768 	.word	0x000d9768

000d80c0 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d80c0:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d80c2:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d80c4:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d80c6:	6001      	str	r1, [r0, #0]
   d80c8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d80cc:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d80d0:	3088      	adds	r0, #136	; 0x88
   d80d2:	f7ff fb37 	bl	d7744 <_ZN9IPAddressC1Ev>
}
   d80d6:	4620      	mov	r0, r4
   d80d8:	bd10      	pop	{r4, pc}
	...

000d80dc <_ZN9TCPClientC1Ei>:
   d80dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d80e0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d80e2:	2300      	movs	r3, #0
   d80e4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d80e6:	4a14      	ldr	r2, [pc, #80]	; (d8138 <_ZN9TCPClientC1Ei+0x5c>)
   d80e8:	6043      	str	r3, [r0, #4]
   d80ea:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d80ec:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d80ee:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d80f0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d80f2:	20a0      	movs	r0, #160	; 0xa0
   d80f4:	460e      	mov	r6, r1
   d80f6:	f7fb ffce 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d80fa:	4605      	mov	r5, r0
   d80fc:	b110      	cbz	r0, d8104 <_ZN9TCPClientC1Ei+0x28>
   d80fe:	4631      	mov	r1, r6
   d8100:	f7ff ffde 	bl	d80c0 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8104:	2014      	movs	r0, #20
   d8106:	f7fb ffc6 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d810a:	4603      	mov	r3, r0
   d810c:	b128      	cbz	r0, d811a <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d810e:	2201      	movs	r2, #1
   d8110:	6042      	str	r2, [r0, #4]
   d8112:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8114:	4a09      	ldr	r2, [pc, #36]	; (d813c <_ZN9TCPClientC1Ei+0x60>)
   d8116:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8118:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d811a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d811c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d811e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d8120:	b128      	cbz	r0, d812e <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8122:	6843      	ldr	r3, [r0, #4]
   d8124:	3b01      	subs	r3, #1
   d8126:	6043      	str	r3, [r0, #4]
   d8128:	b90b      	cbnz	r3, d812e <_ZN9TCPClientC1Ei+0x52>
   d812a:	f7ff fe57 	bl	d7ddc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d812e:	4620      	mov	r0, r4
   d8130:	f7ff fece 	bl	d7ed0 <_ZN9TCPClient12flush_bufferEv>
}
   d8134:	4620      	mov	r0, r4
   d8136:	bd70      	pop	{r4, r5, r6, pc}
   d8138:	000d9724 	.word	0x000d9724
   d813c:	000d9708 	.word	0x000d9708

000d8140 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8140:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8142:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8146:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8148:	f7ff ffc8 	bl	d80dc <_ZN9TCPClientC1Ei>
}
   d814c:	4620      	mov	r0, r4
   d814e:	bd10      	pop	{r4, pc}

000d8150 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8150:	b510      	push	{r4, lr}
   d8152:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8154:	6800      	ldr	r0, [r0, #0]
   d8156:	2800      	cmp	r0, #0
   d8158:	db01      	blt.n	d815e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d815a:	f7fe fe35 	bl	d6dc8 <sock_close>
    }
}
   d815e:	4620      	mov	r0, r4
   d8160:	bd10      	pop	{r4, pc}

000d8162 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8162:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8164:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d8166:	4620      	mov	r0, r4
   d8168:	f7ff fff2 	bl	d8150 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d816c:	b124      	cbz	r4, d8178 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d816e:	4620      	mov	r0, r4
   d8170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8174:	f7fb bf91 	b.w	d409a <_ZdlPv>
   d8178:	bd10      	pop	{r4, pc}

000d817a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d817a:	2200      	movs	r2, #0
   d817c:	4611      	mov	r1, r2
   d817e:	6840      	ldr	r0, [r0, #4]
   d8180:	f7fe bed6 	b.w	d6f30 <network_ready>

000d8184 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8184:	2200      	movs	r2, #0
   d8186:	4611      	mov	r1, r2
   d8188:	6840      	ldr	r0, [r0, #4]
   d818a:	f7fe bef1 	b.w	d6f70 <network_listening>

000d818e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d818e:	2200      	movs	r2, #0
   d8190:	4611      	mov	r1, r2
   d8192:	6840      	ldr	r0, [r0, #4]
   d8194:	f7fe bf04 	b.w	d6fa0 <network_get_listen_timeout>

000d8198 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8198:	2200      	movs	r2, #0
   d819a:	6840      	ldr	r0, [r0, #4]
   d819c:	f7fe bef8 	b.w	d6f90 <network_set_listen_timeout>

000d81a0 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d81a0:	2200      	movs	r2, #0
   d81a2:	f081 0101 	eor.w	r1, r1, #1
   d81a6:	6840      	ldr	r0, [r0, #4]
   d81a8:	f7fe beda 	b.w	d6f60 <network_listen>

000d81ac <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d81ac:	2300      	movs	r3, #0
   d81ae:	461a      	mov	r2, r3
   d81b0:	4619      	mov	r1, r3
   d81b2:	6840      	ldr	r0, [r0, #4]
   d81b4:	f7fe becc 	b.w	d6f50 <network_off>

000d81b8 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d81b8:	2300      	movs	r3, #0
   d81ba:	461a      	mov	r2, r3
   d81bc:	4619      	mov	r1, r3
   d81be:	6840      	ldr	r0, [r0, #4]
   d81c0:	f7fe bebe 	b.w	d6f40 <network_on>

000d81c4 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d81c4:	2200      	movs	r2, #0
   d81c6:	4611      	mov	r1, r2
   d81c8:	6840      	ldr	r0, [r0, #4]
   d81ca:	f7fe bea1 	b.w	d6f10 <network_connecting>

000d81ce <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d81ce:	2200      	movs	r2, #0
   d81d0:	2102      	movs	r1, #2
   d81d2:	6840      	ldr	r0, [r0, #4]
   d81d4:	f7fe bea4 	b.w	d6f20 <network_disconnect>

000d81d8 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d81d8:	2300      	movs	r3, #0
   d81da:	461a      	mov	r2, r3
   d81dc:	6840      	ldr	r0, [r0, #4]
   d81de:	f7fe be8f 	b.w	d6f00 <network_connect>
	...

000d81e4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d81e4:	4b02      	ldr	r3, [pc, #8]	; (d81f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d81e6:	2204      	movs	r2, #4
   d81e8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d81ea:	4a02      	ldr	r2, [pc, #8]	; (d81f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d81ec:	601a      	str	r2, [r3, #0]
   d81ee:	4770      	bx	lr
   d81f0:	2003e704 	.word	0x2003e704
   d81f4:	000d9788 	.word	0x000d9788

000d81f8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d81f8:	2300      	movs	r3, #0
   d81fa:	461a      	mov	r2, r3
   d81fc:	6840      	ldr	r0, [r0, #4]
   d81fe:	f7fe be7f 	b.w	d6f00 <network_connect>

000d8202 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8202:	2200      	movs	r2, #0
   d8204:	2102      	movs	r1, #2
   d8206:	6840      	ldr	r0, [r0, #4]
   d8208:	f7fe be8a 	b.w	d6f20 <network_disconnect>

000d820c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d820c:	2200      	movs	r2, #0
   d820e:	4611      	mov	r1, r2
   d8210:	6840      	ldr	r0, [r0, #4]
   d8212:	f7fe be7d 	b.w	d6f10 <network_connecting>

000d8216 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8216:	2200      	movs	r2, #0
   d8218:	4611      	mov	r1, r2
   d821a:	6840      	ldr	r0, [r0, #4]
   d821c:	f7fe be88 	b.w	d6f30 <network_ready>

000d8220 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8220:	2300      	movs	r3, #0
   d8222:	461a      	mov	r2, r3
   d8224:	4619      	mov	r1, r3
   d8226:	6840      	ldr	r0, [r0, #4]
   d8228:	f7fe be8a 	b.w	d6f40 <network_on>

000d822c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d822c:	2300      	movs	r3, #0
   d822e:	461a      	mov	r2, r3
   d8230:	4619      	mov	r1, r3
   d8232:	6840      	ldr	r0, [r0, #4]
   d8234:	f7fe be8c 	b.w	d6f50 <network_off>

000d8238 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8238:	2200      	movs	r2, #0
   d823a:	f081 0101 	eor.w	r1, r1, #1
   d823e:	6840      	ldr	r0, [r0, #4]
   d8240:	f7fe be8e 	b.w	d6f60 <network_listen>

000d8244 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8244:	2200      	movs	r2, #0
   d8246:	6840      	ldr	r0, [r0, #4]
   d8248:	f7fe bea2 	b.w	d6f90 <network_set_listen_timeout>

000d824c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d824c:	2200      	movs	r2, #0
   d824e:	4611      	mov	r1, r2
   d8250:	6840      	ldr	r0, [r0, #4]
   d8252:	f7fe bea5 	b.w	d6fa0 <network_get_listen_timeout>

000d8256 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8256:	2200      	movs	r2, #0
   d8258:	4611      	mov	r1, r2
   d825a:	6840      	ldr	r0, [r0, #4]
   d825c:	f7fe be88 	b.w	d6f70 <network_listening>

000d8260 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8264:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8266:	b095      	sub	sp, #84	; 0x54
   d8268:	4616      	mov	r6, r2
   d826a:	460d      	mov	r5, r1
   d826c:	4607      	mov	r7, r0
    IPAddress addr;
   d826e:	f7ff fa69 	bl	d7744 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8272:	4621      	mov	r1, r4
   d8274:	2220      	movs	r2, #32
   d8276:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8278:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d827a:	f000 fead 	bl	d8fd8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d827e:	2340      	movs	r3, #64	; 0x40
   d8280:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8282:	4621      	mov	r1, r4
   d8284:	466b      	mov	r3, sp
   d8286:	aa0c      	add	r2, sp, #48	; 0x30
   d8288:	4630      	mov	r0, r6
   d828a:	f7fe fc15 	bl	d6ab8 <netdb_getaddrinfo>
    if (!r) {
   d828e:	4604      	mov	r4, r0
   d8290:	2800      	cmp	r0, #0
   d8292:	d144      	bne.n	d831e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8294:	4602      	mov	r2, r0
   d8296:	2101      	movs	r1, #1
   d8298:	6868      	ldr	r0, [r5, #4]
   d829a:	f7fe fe49 	bl	d6f30 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d829e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d82a0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d82a2:	4622      	mov	r2, r4
   d82a4:	6868      	ldr	r0, [r5, #4]
   d82a6:	f7fe fe43 	bl	d6f30 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d82aa:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d82ac:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d82ae:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d82b0:	2e00      	cmp	r6, #0
   d82b2:	d034      	beq.n	d831e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d82b4:	2900      	cmp	r1, #0
   d82b6:	d132      	bne.n	d831e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d82b8:	6873      	ldr	r3, [r6, #4]
   d82ba:	2b02      	cmp	r3, #2
   d82bc:	d002      	beq.n	d82c4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d82be:	2b0a      	cmp	r3, #10
   d82c0:	d009      	beq.n	d82d6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d82c2:	e02a      	b.n	d831a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d82c4:	f1b8 0f00 	cmp.w	r8, #0
   d82c8:	d027      	beq.n	d831a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d82ca:	6971      	ldr	r1, [r6, #20]
   d82cc:	4638      	mov	r0, r7
   d82ce:	3104      	adds	r1, #4
   d82d0:	f7ff fa88 	bl	d77e4 <_ZN9IPAddressaSEPKh>
   d82d4:	e020      	b.n	d8318 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d82d6:	f1b9 0f00 	cmp.w	r9, #0
   d82da:	d01e      	beq.n	d831a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d82dc:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d82de:	2211      	movs	r2, #17
   d82e0:	a801      	add	r0, sp, #4
   d82e2:	f000 fe79 	bl	d8fd8 <memset>
                    a.v = 6;
   d82e6:	2306      	movs	r3, #6
   d82e8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d82ec:	ad01      	add	r5, sp, #4
   d82ee:	f104 0308 	add.w	r3, r4, #8
   d82f2:	3418      	adds	r4, #24
   d82f4:	6818      	ldr	r0, [r3, #0]
   d82f6:	6859      	ldr	r1, [r3, #4]
   d82f8:	462a      	mov	r2, r5
   d82fa:	c203      	stmia	r2!, {r0, r1}
   d82fc:	3308      	adds	r3, #8
   d82fe:	42a3      	cmp	r3, r4
   d8300:	4615      	mov	r5, r2
   d8302:	d1f7      	bne.n	d82f4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8304:	a901      	add	r1, sp, #4
   d8306:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8308:	ad07      	add	r5, sp, #28
   d830a:	f7ff fa29 	bl	d7760 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d830e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8310:	1d3c      	adds	r4, r7, #4
   d8312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8314:	682b      	ldr	r3, [r5, #0]
   d8316:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8318:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d831a:	69f6      	ldr	r6, [r6, #28]
   d831c:	e7c8      	b.n	d82b0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d831e:	9800      	ldr	r0, [sp, #0]
   d8320:	f7fe fbc2 	bl	d6aa8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8324:	4638      	mov	r0, r7
   d8326:	b015      	add	sp, #84	; 0x54
   d8328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d832c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d832c:	4b02      	ldr	r3, [pc, #8]	; (d8338 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d832e:	4a03      	ldr	r2, [pc, #12]	; (d833c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8330:	601a      	str	r2, [r3, #0]
   d8332:	2200      	movs	r2, #0
   d8334:	605a      	str	r2, [r3, #4]
   d8336:	4770      	bx	lr
   d8338:	2003e70c 	.word	0x2003e70c
   d833c:	000d97bc 	.word	0x000d97bc

000d8340 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8340:	b510      	push	{r4, lr}
   d8342:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8344:	480f      	ldr	r0, [pc, #60]	; (d8384 <pinAvailable+0x44>)
   d8346:	f7fe ff74 	bl	d7232 <_ZN8SPIClass9isEnabledEv>
   d834a:	b128      	cbz	r0, d8358 <pinAvailable+0x18>
   d834c:	f1a4 030b 	sub.w	r3, r4, #11
   d8350:	2b02      	cmp	r3, #2
   d8352:	d801      	bhi.n	d8358 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d8354:	2000      	movs	r0, #0
   d8356:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8358:	f000 f862 	bl	d8420 <_Z19__fetch_global_Wirev>
   d835c:	f7ff fb97 	bl	d7a8e <_ZN7TwoWire9isEnabledEv>
   d8360:	b108      	cbz	r0, d8366 <pinAvailable+0x26>
   d8362:	2c01      	cmp	r4, #1
   d8364:	d9f6      	bls.n	d8354 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8366:	f7ff fb09 	bl	d797c <_Z22__fetch_global_Serial1v>
   d836a:	f7ff fb04 	bl	d7976 <_ZN11USARTSerial9isEnabledEv>
   d836e:	b118      	cbz	r0, d8378 <pinAvailable+0x38>
   d8370:	f1a4 0309 	sub.w	r3, r4, #9
   d8374:	2b01      	cmp	r3, #1
   d8376:	d9ed      	bls.n	d8354 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8378:	2c23      	cmp	r4, #35	; 0x23
   d837a:	bf8c      	ite	hi
   d837c:	2000      	movhi	r0, #0
   d837e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8380:	bd10      	pop	{r4, pc}
   d8382:	bf00      	nop
   d8384:	2003e714 	.word	0x2003e714

000d8388 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8388:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d838a:	b538      	push	{r3, r4, r5, lr}
   d838c:	4604      	mov	r4, r0
   d838e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8390:	d80a      	bhi.n	d83a8 <pinMode+0x20>
   d8392:	29ff      	cmp	r1, #255	; 0xff
   d8394:	d008      	beq.n	d83a8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8396:	f7ff ffd3 	bl	d8340 <pinAvailable>
   d839a:	b128      	cbz	r0, d83a8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d839c:	4629      	mov	r1, r5
   d839e:	4620      	mov	r0, r4
}
   d83a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d83a4:	f7fe bb98 	b.w	d6ad8 <HAL_Pin_Mode>
   d83a8:	bd38      	pop	{r3, r4, r5, pc}

000d83aa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d83aa:	b538      	push	{r3, r4, r5, lr}
   d83ac:	4604      	mov	r4, r0
   d83ae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d83b0:	f7fe fb9a 	bl	d6ae8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d83b4:	28ff      	cmp	r0, #255	; 0xff
   d83b6:	d010      	beq.n	d83da <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d83b8:	2806      	cmp	r0, #6
   d83ba:	d804      	bhi.n	d83c6 <digitalWrite+0x1c>
   d83bc:	234d      	movs	r3, #77	; 0x4d
   d83be:	fa23 f000 	lsr.w	r0, r3, r0
   d83c2:	07c3      	lsls	r3, r0, #31
   d83c4:	d409      	bmi.n	d83da <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d83c6:	4620      	mov	r0, r4
   d83c8:	f7ff ffba 	bl	d8340 <pinAvailable>
   d83cc:	b128      	cbz	r0, d83da <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d83ce:	4629      	mov	r1, r5
   d83d0:	4620      	mov	r0, r4
}
   d83d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d83d6:	f7fe bb8f 	b.w	d6af8 <HAL_GPIO_Write>
   d83da:	bd38      	pop	{r3, r4, r5, pc}

000d83dc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d83dc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d83de:	4c0c      	ldr	r4, [pc, #48]	; (d8410 <_GLOBAL__sub_I_SPI+0x34>)
   d83e0:	4e0c      	ldr	r6, [pc, #48]	; (d8414 <_GLOBAL__sub_I_SPI+0x38>)
   d83e2:	4d0d      	ldr	r5, [pc, #52]	; (d8418 <_GLOBAL__sub_I_SPI+0x3c>)
   d83e4:	2100      	movs	r1, #0
   d83e6:	4620      	mov	r0, r4
   d83e8:	f7fe fe68 	bl	d70bc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d83ec:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d83ee:	4c0b      	ldr	r4, [pc, #44]	; (d841c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d83f0:	4632      	mov	r2, r6
   d83f2:	4629      	mov	r1, r5
   d83f4:	f000 f834 	bl	d8460 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d83f8:	2101      	movs	r1, #1
   d83fa:	4620      	mov	r0, r4
   d83fc:	f7fe fe5e 	bl	d70bc <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8400:	4632      	mov	r2, r6
   d8402:	4629      	mov	r1, r5
   d8404:	4620      	mov	r0, r4
   d8406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d840a:	f000 b829 	b.w	d8460 <__aeabi_atexit>
   d840e:	bf00      	nop
   d8410:	2003e714 	.word	0x2003e714
   d8414:	2003d268 	.word	0x2003d268
   d8418:	000d70ad 	.word	0x000d70ad
   d841c:	2003e724 	.word	0x2003e724

000d8420 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d8420:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d8422:	4d0b      	ldr	r5, [pc, #44]	; (d8450 <_Z19__fetch_global_Wirev+0x30>)
   d8424:	6829      	ldr	r1, [r5, #0]
   d8426:	f011 0401 	ands.w	r4, r1, #1
   d842a:	d10f      	bne.n	d844c <_Z19__fetch_global_Wirev+0x2c>
   d842c:	4628      	mov	r0, r5
   d842e:	f7fb fe38 	bl	d40a2 <__cxa_guard_acquire>
   d8432:	b158      	cbz	r0, d844c <_Z19__fetch_global_Wirev+0x2c>
   d8434:	4621      	mov	r1, r4
   d8436:	4807      	ldr	r0, [pc, #28]	; (d8454 <_Z19__fetch_global_Wirev+0x34>)
   d8438:	f7ff faf2 	bl	d7a20 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d843c:	4628      	mov	r0, r5
   d843e:	f7fb fe35 	bl	d40ac <__cxa_guard_release>
   d8442:	4a05      	ldr	r2, [pc, #20]	; (d8458 <_Z19__fetch_global_Wirev+0x38>)
   d8444:	4905      	ldr	r1, [pc, #20]	; (d845c <_Z19__fetch_global_Wirev+0x3c>)
   d8446:	4803      	ldr	r0, [pc, #12]	; (d8454 <_Z19__fetch_global_Wirev+0x34>)
   d8448:	f000 f80a 	bl	d8460 <__aeabi_atexit>
	return wire;
}
   d844c:	4801      	ldr	r0, [pc, #4]	; (d8454 <_Z19__fetch_global_Wirev+0x34>)
   d844e:	bd38      	pop	{r3, r4, r5, pc}
   d8450:	2003e738 	.word	0x2003e738
   d8454:	2003e73c 	.word	0x2003e73c
   d8458:	2003d268 	.word	0x2003d268
   d845c:	000d79c9 	.word	0x000d79c9

000d8460 <__aeabi_atexit>:
   d8460:	460b      	mov	r3, r1
   d8462:	4601      	mov	r1, r0
   d8464:	4618      	mov	r0, r3
   d8466:	f000 bd8f 	b.w	d8f88 <__cxa_atexit>
	...

000d846c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d846c:	4b18      	ldr	r3, [pc, #96]	; (d84d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d846e:	681a      	ldr	r2, [r3, #0]
   d8470:	07d1      	lsls	r1, r2, #31
   d8472:	bf5c      	itt	pl
   d8474:	2201      	movpl	r2, #1
   d8476:	601a      	strpl	r2, [r3, #0]
   d8478:	4b16      	ldr	r3, [pc, #88]	; (d84d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d847a:	681a      	ldr	r2, [r3, #0]
   d847c:	07d2      	lsls	r2, r2, #31
   d847e:	bf5c      	itt	pl
   d8480:	2201      	movpl	r2, #1
   d8482:	601a      	strpl	r2, [r3, #0]
   d8484:	4b14      	ldr	r3, [pc, #80]	; (d84d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8486:	681a      	ldr	r2, [r3, #0]
   d8488:	07d0      	lsls	r0, r2, #31
   d848a:	bf5c      	itt	pl
   d848c:	2201      	movpl	r2, #1
   d848e:	601a      	strpl	r2, [r3, #0]
   d8490:	4b12      	ldr	r3, [pc, #72]	; (d84dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8492:	681a      	ldr	r2, [r3, #0]
   d8494:	07d1      	lsls	r1, r2, #31
   d8496:	bf5c      	itt	pl
   d8498:	2201      	movpl	r2, #1
   d849a:	601a      	strpl	r2, [r3, #0]
   d849c:	4b10      	ldr	r3, [pc, #64]	; (d84e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d849e:	681a      	ldr	r2, [r3, #0]
   d84a0:	07d2      	lsls	r2, r2, #31
   d84a2:	bf5c      	itt	pl
   d84a4:	2201      	movpl	r2, #1
   d84a6:	601a      	strpl	r2, [r3, #0]
   d84a8:	4b0e      	ldr	r3, [pc, #56]	; (d84e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d84aa:	681a      	ldr	r2, [r3, #0]
   d84ac:	07d0      	lsls	r0, r2, #31
   d84ae:	bf5c      	itt	pl
   d84b0:	2201      	movpl	r2, #1
   d84b2:	601a      	strpl	r2, [r3, #0]
   d84b4:	4b0c      	ldr	r3, [pc, #48]	; (d84e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d84b6:	681a      	ldr	r2, [r3, #0]
   d84b8:	07d1      	lsls	r1, r2, #31
   d84ba:	bf5c      	itt	pl
   d84bc:	2201      	movpl	r2, #1
   d84be:	601a      	strpl	r2, [r3, #0]
   d84c0:	4b0a      	ldr	r3, [pc, #40]	; (d84ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d84c2:	681a      	ldr	r2, [r3, #0]
   d84c4:	07d2      	lsls	r2, r2, #31
   d84c6:	bf5c      	itt	pl
   d84c8:	2201      	movpl	r2, #1
   d84ca:	601a      	strpl	r2, [r3, #0]
   d84cc:	4770      	bx	lr
   d84ce:	bf00      	nop
   d84d0:	2003e76c 	.word	0x2003e76c
   d84d4:	2003e768 	.word	0x2003e768
   d84d8:	2003e764 	.word	0x2003e764
   d84dc:	2003e760 	.word	0x2003e760
   d84e0:	2003e75c 	.word	0x2003e75c
   d84e4:	2003e758 	.word	0x2003e758
   d84e8:	2003e754 	.word	0x2003e754
   d84ec:	2003e750 	.word	0x2003e750

000d84f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d84f0:	4b24      	ldr	r3, [pc, #144]	; (d8584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d84f2:	681a      	ldr	r2, [r3, #0]
   d84f4:	07d0      	lsls	r0, r2, #31
   d84f6:	bf5c      	itt	pl
   d84f8:	2201      	movpl	r2, #1
   d84fa:	601a      	strpl	r2, [r3, #0]
   d84fc:	4b22      	ldr	r3, [pc, #136]	; (d8588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d84fe:	681a      	ldr	r2, [r3, #0]
   d8500:	07d1      	lsls	r1, r2, #31
   d8502:	bf5c      	itt	pl
   d8504:	2201      	movpl	r2, #1
   d8506:	601a      	strpl	r2, [r3, #0]
   d8508:	4b20      	ldr	r3, [pc, #128]	; (d858c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d850a:	681a      	ldr	r2, [r3, #0]
   d850c:	07d2      	lsls	r2, r2, #31
   d850e:	bf5c      	itt	pl
   d8510:	2201      	movpl	r2, #1
   d8512:	601a      	strpl	r2, [r3, #0]
   d8514:	4b1e      	ldr	r3, [pc, #120]	; (d8590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8516:	681a      	ldr	r2, [r3, #0]
   d8518:	07d0      	lsls	r0, r2, #31
   d851a:	bf5c      	itt	pl
   d851c:	2201      	movpl	r2, #1
   d851e:	601a      	strpl	r2, [r3, #0]
   d8520:	4b1c      	ldr	r3, [pc, #112]	; (d8594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8522:	681a      	ldr	r2, [r3, #0]
   d8524:	07d1      	lsls	r1, r2, #31
   d8526:	bf5c      	itt	pl
   d8528:	2201      	movpl	r2, #1
   d852a:	601a      	strpl	r2, [r3, #0]
   d852c:	4b1a      	ldr	r3, [pc, #104]	; (d8598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d852e:	681a      	ldr	r2, [r3, #0]
   d8530:	07d2      	lsls	r2, r2, #31
   d8532:	bf5c      	itt	pl
   d8534:	2201      	movpl	r2, #1
   d8536:	601a      	strpl	r2, [r3, #0]
   d8538:	4b18      	ldr	r3, [pc, #96]	; (d859c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d853a:	681a      	ldr	r2, [r3, #0]
   d853c:	07d0      	lsls	r0, r2, #31
   d853e:	bf5c      	itt	pl
   d8540:	2201      	movpl	r2, #1
   d8542:	601a      	strpl	r2, [r3, #0]
   d8544:	4b16      	ldr	r3, [pc, #88]	; (d85a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8546:	681a      	ldr	r2, [r3, #0]
   d8548:	07d1      	lsls	r1, r2, #31
   d854a:	bf5c      	itt	pl
   d854c:	2201      	movpl	r2, #1
   d854e:	601a      	strpl	r2, [r3, #0]
   d8550:	4b14      	ldr	r3, [pc, #80]	; (d85a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8552:	681a      	ldr	r2, [r3, #0]
   d8554:	07d2      	lsls	r2, r2, #31
   d8556:	bf5c      	itt	pl
   d8558:	2201      	movpl	r2, #1
   d855a:	601a      	strpl	r2, [r3, #0]
   d855c:	4b12      	ldr	r3, [pc, #72]	; (d85a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d855e:	681a      	ldr	r2, [r3, #0]
   d8560:	07d0      	lsls	r0, r2, #31
   d8562:	bf5c      	itt	pl
   d8564:	2201      	movpl	r2, #1
   d8566:	601a      	strpl	r2, [r3, #0]
   d8568:	4b10      	ldr	r3, [pc, #64]	; (d85ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d856a:	681a      	ldr	r2, [r3, #0]
   d856c:	07d1      	lsls	r1, r2, #31
   d856e:	bf5c      	itt	pl
   d8570:	2201      	movpl	r2, #1
   d8572:	601a      	strpl	r2, [r3, #0]
   d8574:	4b0e      	ldr	r3, [pc, #56]	; (d85b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8576:	681a      	ldr	r2, [r3, #0]
   d8578:	07d2      	lsls	r2, r2, #31
   d857a:	bf5c      	itt	pl
   d857c:	2201      	movpl	r2, #1
   d857e:	601a      	strpl	r2, [r3, #0]
   d8580:	4770      	bx	lr
   d8582:	bf00      	nop
   d8584:	2003e79c 	.word	0x2003e79c
   d8588:	2003e798 	.word	0x2003e798
   d858c:	2003e794 	.word	0x2003e794
   d8590:	2003e790 	.word	0x2003e790
   d8594:	2003e78c 	.word	0x2003e78c
   d8598:	2003e788 	.word	0x2003e788
   d859c:	2003e784 	.word	0x2003e784
   d85a0:	2003e780 	.word	0x2003e780
   d85a4:	2003e77c 	.word	0x2003e77c
   d85a8:	2003e778 	.word	0x2003e778
   d85ac:	2003e774 	.word	0x2003e774
   d85b0:	2003e770 	.word	0x2003e770

000d85b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d85b4:	4b24      	ldr	r3, [pc, #144]	; (d8648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d85b6:	681a      	ldr	r2, [r3, #0]
   d85b8:	07d0      	lsls	r0, r2, #31
   d85ba:	bf5c      	itt	pl
   d85bc:	2201      	movpl	r2, #1
   d85be:	601a      	strpl	r2, [r3, #0]
   d85c0:	4b22      	ldr	r3, [pc, #136]	; (d864c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d85c2:	681a      	ldr	r2, [r3, #0]
   d85c4:	07d1      	lsls	r1, r2, #31
   d85c6:	bf5c      	itt	pl
   d85c8:	2201      	movpl	r2, #1
   d85ca:	601a      	strpl	r2, [r3, #0]
   d85cc:	4b20      	ldr	r3, [pc, #128]	; (d8650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d85ce:	681a      	ldr	r2, [r3, #0]
   d85d0:	07d2      	lsls	r2, r2, #31
   d85d2:	bf5c      	itt	pl
   d85d4:	2201      	movpl	r2, #1
   d85d6:	601a      	strpl	r2, [r3, #0]
   d85d8:	4b1e      	ldr	r3, [pc, #120]	; (d8654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d85da:	681a      	ldr	r2, [r3, #0]
   d85dc:	07d0      	lsls	r0, r2, #31
   d85de:	bf5c      	itt	pl
   d85e0:	2201      	movpl	r2, #1
   d85e2:	601a      	strpl	r2, [r3, #0]
   d85e4:	4b1c      	ldr	r3, [pc, #112]	; (d8658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d85e6:	681a      	ldr	r2, [r3, #0]
   d85e8:	07d1      	lsls	r1, r2, #31
   d85ea:	bf5c      	itt	pl
   d85ec:	2201      	movpl	r2, #1
   d85ee:	601a      	strpl	r2, [r3, #0]
   d85f0:	4b1a      	ldr	r3, [pc, #104]	; (d865c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d85f2:	681a      	ldr	r2, [r3, #0]
   d85f4:	07d2      	lsls	r2, r2, #31
   d85f6:	bf5c      	itt	pl
   d85f8:	2201      	movpl	r2, #1
   d85fa:	601a      	strpl	r2, [r3, #0]
   d85fc:	4b18      	ldr	r3, [pc, #96]	; (d8660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d85fe:	681a      	ldr	r2, [r3, #0]
   d8600:	07d0      	lsls	r0, r2, #31
   d8602:	bf5c      	itt	pl
   d8604:	2201      	movpl	r2, #1
   d8606:	601a      	strpl	r2, [r3, #0]
   d8608:	4b16      	ldr	r3, [pc, #88]	; (d8664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d860a:	681a      	ldr	r2, [r3, #0]
   d860c:	07d1      	lsls	r1, r2, #31
   d860e:	bf5c      	itt	pl
   d8610:	2201      	movpl	r2, #1
   d8612:	601a      	strpl	r2, [r3, #0]
   d8614:	4b14      	ldr	r3, [pc, #80]	; (d8668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8616:	681a      	ldr	r2, [r3, #0]
   d8618:	07d2      	lsls	r2, r2, #31
   d861a:	bf5c      	itt	pl
   d861c:	2201      	movpl	r2, #1
   d861e:	601a      	strpl	r2, [r3, #0]
   d8620:	4b12      	ldr	r3, [pc, #72]	; (d866c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8622:	681a      	ldr	r2, [r3, #0]
   d8624:	07d0      	lsls	r0, r2, #31
   d8626:	bf5c      	itt	pl
   d8628:	2201      	movpl	r2, #1
   d862a:	601a      	strpl	r2, [r3, #0]
   d862c:	4b10      	ldr	r3, [pc, #64]	; (d8670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d862e:	681a      	ldr	r2, [r3, #0]
   d8630:	07d1      	lsls	r1, r2, #31
   d8632:	bf5c      	itt	pl
   d8634:	2201      	movpl	r2, #1
   d8636:	601a      	strpl	r2, [r3, #0]
   d8638:	4b0e      	ldr	r3, [pc, #56]	; (d8674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d863a:	681a      	ldr	r2, [r3, #0]
   d863c:	07d2      	lsls	r2, r2, #31
   d863e:	bf5c      	itt	pl
   d8640:	2201      	movpl	r2, #1
   d8642:	601a      	strpl	r2, [r3, #0]
   d8644:	4770      	bx	lr
   d8646:	bf00      	nop
   d8648:	2003e7cc 	.word	0x2003e7cc
   d864c:	2003e7c8 	.word	0x2003e7c8
   d8650:	2003e7c4 	.word	0x2003e7c4
   d8654:	2003e7c0 	.word	0x2003e7c0
   d8658:	2003e7bc 	.word	0x2003e7bc
   d865c:	2003e7b8 	.word	0x2003e7b8
   d8660:	2003e7b4 	.word	0x2003e7b4
   d8664:	2003e7b0 	.word	0x2003e7b0
   d8668:	2003e7ac 	.word	0x2003e7ac
   d866c:	2003e7a8 	.word	0x2003e7a8
   d8670:	2003e7a4 	.word	0x2003e7a4
   d8674:	2003e7a0 	.word	0x2003e7a0

000d8678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8678:	4b18      	ldr	r3, [pc, #96]	; (d86dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d867a:	681a      	ldr	r2, [r3, #0]
   d867c:	07d1      	lsls	r1, r2, #31
   d867e:	bf5c      	itt	pl
   d8680:	2201      	movpl	r2, #1
   d8682:	601a      	strpl	r2, [r3, #0]
   d8684:	4b16      	ldr	r3, [pc, #88]	; (d86e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8686:	681a      	ldr	r2, [r3, #0]
   d8688:	07d2      	lsls	r2, r2, #31
   d868a:	bf5c      	itt	pl
   d868c:	2201      	movpl	r2, #1
   d868e:	601a      	strpl	r2, [r3, #0]
   d8690:	4b14      	ldr	r3, [pc, #80]	; (d86e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8692:	681a      	ldr	r2, [r3, #0]
   d8694:	07d0      	lsls	r0, r2, #31
   d8696:	bf5c      	itt	pl
   d8698:	2201      	movpl	r2, #1
   d869a:	601a      	strpl	r2, [r3, #0]
   d869c:	4b12      	ldr	r3, [pc, #72]	; (d86e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d869e:	681a      	ldr	r2, [r3, #0]
   d86a0:	07d1      	lsls	r1, r2, #31
   d86a2:	bf5c      	itt	pl
   d86a4:	2201      	movpl	r2, #1
   d86a6:	601a      	strpl	r2, [r3, #0]
   d86a8:	4b10      	ldr	r3, [pc, #64]	; (d86ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d86aa:	681a      	ldr	r2, [r3, #0]
   d86ac:	07d2      	lsls	r2, r2, #31
   d86ae:	bf5c      	itt	pl
   d86b0:	2201      	movpl	r2, #1
   d86b2:	601a      	strpl	r2, [r3, #0]
   d86b4:	4b0e      	ldr	r3, [pc, #56]	; (d86f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d86b6:	681a      	ldr	r2, [r3, #0]
   d86b8:	07d0      	lsls	r0, r2, #31
   d86ba:	bf5c      	itt	pl
   d86bc:	2201      	movpl	r2, #1
   d86be:	601a      	strpl	r2, [r3, #0]
   d86c0:	4b0c      	ldr	r3, [pc, #48]	; (d86f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d86c2:	681a      	ldr	r2, [r3, #0]
   d86c4:	07d1      	lsls	r1, r2, #31
   d86c6:	bf5c      	itt	pl
   d86c8:	2201      	movpl	r2, #1
   d86ca:	601a      	strpl	r2, [r3, #0]
   d86cc:	4b0a      	ldr	r3, [pc, #40]	; (d86f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d86ce:	681a      	ldr	r2, [r3, #0]
   d86d0:	07d2      	lsls	r2, r2, #31
   d86d2:	bf5c      	itt	pl
   d86d4:	2201      	movpl	r2, #1
   d86d6:	601a      	strpl	r2, [r3, #0]
   d86d8:	4770      	bx	lr
   d86da:	bf00      	nop
   d86dc:	2003e7ec 	.word	0x2003e7ec
   d86e0:	2003e7e8 	.word	0x2003e7e8
   d86e4:	2003e7e4 	.word	0x2003e7e4
   d86e8:	2003e7e0 	.word	0x2003e7e0
   d86ec:	2003e7dc 	.word	0x2003e7dc
   d86f0:	2003e7d8 	.word	0x2003e7d8
   d86f4:	2003e7d4 	.word	0x2003e7d4
   d86f8:	2003e7d0 	.word	0x2003e7d0

000d86fc <__aeabi_drsub>:
   d86fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8700:	e002      	b.n	d8708 <__adddf3>
   d8702:	bf00      	nop

000d8704 <__aeabi_dsub>:
   d8704:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8708 <__adddf3>:
   d8708:	b530      	push	{r4, r5, lr}
   d870a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d870e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8712:	ea94 0f05 	teq	r4, r5
   d8716:	bf08      	it	eq
   d8718:	ea90 0f02 	teqeq	r0, r2
   d871c:	bf1f      	itttt	ne
   d871e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8722:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8726:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d872a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d872e:	f000 80e2 	beq.w	d88f6 <__adddf3+0x1ee>
   d8732:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8736:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d873a:	bfb8      	it	lt
   d873c:	426d      	neglt	r5, r5
   d873e:	dd0c      	ble.n	d875a <__adddf3+0x52>
   d8740:	442c      	add	r4, r5
   d8742:	ea80 0202 	eor.w	r2, r0, r2
   d8746:	ea81 0303 	eor.w	r3, r1, r3
   d874a:	ea82 0000 	eor.w	r0, r2, r0
   d874e:	ea83 0101 	eor.w	r1, r3, r1
   d8752:	ea80 0202 	eor.w	r2, r0, r2
   d8756:	ea81 0303 	eor.w	r3, r1, r3
   d875a:	2d36      	cmp	r5, #54	; 0x36
   d875c:	bf88      	it	hi
   d875e:	bd30      	pophi	{r4, r5, pc}
   d8760:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8764:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8768:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d876c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8770:	d002      	beq.n	d8778 <__adddf3+0x70>
   d8772:	4240      	negs	r0, r0
   d8774:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8778:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d877c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8780:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8784:	d002      	beq.n	d878c <__adddf3+0x84>
   d8786:	4252      	negs	r2, r2
   d8788:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d878c:	ea94 0f05 	teq	r4, r5
   d8790:	f000 80a7 	beq.w	d88e2 <__adddf3+0x1da>
   d8794:	f1a4 0401 	sub.w	r4, r4, #1
   d8798:	f1d5 0e20 	rsbs	lr, r5, #32
   d879c:	db0d      	blt.n	d87ba <__adddf3+0xb2>
   d879e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d87a2:	fa22 f205 	lsr.w	r2, r2, r5
   d87a6:	1880      	adds	r0, r0, r2
   d87a8:	f141 0100 	adc.w	r1, r1, #0
   d87ac:	fa03 f20e 	lsl.w	r2, r3, lr
   d87b0:	1880      	adds	r0, r0, r2
   d87b2:	fa43 f305 	asr.w	r3, r3, r5
   d87b6:	4159      	adcs	r1, r3
   d87b8:	e00e      	b.n	d87d8 <__adddf3+0xd0>
   d87ba:	f1a5 0520 	sub.w	r5, r5, #32
   d87be:	f10e 0e20 	add.w	lr, lr, #32
   d87c2:	2a01      	cmp	r2, #1
   d87c4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d87c8:	bf28      	it	cs
   d87ca:	f04c 0c02 	orrcs.w	ip, ip, #2
   d87ce:	fa43 f305 	asr.w	r3, r3, r5
   d87d2:	18c0      	adds	r0, r0, r3
   d87d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d87d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d87dc:	d507      	bpl.n	d87ee <__adddf3+0xe6>
   d87de:	f04f 0e00 	mov.w	lr, #0
   d87e2:	f1dc 0c00 	rsbs	ip, ip, #0
   d87e6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d87ea:	eb6e 0101 	sbc.w	r1, lr, r1
   d87ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d87f2:	d31b      	bcc.n	d882c <__adddf3+0x124>
   d87f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d87f8:	d30c      	bcc.n	d8814 <__adddf3+0x10c>
   d87fa:	0849      	lsrs	r1, r1, #1
   d87fc:	ea5f 0030 	movs.w	r0, r0, rrx
   d8800:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8804:	f104 0401 	add.w	r4, r4, #1
   d8808:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d880c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8810:	f080 809a 	bcs.w	d8948 <__adddf3+0x240>
   d8814:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8818:	bf08      	it	eq
   d881a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d881e:	f150 0000 	adcs.w	r0, r0, #0
   d8822:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8826:	ea41 0105 	orr.w	r1, r1, r5
   d882a:	bd30      	pop	{r4, r5, pc}
   d882c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8830:	4140      	adcs	r0, r0
   d8832:	eb41 0101 	adc.w	r1, r1, r1
   d8836:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d883a:	f1a4 0401 	sub.w	r4, r4, #1
   d883e:	d1e9      	bne.n	d8814 <__adddf3+0x10c>
   d8840:	f091 0f00 	teq	r1, #0
   d8844:	bf04      	itt	eq
   d8846:	4601      	moveq	r1, r0
   d8848:	2000      	moveq	r0, #0
   d884a:	fab1 f381 	clz	r3, r1
   d884e:	bf08      	it	eq
   d8850:	3320      	addeq	r3, #32
   d8852:	f1a3 030b 	sub.w	r3, r3, #11
   d8856:	f1b3 0220 	subs.w	r2, r3, #32
   d885a:	da0c      	bge.n	d8876 <__adddf3+0x16e>
   d885c:	320c      	adds	r2, #12
   d885e:	dd08      	ble.n	d8872 <__adddf3+0x16a>
   d8860:	f102 0c14 	add.w	ip, r2, #20
   d8864:	f1c2 020c 	rsb	r2, r2, #12
   d8868:	fa01 f00c 	lsl.w	r0, r1, ip
   d886c:	fa21 f102 	lsr.w	r1, r1, r2
   d8870:	e00c      	b.n	d888c <__adddf3+0x184>
   d8872:	f102 0214 	add.w	r2, r2, #20
   d8876:	bfd8      	it	le
   d8878:	f1c2 0c20 	rsble	ip, r2, #32
   d887c:	fa01 f102 	lsl.w	r1, r1, r2
   d8880:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8884:	bfdc      	itt	le
   d8886:	ea41 010c 	orrle.w	r1, r1, ip
   d888a:	4090      	lslle	r0, r2
   d888c:	1ae4      	subs	r4, r4, r3
   d888e:	bfa2      	ittt	ge
   d8890:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8894:	4329      	orrge	r1, r5
   d8896:	bd30      	popge	{r4, r5, pc}
   d8898:	ea6f 0404 	mvn.w	r4, r4
   d889c:	3c1f      	subs	r4, #31
   d889e:	da1c      	bge.n	d88da <__adddf3+0x1d2>
   d88a0:	340c      	adds	r4, #12
   d88a2:	dc0e      	bgt.n	d88c2 <__adddf3+0x1ba>
   d88a4:	f104 0414 	add.w	r4, r4, #20
   d88a8:	f1c4 0220 	rsb	r2, r4, #32
   d88ac:	fa20 f004 	lsr.w	r0, r0, r4
   d88b0:	fa01 f302 	lsl.w	r3, r1, r2
   d88b4:	ea40 0003 	orr.w	r0, r0, r3
   d88b8:	fa21 f304 	lsr.w	r3, r1, r4
   d88bc:	ea45 0103 	orr.w	r1, r5, r3
   d88c0:	bd30      	pop	{r4, r5, pc}
   d88c2:	f1c4 040c 	rsb	r4, r4, #12
   d88c6:	f1c4 0220 	rsb	r2, r4, #32
   d88ca:	fa20 f002 	lsr.w	r0, r0, r2
   d88ce:	fa01 f304 	lsl.w	r3, r1, r4
   d88d2:	ea40 0003 	orr.w	r0, r0, r3
   d88d6:	4629      	mov	r1, r5
   d88d8:	bd30      	pop	{r4, r5, pc}
   d88da:	fa21 f004 	lsr.w	r0, r1, r4
   d88de:	4629      	mov	r1, r5
   d88e0:	bd30      	pop	{r4, r5, pc}
   d88e2:	f094 0f00 	teq	r4, #0
   d88e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d88ea:	bf06      	itte	eq
   d88ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d88f0:	3401      	addeq	r4, #1
   d88f2:	3d01      	subne	r5, #1
   d88f4:	e74e      	b.n	d8794 <__adddf3+0x8c>
   d88f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d88fa:	bf18      	it	ne
   d88fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8900:	d029      	beq.n	d8956 <__adddf3+0x24e>
   d8902:	ea94 0f05 	teq	r4, r5
   d8906:	bf08      	it	eq
   d8908:	ea90 0f02 	teqeq	r0, r2
   d890c:	d005      	beq.n	d891a <__adddf3+0x212>
   d890e:	ea54 0c00 	orrs.w	ip, r4, r0
   d8912:	bf04      	itt	eq
   d8914:	4619      	moveq	r1, r3
   d8916:	4610      	moveq	r0, r2
   d8918:	bd30      	pop	{r4, r5, pc}
   d891a:	ea91 0f03 	teq	r1, r3
   d891e:	bf1e      	ittt	ne
   d8920:	2100      	movne	r1, #0
   d8922:	2000      	movne	r0, #0
   d8924:	bd30      	popne	{r4, r5, pc}
   d8926:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d892a:	d105      	bne.n	d8938 <__adddf3+0x230>
   d892c:	0040      	lsls	r0, r0, #1
   d892e:	4149      	adcs	r1, r1
   d8930:	bf28      	it	cs
   d8932:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8936:	bd30      	pop	{r4, r5, pc}
   d8938:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d893c:	bf3c      	itt	cc
   d893e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8942:	bd30      	popcc	{r4, r5, pc}
   d8944:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8948:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d894c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8950:	f04f 0000 	mov.w	r0, #0
   d8954:	bd30      	pop	{r4, r5, pc}
   d8956:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d895a:	bf1a      	itte	ne
   d895c:	4619      	movne	r1, r3
   d895e:	4610      	movne	r0, r2
   d8960:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8964:	bf1c      	itt	ne
   d8966:	460b      	movne	r3, r1
   d8968:	4602      	movne	r2, r0
   d896a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d896e:	bf06      	itte	eq
   d8970:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8974:	ea91 0f03 	teqeq	r1, r3
   d8978:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d897c:	bd30      	pop	{r4, r5, pc}
   d897e:	bf00      	nop

000d8980 <__aeabi_ui2d>:
   d8980:	f090 0f00 	teq	r0, #0
   d8984:	bf04      	itt	eq
   d8986:	2100      	moveq	r1, #0
   d8988:	4770      	bxeq	lr
   d898a:	b530      	push	{r4, r5, lr}
   d898c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8990:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8994:	f04f 0500 	mov.w	r5, #0
   d8998:	f04f 0100 	mov.w	r1, #0
   d899c:	e750      	b.n	d8840 <__adddf3+0x138>
   d899e:	bf00      	nop

000d89a0 <__aeabi_i2d>:
   d89a0:	f090 0f00 	teq	r0, #0
   d89a4:	bf04      	itt	eq
   d89a6:	2100      	moveq	r1, #0
   d89a8:	4770      	bxeq	lr
   d89aa:	b530      	push	{r4, r5, lr}
   d89ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d89b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d89b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d89b8:	bf48      	it	mi
   d89ba:	4240      	negmi	r0, r0
   d89bc:	f04f 0100 	mov.w	r1, #0
   d89c0:	e73e      	b.n	d8840 <__adddf3+0x138>
   d89c2:	bf00      	nop

000d89c4 <__aeabi_f2d>:
   d89c4:	0042      	lsls	r2, r0, #1
   d89c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d89ca:	ea4f 0131 	mov.w	r1, r1, rrx
   d89ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d89d2:	bf1f      	itttt	ne
   d89d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d89d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d89dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d89e0:	4770      	bxne	lr
   d89e2:	f092 0f00 	teq	r2, #0
   d89e6:	bf14      	ite	ne
   d89e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d89ec:	4770      	bxeq	lr
   d89ee:	b530      	push	{r4, r5, lr}
   d89f0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d89f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d89f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d89fc:	e720      	b.n	d8840 <__adddf3+0x138>
   d89fe:	bf00      	nop

000d8a00 <__aeabi_ul2d>:
   d8a00:	ea50 0201 	orrs.w	r2, r0, r1
   d8a04:	bf08      	it	eq
   d8a06:	4770      	bxeq	lr
   d8a08:	b530      	push	{r4, r5, lr}
   d8a0a:	f04f 0500 	mov.w	r5, #0
   d8a0e:	e00a      	b.n	d8a26 <__aeabi_l2d+0x16>

000d8a10 <__aeabi_l2d>:
   d8a10:	ea50 0201 	orrs.w	r2, r0, r1
   d8a14:	bf08      	it	eq
   d8a16:	4770      	bxeq	lr
   d8a18:	b530      	push	{r4, r5, lr}
   d8a1a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8a1e:	d502      	bpl.n	d8a26 <__aeabi_l2d+0x16>
   d8a20:	4240      	negs	r0, r0
   d8a22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a26:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8a2a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8a2e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8a32:	f43f aedc 	beq.w	d87ee <__adddf3+0xe6>
   d8a36:	f04f 0203 	mov.w	r2, #3
   d8a3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a3e:	bf18      	it	ne
   d8a40:	3203      	addne	r2, #3
   d8a42:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8a46:	bf18      	it	ne
   d8a48:	3203      	addne	r2, #3
   d8a4a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8a4e:	f1c2 0320 	rsb	r3, r2, #32
   d8a52:	fa00 fc03 	lsl.w	ip, r0, r3
   d8a56:	fa20 f002 	lsr.w	r0, r0, r2
   d8a5a:	fa01 fe03 	lsl.w	lr, r1, r3
   d8a5e:	ea40 000e 	orr.w	r0, r0, lr
   d8a62:	fa21 f102 	lsr.w	r1, r1, r2
   d8a66:	4414      	add	r4, r2
   d8a68:	e6c1      	b.n	d87ee <__adddf3+0xe6>
   d8a6a:	bf00      	nop

000d8a6c <__aeabi_dmul>:
   d8a6c:	b570      	push	{r4, r5, r6, lr}
   d8a6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8a72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8a76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8a7a:	bf1d      	ittte	ne
   d8a7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8a80:	ea94 0f0c 	teqne	r4, ip
   d8a84:	ea95 0f0c 	teqne	r5, ip
   d8a88:	f000 f8de 	bleq	d8c48 <__aeabi_dmul+0x1dc>
   d8a8c:	442c      	add	r4, r5
   d8a8e:	ea81 0603 	eor.w	r6, r1, r3
   d8a92:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8a96:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8a9a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8a9e:	bf18      	it	ne
   d8aa0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8aa4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8aa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8aac:	d038      	beq.n	d8b20 <__aeabi_dmul+0xb4>
   d8aae:	fba0 ce02 	umull	ip, lr, r0, r2
   d8ab2:	f04f 0500 	mov.w	r5, #0
   d8ab6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8aba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8abe:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8ac2:	f04f 0600 	mov.w	r6, #0
   d8ac6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8aca:	f09c 0f00 	teq	ip, #0
   d8ace:	bf18      	it	ne
   d8ad0:	f04e 0e01 	orrne.w	lr, lr, #1
   d8ad4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8ad8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8adc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8ae0:	d204      	bcs.n	d8aec <__aeabi_dmul+0x80>
   d8ae2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8ae6:	416d      	adcs	r5, r5
   d8ae8:	eb46 0606 	adc.w	r6, r6, r6
   d8aec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8af0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8af4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8af8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8afc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8b00:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8b04:	bf88      	it	hi
   d8b06:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8b0a:	d81e      	bhi.n	d8b4a <__aeabi_dmul+0xde>
   d8b0c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8b10:	bf08      	it	eq
   d8b12:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8b16:	f150 0000 	adcs.w	r0, r0, #0
   d8b1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8b1e:	bd70      	pop	{r4, r5, r6, pc}
   d8b20:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8b24:	ea46 0101 	orr.w	r1, r6, r1
   d8b28:	ea40 0002 	orr.w	r0, r0, r2
   d8b2c:	ea81 0103 	eor.w	r1, r1, r3
   d8b30:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8b34:	bfc2      	ittt	gt
   d8b36:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8b3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8b3e:	bd70      	popgt	{r4, r5, r6, pc}
   d8b40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b44:	f04f 0e00 	mov.w	lr, #0
   d8b48:	3c01      	subs	r4, #1
   d8b4a:	f300 80ab 	bgt.w	d8ca4 <__aeabi_dmul+0x238>
   d8b4e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8b52:	bfde      	ittt	le
   d8b54:	2000      	movle	r0, #0
   d8b56:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8b5a:	bd70      	pople	{r4, r5, r6, pc}
   d8b5c:	f1c4 0400 	rsb	r4, r4, #0
   d8b60:	3c20      	subs	r4, #32
   d8b62:	da35      	bge.n	d8bd0 <__aeabi_dmul+0x164>
   d8b64:	340c      	adds	r4, #12
   d8b66:	dc1b      	bgt.n	d8ba0 <__aeabi_dmul+0x134>
   d8b68:	f104 0414 	add.w	r4, r4, #20
   d8b6c:	f1c4 0520 	rsb	r5, r4, #32
   d8b70:	fa00 f305 	lsl.w	r3, r0, r5
   d8b74:	fa20 f004 	lsr.w	r0, r0, r4
   d8b78:	fa01 f205 	lsl.w	r2, r1, r5
   d8b7c:	ea40 0002 	orr.w	r0, r0, r2
   d8b80:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8b84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b88:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8b8c:	fa21 f604 	lsr.w	r6, r1, r4
   d8b90:	eb42 0106 	adc.w	r1, r2, r6
   d8b94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8b98:	bf08      	it	eq
   d8b9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8b9e:	bd70      	pop	{r4, r5, r6, pc}
   d8ba0:	f1c4 040c 	rsb	r4, r4, #12
   d8ba4:	f1c4 0520 	rsb	r5, r4, #32
   d8ba8:	fa00 f304 	lsl.w	r3, r0, r4
   d8bac:	fa20 f005 	lsr.w	r0, r0, r5
   d8bb0:	fa01 f204 	lsl.w	r2, r1, r4
   d8bb4:	ea40 0002 	orr.w	r0, r0, r2
   d8bb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8bbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8bc0:	f141 0100 	adc.w	r1, r1, #0
   d8bc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8bc8:	bf08      	it	eq
   d8bca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8bce:	bd70      	pop	{r4, r5, r6, pc}
   d8bd0:	f1c4 0520 	rsb	r5, r4, #32
   d8bd4:	fa00 f205 	lsl.w	r2, r0, r5
   d8bd8:	ea4e 0e02 	orr.w	lr, lr, r2
   d8bdc:	fa20 f304 	lsr.w	r3, r0, r4
   d8be0:	fa01 f205 	lsl.w	r2, r1, r5
   d8be4:	ea43 0302 	orr.w	r3, r3, r2
   d8be8:	fa21 f004 	lsr.w	r0, r1, r4
   d8bec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8bf0:	fa21 f204 	lsr.w	r2, r1, r4
   d8bf4:	ea20 0002 	bic.w	r0, r0, r2
   d8bf8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8bfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8c00:	bf08      	it	eq
   d8c02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8c06:	bd70      	pop	{r4, r5, r6, pc}
   d8c08:	f094 0f00 	teq	r4, #0
   d8c0c:	d10f      	bne.n	d8c2e <__aeabi_dmul+0x1c2>
   d8c0e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8c12:	0040      	lsls	r0, r0, #1
   d8c14:	eb41 0101 	adc.w	r1, r1, r1
   d8c18:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8c1c:	bf08      	it	eq
   d8c1e:	3c01      	subeq	r4, #1
   d8c20:	d0f7      	beq.n	d8c12 <__aeabi_dmul+0x1a6>
   d8c22:	ea41 0106 	orr.w	r1, r1, r6
   d8c26:	f095 0f00 	teq	r5, #0
   d8c2a:	bf18      	it	ne
   d8c2c:	4770      	bxne	lr
   d8c2e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8c32:	0052      	lsls	r2, r2, #1
   d8c34:	eb43 0303 	adc.w	r3, r3, r3
   d8c38:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8c3c:	bf08      	it	eq
   d8c3e:	3d01      	subeq	r5, #1
   d8c40:	d0f7      	beq.n	d8c32 <__aeabi_dmul+0x1c6>
   d8c42:	ea43 0306 	orr.w	r3, r3, r6
   d8c46:	4770      	bx	lr
   d8c48:	ea94 0f0c 	teq	r4, ip
   d8c4c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8c50:	bf18      	it	ne
   d8c52:	ea95 0f0c 	teqne	r5, ip
   d8c56:	d00c      	beq.n	d8c72 <__aeabi_dmul+0x206>
   d8c58:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c5c:	bf18      	it	ne
   d8c5e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c62:	d1d1      	bne.n	d8c08 <__aeabi_dmul+0x19c>
   d8c64:	ea81 0103 	eor.w	r1, r1, r3
   d8c68:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8c6c:	f04f 0000 	mov.w	r0, #0
   d8c70:	bd70      	pop	{r4, r5, r6, pc}
   d8c72:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8c76:	bf06      	itte	eq
   d8c78:	4610      	moveq	r0, r2
   d8c7a:	4619      	moveq	r1, r3
   d8c7c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8c80:	d019      	beq.n	d8cb6 <__aeabi_dmul+0x24a>
   d8c82:	ea94 0f0c 	teq	r4, ip
   d8c86:	d102      	bne.n	d8c8e <__aeabi_dmul+0x222>
   d8c88:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8c8c:	d113      	bne.n	d8cb6 <__aeabi_dmul+0x24a>
   d8c8e:	ea95 0f0c 	teq	r5, ip
   d8c92:	d105      	bne.n	d8ca0 <__aeabi_dmul+0x234>
   d8c94:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8c98:	bf1c      	itt	ne
   d8c9a:	4610      	movne	r0, r2
   d8c9c:	4619      	movne	r1, r3
   d8c9e:	d10a      	bne.n	d8cb6 <__aeabi_dmul+0x24a>
   d8ca0:	ea81 0103 	eor.w	r1, r1, r3
   d8ca4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ca8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8cac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8cb0:	f04f 0000 	mov.w	r0, #0
   d8cb4:	bd70      	pop	{r4, r5, r6, pc}
   d8cb6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8cba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8cbe:	bd70      	pop	{r4, r5, r6, pc}

000d8cc0 <__aeabi_ddiv>:
   d8cc0:	b570      	push	{r4, r5, r6, lr}
   d8cc2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8cc6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8cca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8cce:	bf1d      	ittte	ne
   d8cd0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8cd4:	ea94 0f0c 	teqne	r4, ip
   d8cd8:	ea95 0f0c 	teqne	r5, ip
   d8cdc:	f000 f8a7 	bleq	d8e2e <__aeabi_ddiv+0x16e>
   d8ce0:	eba4 0405 	sub.w	r4, r4, r5
   d8ce4:	ea81 0e03 	eor.w	lr, r1, r3
   d8ce8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8cec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8cf0:	f000 8088 	beq.w	d8e04 <__aeabi_ddiv+0x144>
   d8cf4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8cf8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8cfc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8d00:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8d04:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8d08:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8d0c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8d10:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8d14:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8d18:	429d      	cmp	r5, r3
   d8d1a:	bf08      	it	eq
   d8d1c:	4296      	cmpeq	r6, r2
   d8d1e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8d22:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8d26:	d202      	bcs.n	d8d2e <__aeabi_ddiv+0x6e>
   d8d28:	085b      	lsrs	r3, r3, #1
   d8d2a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d2e:	1ab6      	subs	r6, r6, r2
   d8d30:	eb65 0503 	sbc.w	r5, r5, r3
   d8d34:	085b      	lsrs	r3, r3, #1
   d8d36:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d3a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8d3e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8d42:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d46:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d4a:	bf22      	ittt	cs
   d8d4c:	1ab6      	subcs	r6, r6, r2
   d8d4e:	4675      	movcs	r5, lr
   d8d50:	ea40 000c 	orrcs.w	r0, r0, ip
   d8d54:	085b      	lsrs	r3, r3, #1
   d8d56:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d5a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d62:	bf22      	ittt	cs
   d8d64:	1ab6      	subcs	r6, r6, r2
   d8d66:	4675      	movcs	r5, lr
   d8d68:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8d6c:	085b      	lsrs	r3, r3, #1
   d8d6e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d72:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d76:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d7a:	bf22      	ittt	cs
   d8d7c:	1ab6      	subcs	r6, r6, r2
   d8d7e:	4675      	movcs	r5, lr
   d8d80:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8d84:	085b      	lsrs	r3, r3, #1
   d8d86:	ea4f 0232 	mov.w	r2, r2, rrx
   d8d8a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8d8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8d92:	bf22      	ittt	cs
   d8d94:	1ab6      	subcs	r6, r6, r2
   d8d96:	4675      	movcs	r5, lr
   d8d98:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8d9c:	ea55 0e06 	orrs.w	lr, r5, r6
   d8da0:	d018      	beq.n	d8dd4 <__aeabi_ddiv+0x114>
   d8da2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8da6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8daa:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8dae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8db2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8db6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8dba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8dbe:	d1c0      	bne.n	d8d42 <__aeabi_ddiv+0x82>
   d8dc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8dc4:	d10b      	bne.n	d8dde <__aeabi_ddiv+0x11e>
   d8dc6:	ea41 0100 	orr.w	r1, r1, r0
   d8dca:	f04f 0000 	mov.w	r0, #0
   d8dce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8dd2:	e7b6      	b.n	d8d42 <__aeabi_ddiv+0x82>
   d8dd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8dd8:	bf04      	itt	eq
   d8dda:	4301      	orreq	r1, r0
   d8ddc:	2000      	moveq	r0, #0
   d8dde:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8de2:	bf88      	it	hi
   d8de4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8de8:	f63f aeaf 	bhi.w	d8b4a <__aeabi_dmul+0xde>
   d8dec:	ebb5 0c03 	subs.w	ip, r5, r3
   d8df0:	bf04      	itt	eq
   d8df2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8df6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8dfa:	f150 0000 	adcs.w	r0, r0, #0
   d8dfe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8e02:	bd70      	pop	{r4, r5, r6, pc}
   d8e04:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8e08:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8e0c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8e10:	bfc2      	ittt	gt
   d8e12:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8e16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8e1a:	bd70      	popgt	{r4, r5, r6, pc}
   d8e1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e20:	f04f 0e00 	mov.w	lr, #0
   d8e24:	3c01      	subs	r4, #1
   d8e26:	e690      	b.n	d8b4a <__aeabi_dmul+0xde>
   d8e28:	ea45 0e06 	orr.w	lr, r5, r6
   d8e2c:	e68d      	b.n	d8b4a <__aeabi_dmul+0xde>
   d8e2e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8e32:	ea94 0f0c 	teq	r4, ip
   d8e36:	bf08      	it	eq
   d8e38:	ea95 0f0c 	teqeq	r5, ip
   d8e3c:	f43f af3b 	beq.w	d8cb6 <__aeabi_dmul+0x24a>
   d8e40:	ea94 0f0c 	teq	r4, ip
   d8e44:	d10a      	bne.n	d8e5c <__aeabi_ddiv+0x19c>
   d8e46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8e4a:	f47f af34 	bne.w	d8cb6 <__aeabi_dmul+0x24a>
   d8e4e:	ea95 0f0c 	teq	r5, ip
   d8e52:	f47f af25 	bne.w	d8ca0 <__aeabi_dmul+0x234>
   d8e56:	4610      	mov	r0, r2
   d8e58:	4619      	mov	r1, r3
   d8e5a:	e72c      	b.n	d8cb6 <__aeabi_dmul+0x24a>
   d8e5c:	ea95 0f0c 	teq	r5, ip
   d8e60:	d106      	bne.n	d8e70 <__aeabi_ddiv+0x1b0>
   d8e62:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8e66:	f43f aefd 	beq.w	d8c64 <__aeabi_dmul+0x1f8>
   d8e6a:	4610      	mov	r0, r2
   d8e6c:	4619      	mov	r1, r3
   d8e6e:	e722      	b.n	d8cb6 <__aeabi_dmul+0x24a>
   d8e70:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e74:	bf18      	it	ne
   d8e76:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e7a:	f47f aec5 	bne.w	d8c08 <__aeabi_dmul+0x19c>
   d8e7e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8e82:	f47f af0d 	bne.w	d8ca0 <__aeabi_dmul+0x234>
   d8e86:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8e8a:	f47f aeeb 	bne.w	d8c64 <__aeabi_dmul+0x1f8>
   d8e8e:	e712      	b.n	d8cb6 <__aeabi_dmul+0x24a>

000d8e90 <__aeabi_d2iz>:
   d8e90:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8e94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8e98:	d215      	bcs.n	d8ec6 <__aeabi_d2iz+0x36>
   d8e9a:	d511      	bpl.n	d8ec0 <__aeabi_d2iz+0x30>
   d8e9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8ea0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8ea4:	d912      	bls.n	d8ecc <__aeabi_d2iz+0x3c>
   d8ea6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8eaa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8eae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8eb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8eb6:	fa23 f002 	lsr.w	r0, r3, r2
   d8eba:	bf18      	it	ne
   d8ebc:	4240      	negne	r0, r0
   d8ebe:	4770      	bx	lr
   d8ec0:	f04f 0000 	mov.w	r0, #0
   d8ec4:	4770      	bx	lr
   d8ec6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8eca:	d105      	bne.n	d8ed8 <__aeabi_d2iz+0x48>
   d8ecc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8ed0:	bf08      	it	eq
   d8ed2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8ed6:	4770      	bx	lr
   d8ed8:	f04f 0000 	mov.w	r0, #0
   d8edc:	4770      	bx	lr
   d8ede:	bf00      	nop

000d8ee0 <__aeabi_d2f>:
   d8ee0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8ee4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8ee8:	bf24      	itt	cs
   d8eea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8eee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8ef2:	d90d      	bls.n	d8f10 <__aeabi_d2f+0x30>
   d8ef4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8ef8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8efc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8f00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8f04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8f08:	bf08      	it	eq
   d8f0a:	f020 0001 	biceq.w	r0, r0, #1
   d8f0e:	4770      	bx	lr
   d8f10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8f14:	d121      	bne.n	d8f5a <__aeabi_d2f+0x7a>
   d8f16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8f1a:	bfbc      	itt	lt
   d8f1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8f20:	4770      	bxlt	lr
   d8f22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f26:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8f2a:	f1c2 0218 	rsb	r2, r2, #24
   d8f2e:	f1c2 0c20 	rsb	ip, r2, #32
   d8f32:	fa10 f30c 	lsls.w	r3, r0, ip
   d8f36:	fa20 f002 	lsr.w	r0, r0, r2
   d8f3a:	bf18      	it	ne
   d8f3c:	f040 0001 	orrne.w	r0, r0, #1
   d8f40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8f44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8f48:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8f4c:	ea40 000c 	orr.w	r0, r0, ip
   d8f50:	fa23 f302 	lsr.w	r3, r3, r2
   d8f54:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8f58:	e7cc      	b.n	d8ef4 <__aeabi_d2f+0x14>
   d8f5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8f5e:	d107      	bne.n	d8f70 <__aeabi_d2f+0x90>
   d8f60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8f64:	bf1e      	ittt	ne
   d8f66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8f6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8f6e:	4770      	bxne	lr
   d8f70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8f74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8f78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8f7c:	4770      	bx	lr
   d8f7e:	bf00      	nop

000d8f80 <atoi>:
   d8f80:	220a      	movs	r2, #10
   d8f82:	2100      	movs	r1, #0
   d8f84:	f000 b912 	b.w	d91ac <strtol>

000d8f88 <__cxa_atexit>:
   d8f88:	b510      	push	{r4, lr}
   d8f8a:	4c05      	ldr	r4, [pc, #20]	; (d8fa0 <__cxa_atexit+0x18>)
   d8f8c:	4613      	mov	r3, r2
   d8f8e:	b12c      	cbz	r4, d8f9c <__cxa_atexit+0x14>
   d8f90:	460a      	mov	r2, r1
   d8f92:	4601      	mov	r1, r0
   d8f94:	2002      	movs	r0, #2
   d8f96:	f3af 8000 	nop.w
   d8f9a:	bd10      	pop	{r4, pc}
   d8f9c:	4620      	mov	r0, r4
   d8f9e:	bd10      	pop	{r4, pc}
   d8fa0:	00000000 	.word	0x00000000

000d8fa4 <memcmp>:
   d8fa4:	b510      	push	{r4, lr}
   d8fa6:	3901      	subs	r1, #1
   d8fa8:	4402      	add	r2, r0
   d8faa:	4290      	cmp	r0, r2
   d8fac:	d007      	beq.n	d8fbe <memcmp+0x1a>
   d8fae:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8fb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8fb6:	42a3      	cmp	r3, r4
   d8fb8:	d0f7      	beq.n	d8faa <memcmp+0x6>
   d8fba:	1b18      	subs	r0, r3, r4
   d8fbc:	bd10      	pop	{r4, pc}
   d8fbe:	2000      	movs	r0, #0
   d8fc0:	bd10      	pop	{r4, pc}

000d8fc2 <memcpy>:
   d8fc2:	b510      	push	{r4, lr}
   d8fc4:	1e43      	subs	r3, r0, #1
   d8fc6:	440a      	add	r2, r1
   d8fc8:	4291      	cmp	r1, r2
   d8fca:	d004      	beq.n	d8fd6 <memcpy+0x14>
   d8fcc:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8fd0:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8fd4:	e7f8      	b.n	d8fc8 <memcpy+0x6>
   d8fd6:	bd10      	pop	{r4, pc}

000d8fd8 <memset>:
   d8fd8:	4402      	add	r2, r0
   d8fda:	4603      	mov	r3, r0
   d8fdc:	4293      	cmp	r3, r2
   d8fde:	d002      	beq.n	d8fe6 <memset+0xe>
   d8fe0:	f803 1b01 	strb.w	r1, [r3], #1
   d8fe4:	e7fa      	b.n	d8fdc <memset+0x4>
   d8fe6:	4770      	bx	lr

000d8fe8 <srand>:
   d8fe8:	b538      	push	{r3, r4, r5, lr}
   d8fea:	4b12      	ldr	r3, [pc, #72]	; (d9034 <srand+0x4c>)
   d8fec:	681c      	ldr	r4, [r3, #0]
   d8fee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8ff0:	4605      	mov	r5, r0
   d8ff2:	b9d3      	cbnz	r3, d902a <srand+0x42>
   d8ff4:	2018      	movs	r0, #24
   d8ff6:	f7fd ffeb 	bl	d6fd0 <malloc>
   d8ffa:	f243 330e 	movw	r3, #13070	; 0x330e
   d8ffe:	63a0      	str	r0, [r4, #56]	; 0x38
   d9000:	8003      	strh	r3, [r0, #0]
   d9002:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d9006:	8043      	strh	r3, [r0, #2]
   d9008:	f241 2334 	movw	r3, #4660	; 0x1234
   d900c:	8083      	strh	r3, [r0, #4]
   d900e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9012:	80c3      	strh	r3, [r0, #6]
   d9014:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9018:	8103      	strh	r3, [r0, #8]
   d901a:	2305      	movs	r3, #5
   d901c:	8143      	strh	r3, [r0, #10]
   d901e:	230b      	movs	r3, #11
   d9020:	8183      	strh	r3, [r0, #12]
   d9022:	2201      	movs	r2, #1
   d9024:	2300      	movs	r3, #0
   d9026:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d902a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d902c:	2200      	movs	r2, #0
   d902e:	611d      	str	r5, [r3, #16]
   d9030:	615a      	str	r2, [r3, #20]
   d9032:	bd38      	pop	{r3, r4, r5, pc}
   d9034:	2003d264 	.word	0x2003d264

000d9038 <strcmp>:
   d9038:	f810 2b01 	ldrb.w	r2, [r0], #1
   d903c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9040:	2a01      	cmp	r2, #1
   d9042:	bf28      	it	cs
   d9044:	429a      	cmpcs	r2, r3
   d9046:	d0f7      	beq.n	d9038 <strcmp>
   d9048:	1ad0      	subs	r0, r2, r3
   d904a:	4770      	bx	lr

000d904c <strcpy>:
   d904c:	4603      	mov	r3, r0
   d904e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9052:	f803 2b01 	strb.w	r2, [r3], #1
   d9056:	2a00      	cmp	r2, #0
   d9058:	d1f9      	bne.n	d904e <strcpy+0x2>
   d905a:	4770      	bx	lr

000d905c <strlen>:
   d905c:	4603      	mov	r3, r0
   d905e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9062:	2a00      	cmp	r2, #0
   d9064:	d1fb      	bne.n	d905e <strlen+0x2>
   d9066:	1a18      	subs	r0, r3, r0
   d9068:	3801      	subs	r0, #1
   d906a:	4770      	bx	lr

000d906c <strstr>:
   d906c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d906e:	7803      	ldrb	r3, [r0, #0]
   d9070:	b963      	cbnz	r3, d908c <strstr+0x20>
   d9072:	780b      	ldrb	r3, [r1, #0]
   d9074:	2b00      	cmp	r3, #0
   d9076:	bf18      	it	ne
   d9078:	2000      	movne	r0, #0
   d907a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d907c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d9080:	b162      	cbz	r2, d909c <strstr+0x30>
   d9082:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d9086:	4297      	cmp	r7, r2
   d9088:	4630      	mov	r0, r6
   d908a:	d0f7      	beq.n	d907c <strstr+0x10>
   d908c:	4603      	mov	r3, r0
   d908e:	1c46      	adds	r6, r0, #1
   d9090:	7800      	ldrb	r0, [r0, #0]
   d9092:	b110      	cbz	r0, d909a <strstr+0x2e>
   d9094:	1e4d      	subs	r5, r1, #1
   d9096:	1e5c      	subs	r4, r3, #1
   d9098:	e7f0      	b.n	d907c <strstr+0x10>
   d909a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d909c:	4618      	mov	r0, r3
   d909e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d90a0 <_strtol_r>:
   d90a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d90a4:	4680      	mov	r8, r0
   d90a6:	4840      	ldr	r0, [pc, #256]	; (d91a8 <_strtol_r+0x108>)
   d90a8:	f8d0 9000 	ldr.w	r9, [r0]
   d90ac:	460f      	mov	r7, r1
   d90ae:	463d      	mov	r5, r7
   d90b0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d90b4:	eb09 0004 	add.w	r0, r9, r4
   d90b8:	7840      	ldrb	r0, [r0, #1]
   d90ba:	f000 0008 	and.w	r0, r0, #8
   d90be:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d90c2:	b108      	cbz	r0, d90c8 <_strtol_r+0x28>
   d90c4:	462f      	mov	r7, r5
   d90c6:	e7f2      	b.n	d90ae <_strtol_r+0xe>
   d90c8:	2c2d      	cmp	r4, #45	; 0x2d
   d90ca:	d103      	bne.n	d90d4 <_strtol_r+0x34>
   d90cc:	1cbd      	adds	r5, r7, #2
   d90ce:	787c      	ldrb	r4, [r7, #1]
   d90d0:	2601      	movs	r6, #1
   d90d2:	e003      	b.n	d90dc <_strtol_r+0x3c>
   d90d4:	2c2b      	cmp	r4, #43	; 0x2b
   d90d6:	bf04      	itt	eq
   d90d8:	787c      	ldrbeq	r4, [r7, #1]
   d90da:	1cbd      	addeq	r5, r7, #2
   d90dc:	b113      	cbz	r3, d90e4 <_strtol_r+0x44>
   d90de:	2b10      	cmp	r3, #16
   d90e0:	d10a      	bne.n	d90f8 <_strtol_r+0x58>
   d90e2:	e05b      	b.n	d919c <_strtol_r+0xfc>
   d90e4:	2c30      	cmp	r4, #48	; 0x30
   d90e6:	d157      	bne.n	d9198 <_strtol_r+0xf8>
   d90e8:	7828      	ldrb	r0, [r5, #0]
   d90ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d90ee:	2858      	cmp	r0, #88	; 0x58
   d90f0:	d14d      	bne.n	d918e <_strtol_r+0xee>
   d90f2:	786c      	ldrb	r4, [r5, #1]
   d90f4:	2310      	movs	r3, #16
   d90f6:	3502      	adds	r5, #2
   d90f8:	2e00      	cmp	r6, #0
   d90fa:	bf14      	ite	ne
   d90fc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9100:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9104:	2700      	movs	r7, #0
   d9106:	fbbc faf3 	udiv	sl, ip, r3
   d910a:	4638      	mov	r0, r7
   d910c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9110:	eb09 0e04 	add.w	lr, r9, r4
   d9114:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9118:	f01e 0f04 	tst.w	lr, #4
   d911c:	d001      	beq.n	d9122 <_strtol_r+0x82>
   d911e:	3c30      	subs	r4, #48	; 0x30
   d9120:	e00b      	b.n	d913a <_strtol_r+0x9a>
   d9122:	f01e 0e03 	ands.w	lr, lr, #3
   d9126:	d01b      	beq.n	d9160 <_strtol_r+0xc0>
   d9128:	f1be 0f01 	cmp.w	lr, #1
   d912c:	bf0c      	ite	eq
   d912e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9132:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9136:	ebce 0404 	rsb	r4, lr, r4
   d913a:	42a3      	cmp	r3, r4
   d913c:	dd10      	ble.n	d9160 <_strtol_r+0xc0>
   d913e:	f1b7 3fff 	cmp.w	r7, #4294967295
   d9142:	d00a      	beq.n	d915a <_strtol_r+0xba>
   d9144:	4550      	cmp	r0, sl
   d9146:	d806      	bhi.n	d9156 <_strtol_r+0xb6>
   d9148:	d101      	bne.n	d914e <_strtol_r+0xae>
   d914a:	4564      	cmp	r4, ip
   d914c:	dc03      	bgt.n	d9156 <_strtol_r+0xb6>
   d914e:	fb03 4000 	mla	r0, r3, r0, r4
   d9152:	2701      	movs	r7, #1
   d9154:	e001      	b.n	d915a <_strtol_r+0xba>
   d9156:	f04f 37ff 	mov.w	r7, #4294967295
   d915a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d915e:	e7d7      	b.n	d9110 <_strtol_r+0x70>
   d9160:	1c7b      	adds	r3, r7, #1
   d9162:	d10c      	bne.n	d917e <_strtol_r+0xde>
   d9164:	2e00      	cmp	r6, #0
   d9166:	f04f 0322 	mov.w	r3, #34	; 0x22
   d916a:	bf14      	ite	ne
   d916c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9170:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9174:	f8c8 3000 	str.w	r3, [r8]
   d9178:	b92a      	cbnz	r2, d9186 <_strtol_r+0xe6>
   d917a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d917e:	b106      	cbz	r6, d9182 <_strtol_r+0xe2>
   d9180:	4240      	negs	r0, r0
   d9182:	b172      	cbz	r2, d91a2 <_strtol_r+0x102>
   d9184:	b107      	cbz	r7, d9188 <_strtol_r+0xe8>
   d9186:	1e69      	subs	r1, r5, #1
   d9188:	6011      	str	r1, [r2, #0]
   d918a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d918e:	2430      	movs	r4, #48	; 0x30
   d9190:	2b00      	cmp	r3, #0
   d9192:	d1b1      	bne.n	d90f8 <_strtol_r+0x58>
   d9194:	2308      	movs	r3, #8
   d9196:	e7af      	b.n	d90f8 <_strtol_r+0x58>
   d9198:	230a      	movs	r3, #10
   d919a:	e7ad      	b.n	d90f8 <_strtol_r+0x58>
   d919c:	2c30      	cmp	r4, #48	; 0x30
   d919e:	d0a3      	beq.n	d90e8 <_strtol_r+0x48>
   d91a0:	e7aa      	b.n	d90f8 <_strtol_r+0x58>
   d91a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d91a6:	bf00      	nop
   d91a8:	2003d200 	.word	0x2003d200

000d91ac <strtol>:
   d91ac:	4613      	mov	r3, r2
   d91ae:	460a      	mov	r2, r1
   d91b0:	4601      	mov	r1, r0
   d91b2:	4802      	ldr	r0, [pc, #8]	; (d91bc <strtol+0x10>)
   d91b4:	6800      	ldr	r0, [r0, #0]
   d91b6:	f7ff bf73 	b.w	d90a0 <_strtol_r>
   d91ba:	bf00      	nop
   d91bc:	2003d264 	.word	0x2003d264

000d91c0 <dynalib_user>:
   d91c0:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d91d0:	00000000                                ....

000d91d4 <_ZTVN8particle13__SPISettingsE>:
	...
   d91dc:	000d40e1                                .@..

000d91e0 <_ZTV6SdFile>:
	...
   d91e8:	000d40b3 000d40d3 000d40bb 000d40b5     .@...@...@...@..
   d91f8:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
   d9208:	50533c00 74655349 676e6974 65642073     .<SPISettings de
   d9218:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
   d9228:	2073676e 6c257325 73252075 444f4d20     ngs %s%lu %s MOD
   d9238:	3e642545 61745300 6e697472 70752067     E%d>.Starting up
   d9248:	002e2e2e 656d6954 6d702c00 735f3031     ....Time.,pm10_s
   d9258:	646e6174 00647261 326d702c 74735f35     tandard.,pm25_st
   d9268:	61646e61 2c006472 30316d70 74735f30     andard.,pm100_st
   d9278:	61646e61 2c006472 30316d70 766e655f     andard.,pm10_env
   d9288:	6d702c00 655f3532 2c00766e 30316d70     .,pm25_env.,pm10
   d9298:	6e655f30 502c0076 006d7533 7535502c     0_env.,P3um.,P5u
   d92a8:	502c006d 6d753031 32502c00 006d7535     m.,P10um.,P25um.
   d92b8:	3035502c 2c006d75 30303150 2c006d75     ,P50um.,P100um.,
   d92c8:	63656863 6d75736b 65542c00 7265706d     checksum.,Temper
   d92d8:	72757461 482c0065 64696d75 00797469     ature.,Humidity.
   d92e8:	6e6e6f43 69746365 2e2e676e 692f002e     Connecting..../i
   d92f8:	7461646e 2e313061 3f706870 78696e75     ndata01.php?unix
   d9308:	646c253d 65737526 6d616e72 73253d65     =%ld&username=%s
   d9318:	73617026 726f7773 73253d64 6e626426     &password=%s&dbn
   d9328:	3d656d61 74267325 656c6261 656d616e     ame=%s&tablename
   d9338:	2673253d 30316d70 6474735f 2664253d     =%s&pm10_std=%d&
   d9348:	35326d70 6474735f 2664253d 30316d70     pm25_std=%d&pm10
   d9358:	74735f30 64253d64 316d7026 6e655f30     0_std=%d&pm10_en
   d9368:	64253d76 326d7026 6e655f35 64253d76     v=%d&pm25_env=%d
   d9378:	316d7026 655f3030 253d766e 33702664     &pm100_env=%d&p3
   d9388:	2664253d 253d3570 31702664 64253d30     =%d&p5=%d&p10=%d
   d9398:	35327026 2664253d 3d303570 70266425     &p25=%d&p50=%d&p
   d93a8:	3d303031 63266425 6b636568 3d6d7573     100=%d&checksum=
   d93b8:	54266425 65706d65 75746172 253d6572     %d&Temperature=%
   d93c8:	75482666 6964696d 253d7974 227b0066     f&Humidity=%f.{"
   d93d8:	656d6974 22203a22 22646c25 7022202c     time": "%ld", "p
   d93e8:	2230316d 6425223a 22202c22 35326d70     m10":"%d", "pm25
   d93f8:	25223a22 202c2264 316d7022 3a223030     ":"%d", "pm100":
   d9408:	22642522 7022202c 2233306e 6425223a     "%d", "pn03":"%d
   d9418:	22202c22 35306e70 25223a22 202c2264     ", "pn05":"%d", 
   d9428:	316e7022 223a2230 2c226425 6e702220     "pn10":"%d", "pn
   d9438:	3a223532 22642522 7022202c 2230356e     25":"%d", "pn50"
   d9448:	6425223a 22202c22 30316e70 223a2230     :"%d", "pn100":"
   d9458:	2c226425 65742220 3a22706d 22662522     %d", "temp":"%f"
   d9468:	6822202c 64696d75 22797469 6625223a     , "humidity":"%f
   d9478:	47007d22 53005445 69646e65 4420676e     "}.GET.Sending D
   d9488:	00617461 65636341 2a007470 20002a2f     ata.Accept.*/*. 
   d9498:	50545448 302e312f 63000a0d 65736f6c     HTTP/1.0...close
   d94a8:	6e6f4300 7463656e 006e6f69 54534f48     .Connection.HOST
   d94b8:	6e6f4300 746e6574 6e654c2d 00687467     .Content-Length.
   d94c8:	54534f50 0d0a0d00 1c1f000a                       POST......

000d94d2 <_ZL11daysInMonth>:
   d94d2:	1e1f1c1f 1f1f1e1f 1f1e1f1e 00000000              ..............

000d94e0 <_ZTVN5spark13EthernetClassE>:
	...
   d94e8:	000d708f 000d7085 000d707b 000d7071     .p...p..{p..qp..
   d94f8:	000d7065 000d7059 000d704d 000d7045     ep..Yp..Mp..Ep..
   d9508:	000d703b 000d7031 000d8261              ;p..1p..a...

000d9514 <_ZTV8SPIClass>:
	...
   d951c:	000d70ad 000d70af                       .p...p..

000d9524 <_ZL14clock_divisors>:
   d9524:	18100800 38302820 66006e6c 6f63006e     .... (08ln.fn.co
   d9534:	64006564 69617465 3025006c 20753031     de.detail.%010u 
   d9544:	00205d00 2800202c 00203a29 63005b20     .] ., .(): . [.c
   d9554:	2065646f 2500203d 65640069 6c696174     ode = .%i.detail
   d9564:	203d2073 75616200 65530064 6c616972     s = .baud.Serial
   d9574:	72655300 316c6169 70797400 61700065     .Serial1.type.pa
   d9584:	006d6172 00646d63 68006469 7300646e     ram.cmd.id.hnd.s
   d9594:	006d7274 746c6966 6c766c00 64646100     trm.filt.lvl.add
   d95a4:	646e6148 0072656c 6f6d6572 61486576     Handler.removeHa
   d95b4:	656c646e 6e650072 61486d75 656c646e     ndler.enumHandle
   d95c4:	4a007372 534e4f53 61657274 676f4c6d     rs.JSONStreamLog
   d95d4:	646e6148 0072656c 00707061 656e6f6e     Handler.app.none
   d95e4:	61727400 69006563 006f666e 6e726177     .trace.info.warn
   d95f4:	72726500 7000726f 63696e61 6c6c6100     .error.panic.all
   d9604:	25005a00 6433302b 3230253a 59250075     .Z.%+03d:%02u.%Y
   d9614:	2d6d252d 25546425 4d253a48 2553253a     -%m-%dT%H:%M:%S%
   d9624:	7361007a 6d697463 00000065              z.asctime...

000d9630 <_ZTV9IPAddress>:
	...
   d9638:	000d76df 000d76d1 000d76d3              .v...v...v..

000d9644 <_ZTV9USBSerial>:
	...
   d964c:	000d77ff 000d7843 000d781d 000d7403     .w..Cx...x...t..
   d965c:	000d7817 000d7801 000d7809 000d783d     .x...x...x..=x..
   d966c:	000d7811 000d77fb                       .x...w..

000d9674 <_ZTV11USARTSerial>:
	...
   d967c:	000d78e9 000d790d 000d7919 000d7403     .x...y...y...t..
   d968c:	000d78f5 000d7901 000d78fb 000d7907     .x...y...x...y..
   d969c:	000d78eb 000d78ef                       .x...x..

000d96a4 <_ZTV7TwoWire>:
	...
   d96ac:	000d79c9 000d7a13 000d79eb 000d79cb     .y...z...y...y..
   d96bc:	000d79f3 000d79fb 000d7a03 000d7a0b     .y...y...z...z..

000d96cc <_ZTVN5spark9MeshClassE>:
	...
   d96d4:	000d7af5 000d7aeb 000d7ae1 000d7ad7     .z...z...z...z..
   d96e4:	000d7acb 000d7abf 000d7ab3 000d7aab     .z...z...z...z..
   d96f4:	000d7aa1 000d7a97 000d8261              .z...z..a...

000d9700 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9708:	000d7c75 000d7c7b 000d8163 000d7c87     u|..{|..c....|..
   d9718:	000d7c77                                w|..

000d971c <_ZTV9TCPClient>:
	...
   d9724:	000d4165 000d41a5 000d7bed 000d7c07     eA...A...{...|..
   d9734:	000d8009 000d7e4b 000d7e1d 000d7c31     ....K~...~..1|..
   d9744:	000d7ee1 000d7c8d 000d7e7f 000d7fdb     .~...|...~......
   d9754:	000d7c33 000d7c6b 000d7c19 000d7d7d     3|..k|...|..}}..
   d9764:	000d7dfd 69726977 7200676e 20766365     .}..wiring.recv 
   d9774:	6f727265 203d2072 00006425              error = %d..

000d9780 <_ZTVN5spark9WiFiClassE>:
	...
   d9788:	000d81d9 000d81cf 000d81c5 000d817b     ............{...
   d9798:	000d81b9 000d81ad 000d81a1 000d8199     ................
   d97a8:	000d818f 000d8185 000d8261              ........a...

000d97b4 <_ZTVN5spark12NetworkClassE>:
	...
   d97bc:	000d81f9 000d8203 000d820d 000d8217     ................
   d97cc:	000d8221 000d822d 000d8239 000d8245     !...-...9...E...
   d97dc:	000d824d 000d8257 000d8261              M...W...a...

000d97e8 <_ctype_>:
   d97e8:	20202000 20202020 28282020 20282828     .         ((((( 
   d97f8:	20202020 20202020 20202020 20202020                     
   d9808:	10108820 10101010 10101010 10101010      ...............
   d9818:	04040410 04040404 10040404 10101010     ................
   d9828:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9838:	01010101 01010101 01010101 10101010     ................
   d9848:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9858:	02020202 02020202 02020202 10101010     ................
   d9868:	00000020 00000000 00000000 00000000      ...............
	...

000d98ec <__sf_fake_stdin>:
	...

000d990c <__sf_fake_stdout>:
	...

000d992c <__sf_fake_stderr>:
	...
   d994c:	00000043                                         C.

000d994e <link_const_variable_data_end>:
	...

000d9950 <link_constructors_location>:
   d9950:	000d4b35 	.word	0x000d4b35
   d9954:	000d4f93 	.word	0x000d4f93
   d9958:	000d4f97 	.word	0x000d4f97
   d995c:	000d4ff1 	.word	0x000d4ff1
   d9960:	000d522d 	.word	0x000d522d
   d9964:	000d5231 	.word	0x000d5231
   d9968:	000d5859 	.word	0x000d5859
   d996c:	000d585d 	.word	0x000d585d
   d9970:	000d5861 	.word	0x000d5861
   d9974:	000d5865 	.word	0x000d5865
   d9978:	000d5f09 	.word	0x000d5f09
   d997c:	000d5f2d 	.word	0x000d5f2d
   d9980:	000d5f31 	.word	0x000d5f31
   d9984:	000d6255 	.word	0x000d6255
   d9988:	000d6259 	.word	0x000d6259
   d998c:	000d625d 	.word	0x000d625d
   d9990:	000d6797 	.word	0x000d6797
   d9994:	000d679b 	.word	0x000d679b
   d9998:	000d679f 	.word	0x000d679f
   d999c:	000d6845 	.word	0x000d6845
   d99a0:	000d6aa5 	.word	0x000d6aa5
   d99a4:	000d7099 	.word	0x000d7099
   d99a8:	000d7239 	.word	0x000d7239
   d99ac:	000d7599 	.word	0x000d7599
   d99b0:	000d75a9 	.word	0x000d75a9
   d99b4:	000d75e1 	.word	0x000d75e1
   d99b8:	000d7ba1 	.word	0x000d7ba1
   d99bc:	000d81e5 	.word	0x000d81e5
   d99c0:	000d832d 	.word	0x000d832d
   d99c4:	000d83dd 	.word	0x000d83dd
   d99c8:	000d846d 	.word	0x000d846d
   d99cc:	000d84f1 	.word	0x000d84f1
   d99d0:	000d85b5 	.word	0x000d85b5
   d99d4:	000d8679 	.word	0x000d8679

000d99d8 <link_constructors_end>:
	...
