
c:/Users/13479/Documents/SD1/target/1.4.4/photon/SD1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006670  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a6690  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000104  20000000  080a6694  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000016fc  20000104  20000104  00040104  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a6798  080a6798  00036798  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a67c0  080a67c0  000367c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0018933c  00000000  00000000  000367c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00021107  00000000  00000000  001bfb00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000229bc  00000000  00000000  001e0c07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002d28  00000000  00000000  002035c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004b68  00000000  00000000  002062eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003deb4  00000000  00000000  0020ae53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004f3d4  00000000  00000000  00248d07  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b55f9  00000000  00000000  002980db  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e16c  00000000  00000000  0034d6d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 fe20 	bl	80a5c76 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 fe25 	bl	80a5c8c <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a6694 	.word	0x080a6694
 80a0050:	20000104 	.word	0x20000104
 80a0054:	20000104 	.word	0x20000104
 80a0058:	20001800 	.word	0x20001800
 80a005c:	20001800 	.word	0x20001800

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f003 febd 	bl	80a3de0 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a6608 	.word	0x080a6608
 80a0088:	080a668c 	.word	0x080a668c

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b98a 	b.w	80a03a4 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fb5d 	bl	80a0750 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f003 be63 	b.w	80a3d64 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f003 b8ab 	b.w	80a31f8 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f003 b8b1 	b.w	80a3208 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 80a00b6:	4770      	bx	lr

080a00b8 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 80a00b8:	3008      	adds	r0, #8
 80a00ba:	f001 be8b 	b.w	80a1dd4 <_ZN7FatFile5writeEPKvj>

080a00be <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 80a00be:	b507      	push	{r0, r1, r2, lr}
 80a00c0:	ab02      	add	r3, sp, #8
 80a00c2:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 80a00c6:	2201      	movs	r2, #1
 80a00c8:	4619      	mov	r1, r3
 80a00ca:	3008      	adds	r0, #8
 80a00cc:	f001 fe82 	bl	80a1dd4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 80a00d0:	b003      	add	sp, #12
 80a00d2:	f85d fb04 	ldr.w	pc, [sp], #4

080a00d6 <_ZN6SdFileD0Ev>:
 80a00d6:	b510      	push	{r4, lr}
 80a00d8:	4604      	mov	r4, r0
 80a00da:	212c      	movs	r1, #44	; 0x2c
 80a00dc:	f004 fd21 	bl	80a4b22 <_ZdlPvj>
 80a00e0:	4620      	mov	r0, r4
 80a00e2:	bd10      	pop	{r4, pc}

080a00e4 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a00e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a00e6:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 80a00e8:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a00ea:	4608      	mov	r0, r1
 80a00ec:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 80a00ee:	b133      	cbz	r3, 80a00fe <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 80a00f0:	b93d      	cbnz	r5, 80a0102 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 80a00f2:	490c      	ldr	r1, [pc, #48]	; (80a0124 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 80a00f4:	b004      	add	sp, #16
 80a00f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 80a00fa:	f003 bcea 	b.w	80a3ad2 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 80a00fe:	4b0a      	ldr	r3, [pc, #40]	; (80a0128 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 80a0100:	e000      	b.n	80a0104 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 80a0102:	4b0a      	ldr	r3, [pc, #40]	; (80a012c <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 80a0104:	7b16      	ldrb	r6, [r2, #12]
 80a0106:	4c0a      	ldr	r4, [pc, #40]	; (80a0130 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 80a0108:	490a      	ldr	r1, [pc, #40]	; (80a0134 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a010a:	7b52      	ldrb	r2, [r2, #13]
 80a010c:	2e01      	cmp	r6, #1
 80a010e:	bf08      	it	eq
 80a0110:	4621      	moveq	r1, r4
 80a0112:	9202      	str	r2, [sp, #8]
 80a0114:	9101      	str	r1, [sp, #4]
 80a0116:	9500      	str	r5, [sp, #0]
 80a0118:	4a07      	ldr	r2, [pc, #28]	; (80a0138 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 80a011a:	2100      	movs	r1, #0
 80a011c:	f003 fd50 	bl	80a3bc0 <_ZN5Print11printf_implEbPKcz>
  }
 80a0120:	b004      	add	sp, #16
 80a0122:	bd70      	pop	{r4, r5, r6, pc}
 80a0124:	080a5ef5 	.word	0x080a5ef5
 80a0128:	080a61ce 	.word	0x080a61ce
 80a012c:	080a5ee4 	.word	0x080a5ee4
 80a0130:	080a5eed 	.word	0x080a5eed
 80a0134:	080a5ef1 	.word	0x080a5ef1
 80a0138:	080a5f0b 	.word	0x080a5f0b

080a013c <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
 80a013c:	b510      	push	{r4, lr}
 80a013e:	4604      	mov	r4, r0
 80a0140:	3004      	adds	r0, #4
 80a0142:	f003 fbd7 	bl	80a38f4 <_ZN6StringD1Ev>
 80a0146:	4620      	mov	r0, r4
 80a0148:	bd10      	pop	{r4, pc}

080a014a <_ZN14http_request_tD1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
 80a014a:	b510      	push	{r4, lr}
 80a014c:	4604      	mov	r4, r0
 80a014e:	303c      	adds	r0, #60	; 0x3c
 80a0150:	f003 fbd0 	bl	80a38f4 <_ZN6StringD1Ev>
 80a0154:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a0158:	f003 fbcc 	bl	80a38f4 <_ZN6StringD1Ev>
 80a015c:	4620      	mov	r0, r4
 80a015e:	f003 fbc9 	bl	80a38f4 <_ZN6StringD1Ev>
 80a0162:	4620      	mov	r0, r4
 80a0164:	bd10      	pop	{r4, pc}

080a0166 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.18>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a0166:	b510      	push	{r4, lr}
 80a0168:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a016a:	6803      	ldr	r3, [r0, #0]
 80a016c:	689b      	ldr	r3, [r3, #8]
 80a016e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0170:	68a3      	ldr	r3, [r4, #8]
 80a0172:	3b01      	subs	r3, #1
 80a0174:	60a3      	str	r3, [r4, #8]
 80a0176:	b92b      	cbnz	r3, 80a0184 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.18+0x1e>
            _M_destroy();
 80a0178:	6823      	ldr	r3, [r4, #0]
 80a017a:	4620      	mov	r0, r4
        }
    }
 80a017c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a0180:	68db      	ldr	r3, [r3, #12]
 80a0182:	4718      	bx	r3
 80a0184:	bd10      	pop	{r4, pc}
	...

080a0188 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0188:	b510      	push	{r4, lr}
 80a018a:	4b06      	ldr	r3, [pc, #24]	; (80a01a4 <_ZN9TCPClientD1Ev+0x1c>)
 80a018c:	4604      	mov	r4, r0
 80a018e:	6003      	str	r3, [r0, #0]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0190:	6980      	ldr	r0, [r0, #24]
 80a0192:	b128      	cbz	r0, 80a01a0 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0194:	6843      	ldr	r3, [r0, #4]
 80a0196:	3b01      	subs	r3, #1
 80a0198:	6043      	str	r3, [r0, #4]
 80a019a:	b90b      	cbnz	r3, 80a01a0 <_ZN9TCPClientD1Ev+0x18>
 80a019c:	f7ff ffe3 	bl	80a0166 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.18>
 80a01a0:	4620      	mov	r0, r4
 80a01a2:	bd10      	pop	{r4, pc}
 80a01a4:	080a6218 	.word	0x080a6218

080a01a8 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
 80a01a8:	b510      	push	{r4, lr}
 80a01aa:	4604      	mov	r4, r0
 80a01ac:	f7ff ffec 	bl	80a0188 <_ZN9TCPClientD1Ev>
 80a01b0:	4620      	mov	r0, r4
 80a01b2:	bd10      	pop	{r4, pc}

080a01b4 <_ZN9TCPClientD0Ev>:
 80a01b4:	b510      	push	{r4, lr}
 80a01b6:	4604      	mov	r4, r0
 80a01b8:	f7ff ffe6 	bl	80a0188 <_ZN9TCPClientD1Ev>
 80a01bc:	4620      	mov	r0, r4
 80a01be:	211c      	movs	r1, #28
 80a01c0:	f004 fcaf 	bl	80a4b22 <_ZdlPvj>
 80a01c4:	4620      	mov	r0, r4
 80a01c6:	bd10      	pop	{r4, pc}

080a01c8 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
 80a01c8:	4613      	mov	r3, r2
 80a01ca:	460a      	mov	r2, r1
 80a01cc:	4901      	ldr	r1, [pc, #4]	; (80a01d4 <_ZN7FatFile4openEPKci+0xc>)
 80a01ce:	6809      	ldr	r1, [r1, #0]
 80a01d0:	f001 bdb1 	b.w	80a1d36 <_ZN7FatFile4openEPS_PKci>
 80a01d4:	2000126c 	.word	0x2000126c

080a01d8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 80a01d8:	b530      	push	{r4, r5, lr}
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 80a01da:	4b1d      	ldr	r3, [pc, #116]	; (80a0250 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
 80a01dc:	b085      	sub	sp, #20
 80a01de:	9300      	str	r3, [sp, #0]
 80a01e0:	7913      	ldrb	r3, [r2, #4]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80a01e2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
 80a01e6:	f88d 3004 	strb.w	r3, [sp, #4]
 80a01ea:	6893      	ldr	r3, [r2, #8]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 80a01ec:	4604      	mov	r4, r0
 80a01ee:	9302      	str	r3, [sp, #8]
 80a01f0:	7b13      	ldrb	r3, [r2, #12]
 80a01f2:	f88d 300c 	strb.w	r3, [sp, #12]
 80a01f6:	7b53      	ldrb	r3, [r2, #13]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80a01f8:	460a      	mov	r2, r1
 80a01fa:	f88d 300d 	strb.w	r3, [sp, #13]
 80a01fe:	f200 416c 	addw	r1, r0, #1132	; 0x46c
 80a0202:	466b      	mov	r3, sp
 80a0204:	4628      	mov	r0, r5
 80a0206:	f002 f92b 	bl	80a2460 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
 80a020a:	b1f0      	cbz	r0, 80a024a <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 80a020c:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 80a020e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 80a0212:	4628      	mov	r0, r5
 80a0214:	f001 fd88 	bl	80a1d28 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 80a0218:	2101      	movs	r1, #1
 80a021a:	4620      	mov	r0, r4
 80a021c:	f001 ffc9 	bl	80a21b2 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 80a0220:	4601      	mov	r1, r0
 80a0222:	b168      	cbz	r0, 80a0240 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
 80a0224:	4621      	mov	r1, r4
 80a0226:	4628      	mov	r0, r5
 80a0228:	f001 fba9 	bl	80a197e <_ZN7FatFile8openRootEP9FatVolume>
 80a022c:	b168      	cbz	r0, 80a024a <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 80a022e:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 80a0232:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 80a0236:	bf16      	itet	ne
 80a0238:	4b06      	ldrne	r3, [pc, #24]	; (80a0254 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
 80a023a:	4618      	moveq	r0, r3
 80a023c:	601d      	strne	r5, [r3, #0]
 80a023e:	e005      	b.n	80a024c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 80a0240:	4620      	mov	r0, r4
 80a0242:	f001 ffb6 	bl	80a21b2 <_ZN9FatVolume4initEh>
 80a0246:	2800      	cmp	r0, #0
 80a0248:	d1ec      	bne.n	80a0224 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
 80a024a:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
 80a024c:	b005      	add	sp, #20
 80a024e:	bd30      	pop	{r4, r5, pc}
 80a0250:	080a5ec8 	.word	0x080a5ec8
 80a0254:	2000126c 	.word	0x2000126c

080a0258 <_Z12writeHeader16SdFilePc>:
    if(count == 33){
      count = 1;
    }
  }
}
void writeHeader1(SdFile file, char fileName[]) {
 80a0258:	b570      	push	{r4, r5, r6, lr}
 80a025a:	460e      	mov	r6, r1
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 80a025c:	4b3c      	ldr	r3, [pc, #240]	; (80a0350 <_Z12writeHeader16SdFilePc+0xf8>)
 80a025e:	b08a      	sub	sp, #40	; 0x28
 80a0260:	9301      	str	r3, [sp, #4]
 80a0262:	4b3c      	ldr	r3, [pc, #240]	; (80a0354 <_Z12writeHeader16SdFilePc+0xfc>)
 80a0264:	2500      	movs	r5, #0
 80a0266:	9303      	str	r3, [sp, #12]
  sd.begin(chipSelect, SD_SCK_MHZ(50));
 80a0268:	aa01      	add	r2, sp, #4
 80a026a:	2301      	movs	r3, #1
 80a026c:	210f      	movs	r1, #15
    if(count == 33){
      count = 1;
    }
  }
}
void writeHeader1(SdFile file, char fileName[]) {
 80a026e:	4604      	mov	r4, r0
  sd.begin(chipSelect, SD_SCK_MHZ(50));
 80a0270:	4839      	ldr	r0, [pc, #228]	; (80a0358 <_Z12writeHeader16SdFilePc+0x100>)
 80a0272:	f88d 3010 	strb.w	r3, [sp, #16]
 80a0276:	f88d 5008 	strb.w	r5, [sp, #8]
 80a027a:	f88d 5011 	strb.w	r5, [sp, #17]
 80a027e:	f7ff ffab 	bl	80a01d8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 80a0282:	462b      	mov	r3, r5
 80a0284:	4632      	mov	r2, r6
 80a0286:	4935      	ldr	r1, [pc, #212]	; (80a035c <_Z12writeHeader16SdFilePc+0x104>)
 80a0288:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80a028a:	f88d 5004 	strb.w	r5, [sp, #4]
 80a028e:	f88d 5005 	strb.w	r5, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 80a0292:	f001 fd50 	bl	80a1d36 <_ZN7FatFile4openEPS_PKci>
  if(!sd.exists(fileName)){
 80a0296:	2800      	cmp	r0, #0
 80a0298:	d158      	bne.n	80a034c <_Z12writeHeader16SdFilePc+0xf4>
    file.open(fileName, O_WRONLY | O_CREAT);
 80a029a:	f104 0508 	add.w	r5, r4, #8
 80a029e:	f240 2201 	movw	r2, #513	; 0x201
 80a02a2:	4631      	mov	r1, r6
 80a02a4:	4628      	mov	r0, r5
 80a02a6:	f7ff ff8f 	bl	80a01c8 <_ZN7FatFile4openEPKci>
    file.sync();
 80a02aa:	4628      	mov	r0, r5
 80a02ac:	f001 fd06 	bl	80a1cbc <_ZN7FatFile4syncEv>
    file.print("Time");
 80a02b0:	492b      	ldr	r1, [pc, #172]	; (80a0360 <_Z12writeHeader16SdFilePc+0x108>)
 80a02b2:	4620      	mov	r0, r4
 80a02b4:	f003 fc0d 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(',');
 80a02b8:	212c      	movs	r1, #44	; 0x2c
 80a02ba:	4620      	mov	r0, r4
 80a02bc:	f003 fc0d 	bl	80a3ada <_ZN5Print5printEc>
    file.print(",pm10_standard");
 80a02c0:	4928      	ldr	r1, [pc, #160]	; (80a0364 <_Z12writeHeader16SdFilePc+0x10c>)
 80a02c2:	4620      	mov	r0, r4
 80a02c4:	f003 fc05 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",pm25_standard");
 80a02c8:	4927      	ldr	r1, [pc, #156]	; (80a0368 <_Z12writeHeader16SdFilePc+0x110>)
 80a02ca:	4620      	mov	r0, r4
 80a02cc:	f003 fc01 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",pm100_standard");
 80a02d0:	4926      	ldr	r1, [pc, #152]	; (80a036c <_Z12writeHeader16SdFilePc+0x114>)
 80a02d2:	4620      	mov	r0, r4
 80a02d4:	f003 fbfd 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",pm10_env");
 80a02d8:	4925      	ldr	r1, [pc, #148]	; (80a0370 <_Z12writeHeader16SdFilePc+0x118>)
 80a02da:	4620      	mov	r0, r4
 80a02dc:	f003 fbf9 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",pm25_env");
 80a02e0:	4924      	ldr	r1, [pc, #144]	; (80a0374 <_Z12writeHeader16SdFilePc+0x11c>)
 80a02e2:	4620      	mov	r0, r4
 80a02e4:	f003 fbf5 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",pm100_env");
 80a02e8:	4923      	ldr	r1, [pc, #140]	; (80a0378 <_Z12writeHeader16SdFilePc+0x120>)
 80a02ea:	4620      	mov	r0, r4
 80a02ec:	f003 fbf1 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",P3um");
 80a02f0:	4922      	ldr	r1, [pc, #136]	; (80a037c <_Z12writeHeader16SdFilePc+0x124>)
 80a02f2:	4620      	mov	r0, r4
 80a02f4:	f003 fbed 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",P5um");
 80a02f8:	4921      	ldr	r1, [pc, #132]	; (80a0380 <_Z12writeHeader16SdFilePc+0x128>)
 80a02fa:	4620      	mov	r0, r4
 80a02fc:	f003 fbe9 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",P10um");
 80a0300:	4920      	ldr	r1, [pc, #128]	; (80a0384 <_Z12writeHeader16SdFilePc+0x12c>)
 80a0302:	4620      	mov	r0, r4
 80a0304:	f003 fbe5 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",P25um");
 80a0308:	491f      	ldr	r1, [pc, #124]	; (80a0388 <_Z12writeHeader16SdFilePc+0x130>)
 80a030a:	4620      	mov	r0, r4
 80a030c:	f003 fbe1 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",P50um");
 80a0310:	491e      	ldr	r1, [pc, #120]	; (80a038c <_Z12writeHeader16SdFilePc+0x134>)
 80a0312:	4620      	mov	r0, r4
 80a0314:	f003 fbdd 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",P100um");
 80a0318:	491d      	ldr	r1, [pc, #116]	; (80a0390 <_Z12writeHeader16SdFilePc+0x138>)
 80a031a:	4620      	mov	r0, r4
 80a031c:	f003 fbd9 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",checksum");
 80a0320:	491c      	ldr	r1, [pc, #112]	; (80a0394 <_Z12writeHeader16SdFilePc+0x13c>)
 80a0322:	4620      	mov	r0, r4
 80a0324:	f003 fbd5 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",Shinyei");
 80a0328:	491b      	ldr	r1, [pc, #108]	; (80a0398 <_Z12writeHeader16SdFilePc+0x140>)
 80a032a:	4620      	mov	r0, r4
 80a032c:	f003 fbd1 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",Temperature");
 80a0330:	491a      	ldr	r1, [pc, #104]	; (80a039c <_Z12writeHeader16SdFilePc+0x144>)
 80a0332:	4620      	mov	r0, r4
 80a0334:	f003 fbcd 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.print(",Humidity");
 80a0338:	4919      	ldr	r1, [pc, #100]	; (80a03a0 <_Z12writeHeader16SdFilePc+0x148>)
 80a033a:	4620      	mov	r0, r4
 80a033c:	f003 fbc9 	bl	80a3ad2 <_ZN5Print5printEPKc>
    file.println();
 80a0340:	4620      	mov	r0, r4
 80a0342:	f003 fbcd 	bl	80a3ae0 <_ZN5Print7printlnEv>
    file.close();
 80a0346:	4628      	mov	r0, r5
 80a0348:	f001 fcee 	bl	80a1d28 <_ZN7FatFile5closeEv>
  }
}
 80a034c:	b00a      	add	sp, #40	; 0x28
 80a034e:	bd70      	pop	{r4, r5, r6, pc}
 80a0350:	080a5ec8 	.word	0x080a5ec8
 80a0354:	02faf080 	.word	0x02faf080
 80a0358:	20000160 	.word	0x20000160
 80a035c:	2000059c 	.word	0x2000059c
 80a0360:	080a5f29 	.word	0x080a5f29
 80a0364:	080a5f2e 	.word	0x080a5f2e
 80a0368:	080a5f3d 	.word	0x080a5f3d
 80a036c:	080a5f4c 	.word	0x080a5f4c
 80a0370:	080a5f5c 	.word	0x080a5f5c
 80a0374:	080a5f66 	.word	0x080a5f66
 80a0378:	080a5f70 	.word	0x080a5f70
 80a037c:	080a5f7b 	.word	0x080a5f7b
 80a0380:	080a5f81 	.word	0x080a5f81
 80a0384:	080a5f87 	.word	0x080a5f87
 80a0388:	080a5f8e 	.word	0x080a5f8e
 80a038c:	080a5f95 	.word	0x080a5f95
 80a0390:	080a5f9c 	.word	0x080a5f9c
 80a0394:	080a5fa4 	.word	0x080a5fa4
 80a0398:	080a5fae 	.word	0x080a5fae
 80a039c:	080a5fb7 	.word	0x080a5fb7
 80a03a0:	080a5fc4 	.word	0x080a5fc4

080a03a4 <setup>:
void writeHeader1(SdFile file, char fileName[]);
void logData1(SdFile file, char fileName[]);
void handler(const char *eventName, const char *data);
void handler2(const char *eventName, const char *data);
void Postrequest();
void setup(){
 80a03a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
 80a03a8:	4d2c      	ldr	r5, [pc, #176]	; (80a045c <setup+0xb8>)
 80a03aa:	b094      	sub	sp, #80	; 0x50
 80a03ac:	4628      	mov	r0, r5
 80a03ae:	f005 fcca 	bl	80a5d46 <strlen>
 80a03b2:	4c2b      	ldr	r4, [pc, #172]	; (80a0460 <setup+0xbc>)
 80a03b4:	4680      	mov	r8, r0
 80a03b6:	4620      	mov	r0, r4
 80a03b8:	f005 fcc5 	bl	80a5d46 <strlen>
 80a03bc:	4607      	mov	r7, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
 80a03be:	264c      	movs	r6, #76	; 0x4c
 80a03c0:	4632      	mov	r2, r6
 80a03c2:	2100      	movs	r1, #0
 80a03c4:	a801      	add	r0, sp, #4
 80a03c6:	f005 fc61 	bl	80a5c8c <memset>
        creds.size = sizeof(creds);
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
 80a03ca:	2303      	movs	r3, #3
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a03cc:	4825      	ldr	r0, [pc, #148]	; (80a0464 <setup+0xc0>)
        creds.size = sizeof(creds);
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
 80a03ce:	f88d 3018 	strb.w	r3, [sp, #24]
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a03d2:	2300      	movs	r3, #0
 80a03d4:	4619      	mov	r1, r3
 80a03d6:	aa01      	add	r2, sp, #4
 80a03d8:	6840      	ldr	r0, [r0, #4]
    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
 80a03da:	9601      	str	r6, [sp, #4]
        creds.ssid = ssid;
 80a03dc:	9502      	str	r5, [sp, #8]
        creds.ssid_len = ssidLen;
 80a03de:	f8cd 800c 	str.w	r8, [sp, #12]
        creds.password = password;
 80a03e2:	9404      	str	r4, [sp, #16]
        creds.password_len = passwordLen;
 80a03e4:	9705      	str	r7, [sp, #20]
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
 80a03e6:	f002 fecf 	bl	80a3188 <network_set_credentials>
  //setting wifi
  WiFi.setCredentials(wifissid, wifipassword);//options are WPA2, WEP, WPA
  //Serial for plantower
  Serial1.begin(9600, SERIAL_8N1);
 80a03ea:	f004 f97d 	bl	80a46e8 <_Z22__fetch_global_Serial1v>
 80a03ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a03f2:	2200      	movs	r2, #0
 80a03f4:	f004 f96e 	bl	80a46d4 <_ZN11USARTSerial5beginEmm>
  //Setup for Shinyei
  pinMode(Shinyei,INPUT);
 80a03f8:	4b1b      	ldr	r3, [pc, #108]	; (80a0468 <setup+0xc4>)
 80a03fa:	2100      	movs	r1, #0
 80a03fc:	8818      	ldrh	r0, [r3, #0]
 80a03fe:	f004 fb05 	bl	80a4a0c <pinMode>
  //Setup for humidity and temperature sensor
  while(!htu.begin()){
 80a0402:	481a      	ldr	r0, [pc, #104]	; (80a046c <setup+0xc8>)
 80a0404:	f000 fde1 	bl	80a0fca <_ZN15Adafruit_Si70215beginEv>
 80a0408:	b920      	cbnz	r0, 80a0414 <setup+0x70>
	    delay(1000);
 80a040a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a040e:	f003 fc47 	bl	80a3ca0 <delay>
  //Serial for plantower
  Serial1.begin(9600, SERIAL_8N1);
  //Setup for Shinyei
  pinMode(Shinyei,INPUT);
  //Setup for humidity and temperature sensor
  while(!htu.begin()){
 80a0412:	e7f6      	b.n	80a0402 <setup+0x5e>
//==============================================================================
/**
 * \class PrintFile
 * \brief FatFile with Print.
 */
class PrintFile : public FatFile, public Print {
 80a0414:	4e16      	ldr	r6, [pc, #88]	; (80a0470 <setup+0xcc>)
 80a0416:	ac03      	add	r4, sp, #12
 80a0418:	f106 0508 	add.w	r5, r6, #8
 80a041c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a041e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0424:	682b      	ldr	r3, [r5, #0]
	    delay(1000);
	}
  //sd.exists(fileName)
  writeHeader1(sdfile1, sdfilename);
 80a0426:	4913      	ldr	r1, [pc, #76]	; (80a0474 <setup+0xd0>)
 80a0428:	6023      	str	r3, [r4, #0]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
 80a042a:	6873      	ldr	r3, [r6, #4]
 80a042c:	a801      	add	r0, sp, #4
 80a042e:	9302      	str	r3, [sp, #8]
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 80a0430:	4b11      	ldr	r3, [pc, #68]	; (80a0478 <setup+0xd4>)
 80a0432:	9301      	str	r3, [sp, #4]
 80a0434:	f7ff ff10 	bl	80a0258 <_Z12writeHeader16SdFilePc>
  //Setup for RTC
  rtc.begin();
 80a0438:	4810      	ldr	r0, [pc, #64]	; (80a047c <setup+0xd8>)
 80a043a:	f002 fb6d 	bl	80a2b18 <_ZN10RTC_DS32315beginEv>
  if (rtc.lostPower()) {
 80a043e:	480f      	ldr	r0, [pc, #60]	; (80a047c <setup+0xd8>)
 80a0440:	f002 fb71 	bl	80a2b26 <_ZN10RTC_DS32319lostPowerEv>
 80a0444:	b138      	cbz	r0, 80a0456 <setup+0xb2>
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
 80a0446:	4a0e      	ldr	r2, [pc, #56]	; (80a0480 <setup+0xdc>)
 80a0448:	490e      	ldr	r1, [pc, #56]	; (80a0484 <setup+0xe0>)
 80a044a:	a801      	add	r0, sp, #4
 80a044c:	f002 faea 	bl	80a2a24 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>
 80a0450:	a801      	add	r0, sp, #4
 80a0452:	f002 fb6f 	bl	80a2b34 <_ZN10RTC_DS32316adjustERK8DateTime>
     //rtc.adjust(DateTime(2019, 6, 5, 10, 58, 0));
  }
}
 80a0456:	b014      	add	sp, #80	; 0x50
 80a0458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a045c:	2000002c 	.word	0x2000002c
 80a0460:	200005e4 	.word	0x200005e4
 80a0464:	200016fc 	.word	0x200016fc
 80a0468:	20000028 	.word	0x20000028
 80a046c:	20000e58 	.word	0x20000e58
 80a0470:	20000a08 	.word	0x20000a08
 80a0474:	2000005c 	.word	0x2000005c
 80a0478:	080a5ed4 	.word	0x080a5ed4
 80a047c:	20000e34 	.word	0x20000e34
 80a0480:	080a5fce 	.word	0x080a5fce
 80a0484:	080a5fd7 	.word	0x080a5fd7

080a0488 <_Z8logData16SdFilePc>:
    file.print(",Humidity");
    file.println();
    file.close();
  }
}
void logData1(SdFile file, char fileName[]) {
 80a0488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a048c:	460f      	mov	r7, r1
 80a048e:	4ba1      	ldr	r3, [pc, #644]	; (80a0714 <_Z8logData16SdFilePc+0x28c>)
 80a0490:	b08a      	sub	sp, #40	; 0x28
 80a0492:	9301      	str	r3, [sp, #4]
 80a0494:	4ba0      	ldr	r3, [pc, #640]	; (80a0718 <_Z8logData16SdFilePc+0x290>)
 80a0496:	2500      	movs	r5, #0
 80a0498:	4604      	mov	r4, r0
 80a049a:	9303      	str	r3, [sp, #12]
  //logging RTC data
  sd.begin(chipSelect, SD_SCK_MHZ(50));
 80a049c:	aa01      	add	r2, sp, #4
 80a049e:	2301      	movs	r3, #1
 80a04a0:	210f      	movs	r1, #15
 80a04a2:	489e      	ldr	r0, [pc, #632]	; (80a071c <_Z8logData16SdFilePc+0x294>)
 80a04a4:	f88d 3010 	strb.w	r3, [sp, #16]
 80a04a8:	f88d 5008 	strb.w	r5, [sp, #8]
 80a04ac:	f88d 5011 	strb.w	r5, [sp, #17]
 80a04b0:	f7ff fe92 	bl	80a01d8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
 80a04b4:	462b      	mov	r3, r5
 80a04b6:	463a      	mov	r2, r7
 80a04b8:	4999      	ldr	r1, [pc, #612]	; (80a0720 <_Z8logData16SdFilePc+0x298>)
 80a04ba:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80a04bc:	f88d 5004 	strb.w	r5, [sp, #4]
 80a04c0:	f88d 5005 	strb.w	r5, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
 80a04c4:	f001 fc37 	bl	80a1d36 <_ZN7FatFile4openEPS_PKci>
 80a04c8:	f104 0608 	add.w	r6, r4, #8
  if(!sd.exists(fileName)){
 80a04cc:	b910      	cbnz	r0, 80a04d4 <_Z8logData16SdFilePc+0x4c>
    file.open(fileName, O_WRONLY | O_CREAT);
 80a04ce:	f240 2201 	movw	r2, #513	; 0x201
 80a04d2:	e000      	b.n	80a04d6 <_Z8logData16SdFilePc+0x4e>
  }
  else{
    file.open(fileName, O_WRONLY | O_APPEND);
 80a04d4:	2209      	movs	r2, #9
 80a04d6:	4d93      	ldr	r5, [pc, #588]	; (80a0724 <_Z8logData16SdFilePc+0x29c>)
 80a04d8:	4639      	mov	r1, r7
 80a04da:	4630      	mov	r0, r6
 80a04dc:	f7ff fe74 	bl	80a01c8 <_ZN7FatFile4openEPKci>
  }
  file.sync();
 80a04e0:	4630      	mov	r0, r6
 80a04e2:	f001 fbeb 	bl	80a1cbc <_ZN7FatFile4syncEv>
  file.print(now.year(), DEC);
 80a04e6:	7829      	ldrb	r1, [r5, #0]
 80a04e8:	220a      	movs	r2, #10
 80a04ea:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
 80a04ee:	4620      	mov	r0, r4
 80a04f0:	f003 fb5a 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print('-');
 80a04f4:	212d      	movs	r1, #45	; 0x2d
 80a04f6:	4620      	mov	r0, r4
 80a04f8:	f003 faef 	bl	80a3ada <_ZN5Print5printEc>
  file.print(now.month(), DEC);
 80a04fc:	220a      	movs	r2, #10
 80a04fe:	7869      	ldrb	r1, [r5, #1]
 80a0500:	4620      	mov	r0, r4
 80a0502:	f003 fb2d 	bl	80a3b60 <_ZN5Print5printEhi>
  file.print('-');
 80a0506:	212d      	movs	r1, #45	; 0x2d
 80a0508:	4620      	mov	r0, r4
 80a050a:	f003 fae6 	bl	80a3ada <_ZN5Print5printEc>
  file.print(now.day(), DEC);
 80a050e:	220a      	movs	r2, #10
 80a0510:	78a9      	ldrb	r1, [r5, #2]
 80a0512:	4620      	mov	r0, r4
 80a0514:	f003 fb24 	bl	80a3b60 <_ZN5Print5printEhi>
  file.print(" ");
 80a0518:	4983      	ldr	r1, [pc, #524]	; (80a0728 <_Z8logData16SdFilePc+0x2a0>)
 80a051a:	4620      	mov	r0, r4
 80a051c:	f003 fad9 	bl	80a3ad2 <_ZN5Print5printEPKc>
  file.print(now.hour(), DEC);
 80a0520:	220a      	movs	r2, #10
 80a0522:	78e9      	ldrb	r1, [r5, #3]
 80a0524:	4620      	mov	r0, r4
 80a0526:	f003 fb1b 	bl	80a3b60 <_ZN5Print5printEhi>
  file.print(':');
 80a052a:	213a      	movs	r1, #58	; 0x3a
 80a052c:	4620      	mov	r0, r4
 80a052e:	f003 fad4 	bl	80a3ada <_ZN5Print5printEc>
  file.print(now.minute(), DEC);
 80a0532:	220a      	movs	r2, #10
 80a0534:	7929      	ldrb	r1, [r5, #4]
 80a0536:	4620      	mov	r0, r4
 80a0538:	f003 fb12 	bl	80a3b60 <_ZN5Print5printEhi>
  file.print(':');
 80a053c:	213a      	movs	r1, #58	; 0x3a
 80a053e:	4620      	mov	r0, r4
 80a0540:	f003 facb 	bl	80a3ada <_ZN5Print5printEc>
  file.print(now.second(), DEC);
 80a0544:	220a      	movs	r2, #10
 80a0546:	7969      	ldrb	r1, [r5, #5]
 80a0548:	4620      	mov	r0, r4
 80a054a:	f003 fb09 	bl	80a3b60 <_ZN5Print5printEhi>
  //logging tempa and humidity data
  templ = (int)temp;
 80a054e:	4b77      	ldr	r3, [pc, #476]	; (80a072c <_Z8logData16SdFilePc+0x2a4>)
 80a0550:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 80a0744 <_Z8logData16SdFilePc+0x2bc>
 80a0554:	681d      	ldr	r5, [r3, #0]
  tempr = (temp-templ)*100;//rounded to 2 places
 80a0556:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 80a0748 <_Z8logData16SdFilePc+0x2c0>
  file.print(':');
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging tempa and humidity data
  templ = (int)temp;
 80a055a:	4628      	mov	r0, r5
 80a055c:	f005 fb44 	bl	80a5be8 <__aeabi_f2iz>
 80a0560:	f8ca 0000 	str.w	r0, [sl]
  tempr = (temp-templ)*100;//rounded to 2 places
 80a0564:	f005 f926 	bl	80a57b4 <__aeabi_i2f>
 80a0568:	4601      	mov	r1, r0
 80a056a:	4628      	mov	r0, r5
 80a056c:	f005 f86c 	bl	80a5648 <__aeabi_fsub>
 80a0570:	496f      	ldr	r1, [pc, #444]	; (80a0730 <_Z8logData16SdFilePc+0x2a8>)
 80a0572:	f005 f973 	bl	80a585c <__aeabi_fmul>
 80a0576:	f005 fb37 	bl	80a5be8 <__aeabi_f2iz>
  humdl = (int)humd;
 80a057a:	4b6e      	ldr	r3, [pc, #440]	; (80a0734 <_Z8logData16SdFilePc+0x2ac>)
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging tempa and humidity data
  templ = (int)temp;
  tempr = (temp-templ)*100;//rounded to 2 places
 80a057c:	f8c9 0000 	str.w	r0, [r9]
  humdl = (int)humd;
 80a0580:	681d      	ldr	r5, [r3, #0]
 80a0582:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80a074c <_Z8logData16SdFilePc+0x2c4>
 80a0586:	4628      	mov	r0, r5
 80a0588:	f005 fb2e 	bl	80a5be8 <__aeabi_f2iz>
 80a058c:	f8c8 0000 	str.w	r0, [r8]
  humdr = (humd-humdl)*100;//rounded to 2 places
 80a0590:	f005 f910 	bl	80a57b4 <__aeabi_i2f>
 80a0594:	4601      	mov	r1, r0
 80a0596:	4628      	mov	r0, r5
 80a0598:	f005 f856 	bl	80a5648 <__aeabi_fsub>
 80a059c:	4964      	ldr	r1, [pc, #400]	; (80a0730 <_Z8logData16SdFilePc+0x2a8>)
 80a059e:	f005 f95d 	bl	80a585c <__aeabi_fmul>
 80a05a2:	f005 fb21 	bl	80a5be8 <__aeabi_f2iz>
 80a05a6:	4f64      	ldr	r7, [pc, #400]	; (80a0738 <_Z8logData16SdFilePc+0x2b0>)
  file.print(',');
  file.print(',');
  file.print(data.pm10_standard);
 80a05a8:	4d64      	ldr	r5, [pc, #400]	; (80a073c <_Z8logData16SdFilePc+0x2b4>)
  file.print(now.second(), DEC);
  //logging tempa and humidity data
  templ = (int)temp;
  tempr = (temp-templ)*100;//rounded to 2 places
  humdl = (int)humd;
  humdr = (humd-humdl)*100;//rounded to 2 places
 80a05aa:	6038      	str	r0, [r7, #0]
  file.print(',');
 80a05ac:	212c      	movs	r1, #44	; 0x2c
 80a05ae:	4620      	mov	r0, r4
 80a05b0:	f003 fa93 	bl	80a3ada <_ZN5Print5printEc>
  file.print(',');
 80a05b4:	212c      	movs	r1, #44	; 0x2c
 80a05b6:	4620      	mov	r0, r4
 80a05b8:	f003 fa8f 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.pm10_standard);
 80a05bc:	220a      	movs	r2, #10
 80a05be:	8869      	ldrh	r1, [r5, #2]
 80a05c0:	4620      	mov	r0, r4
 80a05c2:	f003 faf1 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a05c6:	212c      	movs	r1, #44	; 0x2c
 80a05c8:	4620      	mov	r0, r4
 80a05ca:	f003 fa86 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.pm25_standard);
 80a05ce:	220a      	movs	r2, #10
 80a05d0:	88a9      	ldrh	r1, [r5, #4]
 80a05d2:	4620      	mov	r0, r4
 80a05d4:	f003 fae8 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a05d8:	212c      	movs	r1, #44	; 0x2c
 80a05da:	4620      	mov	r0, r4
 80a05dc:	f003 fa7d 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.pm100_standard);
 80a05e0:	220a      	movs	r2, #10
 80a05e2:	88e9      	ldrh	r1, [r5, #6]
 80a05e4:	4620      	mov	r0, r4
 80a05e6:	f003 fadf 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a05ea:	212c      	movs	r1, #44	; 0x2c
 80a05ec:	4620      	mov	r0, r4
 80a05ee:	f003 fa74 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.pm10_env);
 80a05f2:	220a      	movs	r2, #10
 80a05f4:	8929      	ldrh	r1, [r5, #8]
 80a05f6:	4620      	mov	r0, r4
 80a05f8:	f003 fad6 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a05fc:	212c      	movs	r1, #44	; 0x2c
 80a05fe:	4620      	mov	r0, r4
 80a0600:	f003 fa6b 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.pm25_env);
 80a0604:	220a      	movs	r2, #10
 80a0606:	8969      	ldrh	r1, [r5, #10]
 80a0608:	4620      	mov	r0, r4
 80a060a:	f003 facd 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a060e:	212c      	movs	r1, #44	; 0x2c
 80a0610:	4620      	mov	r0, r4
 80a0612:	f003 fa62 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.pm100_env);
 80a0616:	220a      	movs	r2, #10
 80a0618:	89a9      	ldrh	r1, [r5, #12]
 80a061a:	4620      	mov	r0, r4
 80a061c:	f003 fac4 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a0620:	212c      	movs	r1, #44	; 0x2c
 80a0622:	4620      	mov	r0, r4
 80a0624:	f003 fa59 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.particles_03um);
 80a0628:	220a      	movs	r2, #10
 80a062a:	89e9      	ldrh	r1, [r5, #14]
 80a062c:	4620      	mov	r0, r4
 80a062e:	f003 fabb 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a0632:	212c      	movs	r1, #44	; 0x2c
 80a0634:	4620      	mov	r0, r4
 80a0636:	f003 fa50 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.particles_05um);
 80a063a:	220a      	movs	r2, #10
 80a063c:	8a29      	ldrh	r1, [r5, #16]
 80a063e:	4620      	mov	r0, r4
 80a0640:	f003 fab2 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a0644:	212c      	movs	r1, #44	; 0x2c
 80a0646:	4620      	mov	r0, r4
 80a0648:	f003 fa47 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.particles_10um);
 80a064c:	220a      	movs	r2, #10
 80a064e:	8a69      	ldrh	r1, [r5, #18]
 80a0650:	4620      	mov	r0, r4
 80a0652:	f003 faa9 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a0656:	212c      	movs	r1, #44	; 0x2c
 80a0658:	4620      	mov	r0, r4
 80a065a:	f003 fa3e 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.particles_25um);
 80a065e:	220a      	movs	r2, #10
 80a0660:	8aa9      	ldrh	r1, [r5, #20]
 80a0662:	4620      	mov	r0, r4
 80a0664:	f003 faa0 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a0668:	212c      	movs	r1, #44	; 0x2c
 80a066a:	4620      	mov	r0, r4
 80a066c:	f003 fa35 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.particles_50um);
 80a0670:	220a      	movs	r2, #10
 80a0672:	8ae9      	ldrh	r1, [r5, #22]
 80a0674:	4620      	mov	r0, r4
 80a0676:	f003 fa97 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a067a:	212c      	movs	r1, #44	; 0x2c
 80a067c:	4620      	mov	r0, r4
 80a067e:	f003 fa2c 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.particles_100um);
 80a0682:	220a      	movs	r2, #10
 80a0684:	8b29      	ldrh	r1, [r5, #24]
 80a0686:	4620      	mov	r0, r4
 80a0688:	f003 fa8e 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a068c:	212c      	movs	r1, #44	; 0x2c
 80a068e:	4620      	mov	r0, r4
 80a0690:	f003 fa23 	bl	80a3ada <_ZN5Print5printEc>
  file.print(data.checksum);
 80a0694:	220a      	movs	r2, #10
 80a0696:	8ba9      	ldrh	r1, [r5, #28]
 80a0698:	4620      	mov	r0, r4
 80a069a:	f003 fa85 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a069e:	212c      	movs	r1, #44	; 0x2c
 80a06a0:	4620      	mov	r0, r4
 80a06a2:	f003 fa1a 	bl	80a3ada <_ZN5Print5printEc>
  file.print(ratioint);
 80a06a6:	4b26      	ldr	r3, [pc, #152]	; (80a0740 <_Z8logData16SdFilePc+0x2b8>)
 80a06a8:	220a      	movs	r2, #10
 80a06aa:	6819      	ldr	r1, [r3, #0]
 80a06ac:	4620      	mov	r0, r4
 80a06ae:	f003 fa7b 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a06b2:	212c      	movs	r1, #44	; 0x2c
 80a06b4:	4620      	mov	r0, r4
 80a06b6:	f003 fa10 	bl	80a3ada <_ZN5Print5printEc>
  file.print(templ);
 80a06ba:	220a      	movs	r2, #10
 80a06bc:	f8da 1000 	ldr.w	r1, [sl]
 80a06c0:	4620      	mov	r0, r4
 80a06c2:	f003 fa71 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print('.');
 80a06c6:	212e      	movs	r1, #46	; 0x2e
 80a06c8:	4620      	mov	r0, r4
 80a06ca:	f003 fa06 	bl	80a3ada <_ZN5Print5printEc>
  file.print(tempr);
 80a06ce:	220a      	movs	r2, #10
 80a06d0:	f8d9 1000 	ldr.w	r1, [r9]
 80a06d4:	4620      	mov	r0, r4
 80a06d6:	f003 fa67 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print(',');
 80a06da:	212c      	movs	r1, #44	; 0x2c
 80a06dc:	4620      	mov	r0, r4
 80a06de:	f003 f9fc 	bl	80a3ada <_ZN5Print5printEc>
  file.print(humdl);
 80a06e2:	220a      	movs	r2, #10
 80a06e4:	f8d8 1000 	ldr.w	r1, [r8]
 80a06e8:	4620      	mov	r0, r4
 80a06ea:	f003 fa5d 	bl	80a3ba8 <_ZN5Print5printEii>
  file.print('.');
 80a06ee:	212e      	movs	r1, #46	; 0x2e
 80a06f0:	4620      	mov	r0, r4
 80a06f2:	f003 f9f2 	bl	80a3ada <_ZN5Print5printEc>
  file.print(humdr);
 80a06f6:	220a      	movs	r2, #10
 80a06f8:	6839      	ldr	r1, [r7, #0]
 80a06fa:	4620      	mov	r0, r4
 80a06fc:	f003 fa54 	bl	80a3ba8 <_ZN5Print5printEii>
  file.println();
 80a0700:	4620      	mov	r0, r4
 80a0702:	f003 f9ed 	bl	80a3ae0 <_ZN5Print7printlnEv>
  file.close();
 80a0706:	4630      	mov	r0, r6
 80a0708:	f001 fb0e 	bl	80a1d28 <_ZN7FatFile5closeEv>
 80a070c:	b00a      	add	sp, #40	; 0x28
 80a070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0712:	bf00      	nop
 80a0714:	080a5ec8 	.word	0x080a5ec8
 80a0718:	02faf080 	.word	0x02faf080
 80a071c:	20000160 	.word	0x20000160
 80a0720:	2000059c 	.word	0x2000059c
 80a0724:	200005e5 	.word	0x200005e5
 80a0728:	080a62ff 	.word	0x080a62ff
 80a072c:	20001268 	.word	0x20001268
 80a0730:	42c80000 	.word	0x42c80000
 80a0734:	20000e24 	.word	0x20000e24
 80a0738:	20000a38 	.word	0x20000a38
 80a073c:	20000e36 	.word	0x20000e36
 80a0740:	20000e7c 	.word	0x20000e7c
 80a0744:	20000e28 	.word	0x20000e28
 80a0748:	20000e64 	.word	0x20000e64
 80a074c:	20000e54 	.word	0x20000e54

080a0750 <loop>:
  if (rtc.lostPower()) {
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
     //rtc.adjust(DateTime(2019, 6, 5, 10, 58, 0));
  }
}
void loop(){
 80a0750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0754:	4c61      	ldr	r4, [pc, #388]	; (80a08dc <loop+0x18c>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0756:	2200      	movs	r2, #0
 80a0758:	b0a3      	sub	sp, #140	; 0x8c
 80a075a:	4611      	mov	r1, r2
 80a075c:	6860      	ldr	r0, [r4, #4]
 80a075e:	f002 fceb 	bl	80a3138 <network_ready>
  //check for wifi connection
  if(!WiFi.ready()){
 80a0762:	4603      	mov	r3, r0
 80a0764:	b920      	cbnz	r0, 80a0770 <loop+0x20>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0766:	4602      	mov	r2, r0
 80a0768:	4601      	mov	r1, r0
 80a076a:	6860      	ldr	r0, [r4, #4]
 80a076c:	f002 fccc 	bl	80a3108 <network_connect>
    WiFi.connect();
  }
  //Plantower data collection and processing
  int txdata = Serial1.read();
 80a0770:	f003 ffba 	bl	80a46e8 <_Z22__fetch_global_Serial1v>
 80a0774:	6803      	ldr	r3, [r0, #0]
 80a0776:	695b      	ldr	r3, [r3, #20]
 80a0778:	4798      	blx	r3
  if(txdata != -260){
 80a077a:	f510 7f82 	cmn.w	r0, #260	; 0x104
 80a077e:	f000 81d3 	beq.w	80a0b28 <loop+0x3d8>
    if(count % 2 == 1){
 80a0782:	4e57      	ldr	r6, [pc, #348]	; (80a08e0 <loop+0x190>)
 80a0784:	4b57      	ldr	r3, [pc, #348]	; (80a08e4 <loop+0x194>)
 80a0786:	6832      	ldr	r2, [r6, #0]
 80a0788:	4013      	ands	r3, r2
 80a078a:	2b00      	cmp	r3, #0
 80a078c:	bfbe      	ittt	lt
 80a078e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80a0792:	f063 0301 	ornlt	r3, r3, #1
 80a0796:	3301      	addlt	r3, #1
 80a0798:	2b01      	cmp	r3, #1
 80a079a:	4b53      	ldr	r3, [pc, #332]	; (80a08e8 <loop+0x198>)
 80a079c:	d10a      	bne.n	80a07b4 <loop+0x64>
      shiftedtxdata = txdata << 8;
 80a079e:	0201      	lsls	r1, r0, #8
      if(count == 1){
 80a07a0:	2a01      	cmp	r2, #1
  }
  //Plantower data collection and processing
  int txdata = Serial1.read();
  if(txdata != -260){
    if(count % 2 == 1){
      shiftedtxdata = txdata << 8;
 80a07a2:	6019      	str	r1, [r3, #0]
      if(count == 1){
 80a07a4:	f040 81b7 	bne.w	80a0b16 <loop+0x3c6>
        if(txdata != 66){
 80a07a8:	2842      	cmp	r0, #66	; 0x42
 80a07aa:	f000 81b4 	beq.w	80a0b16 <loop+0x3c6>
          count = 0;
 80a07ae:	2300      	movs	r3, #0
 80a07b0:	6033      	str	r3, [r6, #0]
 80a07b2:	e1b0      	b.n	80a0b16 <loop+0x3c6>
        }
      }
      count++;
    }
    else{
      int dataval = shiftedtxdata + txdata;
 80a07b4:	681b      	ldr	r3, [r3, #0]
      switch(count){
 80a07b6:	3a02      	subs	r2, #2
        }
      }
      count++;
    }
    else{
      int dataval = shiftedtxdata + txdata;
 80a07b8:	4418      	add	r0, r3
      switch(count){
 80a07ba:	2a1e      	cmp	r2, #30
 80a07bc:	f200 81ab 	bhi.w	80a0b16 <loop+0x3c6>
 80a07c0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80a07c4:	01a9001f 	.word	0x01a9001f
 80a07c8:	01a9001f 	.word	0x01a9001f
 80a07cc:	01a90022 	.word	0x01a90022
 80a07d0:	01a90025 	.word	0x01a90025
 80a07d4:	01a90028 	.word	0x01a90028
 80a07d8:	01a9002b 	.word	0x01a9002b
 80a07dc:	01a9002e 	.word	0x01a9002e
 80a07e0:	01a90031 	.word	0x01a90031
 80a07e4:	01a90034 	.word	0x01a90034
 80a07e8:	01a90037 	.word	0x01a90037
 80a07ec:	01a9003a 	.word	0x01a9003a
 80a07f0:	01a9003d 	.word	0x01a9003d
 80a07f4:	01a90040 	.word	0x01a90040
 80a07f8:	01a90043 	.word	0x01a90043
 80a07fc:	01a901a9 	.word	0x01a901a9
 80a0800:	0046      	.short	0x0046
        case 2 :
        case 4 :
          data.framelen = dataval;
 80a0802:	4b3a      	ldr	r3, [pc, #232]	; (80a08ec <loop+0x19c>)
 80a0804:	8018      	strh	r0, [r3, #0]
        break;
 80a0806:	e186      	b.n	80a0b16 <loop+0x3c6>
        case 6 :
          data.pm10_standard = dataval;
 80a0808:	4b38      	ldr	r3, [pc, #224]	; (80a08ec <loop+0x19c>)
 80a080a:	8058      	strh	r0, [r3, #2]
        break;
 80a080c:	e183      	b.n	80a0b16 <loop+0x3c6>
        case 8 :
          data.pm25_standard = dataval;
 80a080e:	4b37      	ldr	r3, [pc, #220]	; (80a08ec <loop+0x19c>)
 80a0810:	8098      	strh	r0, [r3, #4]
        break;
 80a0812:	e180      	b.n	80a0b16 <loop+0x3c6>
        case 10 :
          data.pm100_standard = dataval;
 80a0814:	4b35      	ldr	r3, [pc, #212]	; (80a08ec <loop+0x19c>)
 80a0816:	80d8      	strh	r0, [r3, #6]
        break;
 80a0818:	e17d      	b.n	80a0b16 <loop+0x3c6>
        case 12 :
          data.pm10_env = dataval;
 80a081a:	4b34      	ldr	r3, [pc, #208]	; (80a08ec <loop+0x19c>)
 80a081c:	8118      	strh	r0, [r3, #8]
        break;
 80a081e:	e17a      	b.n	80a0b16 <loop+0x3c6>
        case 14 :
          data.pm25_env = dataval;
 80a0820:	4b32      	ldr	r3, [pc, #200]	; (80a08ec <loop+0x19c>)
 80a0822:	8158      	strh	r0, [r3, #10]
        break;
 80a0824:	e177      	b.n	80a0b16 <loop+0x3c6>
        case 16 :
          data.pm100_env = dataval;
 80a0826:	4b31      	ldr	r3, [pc, #196]	; (80a08ec <loop+0x19c>)
 80a0828:	8198      	strh	r0, [r3, #12]
        break;
 80a082a:	e174      	b.n	80a0b16 <loop+0x3c6>
        case 18 :
          data.particles_03um = dataval;
 80a082c:	4b2f      	ldr	r3, [pc, #188]	; (80a08ec <loop+0x19c>)
 80a082e:	81d8      	strh	r0, [r3, #14]
        break;
 80a0830:	e171      	b.n	80a0b16 <loop+0x3c6>
        case 20 :
          data.particles_05um = dataval;
 80a0832:	4b2e      	ldr	r3, [pc, #184]	; (80a08ec <loop+0x19c>)
 80a0834:	8218      	strh	r0, [r3, #16]
        break;
 80a0836:	e16e      	b.n	80a0b16 <loop+0x3c6>
        case 22 :
          data.particles_10um = dataval;
 80a0838:	4b2c      	ldr	r3, [pc, #176]	; (80a08ec <loop+0x19c>)
 80a083a:	8258      	strh	r0, [r3, #18]
        break;
 80a083c:	e16b      	b.n	80a0b16 <loop+0x3c6>
        case 24 :
          data.particles_25um = dataval;
 80a083e:	4b2b      	ldr	r3, [pc, #172]	; (80a08ec <loop+0x19c>)
 80a0840:	8298      	strh	r0, [r3, #20]
        break;
 80a0842:	e168      	b.n	80a0b16 <loop+0x3c6>
        case 26 :
          data.particles_50um = dataval;
 80a0844:	4b29      	ldr	r3, [pc, #164]	; (80a08ec <loop+0x19c>)
 80a0846:	82d8      	strh	r0, [r3, #22]
        break;
 80a0848:	e165      	b.n	80a0b16 <loop+0x3c6>
        case 28 :
          data.particles_100um = dataval;
 80a084a:	4b28      	ldr	r3, [pc, #160]	; (80a08ec <loop+0x19c>)
 80a084c:	8318      	strh	r0, [r3, #24]
        break;
 80a084e:	e162      	b.n	80a0b16 <loop+0x3c6>
        case 32 :
          data.checksum = dataval;
 80a0850:	4c26      	ldr	r4, [pc, #152]	; (80a08ec <loop+0x19c>)
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
 80a0852:	4d27      	ldr	r5, [pc, #156]	; (80a08f0 <loop+0x1a0>)
        break;
        case 28 :
          data.particles_100um = dataval;
        break;
        case 32 :
          data.checksum = dataval;
 80a0854:	83a0      	strh	r0, [r4, #28]
          //RTC data collection
          now = rtc.now();
 80a0856:	a817      	add	r0, sp, #92	; 0x5c
 80a0858:	f002 f9dc 	bl	80a2c14 <_ZN10RTC_DS32313nowEv>
 80a085c:	4b25      	ldr	r3, [pc, #148]	; (80a08f4 <loop+0x1a4>)
 80a085e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80a0860:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
 80a0864:	6018      	str	r0, [r3, #0]
          //Temp and humidity code
          humd = htu.readHumidity();
 80a0866:	4824      	ldr	r0, [pc, #144]	; (80a08f8 <loop+0x1a8>)
          data.particles_100um = dataval;
        break;
        case 32 :
          data.checksum = dataval;
          //RTC data collection
          now = rtc.now();
 80a0868:	809a      	strh	r2, [r3, #4]
          //Temp and humidity code
          humd = htu.readHumidity();
 80a086a:	f000 fa2f 	bl	80a0ccc <_ZN15Adafruit_Si702112readHumidityEv>
 80a086e:	6028      	str	r0, [r5, #0]
          temp = htu.readTemperature();
 80a0870:	4821      	ldr	r0, [pc, #132]	; (80a08f8 <loop+0x1a8>)
 80a0872:	f000 fa6d 	bl	80a0d50 <_ZN15Adafruit_Si702115readTemperatureEv>
          humd = round(100*humd)/100;
 80a0876:	4921      	ldr	r1, [pc, #132]	; (80a08fc <loop+0x1ac>)
          data.checksum = dataval;
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
 80a0878:	4680      	mov	r8, r0
          humd = round(100*humd)/100;
 80a087a:	6828      	ldr	r0, [r5, #0]
 80a087c:	f004 ffee 	bl	80a585c <__aeabi_fmul>
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
 80a0880:	2100      	movs	r1, #0
 80a0882:	4607      	mov	r7, r0
 80a0884:	f005 f99c 	bl	80a5bc0 <__aeabi_fcmpge>
 80a0888:	b138      	cbz	r0, 80a089a <loop+0x14a>
 80a088a:	4638      	mov	r0, r7
 80a088c:	f004 fbfa 	bl	80a5084 <__aeabi_f2d>
 80a0890:	2200      	movs	r2, #0
 80a0892:	4b1b      	ldr	r3, [pc, #108]	; (80a0900 <loop+0x1b0>)
 80a0894:	f004 fa98 	bl	80a4dc8 <__adddf3>
 80a0898:	e006      	b.n	80a08a8 <loop+0x158>
 80a089a:	4638      	mov	r0, r7
 80a089c:	f004 fbf2 	bl	80a5084 <__aeabi_f2d>
 80a08a0:	2200      	movs	r2, #0
 80a08a2:	4b17      	ldr	r3, [pc, #92]	; (80a0900 <loop+0x1b0>)
 80a08a4:	f004 fa8e 	bl	80a4dc4 <__aeabi_dsub>
 80a08a8:	f004 fe52 	bl	80a5550 <__aeabi_d2iz>
 80a08ac:	f004 ff82 	bl	80a57b4 <__aeabi_i2f>
 80a08b0:	4912      	ldr	r1, [pc, #72]	; (80a08fc <loop+0x1ac>)
 80a08b2:	f005 f887 	bl	80a59c4 <__aeabi_fdiv>
          temp = round(100*temp)/100;
 80a08b6:	4911      	ldr	r1, [pc, #68]	; (80a08fc <loop+0x1ac>)
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
 80a08b8:	6028      	str	r0, [r5, #0]
          temp = round(100*temp)/100;
 80a08ba:	4640      	mov	r0, r8
 80a08bc:	f004 ffce 	bl	80a585c <__aeabi_fmul>
 80a08c0:	2100      	movs	r1, #0
 80a08c2:	4607      	mov	r7, r0
 80a08c4:	f005 f97c 	bl	80a5bc0 <__aeabi_fcmpge>
 80a08c8:	b1e0      	cbz	r0, 80a0904 <loop+0x1b4>
 80a08ca:	4638      	mov	r0, r7
 80a08cc:	f004 fbda 	bl	80a5084 <__aeabi_f2d>
 80a08d0:	2200      	movs	r2, #0
 80a08d2:	4b0b      	ldr	r3, [pc, #44]	; (80a0900 <loop+0x1b0>)
 80a08d4:	f004 fa78 	bl	80a4dc8 <__adddf3>
 80a08d8:	e01b      	b.n	80a0912 <loop+0x1c2>
 80a08da:	bf00      	nop
 80a08dc:	200016fc 	.word	0x200016fc
 80a08e0:	20000040 	.word	0x20000040
 80a08e4:	80000001 	.word	0x80000001
 80a08e8:	20000108 	.word	0x20000108
 80a08ec:	20000e36 	.word	0x20000e36
 80a08f0:	20000e24 	.word	0x20000e24
 80a08f4:	200005e5 	.word	0x200005e5
 80a08f8:	20000e58 	.word	0x20000e58
 80a08fc:	42c80000 	.word	0x42c80000
 80a0900:	3fe00000 	.word	0x3fe00000
 80a0904:	4638      	mov	r0, r7
 80a0906:	f004 fbbd 	bl	80a5084 <__aeabi_f2d>
 80a090a:	2200      	movs	r2, #0
 80a090c:	4b88      	ldr	r3, [pc, #544]	; (80a0b30 <loop+0x3e0>)
 80a090e:	f004 fa59 	bl	80a4dc4 <__aeabi_dsub>
 80a0912:	f004 fe1d 	bl	80a5550 <__aeabi_d2iz>
 80a0916:	f004 ff4d 	bl	80a57b4 <__aeabi_i2f>
 80a091a:	4986      	ldr	r1, [pc, #536]	; (80a0b34 <loop+0x3e4>)
 80a091c:	f005 f852 	bl	80a59c4 <__aeabi_fdiv>
 80a0920:	f8df b274 	ldr.w	fp, [pc, #628]	; 80a0b98 <loop+0x448>
          //Shinyei Code
          duration1 = pulseIn(Shinyei, LOW);
 80a0924:	4b84      	ldr	r3, [pc, #528]	; (80a0b38 <loop+0x3e8>)
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
          temp = round(100*temp)/100;
 80a0926:	f8cb 0000 	str.w	r0, [fp]
          //Shinyei Code
          duration1 = pulseIn(Shinyei, LOW);
 80a092a:	2100      	movs	r1, #0
 80a092c:	8818      	ldrh	r0, [r3, #0]
 80a092e:	f004 f897 	bl	80a4a60 <pulseIn>
          lowpulseoccupancy1 = lowpulseoccupancy1+duration1;
 80a0932:	f8df a268 	ldr.w	sl, [pc, #616]	; 80a0b9c <loop+0x44c>
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
          temp = round(100*temp)/100;
          //Shinyei Code
          duration1 = pulseIn(Shinyei, LOW);
 80a0936:	4b81      	ldr	r3, [pc, #516]	; (80a0b3c <loop+0x3ec>)
          lowpulseoccupancy1 = lowpulseoccupancy1+duration1;
          if ((millis()-starttime) > sampletime_ms){
 80a0938:	4f81      	ldr	r7, [pc, #516]	; (80a0b40 <loop+0x3f0>)
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
          temp = round(100*temp)/100;
          //Shinyei Code
          duration1 = pulseIn(Shinyei, LOW);
 80a093a:	6018      	str	r0, [r3, #0]
          lowpulseoccupancy1 = lowpulseoccupancy1+duration1;
 80a093c:	f8da 3000 	ldr.w	r3, [sl]
 80a0940:	4418      	add	r0, r3
 80a0942:	f8ca 0000 	str.w	r0, [sl]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0946:	f002 fa51 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
          if ((millis()-starttime) > sampletime_ms){
 80a094a:	683b      	ldr	r3, [r7, #0]
 80a094c:	1ac0      	subs	r0, r0, r3
 80a094e:	4b7d      	ldr	r3, [pc, #500]	; (80a0b44 <loop+0x3f4>)
 80a0950:	681b      	ldr	r3, [r3, #0]
 80a0952:	4298      	cmp	r0, r3
 80a0954:	f240 80d4 	bls.w	80a0b00 <loop+0x3b0>
            ratio1 = (lowpulseoccupancy1/((millis()-starttime)*10.0));
 80a0958:	f8da 0000 	ldr.w	r0, [sl]
 80a095c:	f004 fb70 	bl	80a5040 <__aeabi_ui2d>
 80a0960:	4689      	mov	r9, r1
 80a0962:	4680      	mov	r8, r0
 80a0964:	f002 fa42 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
 80a0968:	683b      	ldr	r3, [r7, #0]
 80a096a:	1ac0      	subs	r0, r0, r3
 80a096c:	f004 fb68 	bl	80a5040 <__aeabi_ui2d>
 80a0970:	2200      	movs	r2, #0
 80a0972:	4b75      	ldr	r3, [pc, #468]	; (80a0b48 <loop+0x3f8>)
 80a0974:	f004 fbda 	bl	80a512c <__aeabi_dmul>
 80a0978:	4602      	mov	r2, r0
 80a097a:	460b      	mov	r3, r1
 80a097c:	4640      	mov	r0, r8
 80a097e:	4649      	mov	r1, r9
 80a0980:	f004 fcfe 	bl	80a5380 <__aeabi_ddiv>
 80a0984:	f004 fe0c 	bl	80a55a0 <__aeabi_d2f>
 80a0988:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80a0ba0 <loop+0x450>
            lowpulseoccupancy1 = 0;
 80a098c:	2300      	movs	r3, #0
          temp = round(100*temp)/100;
          //Shinyei Code
          duration1 = pulseIn(Shinyei, LOW);
          lowpulseoccupancy1 = lowpulseoccupancy1+duration1;
          if ((millis()-starttime) > sampletime_ms){
            ratio1 = (lowpulseoccupancy1/((millis()-starttime)*10.0));
 80a098e:	4681      	mov	r9, r0
 80a0990:	f8c8 0000 	str.w	r0, [r8]
            lowpulseoccupancy1 = 0;
            snprintf(pathdata, sizeof(pathdata), "/indata01.php?username=%s&password=%s&dbname=%s&tablename=%s&pm10_std=%d&pm25_std=%d&pm100_std=%d&pm10_env=%d&pm25_env=%d&pm100_env=%d&p3=%d&p5=%d&p10=%d&p25=%d&p50=%d&p100=%d&checksum=%d&Shinyei=%f&Temperature=%f&Humidity=%f", username, password, dbname, tablename, data.pm10_standard, data.pm25_standard, data.pm100_standard, data.pm10_env, data.pm25_env, data.pm100_env, data.particles_03um, data.particles_05um, data.particles_10um, data.particles_25um, data.particles_50um, data.particles_100um, data.checksum, ratio1, temp, humd);
 80a0994:	6828      	ldr	r0, [r5, #0]
          //Shinyei Code
          duration1 = pulseIn(Shinyei, LOW);
          lowpulseoccupancy1 = lowpulseoccupancy1+duration1;
          if ((millis()-starttime) > sampletime_ms){
            ratio1 = (lowpulseoccupancy1/((millis()-starttime)*10.0));
            lowpulseoccupancy1 = 0;
 80a0996:	f8ca 3000 	str.w	r3, [sl]
            snprintf(pathdata, sizeof(pathdata), "/indata01.php?username=%s&password=%s&dbname=%s&tablename=%s&pm10_std=%d&pm25_std=%d&pm100_std=%d&pm10_env=%d&pm25_env=%d&pm100_env=%d&p3=%d&p5=%d&p10=%d&p25=%d&p50=%d&p100=%d&checksum=%d&Shinyei=%f&Temperature=%f&Humidity=%f", username, password, dbname, tablename, data.pm10_standard, data.pm25_standard, data.pm100_standard, data.pm10_env, data.pm25_env, data.pm100_env, data.particles_03um, data.particles_05um, data.particles_10um, data.particles_25um, data.particles_50um, data.particles_100um, data.checksum, ratio1, temp, humd);
 80a099a:	f004 fb73 	bl	80a5084 <__aeabi_f2d>
 80a099e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80a09a2:	f8db 0000 	ldr.w	r0, [fp]
 80a09a6:	f004 fb6d 	bl	80a5084 <__aeabi_f2d>
 80a09aa:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80a09ae:	4648      	mov	r0, r9
 80a09b0:	f004 fb68 	bl	80a5084 <__aeabi_f2d>
 80a09b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80a09b8:	8ba3      	ldrh	r3, [r4, #28]
 80a09ba:	4a64      	ldr	r2, [pc, #400]	; (80a0b4c <loop+0x3fc>)
 80a09bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80a09be:	8b23      	ldrh	r3, [r4, #24]
 80a09c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a09c4:	930e      	str	r3, [sp, #56]	; 0x38
 80a09c6:	8ae3      	ldrh	r3, [r4, #22]
 80a09c8:	4861      	ldr	r0, [pc, #388]	; (80a0b50 <loop+0x400>)
 80a09ca:	930d      	str	r3, [sp, #52]	; 0x34
 80a09cc:	8aa3      	ldrh	r3, [r4, #20]
 80a09ce:	930c      	str	r3, [sp, #48]	; 0x30
 80a09d0:	8a63      	ldrh	r3, [r4, #18]
 80a09d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80a09d4:	8a23      	ldrh	r3, [r4, #16]
 80a09d6:	930a      	str	r3, [sp, #40]	; 0x28
 80a09d8:	89e3      	ldrh	r3, [r4, #14]
 80a09da:	9309      	str	r3, [sp, #36]	; 0x24
 80a09dc:	89a3      	ldrh	r3, [r4, #12]
 80a09de:	9308      	str	r3, [sp, #32]
 80a09e0:	8963      	ldrh	r3, [r4, #10]
 80a09e2:	9307      	str	r3, [sp, #28]
 80a09e4:	8923      	ldrh	r3, [r4, #8]
 80a09e6:	9306      	str	r3, [sp, #24]
 80a09e8:	88e3      	ldrh	r3, [r4, #6]
 80a09ea:	9305      	str	r3, [sp, #20]
 80a09ec:	88a3      	ldrh	r3, [r4, #4]
 80a09ee:	9304      	str	r3, [sp, #16]
 80a09f0:	8863      	ldrh	r3, [r4, #2]
 80a09f2:	9303      	str	r3, [sp, #12]
 80a09f4:	4b57      	ldr	r3, [pc, #348]	; (80a0b54 <loop+0x404>)
 80a09f6:	9302      	str	r3, [sp, #8]
 80a09f8:	4b57      	ldr	r3, [pc, #348]	; (80a0b58 <loop+0x408>)
 80a09fa:	9301      	str	r3, [sp, #4]
 80a09fc:	4b57      	ldr	r3, [pc, #348]	; (80a0b5c <loop+0x40c>)
 80a09fe:	9300      	str	r3, [sp, #0]
 80a0a00:	4b57      	ldr	r3, [pc, #348]	; (80a0b60 <loop+0x410>)
 80a0a02:	f002 fc11 	bl	80a3228 <snprintf>
            snprintf(jsondata, sizeof(jsondata), "{\"time\": \"%ld\", \"pm10\":\"%d\", \"pm25\":\"%d\", \"pm100\":\"%d\", \"pn03\":\"%d\", \"pn05\":\"%d\", \"pn10\":\"%d\", \"pn25\":\"%d\", \"pn50\":\"%d\", \"pn100\":\"%d\", \"Shinyei\":\"%f\", \"temp\":\"%f\", \"humidity\":\"%f\"}", now.unixtime(), data.pm10_standard, data.pm25_standard, data.pm100_standard, data.particles_03um, data.particles_05um, data.particles_10um, data.particles_25um, data.particles_50um, data.particles_100um, ratio1, temp, humd);
 80a0a06:	4857      	ldr	r0, [pc, #348]	; (80a0b64 <loop+0x414>)
 80a0a08:	f002 f86e 	bl	80a2ae8 <_ZNK8DateTime8unixtimeEv>
 80a0a0c:	4681      	mov	r9, r0
 80a0a0e:	6828      	ldr	r0, [r5, #0]
 80a0a10:	f004 fb38 	bl	80a5084 <__aeabi_f2d>
 80a0a14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80a0a18:	f8db 0000 	ldr.w	r0, [fp]
 80a0a1c:	f004 fb32 	bl	80a5084 <__aeabi_f2d>
 80a0a20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a0a24:	f8d8 0000 	ldr.w	r0, [r8]
 80a0a28:	f004 fb2c 	bl	80a5084 <__aeabi_f2d>
 80a0a2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a0a30:	8b23      	ldrh	r3, [r4, #24]
 80a0a32:	4a4d      	ldr	r2, [pc, #308]	; (80a0b68 <loop+0x418>)
 80a0a34:	9308      	str	r3, [sp, #32]
 80a0a36:	8ae3      	ldrh	r3, [r4, #22]
 80a0a38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80a0a3c:	9307      	str	r3, [sp, #28]
 80a0a3e:	8aa3      	ldrh	r3, [r4, #20]
 80a0a40:	484a      	ldr	r0, [pc, #296]	; (80a0b6c <loop+0x41c>)
 80a0a42:	9306      	str	r3, [sp, #24]
 80a0a44:	8a63      	ldrh	r3, [r4, #18]
 80a0a46:	9305      	str	r3, [sp, #20]
 80a0a48:	8a23      	ldrh	r3, [r4, #16]
 80a0a4a:	9304      	str	r3, [sp, #16]
 80a0a4c:	89e3      	ldrh	r3, [r4, #14]
 80a0a4e:	9303      	str	r3, [sp, #12]
 80a0a50:	88e3      	ldrh	r3, [r4, #6]
 80a0a52:	9302      	str	r3, [sp, #8]
 80a0a54:	88a3      	ldrh	r3, [r4, #4]
 80a0a56:	9301      	str	r3, [sp, #4]
 80a0a58:	8863      	ldrh	r3, [r4, #2]
 80a0a5a:	ac19      	add	r4, sp, #100	; 0x64
 80a0a5c:	9300      	str	r3, [sp, #0]
 80a0a5e:	464b      	mov	r3, r9
 80a0a60:	f002 fbe2 	bl	80a3228 <snprintf>
 80a0a64:	f8df e13c 	ldr.w	lr, [pc, #316]	; 80a0ba4 <loop+0x454>
 80a0a68:	f10e 0508 	add.w	r5, lr, #8
 80a0a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0a74:	682b      	ldr	r3, [r5, #0]
            logData1(sdfile1, sdfilename);
 80a0a76:	493e      	ldr	r1, [pc, #248]	; (80a0b70 <loop+0x420>)
 80a0a78:	6023      	str	r3, [r4, #0]
 80a0a7a:	f8de 3004 	ldr.w	r3, [lr, #4]
 80a0a7e:	a817      	add	r0, sp, #92	; 0x5c
 80a0a80:	9318      	str	r3, [sp, #96]	; 0x60
 80a0a82:	4b3c      	ldr	r3, [pc, #240]	; (80a0b74 <loop+0x424>)
 80a0a84:	9317      	str	r3, [sp, #92]	; 0x5c
 80a0a86:	f7ff fcff 	bl	80a0488 <_Z8logData16SdFilePc>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0a8a:	f002 fb9d 	bl	80a31c8 <spark_cloud_flag_connected>
            if (Particle.connected() == false) {
 80a0a8e:	2800      	cmp	r0, #0
 80a0a90:	d033      	beq.n	80a0afa <loop+0x3aa>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a0a92:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80a0ba8 <loop+0x458>
            }
            else{
              request.ip = IPAddress(128, 153, 15, 208);
 80a0a96:	23d0      	movs	r3, #208	; 0xd0
 80a0a98:	9300      	str	r3, [sp, #0]
 80a0a9a:	2299      	movs	r2, #153	; 0x99
 80a0a9c:	230f      	movs	r3, #15
 80a0a9e:	2180      	movs	r1, #128	; 0x80
 80a0aa0:	a817      	add	r0, sp, #92	; 0x5c
 80a0aa2:	f108 0414 	add.w	r4, r8, #20
 80a0aa6:	ad18      	add	r5, sp, #96	; 0x60
 80a0aa8:	f003 fce2 	bl	80a4470 <_ZN9IPAddressC1Ehhhh>
 80a0aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a0aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a0ab0:	682b      	ldr	r3, [r5, #0]
              request.port = portnum;
              request.path = pathdata;
 80a0ab2:	4927      	ldr	r1, [pc, #156]	; (80a0b50 <loop+0x400>)
 80a0ab4:	7023      	strb	r3, [r4, #0]
            logData1(sdfile1, sdfilename);
            if (Particle.connected() == false) {
            }
            else{
              request.ip = IPAddress(128, 153, 15, 208);
              request.port = portnum;
 80a0ab6:	4b30      	ldr	r3, [pc, #192]	; (80a0b78 <loop+0x428>)
              request.path = pathdata;
 80a0ab8:	f108 0028 	add.w	r0, r8, #40	; 0x28
            logData1(sdfile1, sdfilename);
            if (Particle.connected() == false) {
            }
            else{
              request.ip = IPAddress(128, 153, 15, 208);
              request.port = portnum;
 80a0abc:	681b      	ldr	r3, [r3, #0]
 80a0abe:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
              request.path = pathdata;
 80a0ac2:	f002 ff71 	bl	80a39a8 <_ZN6StringaSEPKc>
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
 80a0ac6:	4b2d      	ldr	r3, [pc, #180]	; (80a0b7c <loop+0x42c>)
 80a0ac8:	4a2d      	ldr	r2, [pc, #180]	; (80a0b80 <loop+0x430>)
 80a0aca:	9300      	str	r3, [sp, #0]
 80a0acc:	4641      	mov	r1, r8
 80a0ace:	4b2d      	ldr	r3, [pc, #180]	; (80a0b84 <loop+0x434>)
 80a0ad0:	482d      	ldr	r0, [pc, #180]	; (80a0b88 <loop+0x438>)
 80a0ad2:	f000 fac1 	bl	80a1058 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
 80a0ad6:	4b2d      	ldr	r3, [pc, #180]	; (80a0b8c <loop+0x43c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0ad8:	a817      	add	r0, sp, #92	; 0x5c
 80a0ada:	781b      	ldrb	r3, [r3, #0]
 80a0adc:	4a23      	ldr	r2, [pc, #140]	; (80a0b6c <loop+0x41c>)
 80a0ade:	f88d 3000 	strb.w	r3, [sp]
 80a0ae2:	492b      	ldr	r1, [pc, #172]	; (80a0b90 <loop+0x440>)
 80a0ae4:	233c      	movs	r3, #60	; 0x3c
 80a0ae6:	f003 fae9 	bl	80a40bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0aea:	9818      	ldr	r0, [sp, #96]	; 0x60
 80a0aec:	b128      	cbz	r0, 80a0afa <loop+0x3aa>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0aee:	6843      	ldr	r3, [r0, #4]
 80a0af0:	3b01      	subs	r3, #1
 80a0af2:	6043      	str	r3, [r0, #4]
 80a0af4:	b90b      	cbnz	r3, 80a0afa <loop+0x3aa>
 80a0af6:	f7ff fb36 	bl	80a0166 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.1.constprop.18>
 80a0afa:	f002 f977 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
              http.get(request, response, headers);
              Particle.publish("argon3data", jsondata, PRIVATE);
            }
            starttime = millis();
 80a0afe:	6038      	str	r0, [r7, #0]
          }
          Serial1.end();
 80a0b00:	f003 fdf2 	bl	80a46e8 <_Z22__fetch_global_Serial1v>
 80a0b04:	f003 fdea 	bl	80a46dc <_ZN11USARTSerial3endEv>
          Serial1.begin(9600, SERIAL_8N1);
 80a0b08:	f003 fdee 	bl	80a46e8 <_Z22__fetch_global_Serial1v>
 80a0b0c:	2200      	movs	r2, #0
 80a0b0e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0b12:	f003 fddf 	bl	80a46d4 <_ZN11USARTSerial5beginEmm>
        break;
        default :
        break;
      }
      count++;
 80a0b16:	6833      	ldr	r3, [r6, #0]
 80a0b18:	3301      	adds	r3, #1
 80a0b1a:	6033      	str	r3, [r6, #0]
    }
    if(count == 33){
 80a0b1c:	6833      	ldr	r3, [r6, #0]
 80a0b1e:	2b21      	cmp	r3, #33	; 0x21
      count = 1;
 80a0b20:	bf02      	ittt	eq
 80a0b22:	4b1c      	ldreq	r3, [pc, #112]	; (80a0b94 <loop+0x444>)
 80a0b24:	2201      	moveq	r2, #1
 80a0b26:	601a      	streq	r2, [r3, #0]
    }
  }
}
 80a0b28:	b023      	add	sp, #140	; 0x8c
 80a0b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0b2e:	bf00      	nop
 80a0b30:	3fe00000 	.word	0x3fe00000
 80a0b34:	42c80000 	.word	0x42c80000
 80a0b38:	20000028 	.word	0x20000028
 80a0b3c:	20000e30 	.word	0x20000e30
 80a0b40:	2000010c 	.word	0x2000010c
 80a0b44:	20000044 	.word	0x20000044
 80a0b48:	40240000 	.word	0x40240000
 80a0b4c:	080a5fe3 	.word	0x080a5fe3
 80a0b50:	20000e80 	.word	0x20000e80
 80a0b54:	20000000 	.word	0x20000000
 80a0b58:	20000070 	.word	0x20000070
 80a0b5c:	20000048 	.word	0x20000048
 80a0b60:	20000014 	.word	0x20000014
 80a0b64:	200005e5 	.word	0x200005e5
 80a0b68:	080a60c5 	.word	0x080a60c5
 80a0b6c:	20000a3c 	.word	0x20000a3c
 80a0b70:	2000005c 	.word	0x2000005c
 80a0b74:	080a5ed4 	.word	0x080a5ed4
 80a0b78:	20000094 	.word	0x20000094
 80a0b7c:	080a617a 	.word	0x080a617a
 80a0b80:	20000e68 	.word	0x20000e68
 80a0b84:	20000084 	.word	0x20000084
 80a0b88:	200005ec 	.word	0x200005ec
 80a0b8c:	20000a34 	.word	0x20000a34
 80a0b90:	080a617e 	.word	0x080a617e
 80a0b94:	20000040 	.word	0x20000040
 80a0b98:	20001268 	.word	0x20001268
 80a0b9c:	20000e2c 	.word	0x20000e2c
 80a0ba0:	20000110 	.word	0x20000110
 80a0ba4:	20000a08 	.word	0x20000a08
 80a0ba8:	20000114 	.word	0x20000114

080a0bac <_GLOBAL__sub_I_wifissid>:
  file.print(humdl);
  file.print('.');
  file.print(humdr);
  file.println();
  file.close();
 80a0bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0bae:	4b31      	ldr	r3, [pc, #196]	; (80a0c74 <_GLOBAL__sub_I_wifissid+0xc8>)
 80a0bb0:	2701      	movs	r7, #1
// char sensorType[] = "POTS006";
// char ch1[20] = "1001";
// char ch2[20] = "1002";
char token[200] = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0aW1lc3RhbXAiOjE1MzI0NTY0ODcsImRldmljZV9pZCI6IkRFVklDRTAwMSIsImFjY291bnRfaWQiOiJQT1RTREFNMDEifQ.2-uok5PvRILXwSINDMdo0vT-KM8hHcVJr-BDuOEx-GQ";
//Http variables
HttpClient http;
 80a0bb2:	4c31      	ldr	r4, [pc, #196]	; (80a0c78 <_GLOBAL__sub_I_wifissid+0xcc>)
 80a0bb4:	701f      	strb	r7, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0bb6:	f002 f8a1 	bl	80a2cfc <HAL_Pin_Map>
#include "SdFat.h"
#include "HTU21D.h"
#include "HttpClient.h"
#include "Adafruit_Si7021.h"
//to be able to use without wifi basically the code will still run when wifi is down
SYSTEM_THREAD(ENABLED);
 80a0bba:	2100      	movs	r1, #0
 80a0bbc:	4638      	mov	r0, r7
 80a0bbe:	f002 fa77 	bl	80a30b0 <system_thread_set_state>
// char sensorType[] = "POTS006";
// char ch1[20] = "1001";
// char ch2[20] = "1002";
char token[200] = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0aW1lc3RhbXAiOjE1MzI0NTY0ODcsImRldmljZV9pZCI6IkRFVklDRTAwMSIsImFjY291bnRfaWQiOiJQT1RTREFNMDEifQ.2-uok5PvRILXwSINDMdo0vT-KM8hHcVJr-BDuOEx-GQ";
//Http variables
HttpClient http;
 80a0bc2:	4d2e      	ldr	r5, [pc, #184]	; (80a0c7c <_GLOBAL__sub_I_wifissid+0xd0>)
 80a0bc4:	4620      	mov	r0, r4
 80a0bc6:	f000 fa1a 	bl	80a0ffe <_ZN10HttpClientC1Ev>
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
 80a0bca:	4e2d      	ldr	r6, [pc, #180]	; (80a0c80 <_GLOBAL__sub_I_wifissid+0xd4>)
 80a0bcc:	4620      	mov	r0, r4
 80a0bce:	4c2d      	ldr	r4, [pc, #180]	; (80a0c84 <_GLOBAL__sub_I_wifissid+0xd8>)
 80a0bd0:	462a      	mov	r2, r5
 80a0bd2:	492d      	ldr	r1, [pc, #180]	; (80a0c88 <_GLOBAL__sub_I_wifissid+0xdc>)
 80a0bd4:	f003 ffa0 	bl	80a4b18 <__aeabi_atexit>
 80a0bd8:	4631      	mov	r1, r6
 80a0bda:	4620      	mov	r0, r4
 80a0bdc:	f002 fed1 	bl	80a3982 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0be0:	f104 0010 	add.w	r0, r4, #16
 80a0be4:	f003 fc0e 	bl	80a4404 <_ZN9IPAddressC1Ev>
 80a0be8:	4631      	mov	r1, r6
 80a0bea:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80a0bee:	f002 fec8 	bl	80a3982 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0bf2:	4631      	mov	r1, r6
 80a0bf4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80a0bf8:	f002 fec3 	bl	80a3982 <_ZN6StringC1EPK19__FlashStringHelper>
http_header_t headers[] = {
    { "Accept" , "*/*"},
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};
http_request_t request;
 80a0bfc:	4620      	mov	r0, r4
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
 80a0bfe:	4c23      	ldr	r4, [pc, #140]	; (80a0c8c <_GLOBAL__sub_I_wifissid+0xe0>)
 80a0c00:	462a      	mov	r2, r5
 80a0c02:	4923      	ldr	r1, [pc, #140]	; (80a0c90 <_GLOBAL__sub_I_wifissid+0xe4>)
 80a0c04:	f003 ff88 	bl	80a4b18 <__aeabi_atexit>
 80a0c08:	4631      	mov	r1, r6
 80a0c0a:	1d20      	adds	r0, r4, #4
 80a0c0c:	f002 feb9 	bl	80a3982 <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
 80a0c10:	462a      	mov	r2, r5
 80a0c12:	4920      	ldr	r1, [pc, #128]	; (80a0c94 <_GLOBAL__sub_I_wifissid+0xe8>)
 80a0c14:	4620      	mov	r0, r4
 80a0c16:	f003 ff7f 	bl	80a4b18 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 80a0c1a:	4b1f      	ldr	r3, [pc, #124]	; (80a0c98 <_GLOBAL__sub_I_wifissid+0xec>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 80a0c1c:	2264      	movs	r2, #100	; 0x64
 80a0c1e:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
 80a0c22:	4a1e      	ldr	r2, [pc, #120]	; (80a0c9c <_GLOBAL__sub_I_wifissid+0xf0>)
 80a0c24:	2400      	movs	r4, #0
 80a0c26:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 80a0c2a:	4a1d      	ldr	r2, [pc, #116]	; (80a0ca0 <_GLOBAL__sub_I_wifissid+0xf4>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80a0c2c:	481d      	ldr	r0, [pc, #116]	; (80a0ca4 <_GLOBAL__sub_I_wifissid+0xf8>)
 80a0c2e:	71dc      	strb	r4, [r3, #7]
 80a0c30:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
 80a0c34:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
 80a0c38:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
 80a0c3c:	f883 7474 	strb.w	r7, [r3, #1140]	; 0x474
 80a0c40:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
 80a0c44:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
 80a0c48:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
 80a0c4c:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
 public:
  SdFile() {}
 80a0c50:	4b15      	ldr	r3, [pc, #84]	; (80a0ca8 <_GLOBAL__sub_I_wifissid+0xfc>)
int ratioint;
//SD card
const uint8_t chipSelect = A5;
const uint32_t SAMPLE_INTERVAL_MS = 1000;
SdFat sd;
SdFile sdfile1;
 80a0c52:	462a      	mov	r2, r5
 80a0c54:	7204      	strb	r4, [r0, #8]
 80a0c56:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0c58:	6044      	str	r4, [r0, #4]
 80a0c5a:	4914      	ldr	r1, [pc, #80]	; (80a0cac <_GLOBAL__sub_I_wifissid+0x100>)
 80a0c5c:	6003      	str	r3, [r0, #0]
 80a0c5e:	f003 ff5b 	bl	80a4b18 <__aeabi_atexit>
char sdfilename[20] = "argon43.csv";//always use .csv
//RTC
DateTime now;
 80a0c62:	4621      	mov	r1, r4
 80a0c64:	4812      	ldr	r0, [pc, #72]	; (80a0cb0 <_GLOBAL__sub_I_wifissid+0x104>)
 80a0c66:	f001 fe8f 	bl	80a2988 <_ZN8DateTimeC1Em>
  file.print(humdl);
  file.print('.');
  file.print(humdr);
  file.println();
  file.close();
 80a0c6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
//RTC
DateTime now;
RTC_DS3231 rtc;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
//temp and humidity
Adafruit_Si7021 htu;
 80a0c6e:	4811      	ldr	r0, [pc, #68]	; (80a0cb4 <_GLOBAL__sub_I_wifissid+0x108>)
 80a0c70:	f000 b826 	b.w	80a0cc0 <_ZN15Adafruit_Si7021C1Ev>
 80a0c74:	20000a34 	.word	0x20000a34
 80a0c78:	200005ec 	.word	0x200005ec
 80a0c7c:	20000104 	.word	0x20000104
 80a0c80:	080a61ce 	.word	0x080a61ce
 80a0c84:	20000114 	.word	0x20000114
 80a0c88:	080a01a9 	.word	0x080a01a9
 80a0c8c:	20000e68 	.word	0x20000e68
 80a0c90:	080a014b 	.word	0x080a014b
 80a0c94:	080a013d 	.word	0x080a013d
 80a0c98:	20000160 	.word	0x20000160
 80a0c9c:	080a5ec8 	.word	0x080a5ec8
 80a0ca0:	2000170c 	.word	0x2000170c
 80a0ca4:	20000a08 	.word	0x20000a08
 80a0ca8:	080a5ed4 	.word	0x080a5ed4
 80a0cac:	080a00b7 	.word	0x080a00b7
 80a0cb0:	200005e5 	.word	0x200005e5
 80a0cb4:	20000e58 	.word	0x20000e58

080a0cb8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0cb8:	6803      	ldr	r3, [r0, #0]
 80a0cba:	b2c9      	uxtb	r1, r1
 80a0cbc:	689b      	ldr	r3, [r3, #8]
 80a0cbe:	4718      	bx	r3

080a0cc0 <_ZN15Adafruit_Si7021C1Ev>:


/**************************************************************************/

Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
 80a0cc0:	2240      	movs	r2, #64	; 0x40
 80a0cc2:	7202      	strb	r2, [r0, #8]
  sernum_a = sernum_b = 0;
 80a0cc4:	2200      	movs	r2, #0
 80a0cc6:	6042      	str	r2, [r0, #4]
 80a0cc8:	6002      	str	r2, [r0, #0]
}
 80a0cca:	4770      	bx	lr

080a0ccc <_ZN15Adafruit_Si702112readHumidityEv>:
  //Serial.println(sernum_b, HEX);

  return true;
}

float Adafruit_Si7021::readHumidity(void) {
 80a0ccc:	b510      	push	{r4, lr}
 80a0cce:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
 80a0cd0:	f003 ff02 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0cd4:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a0cd8:	f003 fd99 	bl	80a480e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASRH_NOHOLD_CMD);
 80a0cdc:	f003 fefc 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0ce0:	6803      	ldr	r3, [r0, #0]
 80a0ce2:	21f5      	movs	r1, #245	; 0xf5
 80a0ce4:	689b      	ldr	r3, [r3, #8]
 80a0ce6:	4798      	blx	r3
  Wire.endTransmission(false);
 80a0ce8:	f003 fef6 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0cec:	2100      	movs	r1, #0
 80a0cee:	f003 fd91 	bl	80a4814 <_ZN7TwoWire15endTransmissionEh>
  delay(25);
 80a0cf2:	2019      	movs	r0, #25
 80a0cf4:	f002 ffd4 	bl	80a3ca0 <delay>

  Wire.requestFrom(_i2caddr, 3);
 80a0cf8:	f003 feee 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0cfc:	2203      	movs	r2, #3
 80a0cfe:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a0d02:	f003 fd7b 	bl	80a47fc <_ZN7TwoWire11requestFromEii>
  uint16_t hum = Wire.read();
 80a0d06:	f003 fee7 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0d0a:	6803      	ldr	r3, [r0, #0]
 80a0d0c:	695b      	ldr	r3, [r3, #20]
 80a0d0e:	4798      	blx	r3
 80a0d10:	b284      	uxth	r4, r0
  hum <<= 8;
  hum |= Wire.read();
 80a0d12:	f003 fee1 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0d16:	6803      	ldr	r3, [r0, #0]
 80a0d18:	695b      	ldr	r3, [r3, #20]
 80a0d1a:	4798      	blx	r3
 80a0d1c:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80a0d20:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
 80a0d22:	f003 fed9 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0d26:	6803      	ldr	r3, [r0, #0]
 80a0d28:	695b      	ldr	r3, [r3, #20]
 80a0d2a:	4798      	blx	r3

  float humidity = hum;
 80a0d2c:	b2a0      	uxth	r0, r4
 80a0d2e:	f004 fd3d 	bl	80a57ac <__aeabi_ui2f>
  humidity *= 125;
 80a0d32:	4905      	ldr	r1, [pc, #20]	; (80a0d48 <_ZN15Adafruit_Si702112readHumidityEv+0x7c>)
 80a0d34:	f004 fd92 	bl	80a585c <__aeabi_fmul>
  humidity /= 65536;
 80a0d38:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80a0d3c:	f004 fd8e 	bl	80a585c <__aeabi_fmul>
  humidity -= 6;

  return humidity;
 80a0d40:	4902      	ldr	r1, [pc, #8]	; (80a0d4c <_ZN15Adafruit_Si702112readHumidityEv+0x80>)
 80a0d42:	f004 fc81 	bl	80a5648 <__aeabi_fsub>
}
 80a0d46:	bd10      	pop	{r4, pc}
 80a0d48:	42fa0000 	.word	0x42fa0000
 80a0d4c:	40c00000 	.word	0x40c00000

080a0d50 <_ZN15Adafruit_Si702115readTemperatureEv>:

float Adafruit_Si7021::readTemperature(void) {
 80a0d50:	b510      	push	{r4, lr}
 80a0d52:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
 80a0d54:	f003 fec0 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0d58:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a0d5c:	f003 fd57 	bl	80a480e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASTEMP_NOHOLD_CMD);
 80a0d60:	f003 feba 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0d64:	6803      	ldr	r3, [r0, #0]
 80a0d66:	21f3      	movs	r1, #243	; 0xf3
 80a0d68:	689b      	ldr	r3, [r3, #8]
 80a0d6a:	4798      	blx	r3
  Wire.endTransmission(false);
 80a0d6c:	f003 feb4 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0d70:	2100      	movs	r1, #0
 80a0d72:	f003 fd4f 	bl	80a4814 <_ZN7TwoWire15endTransmissionEh>
  delay(25);
 80a0d76:	2019      	movs	r0, #25
 80a0d78:	f002 ff92 	bl	80a3ca0 <delay>

  Wire.requestFrom(_i2caddr, 3);
 80a0d7c:	f003 feac 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0d80:	2203      	movs	r2, #3
 80a0d82:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a0d86:	f003 fd39 	bl	80a47fc <_ZN7TwoWire11requestFromEii>
  uint16_t temp = Wire.read();
 80a0d8a:	f003 fea5 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0d8e:	6803      	ldr	r3, [r0, #0]
 80a0d90:	695b      	ldr	r3, [r3, #20]
 80a0d92:	4798      	blx	r3
 80a0d94:	b284      	uxth	r4, r0
  temp <<= 8;
  temp |= Wire.read();
 80a0d96:	f003 fe9f 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0d9a:	6803      	ldr	r3, [r0, #0]
 80a0d9c:	695b      	ldr	r3, [r3, #20]
 80a0d9e:	4798      	blx	r3
 80a0da0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80a0da4:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
 80a0da6:	f003 fe97 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0daa:	6803      	ldr	r3, [r0, #0]
 80a0dac:	695b      	ldr	r3, [r3, #20]
 80a0dae:	4798      	blx	r3

  float temperature = temp;
  temperature *= 175.72;
 80a0db0:	b2a0      	uxth	r0, r4
 80a0db2:	f004 fcfb 	bl	80a57ac <__aeabi_ui2f>
 80a0db6:	f004 f965 	bl	80a5084 <__aeabi_f2d>
 80a0dba:	a30b      	add	r3, pc, #44	; (adr r3, 80a0de8 <_ZN15Adafruit_Si702115readTemperatureEv+0x98>)
 80a0dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0dc0:	f004 f9b4 	bl	80a512c <__aeabi_dmul>
 80a0dc4:	f004 fbec 	bl	80a55a0 <__aeabi_d2f>
  temperature /= 65536;
  temperature -= 46.85;
 80a0dc8:	f04f 515e 	mov.w	r1, #931135488	; 0x37800000
 80a0dcc:	f004 fd46 	bl	80a585c <__aeabi_fmul>
 80a0dd0:	f004 f958 	bl	80a5084 <__aeabi_f2d>
 80a0dd4:	a306      	add	r3, pc, #24	; (adr r3, 80a0df0 <_ZN15Adafruit_Si702115readTemperatureEv+0xa0>)
 80a0dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0dda:	f003 fff3 	bl	80a4dc4 <__aeabi_dsub>

  return temperature;
 80a0dde:	f004 fbdf 	bl	80a55a0 <__aeabi_d2f>
}
 80a0de2:	bd10      	pop	{r4, pc}
 80a0de4:	f3af 8000 	nop.w
 80a0de8:	3d70a3d7 	.word	0x3d70a3d7
 80a0dec:	4065f70a 	.word	0x4065f70a
 80a0df0:	cccccccd 	.word	0xcccccccd
 80a0df4:	40476ccc 	.word	0x40476ccc

080a0df8 <_ZN15Adafruit_Si70215resetEv>:

void Adafruit_Si7021::reset(void) {
 80a0df8:	b510      	push	{r4, lr}
 80a0dfa:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
 80a0dfc:	f003 fe6c 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e00:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a0e04:	f003 fd03 	bl	80a480e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_RESET_CMD);
 80a0e08:	f003 fe66 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e0c:	6803      	ldr	r3, [r0, #0]
 80a0e0e:	21fe      	movs	r1, #254	; 0xfe
 80a0e10:	689b      	ldr	r3, [r3, #8]
 80a0e12:	4798      	blx	r3
  Wire.endTransmission();
 80a0e14:	f003 fe60 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e18:	f003 fd00 	bl	80a481c <_ZN7TwoWire15endTransmissionEv>
  delay(50);
}
 80a0e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Adafruit_Si7021::reset(void) {
  Wire.beginTransmission(_i2caddr);
  Wire.write((uint8_t)SI7021_RESET_CMD);
  Wire.endTransmission();
  delay(50);
 80a0e20:	2032      	movs	r0, #50	; 0x32
 80a0e22:	f002 bf3d 	b.w	80a3ca0 <delay>

080a0e26 <_ZN15Adafruit_Si702116readSerialNumberEv>:
}

void Adafruit_Si7021::readSerialNumber(void) {
 80a0e26:	b510      	push	{r4, lr}
 80a0e28:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
 80a0e2a:	f003 fe55 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e2e:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a0e32:	f003 fcec 	bl	80a480e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID1_CMD>>8);
 80a0e36:	f003 fe4f 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e3a:	2100      	movs	r1, #0
 80a0e3c:	f7ff ff3c 	bl	80a0cb8 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID1_CMD&0xFF);
 80a0e40:	f003 fe4a 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e44:	210f      	movs	r1, #15
 80a0e46:	f7ff ff37 	bl	80a0cb8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 80a0e4a:	f003 fe45 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e4e:	f003 fce5 	bl	80a481c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
 80a0e52:	f003 fe41 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e56:	2208      	movs	r2, #8
 80a0e58:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a0e5c:	f003 fcce 	bl	80a47fc <_ZN7TwoWire11requestFromEii>
  sernum_a = Wire.read();
 80a0e60:	f003 fe3a 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e64:	6803      	ldr	r3, [r0, #0]
 80a0e66:	695b      	ldr	r3, [r3, #20]
 80a0e68:	4798      	blx	r3
 80a0e6a:	6020      	str	r0, [r4, #0]
  Wire.read();
 80a0e6c:	f003 fe34 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e70:	6803      	ldr	r3, [r0, #0]
 80a0e72:	695b      	ldr	r3, [r3, #20]
 80a0e74:	4798      	blx	r3
  sernum_a <<= 8;
 80a0e76:	6823      	ldr	r3, [r4, #0]
 80a0e78:	021b      	lsls	r3, r3, #8
 80a0e7a:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
 80a0e7c:	f003 fe2c 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e80:	6803      	ldr	r3, [r0, #0]
 80a0e82:	695b      	ldr	r3, [r3, #20]
 80a0e84:	4798      	blx	r3
 80a0e86:	6823      	ldr	r3, [r4, #0]
 80a0e88:	4318      	orrs	r0, r3
 80a0e8a:	6020      	str	r0, [r4, #0]
  Wire.read();
 80a0e8c:	f003 fe24 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0e90:	6803      	ldr	r3, [r0, #0]
 80a0e92:	695b      	ldr	r3, [r3, #20]
 80a0e94:	4798      	blx	r3
  sernum_a <<= 8;
 80a0e96:	6823      	ldr	r3, [r4, #0]
 80a0e98:	021b      	lsls	r3, r3, #8
 80a0e9a:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
 80a0e9c:	f003 fe1c 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0ea0:	6803      	ldr	r3, [r0, #0]
 80a0ea2:	695b      	ldr	r3, [r3, #20]
 80a0ea4:	4798      	blx	r3
 80a0ea6:	6823      	ldr	r3, [r4, #0]
 80a0ea8:	4318      	orrs	r0, r3
 80a0eaa:	6020      	str	r0, [r4, #0]
  Wire.read();
 80a0eac:	f003 fe14 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0eb0:	6803      	ldr	r3, [r0, #0]
 80a0eb2:	695b      	ldr	r3, [r3, #20]
 80a0eb4:	4798      	blx	r3
  sernum_a <<= 8;
 80a0eb6:	6823      	ldr	r3, [r4, #0]
 80a0eb8:	021b      	lsls	r3, r3, #8
 80a0eba:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
 80a0ebc:	f003 fe0c 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0ec0:	6803      	ldr	r3, [r0, #0]
 80a0ec2:	695b      	ldr	r3, [r3, #20]
 80a0ec4:	4798      	blx	r3
 80a0ec6:	6823      	ldr	r3, [r4, #0]
 80a0ec8:	4318      	orrs	r0, r3
 80a0eca:	6020      	str	r0, [r4, #0]
  Wire.read();
 80a0ecc:	f003 fe04 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0ed0:	6803      	ldr	r3, [r0, #0]
 80a0ed2:	695b      	ldr	r3, [r3, #20]
 80a0ed4:	4798      	blx	r3

  Wire.beginTransmission(_i2caddr);
 80a0ed6:	f003 fdff 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0eda:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a0ede:	f003 fc96 	bl	80a480e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID2_CMD>>8);
 80a0ee2:	f003 fdf9 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0ee6:	2100      	movs	r1, #0
 80a0ee8:	f7ff fee6 	bl	80a0cb8 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID2_CMD&0xFF);
 80a0eec:	f003 fdf4 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0ef0:	21c9      	movs	r1, #201	; 0xc9
 80a0ef2:	f7ff fee1 	bl	80a0cb8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 80a0ef6:	f003 fdef 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0efa:	f003 fc8f 	bl	80a481c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
 80a0efe:	f003 fdeb 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0f02:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a0f06:	2208      	movs	r2, #8
 80a0f08:	f003 fc78 	bl	80a47fc <_ZN7TwoWire11requestFromEii>
  sernum_b = Wire.read();
 80a0f0c:	f003 fde4 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0f10:	6803      	ldr	r3, [r0, #0]
 80a0f12:	695b      	ldr	r3, [r3, #20]
 80a0f14:	4798      	blx	r3
 80a0f16:	6060      	str	r0, [r4, #4]
  Wire.read();
 80a0f18:	f003 fdde 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0f1c:	6803      	ldr	r3, [r0, #0]
 80a0f1e:	695b      	ldr	r3, [r3, #20]
 80a0f20:	4798      	blx	r3
  sernum_b <<= 8;
 80a0f22:	6863      	ldr	r3, [r4, #4]
 80a0f24:	021b      	lsls	r3, r3, #8
 80a0f26:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
 80a0f28:	f003 fdd6 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0f2c:	6803      	ldr	r3, [r0, #0]
 80a0f2e:	695b      	ldr	r3, [r3, #20]
 80a0f30:	4798      	blx	r3
 80a0f32:	6863      	ldr	r3, [r4, #4]
 80a0f34:	4318      	orrs	r0, r3
 80a0f36:	6060      	str	r0, [r4, #4]
  Wire.read();
 80a0f38:	f003 fdce 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0f3c:	6803      	ldr	r3, [r0, #0]
 80a0f3e:	695b      	ldr	r3, [r3, #20]
 80a0f40:	4798      	blx	r3
  sernum_b <<= 8;
 80a0f42:	6863      	ldr	r3, [r4, #4]
 80a0f44:	021b      	lsls	r3, r3, #8
 80a0f46:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
 80a0f48:	f003 fdc6 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0f4c:	6803      	ldr	r3, [r0, #0]
 80a0f4e:	695b      	ldr	r3, [r3, #20]
 80a0f50:	4798      	blx	r3
 80a0f52:	6863      	ldr	r3, [r4, #4]
 80a0f54:	4318      	orrs	r0, r3
 80a0f56:	6060      	str	r0, [r4, #4]
  Wire.read();
 80a0f58:	f003 fdbe 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0f5c:	6803      	ldr	r3, [r0, #0]
 80a0f5e:	695b      	ldr	r3, [r3, #20]
 80a0f60:	4798      	blx	r3
  sernum_b <<= 8;
 80a0f62:	6863      	ldr	r3, [r4, #4]
 80a0f64:	021b      	lsls	r3, r3, #8
 80a0f66:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
 80a0f68:	f003 fdb6 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0f6c:	6803      	ldr	r3, [r0, #0]
 80a0f6e:	695b      	ldr	r3, [r3, #20]
 80a0f70:	4798      	blx	r3
 80a0f72:	6863      	ldr	r3, [r4, #4]
 80a0f74:	4318      	orrs	r0, r3
 80a0f76:	6060      	str	r0, [r4, #4]
  Wire.read();
 80a0f78:	f003 fdae 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
}
 80a0f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
 80a0f80:	6803      	ldr	r3, [r0, #0]
 80a0f82:	695b      	ldr	r3, [r3, #20]
 80a0f84:	4718      	bx	r3

080a0f86 <_ZN15Adafruit_Si702113readRegister8Eh>:
  Wire.endTransmission();

  //Serial.print("Wrote $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
}

uint8_t Adafruit_Si7021::readRegister8(uint8_t reg) {
 80a0f86:	b538      	push	{r3, r4, r5, lr}
 80a0f88:	4604      	mov	r4, r0
 80a0f8a:	460d      	mov	r5, r1
  uint8_t value;
  Wire.beginTransmission(_i2caddr);
 80a0f8c:	f003 fda4 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0f90:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a0f94:	f003 fc3b 	bl	80a480e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)reg);
 80a0f98:	f003 fd9e 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0f9c:	6803      	ldr	r3, [r0, #0]
 80a0f9e:	4629      	mov	r1, r5
 80a0fa0:	689b      	ldr	r3, [r3, #8]
 80a0fa2:	4798      	blx	r3
  Wire.endTransmission(false);
 80a0fa4:	f003 fd98 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0fa8:	2100      	movs	r1, #0
 80a0faa:	f003 fc33 	bl	80a4814 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(_i2caddr, 1);
 80a0fae:	f003 fd93 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0fb2:	2201      	movs	r2, #1
 80a0fb4:	f994 1008 	ldrsb.w	r1, [r4, #8]
 80a0fb8:	f003 fc20 	bl	80a47fc <_ZN7TwoWire11requestFromEii>
  value = Wire.read();
 80a0fbc:	f003 fd8c 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0fc0:	6803      	ldr	r3, [r0, #0]
 80a0fc2:	695b      	ldr	r3, [r3, #20]
 80a0fc4:	4798      	blx	r3

  //Serial.print("Read $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
  return value;
}
 80a0fc6:	b2c0      	uxtb	r0, r0
 80a0fc8:	bd38      	pop	{r3, r4, r5, pc}

080a0fca <_ZN15Adafruit_Si70215beginEv>:
Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
  sernum_a = sernum_b = 0;
}

bool Adafruit_Si7021::begin(void) {
 80a0fca:	b510      	push	{r4, lr}
 80a0fcc:	4604      	mov	r4, r0
  Wire.begin();
 80a0fce:	f003 fd83 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a0fd2:	f003 fc01 	bl	80a47d8 <_ZN7TwoWire5beginEv>

  reset();
 80a0fd6:	4620      	mov	r0, r4
 80a0fd8:	f7ff ff0e 	bl	80a0df8 <_ZN15Adafruit_Si70215resetEv>
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
 80a0fdc:	21e7      	movs	r1, #231	; 0xe7
 80a0fde:	4620      	mov	r0, r4
 80a0fe0:	f7ff ffd1 	bl	80a0f86 <_ZN15Adafruit_Si702113readRegister8Eh>
 80a0fe4:	283a      	cmp	r0, #58	; 0x3a
 80a0fe6:	d104      	bne.n	80a0ff2 <_ZN15Adafruit_Si70215beginEv+0x28>

  readSerialNumber();
 80a0fe8:	4620      	mov	r0, r4
 80a0fea:	f7ff ff1c 	bl	80a0e26 <_ZN15Adafruit_Si702116readSerialNumberEv>

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
 80a0fee:	2001      	movs	r0, #1
 80a0ff0:	bd10      	pop	{r4, pc}

bool Adafruit_Si7021::begin(void) {
  Wire.begin();

  reset();
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
 80a0ff2:	2000      	movs	r0, #0

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
}
 80a0ff4:	bd10      	pop	{r4, pc}

080a0ff6 <_GLOBAL__sub_I__ZN15Adafruit_Si7021C2Ev>:
 80a0ff6:	f001 be81 	b.w	80a2cfc <HAL_Pin_Map>

080a0ffa <_GLOBAL__sub_I__ZN6HTU21DC2Ev>:
 80a0ffa:	f001 be7f 	b.w	80a2cfc <HAL_Pin_Map>

080a0ffe <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
 80a0ffe:	b510      	push	{r4, lr}
 80a1000:	4604      	mov	r4, r0
 80a1002:	f002 fc1f 	bl	80a3844 <_ZN9TCPClientC1Ev>
{

}
 80a1006:	4620      	mov	r0, r4
 80a1008:	bd10      	pop	{r4, pc}
	...

080a100c <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
 80a100c:	b538      	push	{r3, r4, r5, lr}
 80a100e:	4604      	mov	r4, r0
 80a1010:	4615      	mov	r5, r2
    client.print(aHeaderName);
 80a1012:	f002 fd5e 	bl	80a3ad2 <_ZN5Print5printEPKc>
    client.print(": ");
 80a1016:	4905      	ldr	r1, [pc, #20]	; (80a102c <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
 80a1018:	4620      	mov	r0, r4
 80a101a:	f002 fd5a 	bl	80a3ad2 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
 80a101e:	4629      	mov	r1, r5
 80a1020:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a1022:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
 80a1026:	f002 bd67 	b.w	80a3af8 <_ZN5Print7printlnEPKc>
 80a102a:	bf00      	nop
 80a102c:	080a6303 	.word	0x080a6303

080a1030 <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
 80a1030:	b538      	push	{r3, r4, r5, lr}
 80a1032:	4604      	mov	r4, r0
 80a1034:	4615      	mov	r5, r2
    client.print(aHeaderName);
 80a1036:	f002 fd4c 	bl	80a3ad2 <_ZN5Print5printEPKc>
    client.print(": ");
 80a103a:	4905      	ldr	r1, [pc, #20]	; (80a1050 <_ZN10HttpClient10sendHeaderEPKci+0x20>)
 80a103c:	4620      	mov	r0, r4
 80a103e:	f002 fd48 	bl	80a3ad2 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
 80a1042:	4629      	mov	r1, r5
 80a1044:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
 80a1046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
 80a104a:	220a      	movs	r2, #10
 80a104c:	f002 bdae 	b.w	80a3bac <_ZN5Print7printlnEii>
 80a1050:	080a6303 	.word	0x080a6303

080a1054 <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
 80a1054:	f001 be52 	b.w	80a2cfc <HAL_Pin_Map>

080a1058 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a1058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a105c:	460d      	mov	r5, r1
 80a105e:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a1060:	f04f 33ff 	mov.w	r3, #4294967295
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a1064:	b08f      	sub	sp, #60	; 0x3c
 80a1066:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
 80a1068:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80a106a:	2100      	movs	r1, #0
 80a106c:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
 80a106e:	4617      	mov	r7, r2
 80a1070:	f002 fcc6 	bl	80a3a00 <_ZNK6String6equalsEPKc>
 80a1074:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
 80a1078:	b960      	cbnz	r0, 80a1094 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
 80a107a:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
 80a107c:	f1b8 0f00 	cmp.w	r8, #0
 80a1080:	d002      	beq.n	80a1088 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
 80a1082:	fa1f f288 	uxth.w	r2, r8
 80a1086:	e000      	b.n	80a108a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
 80a1088:	2250      	movs	r2, #80	; 0x50
 80a108a:	2300      	movs	r3, #0
 80a108c:	4620      	mov	r0, r4
 80a108e:	f002 fbfb 	bl	80a3888 <_ZN9TCPClient7connectEPKctm>
 80a1092:	e014      	b.n	80a10be <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x66>
 80a1094:	4b74      	ldr	r3, [pc, #464]	; (80a1268 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
 80a1096:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
 80a109a:	f105 0c14 	add.w	ip, r5, #20
 80a109e:	9308      	str	r3, [sp, #32]
 80a10a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80a10a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80a10a8:	f8dc 3000 	ldr.w	r3, [ip]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
 80a10ac:	fa1f f288 	uxth.w	r2, r8
 80a10b0:	f88e 3000 	strb.w	r3, [lr]
 80a10b4:	a908      	add	r1, sp, #32
 80a10b6:	2300      	movs	r3, #0
 80a10b8:	4620      	mov	r0, r4
 80a10ba:	f002 faad 	bl	80a3618 <_ZN9TCPClient7connectE9IPAddresstm>
 80a10be:	3000      	adds	r0, #0
 80a10c0:	bf18      	it	ne
 80a10c2:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
 80a10c4:	b918      	cbnz	r0, 80a10ce <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
 80a10c6:	4620      	mov	r0, r4
 80a10c8:	f002 fa8c 	bl	80a35e4 <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
 80a10cc:	e0c8      	b.n	80a1260 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
 80a10ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a10d0:	4620      	mov	r0, r4
 80a10d2:	f002 fcfe 	bl	80a3ad2 <_ZN5Print5printEPKc>
    client.print(" ");
 80a10d6:	4965      	ldr	r1, [pc, #404]	; (80a126c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
 80a10d8:	4620      	mov	r0, r4
 80a10da:	f002 fcfa 	bl	80a3ad2 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
 80a10de:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80a10e0:	4620      	mov	r0, r4
 80a10e2:	f002 fcf6 	bl	80a3ad2 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
 80a10e6:	4962      	ldr	r1, [pc, #392]	; (80a1270 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
 80a10e8:	4620      	mov	r0, r4
 80a10ea:	f002 fcf2 	bl	80a3ad2 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
 80a10ee:	4961      	ldr	r1, [pc, #388]	; (80a1274 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x21c>)
 80a10f0:	4620      	mov	r0, r4
 80a10f2:	4a61      	ldr	r2, [pc, #388]	; (80a1278 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x220>)
 80a10f4:	f7ff ff8a 	bl	80a100c <_ZN10HttpClient10sendHeaderEPKcS1_>
 80a10f8:	2100      	movs	r1, #0
 80a10fa:	4628      	mov	r0, r5
 80a10fc:	f002 fc80 	bl	80a3a00 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
 80a1100:	b920      	cbnz	r0, 80a110c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
 80a1102:	682a      	ldr	r2, [r5, #0]
 80a1104:	495d      	ldr	r1, [pc, #372]	; (80a127c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
 80a1106:	4620      	mov	r0, r4
 80a1108:	f7ff ff80 	bl	80a100c <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
 80a110c:	f105 083c 	add.w	r8, r5, #60	; 0x3c
 80a1110:	2100      	movs	r1, #0
 80a1112:	4640      	mov	r0, r8
 80a1114:	f002 fc74 	bl	80a3a00 <_ZNK6String6equalsEPKc>
 80a1118:	b908      	cbnz	r0, 80a111e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc6>
        sendHeader("Content-Length", (aRequest.body).length());
 80a111a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80a111c:	e005      	b.n	80a112a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd2>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
 80a111e:	4958      	ldr	r1, [pc, #352]	; (80a1280 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
 80a1120:	9818      	ldr	r0, [sp, #96]	; 0x60
 80a1122:	f004 fde3 	bl	80a5cec <strcmp>
 80a1126:	4602      	mov	r2, r0
 80a1128:	b918      	cbnz	r0, 80a1132 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xda>
        sendHeader("Content-Length", 0);
 80a112a:	4956      	ldr	r1, [pc, #344]	; (80a1284 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
 80a112c:	4620      	mov	r0, r4
 80a112e:	f7ff ff7f 	bl	80a1030 <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
 80a1132:	b15e      	cbz	r6, 80a114c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    {
        int i = 0;
        while (headers[i].header != NULL)
 80a1134:	6831      	ldr	r1, [r6, #0]
 80a1136:	b149      	cbz	r1, 80a114c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
        {
            if (headers[i].value != NULL) {
 80a1138:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
 80a113a:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
 80a113c:	b112      	cbz	r2, 80a1144 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xec>
                sendHeader(headers[i].header, headers[i].value);
 80a113e:	f7ff ff65 	bl	80a100c <_ZN10HttpClient10sendHeaderEPKcS1_>
 80a1142:	e001      	b.n	80a1148 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf0>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
 80a1144:	f002 fcd8 	bl	80a3af8 <_ZN5Print7printlnEPKc>
 80a1148:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
 80a114a:	e7f3      	b.n	80a1134 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
 80a114c:	4620      	mov	r0, r4
 80a114e:	f002 fcc7 	bl	80a3ae0 <_ZN5Print7printlnEv>
    client.flush();
 80a1152:	4620      	mov	r0, r4
 80a1154:	f002 f97b 	bl	80a344e <_ZN9TCPClient5flushEv>
 80a1158:	2100      	movs	r1, #0
 80a115a:	4640      	mov	r0, r8
 80a115c:	f002 fc50 	bl	80a3a00 <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
 80a1160:	b918      	cbnz	r0, 80a116a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x112>
        client.println(aRequest.body);
 80a1162:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80a1164:	4620      	mov	r0, r4
 80a1166:	f002 fcc7 	bl	80a3af8 <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
 80a116a:	f104 081c 	add.w	r8, r4, #28
 80a116e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a1172:	2100      	movs	r1, #0
 80a1174:	4640      	mov	r0, r8
 80a1176:	f004 fd89 	bl	80a5c8c <memset>
 80a117a:	f001 fe37 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
    // timeout or an error.

    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
 80a117e:	2600      	movs	r6, #0
 80a1180:	4681      	mov	r9, r0
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
 80a1182:	4635      	mov	r5, r6
 80a1184:	f001 fe32 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
            delay(200);
        }
    } while (client.connected() && !timeout && !error);
 80a1188:	f241 3a88 	movw	sl, #5000	; 0x1388
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
 80a118c:	4620      	mov	r0, r4
 80a118e:	f002 f9ed 	bl	80a356c <_ZN9TCPClient9availableEv>
 80a1192:	b1d8      	cbz	r0, 80a11cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x174>
            char c = client.read();
 80a1194:	4620      	mov	r0, r4
 80a1196:	f002 f99e 	bl	80a34d6 <_ZN9TCPClient4readEv>
 80a119a:	4683      	mov	fp, r0
 80a119c:	f001 fe26 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>

                break;
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
 80a11a0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 80a11a4:	429d      	cmp	r5, r3
 80a11a6:	4681      	mov	r9, r0
 80a11a8:	d803      	bhi.n	80a11b2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15a>
                buffer[bufferPosition] = c;
 80a11aa:	1963      	adds	r3, r4, r5
 80a11ac:	f883 b01c 	strb.w	fp, [r3, #28]
 80a11b0:	e00a      	b.n	80a11c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
 80a11b2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80a11b6:	429d      	cmp	r5, r3
 80a11b8:	d106      	bne.n	80a11c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a11ba:	2300      	movs	r3, #0
 80a11bc:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
 80a11c0:	4620      	mov	r0, r4
 80a11c2:	f002 fa0f 	bl	80a35e4 <_ZN9TCPClient4stopEv>
                error = true;
 80a11c6:	2601      	movs	r6, #1

                #ifdef LOGGING
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
 80a11c8:	3501      	adds	r5, #1
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
 80a11ca:	e7df      	b.n	80a118c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
        }
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
 80a11cc:	1963      	adds	r3, r4, r5
 80a11ce:	7718      	strb	r0, [r3, #28]
 80a11d0:	f001 fe0c 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > TIMEOUT;
 80a11d4:	ebc9 0b00 	rsb	fp, r9, r0

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
 80a11d8:	b926      	cbnz	r6, 80a11e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
 80a11da:	45d3      	cmp	fp, sl
 80a11dc:	d802      	bhi.n	80a11e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
            delay(200);
 80a11de:	20c8      	movs	r0, #200	; 0xc8
 80a11e0:	f002 fd5e 	bl	80a3ca0 <delay>
        }
    } while (client.connected() && !timeout && !error);
 80a11e4:	4620      	mov	r0, r4
 80a11e6:	f002 fabe 	bl	80a3766 <_ZN9TCPClient9connectedEv>
 80a11ea:	b118      	cbz	r0, 80a11f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
 80a11ec:	45d3      	cmp	fp, sl
 80a11ee:	d801      	bhi.n	80a11f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
 80a11f0:	2e00      	cmp	r6, #0
 80a11f2:	d0cb      	beq.n	80a118c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
 80a11f4:	4620      	mov	r0, r4
 80a11f6:	f002 f9f5 	bl	80a35e4 <_ZN9TCPClient4stopEv>

    String raw_response(buffer);
 80a11fa:	4641      	mov	r1, r8
 80a11fc:	4668      	mov	r0, sp
 80a11fe:	f002 fbc0 	bl	80a3982 <_ZN6StringC1EPK19__FlashStringHelper>

    // Not super elegant way of finding the status code, but it works.
    String statusCode = raw_response.substring(9,12);
 80a1202:	230c      	movs	r3, #12
 80a1204:	2209      	movs	r2, #9
 80a1206:	4669      	mov	r1, sp
 80a1208:	a804      	add	r0, sp, #16
 80a120a:	f002 fc1d 	bl	80a3a48 <_ZNK6String9substringEjj>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(statusCode);
    #endif

    int bodyPos = raw_response.indexOf("\r\n\r\n");
 80a120e:	491e      	ldr	r1, [pc, #120]	; (80a1288 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
 80a1210:	a808      	add	r0, sp, #32
 80a1212:	f002 fbb6 	bl	80a3982 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1216:	a908      	add	r1, sp, #32
 80a1218:	4668      	mov	r0, sp
 80a121a:	f002 fc12 	bl	80a3a42 <_ZNK6String7indexOfERKS_>
 80a121e:	4604      	mov	r4, r0
 80a1220:	a808      	add	r0, sp, #32
 80a1222:	f002 fb67 	bl	80a38f4 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
 80a1226:	1c63      	adds	r3, r4, #1
 80a1228:	d014      	beq.n	80a1254 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fc>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
 80a122a:	1d3d      	adds	r5, r7, #4
 80a122c:	4917      	ldr	r1, [pc, #92]	; (80a128c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
 80a122e:	4628      	mov	r0, r5
 80a1230:	f002 fbba 	bl	80a39a8 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
 80a1234:	1d22      	adds	r2, r4, #4
 80a1236:	4669      	mov	r1, sp
 80a1238:	a808      	add	r0, sp, #32
 80a123a:	f002 fc2d 	bl	80a3a98 <_ZNK6String9substringEj>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80a123e:	a908      	add	r1, sp, #32
 80a1240:	4628      	mov	r0, r5
 80a1242:	f002 fbd9 	bl	80a39f8 <_ZN6String6concatERKS_>
 80a1246:	a808      	add	r0, sp, #32
 80a1248:	f002 fb54 	bl	80a38f4 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
 80a124c:	9804      	ldr	r0, [sp, #16]
 80a124e:	f004 fcf1 	bl	80a5c34 <atoi>
 80a1252:	6038      	str	r0, [r7, #0]
    if (bodyPos == -1) {
        #ifdef LOGGING
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
        #endif

        return;
 80a1254:	a804      	add	r0, sp, #16
 80a1256:	f002 fb4d 	bl	80a38f4 <_ZN6StringD1Ev>
 80a125a:	4668      	mov	r0, sp
 80a125c:	f002 fb4a 	bl	80a38f4 <_ZN6StringD1Ev>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
 80a1260:	b00f      	add	sp, #60	; 0x3c
 80a1262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1266:	bf00      	nop
 80a1268:	080a63a4 	.word	0x080a63a4
 80a126c:	080a62ff 	.word	0x080a62ff
 80a1270:	080a6194 	.word	0x080a6194
 80a1274:	080a61a6 	.word	0x080a61a6
 80a1278:	080a61a0 	.word	0x080a61a0
 80a127c:	080a61b1 	.word	0x080a61b1
 80a1280:	080a61c5 	.word	0x080a61c5
 80a1284:	080a61b6 	.word	0x080a61b6
 80a1288:	080a61ca 	.word	0x080a61ca
 80a128c:	080a61ce 	.word	0x080a61ce

080a1290 <_GLOBAL__sub_I_MinimumSerial.cpp>:
 80a1290:	f001 bd34 	b.w	80a2cfc <HAL_Pin_Map>

080a1294 <_GLOBAL__sub_I__ZN7istream3getEv>:
 80a1294:	f001 bd32 	b.w	80a2cfc <HAL_Pin_Map>

080a1298 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80a1298:	b510      	push	{r4, lr}
 80a129a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 80a129c:	3024      	adds	r0, #36	; 0x24
 80a129e:	f000 fe79 	bl	80a1f94 <_ZN8FatCache4syncEv>
 80a12a2:	b128      	cbz	r0, 80a12b0 <_ZN9FatVolume9cacheSyncEv+0x18>
 80a12a4:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 80a12a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 80a12ac:	f000 be72 	b.w	80a1f94 <_ZN8FatCache4syncEv>
  }
 80a12b0:	bd10      	pop	{r4, pc}

080a12b2 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 80a12b2:	1e41      	subs	r1, r0, #1
 80a12b4:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 80a12b8:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80a12ba:	0843      	lsrs	r3, r0, #1
 80a12bc:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 80a12c0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80a12c4:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80a12c6:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80a12c8:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80a12cc:	d1f5      	bne.n	80a12ba <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 80a12ce:	4770      	bx	lr

080a12d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 80a12d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 80a12d4:	7803      	ldrb	r3, [r0, #0]
 80a12d6:	1c44      	adds	r4, r0, #1
 80a12d8:	2b20      	cmp	r3, #32
 80a12da:	d101      	bne.n	80a12e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 80a12dc:	4620      	mov	r0, r4
 80a12de:	e7f9      	b.n	80a12d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 80a12e0:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80a12e2:	4f70      	ldr	r7, [pc, #448]	; (80a14a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 80a12e4:	6088      	str	r0, [r1, #8]
 80a12e6:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 80a12e8:	462e      	mov	r6, r5
 80a12ea:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 80a12ee:	b30b      	cbz	r3, 80a1334 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80a12f0:	2b2f      	cmp	r3, #47	; 0x2f
 80a12f2:	d101      	bne.n	80a12f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 80a12f4:	1903      	adds	r3, r0, r4
 80a12f6:	e017      	b.n	80a1328 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80a12f8:	2b5c      	cmp	r3, #92	; 0x5c
 80a12fa:	d102      	bne.n	80a1302 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 80a12fc:	2000      	movs	r0, #0
 80a12fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80a1302:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 80a1306:	b2e4      	uxtb	r4, r4
 80a1308:	2c1d      	cmp	r4, #29
 80a130a:	d803      	bhi.n	80a1314 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 80a130c:	fa27 f404 	lsr.w	r4, r7, r4
 80a1310:	07e4      	lsls	r4, r4, #31
 80a1312:	d4f3      	bmi.n	80a12fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80a1314:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 80a1318:	2c3c      	cmp	r4, #60	; 0x3c
 80a131a:	d0ef      	beq.n	80a12fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 80a131c:	3b20      	subs	r3, #32
 80a131e:	2b5e      	cmp	r3, #94	; 0x5e
 80a1320:	d9e1      	bls.n	80a12e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 80a1322:	e7eb      	b.n	80a12fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80a1324:	2d2f      	cmp	r5, #47	; 0x2f
 80a1326:	d105      	bne.n	80a1334 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80a1328:	461e      	mov	r6, r3
 80a132a:	f813 5b01 	ldrb.w	r5, [r3], #1
 80a132e:	2d20      	cmp	r5, #32
 80a1330:	d1f8      	bne.n	80a1324 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 80a1332:	e7f9      	b.n	80a1328 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 80a1334:	6016      	str	r6, [r2, #0]
 80a1336:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 80a1338:	4298      	cmp	r0, r3
 80a133a:	ebc0 0803 	rsb	r8, r0, r3
 80a133e:	d009      	beq.n	80a1354 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 80a1340:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80a1344:	2a2e      	cmp	r2, #46	; 0x2e
 80a1346:	d0f7      	beq.n	80a1338 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 80a1348:	2a20      	cmp	r2, #32
 80a134a:	d0f5      	beq.n	80a1338 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 80a134c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80a1350:	dcd4      	bgt.n	80a12fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 80a1352:	e001      	b.n	80a1358 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 80a1354:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 80a1358:	f8c1 8004 	str.w	r8, [r1, #4]
 80a135c:	f101 030c 	add.w	r3, r1, #12
 80a1360:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 80a1364:	2420      	movs	r4, #32
 80a1366:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 80a136a:	4293      	cmp	r3, r2
 80a136c:	d1fb      	bne.n	80a1366 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 80a136e:	4603      	mov	r3, r0
 80a1370:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80a1372:	f813 4b01 	ldrb.w	r4, [r3], #1
 80a1376:	2c2e      	cmp	r4, #46	; 0x2e
 80a1378:	d0fa      	beq.n	80a1370 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 80a137a:	2c20      	cmp	r4, #32
 80a137c:	d0f8      	beq.n	80a1370 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 80a137e:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80a1382:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 80a1386:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80a1388:	1c73      	adds	r3, r6, #1
 80a138a:	d107      	bne.n	80a139c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 80a138c:	2700      	movs	r7, #0
 80a138e:	f04f 0e07 	mov.w	lr, #7
 80a1392:	463d      	mov	r5, r7
 80a1394:	46ba      	mov	sl, r7
 80a1396:	f04f 0908 	mov.w	r9, #8
 80a139a:	e009      	b.n	80a13b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 80a139c:	5d83      	ldrb	r3, [r0, r6]
 80a139e:	2b2e      	cmp	r3, #46	; 0x2e
 80a13a0:	d0f4      	beq.n	80a138c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 80a13a2:	3e01      	subs	r6, #1
 80a13a4:	e7f0      	b.n	80a1388 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 80a13a6:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 80a13a8:	2b20      	cmp	r3, #32
 80a13aa:	d104      	bne.n	80a13b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 80a13ac:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 80a13ae:	3201      	adds	r2, #1
 80a13b0:	4542      	cmp	r2, r8
 80a13b2:	dbf8      	blt.n	80a13a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 80a13b4:	e04b      	b.n	80a144e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 80a13b6:	2b2e      	cmp	r3, #46	; 0x2e
 80a13b8:	d102      	bne.n	80a13c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 80a13ba:	42b2      	cmp	r2, r6
 80a13bc:	d1f6      	bne.n	80a13ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 80a13be:	e003      	b.n	80a13c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 80a13c0:	2b22      	cmp	r3, #34	; 0x22
 80a13c2:	d017      	beq.n	80a13f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 80a13c4:	2b7c      	cmp	r3, #124	; 0x7c
 80a13c6:	d015      	beq.n	80a13f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80a13c8:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80a13cc:	f1bc 0f05 	cmp.w	ip, #5
 80a13d0:	d801      	bhi.n	80a13d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 80a13d2:	2b2d      	cmp	r3, #45	; 0x2d
 80a13d4:	d10e      	bne.n	80a13f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 80a13d6:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80a13da:	f1bc 0f05 	cmp.w	ip, #5
 80a13de:	d909      	bls.n	80a13f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 80a13e0:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 80a13e4:	f1bc 0f02 	cmp.w	ip, #2
 80a13e8:	d904      	bls.n	80a13f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 80a13ea:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80a13ee:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80a13f2:	d902      	bls.n	80a13fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 80a13f4:	42b2      	cmp	r2, r6
 80a13f6:	d10e      	bne.n	80a1416 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 80a13f8:	e049      	b.n	80a148e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80a13fa:	42b2      	cmp	r2, r6
 80a13fc:	d047      	beq.n	80a148e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 80a13fe:	4575      	cmp	r5, lr
 80a1400:	d821      	bhi.n	80a1446 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 80a1402:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80a1406:	f1bc 0f19 	cmp.w	ip, #25
 80a140a:	d808      	bhi.n	80a141e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 80a140c:	3b20      	subs	r3, #32
 80a140e:	b2db      	uxtb	r3, r3
        lc |= bit;
 80a1410:	ea49 0707 	orr.w	r7, r9, r7
 80a1414:	e00a      	b.n	80a142c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80a1416:	4575      	cmp	r5, lr
 80a1418:	d815      	bhi.n	80a1446 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 80a141a:	2400      	movs	r4, #0
      c = '_';
 80a141c:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 80a141e:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80a1422:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80a1426:	bf98      	it	ls
 80a1428:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 80a142c:	f105 0c01 	add.w	ip, r5, #1
 80a1430:	fa5f fc8c 	uxtb.w	ip, ip
 80a1434:	440d      	add	r5, r1
      if (i < 7) {
 80a1436:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 80a143a:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 80a143c:	d801      	bhi.n	80a1442 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 80a143e:	f881 c00c 	strb.w	ip, [r1, #12]
 80a1442:	4665      	mov	r5, ip
 80a1444:	e7b3      	b.n	80a13ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80a1446:	f1be 0f0a 	cmp.w	lr, #10
 80a144a:	d117      	bne.n	80a147c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 80a144c:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 80a144e:	7b4b      	ldrb	r3, [r1, #13]
 80a1450:	2b20      	cmp	r3, #32
 80a1452:	f43f af53 	beq.w	80a12fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 80a1456:	b13c      	cbz	r4, 80a1468 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 80a1458:	ea1a 0f07 	tst.w	sl, r7
 80a145c:	bf18      	it	ne
 80a145e:	2702      	movne	r7, #2
 80a1460:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 80a1462:	2001      	movs	r0, #1
 80a1464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 80a1468:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80a146a:	2001      	movs	r0, #1
 80a146c:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 80a146e:	4419      	add	r1, r3
 80a1470:	237e      	movs	r3, #126	; 0x7e
 80a1472:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 80a1474:	2331      	movs	r3, #49	; 0x31
 80a1476:	738b      	strb	r3, [r1, #14]
 80a1478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 80a147c:	42b2      	cmp	r2, r6
 80a147e:	dce5      	bgt.n	80a144c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80a1480:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 80a1482:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 80a1486:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80a1488:	f04f 0910 	mov.w	r9, #16
 80a148c:	e78e      	b.n	80a13ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80a148e:	f1be 0f0a 	cmp.w	lr, #10
 80a1492:	d0db      	beq.n	80a144c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80a1494:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 80a1496:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 80a149a:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80a149c:	f04f 0910 	mov.w	r9, #16
 80a14a0:	e785      	b.n	80a13ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 80a14a2:	bf00      	nop
 80a14a4:	31000101 	.word	0x31000101

080a14a8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 80a14a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a14ac:	4606      	mov	r6, r0
 80a14ae:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 80a14b0:	f891 900c 	ldrb.w	r9, [r1, #12]
 80a14b4:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80a14b6:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80a14b8:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 80a14bc:	6869      	ldr	r1, [r5, #4]
 80a14be:	68aa      	ldr	r2, [r5, #8]
 80a14c0:	1863      	adds	r3, r4, r1
 80a14c2:	b29b      	uxth	r3, r3
 80a14c4:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 80a14c6:	4291      	cmp	r1, r2
 80a14c8:	d006      	beq.n	80a14d8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 80a14ca:	f812 0b01 	ldrb.w	r0, [r2], #1
 80a14ce:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80a14d2:	4043      	eors	r3, r0
 80a14d4:	b29b      	uxth	r3, r3
 80a14d6:	e7f6      	b.n	80a14c6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 80a14d8:	f1b9 0f03 	cmp.w	r9, #3
 80a14dc:	bf28      	it	cs
 80a14de:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a14e2:	f109 0204 	add.w	r2, r9, #4
 80a14e6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 80a14e8:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a14ec:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a14ee:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a14f0:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a14f2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a14f4:	bf94      	ite	ls
 80a14f6:	3130      	addls	r1, #48	; 0x30
 80a14f8:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a14fa:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a14fc:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 80a14fe:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a1502:	d3f1      	bcc.n	80a14e8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80a1504:	eb05 0309 	add.w	r3, r5, r9
 80a1508:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 80a150a:	2100      	movs	r1, #0
 80a150c:	4630      	mov	r0, r6
 80a150e:	f000 fb1e 	bl	80a1b4e <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 80a1512:	2101      	movs	r1, #1
 80a1514:	4630      	mov	r0, r6
 80a1516:	f000 fafd 	bl	80a1b14 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80a151a:	4601      	mov	r1, r0
 80a151c:	b928      	cbnz	r0, 80a152a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80a151e:	7870      	ldrb	r0, [r6, #1]
 80a1520:	fab0 f080 	clz	r0, r0
 80a1524:	0940      	lsrs	r0, r0, #5
 80a1526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80a152a:	7803      	ldrb	r3, [r0, #0]
 80a152c:	b14b      	cbz	r3, 80a1542 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80a152e:	7ac3      	ldrb	r3, [r0, #11]
 80a1530:	071b      	lsls	r3, r3, #28
 80a1532:	d4ee      	bmi.n	80a1512 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80a1534:	220b      	movs	r2, #11
 80a1536:	4640      	mov	r0, r8
 80a1538:	f004 fb8e 	bl	80a5c58 <memcmp>
 80a153c:	2800      	cmp	r0, #0
 80a153e:	d1e8      	bne.n	80a1512 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80a1540:	e002      	b.n	80a1548 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 80a1542:	2001      	movs	r0, #1
 80a1544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1548:	3401      	adds	r4, #1
 80a154a:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 80a154c:	2c64      	cmp	r4, #100	; 0x64
 80a154e:	d1b5      	bne.n	80a14bc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 80a1550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a1554 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80a1554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1558:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80a155a:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80a155c:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80a155e:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80a1562:	9005      	str	r0, [sp, #20]
 80a1564:	460e      	mov	r6, r1
 80a1566:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80a1568:	d101      	bne.n	80a156e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 80a156a:	2000      	movs	r0, #0
 80a156c:	e1a0      	b.n	80a18b0 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80a156e:	9b05      	ldr	r3, [sp, #20]
 80a1570:	781b      	ldrb	r3, [r3, #0]
 80a1572:	2b00      	cmp	r3, #0
 80a1574:	d1f9      	bne.n	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 80a1576:	6853      	ldr	r3, [r2, #4]
 80a1578:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80a157a:	7813      	ldrb	r3, [r2, #0]
 80a157c:	079b      	lsls	r3, r3, #30
 80a157e:	f000 818d 	beq.w	80a189c <_ZN7FatFile4openEPS_P7fname_ti+0x348>
 80a1582:	9b02      	ldr	r3, [sp, #8]
 80a1584:	270d      	movs	r7, #13
 80a1586:	330c      	adds	r3, #12
 80a1588:	fbb3 f7f7 	udiv	r7, r3, r7
 80a158c:	3701      	adds	r7, #1
 80a158e:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 80a1590:	f04f 0800 	mov.w	r8, #0
 80a1594:	2100      	movs	r1, #0
 80a1596:	4630      	mov	r0, r6
 80a1598:	f000 fad9 	bl	80a1b4e <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 80a159c:	4644      	mov	r4, r8
  uint8_t ord = 0;
 80a159e:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 80a15a0:	4645      	mov	r5, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80a15a2:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 80a15a6:	f8cd 800c 	str.w	r8, [sp, #12]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
 80a15aa:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80a15ae:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80a15b0:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 80a15b2:	2101      	movs	r1, #1
 80a15b4:	4630      	mov	r0, r6
 80a15b6:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80a15b8:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 80a15bc:	f000 faaa 	bl	80a1b14 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80a15c0:	9b07      	ldr	r3, [sp, #28]
 80a15c2:	b920      	cbnz	r0, 80a15ce <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
 80a15c4:	7873      	ldrb	r3, [r6, #1]
 80a15c6:	2b00      	cmp	r3, #0
 80a15c8:	f000 8090 	beq.w	80a16ec <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 80a15cc:	e7cd      	b.n	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 80a15ce:	7802      	ldrb	r2, [r0, #0]
 80a15d0:	2ae5      	cmp	r2, #229	; 0xe5
 80a15d2:	d000      	beq.n	80a15d6 <_ZN7FatFile4openEPS_P7fname_ti+0x82>
 80a15d4:	b942      	cbnz	r2, 80a15e8 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80a15d6:	2c00      	cmp	r4, #0
 80a15d8:	bf08      	it	eq
 80a15da:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 80a15dc:	42bc      	cmp	r4, r7
        freeFound++;
 80a15de:	bf3c      	itt	cc
 80a15e0:	3401      	addcc	r4, #1
 80a15e2:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80a15e4:	b922      	cbnz	r2, 80a15f0 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
 80a15e6:	e081      	b.n	80a16ec <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 80a15e8:	42bc      	cmp	r4, r7
 80a15ea:	bf38      	it	cc
 80a15ec:	2400      	movcc	r4, #0
 80a15ee:	e003      	b.n	80a15f8 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80a15f0:	2ae5      	cmp	r2, #229	; 0xe5
 80a15f2:	d101      	bne.n	80a15f8 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 80a15f4:	2500      	movs	r5, #0
 80a15f6:	e7db      	b.n	80a15b0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80a15f8:	2a2e      	cmp	r2, #46	; 0x2e
 80a15fa:	d0fb      	beq.n	80a15f4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80a15fc:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 80a15fe:	290f      	cmp	r1, #15
 80a1600:	d152      	bne.n	80a16a8 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 80a1602:	b93d      	cbnz	r5, 80a1614 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80a1604:	0651      	lsls	r1, r2, #25
 80a1606:	d5d3      	bpl.n	80a15b0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 80a1608:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80a160a:	f002 051f 	and.w	r5, r2, #31
        chksum = ldir->chksum;
 80a160e:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80a1610:	462b      	mov	r3, r5
 80a1612:	e007      	b.n	80a1624 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80a1614:	3b01      	subs	r3, #1
 80a1616:	b2db      	uxtb	r3, r3
 80a1618:	429a      	cmp	r2, r3
 80a161a:	d1eb      	bne.n	80a15f4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80a161c:	7b42      	ldrb	r2, [r0, #13]
 80a161e:	9903      	ldr	r1, [sp, #12]
 80a1620:	4291      	cmp	r1, r2
 80a1622:	d1e7      	bne.n	80a15f4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 80a1624:	1e5a      	subs	r2, r3, #1
 80a1626:	f04f 0c0d 	mov.w	ip, #13
 80a162a:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 80a162e:	9a02      	ldr	r2, [sp, #8]
 80a1630:	4562      	cmp	r2, ip
 80a1632:	d9df      	bls.n	80a15f4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80a1634:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 80a1638:	f1be 0f04 	cmp.w	lr, #4
 80a163c:	fa5f f28e 	uxtb.w	r2, lr
 80a1640:	d804      	bhi.n	80a164c <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
 80a1642:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 80a1646:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80a164a:	e00c      	b.n	80a1666 <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80a164c:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 80a164e:	bf95      	itete	ls
 80a1650:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80a1654:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80a1658:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80a165c:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80a1660:	bf94      	ite	ls
 80a1662:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80a1664:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 80a1666:	9902      	ldr	r1, [sp, #8]
 80a1668:	4561      	cmp	r1, ip
 80a166a:	d103      	bne.n	80a1674 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 80a166c:	2a00      	cmp	r2, #0
 80a166e:	bf18      	it	ne
 80a1670:	2500      	movne	r5, #0
 80a1672:	e79d      	b.n	80a15b0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a1674:	2aff      	cmp	r2, #255	; 0xff
 80a1676:	d8bd      	bhi.n	80a15f4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80a1678:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80a167a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 80a167e:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a1680:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80a1684:	bf98      	it	ls
 80a1686:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a1688:	f811 100c 	ldrb.w	r1, [r1, ip]
 80a168c:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80a1690:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 80a1694:	bf98      	it	ls
 80a1696:	b2d2      	uxtbls	r2, r2
 80a1698:	f1bc 0f19 	cmp.w	ip, #25
 80a169c:	bf9c      	itt	ls
 80a169e:	3120      	addls	r1, #32
 80a16a0:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a16a2:	4291      	cmp	r1, r2
 80a16a4:	d1a6      	bne.n	80a15f4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80a16a6:	e0fb      	b.n	80a18a0 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 80a16a8:	0709      	lsls	r1, r1, #28
 80a16aa:	d4a3      	bmi.n	80a15f4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
 80a16ac:	b14d      	cbz	r5, 80a16c2 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 80a16ae:	2b01      	cmp	r3, #1
 80a16b0:	f47f af5b 	bne.w	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 80a16b4:	f7ff fdfd 	bl	80a12b2 <_ZN7FatFile11lfnChecksumEPh>
 80a16b8:	9b03      	ldr	r3, [sp, #12]
 80a16ba:	4283      	cmp	r3, r0
 80a16bc:	f47f af55 	bne.w	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 80a16c0:	e00f      	b.n	80a16e2 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80a16c2:	220b      	movs	r2, #11
 80a16c4:	9906      	ldr	r1, [sp, #24]
 80a16c6:	9307      	str	r3, [sp, #28]
 80a16c8:	f004 fac6 	bl	80a5c58 <memcmp>
 80a16cc:	9b07      	ldr	r3, [sp, #28]
 80a16ce:	2800      	cmp	r0, #0
 80a16d0:	f47f af6e 	bne.w	80a15b0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 80a16d4:	f899 2000 	ldrb.w	r2, [r9]
 80a16d8:	07d2      	lsls	r2, r2, #31
 80a16da:	d502      	bpl.n	80a16e2 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
 80a16dc:	2201      	movs	r2, #1
 80a16de:	9204      	str	r2, [sp, #16]
 80a16e0:	e766      	b.n	80a15b0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 80a16e2:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 80a16e6:	f000 80d1 	beq.w	80a188c <_ZN7FatFile4openEPS_P7fname_ti+0x338>
 80a16ea:	e73e      	b.n	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 80a16ec:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80a16f0:	f43f af3b 	beq.w	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 80a16f4:	f00b 0303 	and.w	r3, fp, #3
 80a16f8:	3b01      	subs	r3, #1
 80a16fa:	2b01      	cmp	r3, #1
 80a16fc:	f63f af35 	bhi.w	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 80a1700:	2c00      	cmp	r4, #0
 80a1702:	bf08      	it	eq
 80a1704:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80a1706:	42bc      	cmp	r4, r7
 80a1708:	d302      	bcc.n	80a1710 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 80a170a:	9b04      	ldr	r3, [sp, #16]
 80a170c:	b9cb      	cbnz	r3, 80a1742 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
 80a170e:	e01f      	b.n	80a1750 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 80a1710:	2100      	movs	r1, #0
 80a1712:	4630      	mov	r0, r6
 80a1714:	f000 f9fe 	bl	80a1b14 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80a1718:	b910      	cbnz	r0, 80a1720 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
 80a171a:	7873      	ldrb	r3, [r6, #1]
 80a171c:	b15b      	cbz	r3, 80a1736 <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
 80a171e:	e724      	b.n	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 80a1720:	3401      	adds	r4, #1
 80a1722:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80a1724:	e7ef      	b.n	80a1706 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
 80a1726:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 80a1728:	791b      	ldrb	r3, [r3, #4]
 80a172a:	2b01      	cmp	r3, #1
 80a172c:	d8ed      	bhi.n	80a170a <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
 80a172e:	3410      	adds	r4, #16
 80a1730:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 80a1732:	42a7      	cmp	r7, r4
 80a1734:	d9e9      	bls.n	80a170a <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 80a1736:	4630      	mov	r0, r6
 80a1738:	f000 f8d2 	bl	80a18e0 <_ZN7FatFile13addDirClusterEv>
 80a173c:	2800      	cmp	r0, #0
 80a173e:	d1f2      	bne.n	80a1726 <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
 80a1740:	e713      	b.n	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 80a1742:	4649      	mov	r1, r9
 80a1744:	4630      	mov	r0, r6
 80a1746:	f7ff feaf 	bl	80a14a8 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 80a174a:	2800      	cmp	r0, #0
 80a174c:	f43f af0d 	beq.w	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 80a1750:	ea4f 1148 	mov.w	r1, r8, lsl #5
 80a1754:	4630      	mov	r0, r6
 80a1756:	f000 f9fa 	bl	80a1b4e <_ZN7FatFile7seekSetEm>
 80a175a:	2800      	cmp	r0, #0
 80a175c:	f43f af05 	beq.w	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 80a1760:	1e7d      	subs	r5, r7, #1
 80a1762:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80a1764:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80a1766:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 80a176a:	f04f 080f 	mov.w	r8, #15
 80a176e:	e041      	b.n	80a17f4 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80a1770:	2100      	movs	r1, #0
 80a1772:	4630      	mov	r0, r6
 80a1774:	f000 f9ce 	bl	80a1b14 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 80a1778:	4607      	mov	r7, r0
 80a177a:	2800      	cmp	r0, #0
 80a177c:	f43f aef5 	beq.w	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 80a1780:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80a1782:	42ac      	cmp	r4, r5
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 80a1784:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80a1788:	f043 0301 	orr.w	r3, r3, #1
 80a178c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80a1790:	bf14      	ite	ne
 80a1792:	4622      	movne	r2, r4
 80a1794:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 80a1798:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 80a179a:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 80a179e:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 80a17a2:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80a17a6:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 80a17a8:	f7ff fd83 	bl	80a12b2 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80a17ac:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 80a17ae:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 80a17b0:	f887 a01a 	strb.w	sl, [r7, #26]
 80a17b4:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80a17b8:	f002 021f 	and.w	r2, r2, #31
 80a17bc:	230d      	movs	r3, #13
 80a17be:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 80a17c0:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80a17c4:	435a      	muls	r2, r3
 80a17c6:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80a17c8:	9902      	ldr	r1, [sp, #8]
 80a17ca:	4291      	cmp	r1, r2
 80a17cc:	d915      	bls.n	80a17fa <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
 80a17ce:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 80a17d2:	2b04      	cmp	r3, #4
 80a17d4:	fa5f fc83 	uxtb.w	ip, r3
 80a17d8:	f103 0001 	add.w	r0, r3, #1
 80a17dc:	d813      	bhi.n	80a1806 <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
 80a17de:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80a17e2:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 80a17e6:	280d      	cmp	r0, #13
 80a17e8:	f102 0201 	add.w	r2, r2, #1
 80a17ec:	4603      	mov	r3, r0
 80a17ee:	d1eb      	bne.n	80a17c8 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80a17f0:	3c01      	subs	r4, #1
 80a17f2:	b2e4      	uxtb	r4, r4
 80a17f4:	2c00      	cmp	r4, #0
 80a17f6:	d1bb      	bne.n	80a1770 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
 80a17f8:	e00e      	b.n	80a1818 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80a17fa:	bf14      	ite	ne
 80a17fc:	f04f 31ff 	movne.w	r1, #4294967295
 80a1800:	2100      	moveq	r1, #0
 80a1802:	b289      	uxth	r1, r1
 80a1804:	e7e5      	b.n	80a17d2 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80a1806:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 80a180a:	bf94      	ite	ls
 80a180c:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 80a1810:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 80a1814:	8099      	strh	r1, [r3, #4]
 80a1816:	e7e6      	b.n	80a17e6 <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80a1818:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 80a181a:	4621      	mov	r1, r4
 80a181c:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80a181e:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 80a1822:	f000 f977 	bl	80a1b14 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80a1826:	4607      	mov	r7, r0
 80a1828:	2800      	cmp	r0, #0
 80a182a:	f43f ae9e 	beq.w	80a156a <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 80a182e:	2220      	movs	r2, #32
 80a1830:	4621      	mov	r1, r4
 80a1832:	f004 fa2b 	bl	80a5c8c <memset>
  memcpy(dir->name, fname->sfn, 11);
 80a1836:	464b      	mov	r3, r9
 80a1838:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 80a183c:	603a      	str	r2, [r7, #0]
 80a183e:	685a      	ldr	r2, [r3, #4]
 80a1840:	607a      	str	r2, [r7, #4]
 80a1842:	891a      	ldrh	r2, [r3, #8]
 80a1844:	813a      	strh	r2, [r7, #8]
 80a1846:	7a9b      	ldrb	r3, [r3, #10]
 80a1848:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 80a184a:	f899 3000 	ldrb.w	r3, [r9]
 80a184e:	f003 0318 	and.w	r3, r3, #24
 80a1852:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 80a1854:	4b18      	ldr	r3, [pc, #96]	; (80a18b8 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 80a1856:	681b      	ldr	r3, [r3, #0]
 80a1858:	b12b      	cbz	r3, 80a1866 <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 80a185a:	f107 010e 	add.w	r1, r7, #14
 80a185e:	f107 0010 	add.w	r0, r7, #16
 80a1862:	4798      	blx	r3
 80a1864:	e006      	b.n	80a1874 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 80a1866:	2321      	movs	r3, #33	; 0x21
 80a1868:	743b      	strb	r3, [r7, #16]
 80a186a:	2328      	movs	r3, #40	; 0x28
 80a186c:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 80a186e:	2308      	movs	r3, #8
 80a1870:	73bc      	strb	r4, [r7, #14]
 80a1872:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 80a1874:	8a3b      	ldrh	r3, [r7, #16]
 80a1876:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 80a1878:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 80a187a:	89fb      	ldrh	r3, [r7, #14]
 80a187c:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 80a187e:	68b2      	ldr	r2, [r6, #8]
 80a1880:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80a1884:	f043 0301 	orr.w	r3, r3, #1
 80a1888:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 80a188c:	9500      	str	r5, [sp, #0]
 80a188e:	465b      	mov	r3, fp
 80a1890:	4652      	mov	r2, sl
 80a1892:	4631      	mov	r1, r6
 80a1894:	9805      	ldr	r0, [sp, #20]
 80a1896:	f000 f9a3 	bl	80a1be0 <_ZN7FatFile15openCachedEntryEPS_tih>
 80a189a:	e009      	b.n	80a18b0 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80a189c:	2701      	movs	r7, #1
 80a189e:	e677      	b.n	80a1590 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
 80a18a0:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 80a18a4:	f1be 0f0d 	cmp.w	lr, #13
 80a18a8:	f43f ae82 	beq.w	80a15b0 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a18ac:	46d4      	mov	ip, sl
 80a18ae:	e6c3      	b.n	80a1638 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
 80a18b0:	b009      	add	sp, #36	; 0x24
 80a18b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a18b6:	bf00      	nop
 80a18b8:	20001270 	.word	0x20001270

080a18bc <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 80a18bc:	f001 ba1e 	b.w	80a2cfc <HAL_Pin_Map>

080a18c0 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 80a18c0:	f001 ba1c 	b.w	80a2cfc <HAL_Pin_Map>

080a18c4 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 80a18c4:	f001 ba1a 	b.w	80a2cfc <HAL_Pin_Map>

080a18c8 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 80a18c8:	f001 ba18 	b.w	80a2cfc <HAL_Pin_Map>

080a18cc <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80a18cc:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80a18ce:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80a18d2:	f043 0304 	orr.w	r3, r3, #4
 80a18d6:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80a18d8:	6901      	ldr	r1, [r0, #16]
 80a18da:	6880      	ldr	r0, [r0, #8]
 80a18dc:	f000 bc10 	b.w	80a2100 <_ZN9FatVolume15allocateClusterEmPm>

080a18e0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80a18e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80a18e4:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80a18e6:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80a18e8:	f003 0320 	and.w	r3, r3, #32
 80a18ec:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a18f0:	b10b      	cbz	r3, 80a18f6 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 80a18f2:	2600      	movs	r6, #0
 80a18f4:	e02e      	b.n	80a1954 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 80a18f6:	6942      	ldr	r2, [r0, #20]
 80a18f8:	4b18      	ldr	r3, [pc, #96]	; (80a195c <_ZN7FatFile13addDirClusterEv+0x7c>)
 80a18fa:	429a      	cmp	r2, r3
 80a18fc:	d8f9      	bhi.n	80a18f2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 80a18fe:	f7ff ffe5 	bl	80a18cc <_ZN7FatFile10addClusterEv>
 80a1902:	4606      	mov	r6, r0
 80a1904:	2800      	cmp	r0, #0
 80a1906:	d0f4      	beq.n	80a18f2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
 80a1908:	6921      	ldr	r1, [r4, #16]
 80a190a:	68a0      	ldr	r0, [r4, #8]
 80a190c:	f000 fb8d 	bl	80a202a <_ZNK9FatVolume17clusterFirstBlockEm>
 80a1910:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a1912:	68a0      	ldr	r0, [r4, #8]
 80a1914:	2205      	movs	r2, #5
 80a1916:	4639      	mov	r1, r7
 80a1918:	3024      	adds	r0, #36	; 0x24
 80a191a:	f000 fb62 	bl	80a1fe2 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 80a191e:	4680      	mov	r8, r0
 80a1920:	2800      	cmp	r0, #0
 80a1922:	d0e6      	beq.n	80a18f2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 80a1924:	4629      	mov	r1, r5
 80a1926:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a192a:	f004 f9af 	bl	80a5c8c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80a192e:	2501      	movs	r5, #1
 80a1930:	68a3      	ldr	r3, [r4, #8]
 80a1932:	791a      	ldrb	r2, [r3, #4]
 80a1934:	42aa      	cmp	r2, r5
 80a1936:	d909      	bls.n	80a194c <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80a1938:	4642      	mov	r2, r8
 80a193a:	19e9      	adds	r1, r5, r7
 80a193c:	6818      	ldr	r0, [r3, #0]
 80a193e:	f000 fecd 	bl	80a26dc <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80a1942:	2800      	cmp	r0, #0
 80a1944:	d0d5      	beq.n	80a18f2 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80a1946:	3501      	adds	r5, #1
 80a1948:	b2ed      	uxtb	r5, r5
 80a194a:	e7f1      	b.n	80a1930 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80a194c:	6963      	ldr	r3, [r4, #20]
 80a194e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80a1952:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 80a1954:	4630      	mov	r0, r6
 80a1956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a195a:	bf00      	nop
 80a195c:	001ffdff 	.word	0x001ffdff

080a1960 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 80a1960:	b510      	push	{r4, lr}
 80a1962:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a1964:	6880      	ldr	r0, [r0, #8]
 80a1966:	460a      	mov	r2, r1
 80a1968:	3024      	adds	r0, #36	; 0x24
 80a196a:	69a1      	ldr	r1, [r4, #24]
 80a196c:	f000 fb39 	bl	80a1fe2 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 80a1970:	b120      	cbz	r0, 80a197c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 80a1972:	88a3      	ldrh	r3, [r4, #4]
 80a1974:	f003 030f 	and.w	r3, r3, #15
 80a1978:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 80a197c:	bd10      	pop	{r4, pc}

080a197e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80a197e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 80a1980:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80a1982:	4605      	mov	r5, r0
 80a1984:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 80a1986:	b984      	cbnz	r4, 80a19aa <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 80a1988:	2224      	movs	r2, #36	; 0x24
 80a198a:	4621      	mov	r1, r4
 80a198c:	f004 f97e 	bl	80a5c8c <memset>

  m_vol = vol;
 80a1990:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 80a1992:	79f3      	ldrb	r3, [r6, #7]
 80a1994:	2b10      	cmp	r3, #16
 80a1996:	d003      	beq.n	80a19a0 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 80a1998:	2b20      	cmp	r3, #32
 80a199a:	d106      	bne.n	80a19aa <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 80a199c:	2340      	movs	r3, #64	; 0x40
 80a199e:	e000      	b.n	80a19a2 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 80a19a0:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 80a19a2:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 80a19a4:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 80a19a6:	70a8      	strb	r0, [r5, #2]
 80a19a8:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 80a19aa:	2000      	movs	r0, #0
 80a19ac:	bd70      	pop	{r4, r5, r6, pc}

080a19ae <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 80a19ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a19b2:	7803      	ldrb	r3, [r0, #0]
 80a19b4:	4604      	mov	r4, r0
 80a19b6:	4689      	mov	r9, r1
 80a19b8:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 80a19ba:	b14b      	cbz	r3, 80a19d0 <_ZN7FatFile4readEPvj+0x22>
 80a19bc:	7882      	ldrb	r2, [r0, #2]
 80a19be:	07d1      	lsls	r1, r2, #31
 80a19c0:	d506      	bpl.n	80a19d0 <_ZN7FatFile4readEPvj+0x22>
 80a19c2:	e00c      	b.n	80a19de <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80a19c4:	465a      	mov	r2, fp
 80a19c6:	6921      	ldr	r1, [r4, #16]
 80a19c8:	f000 fb35 	bl	80a2036 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 80a19cc:	2800      	cmp	r0, #0
 80a19ce:	da3d      	bge.n	80a1a4c <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80a19d0:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80a19d2:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80a19d6:	f043 0302 	orr.w	r3, r3, #2
 80a19da:	7063      	strb	r3, [r4, #1]
  return -1;
 80a19dc:	e097      	b.n	80a1b0e <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 80a19de:	071a      	lsls	r2, r3, #28
 80a19e0:	d503      	bpl.n	80a19ea <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 80a19e2:	69e3      	ldr	r3, [r4, #28]
 80a19e4:	6962      	ldr	r2, [r4, #20]
 80a19e6:	1a9b      	subs	r3, r3, r2
 80a19e8:	e007      	b.n	80a19fa <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 80a19ea:	069a      	lsls	r2, r3, #26
 80a19ec:	d508      	bpl.n	80a1a00 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 80a19ee:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 80a19f0:	891a      	ldrh	r2, [r3, #8]
 80a19f2:	6963      	ldr	r3, [r4, #20]
 80a19f4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 80a19f8:	b29b      	uxth	r3, r3
 80a19fa:	429d      	cmp	r5, r3
 80a19fc:	bf28      	it	cs
 80a19fe:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80a1a00:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 80a1a02:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80a1a06:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80a1a0a:	2e00      	cmp	r6, #0
 80a1a0c:	d035      	beq.n	80a1a7a <_ZN7FatFile4readEPvj+0xcc>
 80a1a0e:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80a1a10:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 80a1a12:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80a1a16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80a1a1a:	68a0      	ldr	r0, [r4, #8]
 80a1a1c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 80a1a20:	d002      	beq.n	80a1a28 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80a1a22:	6a03      	ldr	r3, [r0, #32]
 80a1a24:	4419      	add	r1, r3
 80a1a26:	e01d      	b.n	80a1a64 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80a1a28:	f890 8005 	ldrb.w	r8, [r0, #5]
 80a1a2c:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 80a1a30:	f1ba 0f00 	cmp.w	sl, #0
 80a1a34:	d110      	bne.n	80a1a58 <_ZN7FatFile4readEPvj+0xaa>
 80a1a36:	f1b8 0f00 	cmp.w	r8, #0
 80a1a3a:	d10d      	bne.n	80a1a58 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 80a1a3c:	2b00      	cmp	r3, #0
 80a1a3e:	d1c1      	bne.n	80a19c4 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80a1a40:	0653      	lsls	r3, r2, #25
 80a1a42:	bf4c      	ite	mi
 80a1a44:	6a03      	ldrmi	r3, [r0, #32]
 80a1a46:	6a23      	ldrpl	r3, [r4, #32]
 80a1a48:	6123      	str	r3, [r4, #16]
 80a1a4a:	e005      	b.n	80a1a58 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 80a1a4c:	d104      	bne.n	80a1a58 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 80a1a4e:	7823      	ldrb	r3, [r4, #0]
 80a1a50:	f013 0f70 	tst.w	r3, #112	; 0x70
 80a1a54:	d111      	bne.n	80a1a7a <_ZN7FatFile4readEPvj+0xcc>
 80a1a56:	e7bb      	b.n	80a19d0 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80a1a58:	6921      	ldr	r1, [r4, #16]
 80a1a5a:	68a0      	ldr	r0, [r4, #8]
 80a1a5c:	f000 fae5 	bl	80a202a <_ZNK9FatVolume17clusterFirstBlockEm>
 80a1a60:	eb08 0100 	add.w	r1, r8, r0
 80a1a64:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 80a1a66:	f1ba 0f00 	cmp.w	sl, #0
 80a1a6a:	d135      	bne.n	80a1ad8 <_ZN7FatFile4readEPvj+0x12a>
 80a1a6c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1a70:	d332      	bcc.n	80a1ad8 <_ZN7FatFile4readEPvj+0x12a>
 80a1a72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80a1a74:	4299      	cmp	r1, r3
 80a1a76:	d102      	bne.n	80a1a7e <_ZN7FatFile4readEPvj+0xd0>
 80a1a78:	e02e      	b.n	80a1ad8 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 80a1a7a:	1ba8      	subs	r0, r5, r6
 80a1a7c:	e047      	b.n	80a1b0e <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 80a1a7e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a1a82:	d31b      	bcc.n	80a1abc <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
 80a1a84:	7822      	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
 80a1a86:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 80a1a8a:	0697      	lsls	r7, r2, #26
 80a1a8c:	d406      	bmi.n	80a1a9c <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
 80a1a8e:	7902      	ldrb	r2, [r0, #4]
 80a1a90:	ebc8 0202 	rsb	r2, r8, r2
 80a1a94:	b2d2      	uxtb	r2, r2
 80a1a96:	4592      	cmp	sl, r2
 80a1a98:	bf28      	it	cs
 80a1a9a:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a1a9c:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 80a1a9e:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a1aa2:	d207      	bcs.n	80a1ab4 <_ZN7FatFile4readEPvj+0x106>
 80a1aa4:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
 80a1aa6:	4653      	mov	r3, sl
 80a1aa8:	464a      	mov	r2, r9
 80a1aaa:	6800      	ldr	r0, [r0, #0]
 80a1aac:	f000 fdd4 	bl	80a2658 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 80a1ab0:	b960      	cbnz	r0, 80a1acc <_ZN7FatFile4readEPvj+0x11e>
 80a1ab2:	e78d      	b.n	80a19d0 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a1ab4:	4453      	add	r3, sl
 80a1ab6:	4299      	cmp	r1, r3
 80a1ab8:	d321      	bcc.n	80a1afe <_ZN7FatFile4readEPvj+0x150>
 80a1aba:	e7f3      	b.n	80a1aa4 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 80a1abc:	464a      	mov	r2, r9
 80a1abe:	6800      	ldr	r0, [r0, #0]
 80a1ac0:	f000 fd82 	bl	80a25c8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80a1ac4:	2800      	cmp	r0, #0
 80a1ac6:	d083      	beq.n	80a19d0 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 80a1ac8:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 80a1acc:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 80a1ace:	44b9      	add	r9, r7
    m_curPosition += n;
 80a1ad0:	443b      	add	r3, r7
 80a1ad2:	6163      	str	r3, [r4, #20]
    toRead -= n;
 80a1ad4:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80a1ad6:	e798      	b.n	80a1a0a <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a1ad8:	2200      	movs	r2, #0
 80a1ada:	3024      	adds	r0, #36	; 0x24
 80a1adc:	f000 fa81 	bl	80a1fe2 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 80a1ae0:	2800      	cmp	r0, #0
 80a1ae2:	f43f af75 	beq.w	80a19d0 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 80a1ae6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 80a1aea:	42b7      	cmp	r7, r6
 80a1aec:	bf28      	it	cs
 80a1aee:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 80a1af0:	eb00 010a 	add.w	r1, r0, sl
 80a1af4:	463a      	mov	r2, r7
 80a1af6:	4648      	mov	r0, r9
 80a1af8:	f004 f8bd 	bl	80a5c76 <memcpy>
 80a1afc:	e7e6      	b.n	80a1acc <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80a1afe:	3024      	adds	r0, #36	; 0x24
 80a1b00:	9101      	str	r1, [sp, #4]
 80a1b02:	f000 fa47 	bl	80a1f94 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
 80a1b06:	9901      	ldr	r1, [sp, #4]
 80a1b08:	2800      	cmp	r0, #0
 80a1b0a:	d1cb      	bne.n	80a1aa4 <_ZN7FatFile4readEPvj+0xf6>
 80a1b0c:	e760      	b.n	80a19d0 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 80a1b0e:	b003      	add	sp, #12
 80a1b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1b14 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80a1b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80a1b16:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80a1b18:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80a1b1a:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 80a1b1e:	b105      	cbz	r5, 80a1b22 <_ZN7FatFile12readDirCacheEb+0xe>
 80a1b20:	b969      	cbnz	r1, 80a1b3e <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 80a1b22:	2201      	movs	r2, #1
 80a1b24:	f10d 0107 	add.w	r1, sp, #7
 80a1b28:	4620      	mov	r0, r4
 80a1b2a:	f7ff ff40 	bl	80a19ae <_ZN7FatFile4readEPvj>
 80a1b2e:	b240      	sxtb	r0, r0
    if  (n != 1) {
 80a1b30:	2801      	cmp	r0, #1
 80a1b32:	d001      	beq.n	80a1b38 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 80a1b34:	2000      	movs	r0, #0
 80a1b36:	e008      	b.n	80a1b4a <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 80a1b38:	6963      	ldr	r3, [r4, #20]
 80a1b3a:	331f      	adds	r3, #31
 80a1b3c:	e000      	b.n	80a1b40 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 80a1b3e:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80a1b40:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 80a1b42:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80a1b44:	3030      	adds	r0, #48	; 0x30
 80a1b46:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 80a1b4a:	b003      	add	sp, #12
 80a1b4c:	bd30      	pop	{r4, r5, pc}

080a1b4e <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80a1b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1b52:	460e      	mov	r6, r1
 80a1b54:	7801      	ldrb	r1, [r0, #0]
 80a1b56:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80a1b58:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80a1b5a:	2900      	cmp	r1, #0
 80a1b5c:	d039      	beq.n	80a1bd2 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80a1b5e:	6945      	ldr	r5, [r0, #20]
 80a1b60:	42b5      	cmp	r5, r6
 80a1b62:	d03a      	beq.n	80a1bda <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 80a1b64:	b90e      	cbnz	r6, 80a1b6a <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 80a1b66:	6106      	str	r6, [r0, #16]
    goto done;
 80a1b68:	e031      	b.n	80a1bce <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 80a1b6a:	070b      	lsls	r3, r1, #28
 80a1b6c:	d503      	bpl.n	80a1b76 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 80a1b6e:	69c3      	ldr	r3, [r0, #28]
 80a1b70:	429e      	cmp	r6, r3
 80a1b72:	d82e      	bhi.n	80a1bd2 <_ZN7FatFile7seekSetEm+0x84>
 80a1b74:	e007      	b.n	80a1b86 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 80a1b76:	0688      	lsls	r0, r1, #26
 80a1b78:	d505      	bpl.n	80a1b86 <_ZN7FatFile7seekSetEm+0x38>
 80a1b7a:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 80a1b7c:	891b      	ldrh	r3, [r3, #8]
 80a1b7e:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 80a1b82:	d826      	bhi.n	80a1bd2 <_ZN7FatFile7seekSetEm+0x84>
 80a1b84:	e023      	b.n	80a1bce <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80a1b86:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80a1b8a:	1e6a      	subs	r2, r5, #1
 80a1b8c:	f89e 3006 	ldrb.w	r3, [lr, #6]
 80a1b90:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80a1b94:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80a1b96:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80a1b98:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 80a1b9a:	429a      	cmp	r2, r3
 80a1b9c:	d800      	bhi.n	80a1ba0 <_ZN7FatFile7seekSetEm+0x52>
 80a1b9e:	b94d      	cbnz	r5, 80a1bb4 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80a1ba0:	064a      	lsls	r2, r1, #25
 80a1ba2:	bf4c      	ite	mi
 80a1ba4:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 80a1ba8:	6a22      	ldrpl	r2, [r4, #32]
 80a1baa:	6122      	str	r2, [r4, #16]
 80a1bac:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80a1bae:	f104 0810 	add.w	r8, r4, #16
 80a1bb2:	e00a      	b.n	80a1bca <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 80a1bb4:	1a9b      	subs	r3, r3, r2
 80a1bb6:	e7f9      	b.n	80a1bac <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80a1bb8:	4642      	mov	r2, r8
 80a1bba:	6921      	ldr	r1, [r4, #16]
 80a1bbc:	68a0      	ldr	r0, [r4, #8]
 80a1bbe:	f000 fa3a 	bl	80a2036 <_ZN9FatVolume6fatGetEmPm>
 80a1bc2:	2800      	cmp	r0, #0
 80a1bc4:	f105 35ff 	add.w	r5, r5, #4294967295
 80a1bc8:	dd03      	ble.n	80a1bd2 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 80a1bca:	2d00      	cmp	r5, #0
 80a1bcc:	d1f4      	bne.n	80a1bb8 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 80a1bce:	6166      	str	r6, [r4, #20]
 80a1bd0:	e003      	b.n	80a1bda <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 80a1bd2:	6127      	str	r7, [r4, #16]
  return false;
 80a1bd4:	2000      	movs	r0, #0
 80a1bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 80a1bda:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 80a1bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1be0 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 80a1be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1be2:	460f      	mov	r7, r1
 80a1be4:	4604      	mov	r4, r0
 80a1be6:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80a1be8:	2100      	movs	r1, #0
 80a1bea:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 80a1bec:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80a1bee:	f004 f84d 	bl	80a5c8c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80a1bf2:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80a1bf4:	80a5      	strh	r5, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80a1bf6:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80a1bf8:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80a1bfa:	f005 020f 	and.w	r2, r5, #15
 80a1bfe:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80a1c02:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80a1c04:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80a1c06:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80a1c08:	7acb      	ldrb	r3, [r1, #11]
 80a1c0a:	071d      	lsls	r5, r3, #28
 80a1c0c:	d44c      	bmi.n	80a1ca8 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80a1c0e:	1883      	adds	r3, r0, r2
 80a1c10:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80a1c14:	f003 0317 	and.w	r3, r3, #23
 80a1c18:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80a1c1a:	7ac9      	ldrb	r1, [r1, #11]
 80a1c1c:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 80a1c20:	bf04      	itt	eq
 80a1c22:	f043 0308 	orreq.w	r3, r3, #8
 80a1c26:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
 80a1c28:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80a1c2c:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
 80a1c2e:	f006 0303 	and.w	r3, r6, #3
 80a1c32:	2b01      	cmp	r3, #1
 80a1c34:	d009      	beq.n	80a1c4a <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
 80a1c36:	2b02      	cmp	r3, #2
 80a1c38:	d005      	beq.n	80a1c46 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
 80a1c3a:	2b00      	cmp	r3, #0
 80a1c3c:	d134      	bne.n	80a1ca8 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
 80a1c3e:	0571      	lsls	r1, r6, #21
 80a1c40:	d432      	bmi.n	80a1ca8 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
 80a1c42:	2301      	movs	r3, #1
 80a1c44:	e002      	b.n	80a1c4c <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
 80a1c46:	2303      	movs	r3, #3
 80a1c48:	e000      	b.n	80a1c4c <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
 80a1c4a:	2302      	movs	r3, #2
 80a1c4c:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
 80a1c4e:	78a1      	ldrb	r1, [r4, #2]
 80a1c50:	078b      	lsls	r3, r1, #30
 80a1c52:	d503      	bpl.n	80a1c5c <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
 80a1c54:	7823      	ldrb	r3, [r4, #0]
 80a1c56:	f013 0f11 	tst.w	r3, #17
 80a1c5a:	d125      	bne.n	80a1ca8 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 80a1c5c:	b24b      	sxtb	r3, r1
 80a1c5e:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80a1c62:	f006 0108 	and.w	r1, r6, #8
 80a1c66:	bf14      	ite	ne
 80a1c68:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
 80a1c6c:	2700      	moveq	r7, #0
 80a1c6e:	4319      	orrs	r1, r3
 80a1c70:	4339      	orrs	r1, r7
 80a1c72:	70a1      	strb	r1, [r4, #2]
 80a1c74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80a1c76:	4402      	add	r2, r0
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);

  m_dirBlock = m_vol->cacheBlockNumber();
 80a1c78:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80a1c7a:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 80a1c7e:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a

  if (oflag & O_TRUNC) {
 80a1c82:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80a1c84:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
 80a1c88:	d504      	bpl.n	80a1c94 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80a1c8a:	b181      	cbz	r1, 80a1cae <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 80a1c8c:	f000 fa73 	bl	80a2176 <_ZN9FatVolume9freeChainEm>
 80a1c90:	b968      	cbnz	r0, 80a1cae <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 80a1c92:	e009      	b.n	80a1ca8 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 80a1c94:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 80a1c96:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80a1c98:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80a1c9a:	0473      	lsls	r3, r6, #17
 80a1c9c:	d50c      	bpl.n	80a1cb8 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 80a1c9e:	69e1      	ldr	r1, [r4, #28]
 80a1ca0:	4620      	mov	r0, r4
 80a1ca2:	f7ff ff54 	bl	80a1b4e <_ZN7FatFile7seekSetEm>
 80a1ca6:	b938      	cbnz	r0, 80a1cb8 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 80a1ca8:	2000      	movs	r0, #0
 80a1caa:	7020      	strb	r0, [r4, #0]
  return false;
 80a1cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 80a1cae:	78a3      	ldrb	r3, [r4, #2]
 80a1cb0:	f043 0304 	orr.w	r3, r3, #4
 80a1cb4:	70a3      	strb	r3, [r4, #2]
 80a1cb6:	e7f0      	b.n	80a1c9a <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 80a1cb8:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 80a1cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1cbc <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80a1cbc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80a1cbe:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80a1cc0:	4604      	mov	r4, r0
  if (!isOpen()) {
 80a1cc2:	b90b      	cbnz	r3, 80a1cc8 <_ZN7FatFile4syncEv+0xc>
    return true;
 80a1cc4:	2001      	movs	r0, #1
 80a1cc6:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
 80a1cc8:	7883      	ldrb	r3, [r0, #2]
 80a1cca:	075a      	lsls	r2, r3, #29
 80a1ccc:	d523      	bpl.n	80a1d16 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80a1cce:	2101      	movs	r1, #1
 80a1cd0:	f7ff fe46 	bl	80a1960 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80a1cd4:	4605      	mov	r5, r0
 80a1cd6:	b928      	cbnz	r0, 80a1ce4 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80a1cd8:	7863      	ldrb	r3, [r4, #1]
  return false;
 80a1cda:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80a1cdc:	f043 0301 	orr.w	r3, r3, #1
 80a1ce0:	7063      	strb	r3, [r4, #1]
 80a1ce2:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80a1ce4:	7803      	ldrb	r3, [r0, #0]
 80a1ce6:	2be5      	cmp	r3, #229	; 0xe5
 80a1ce8:	d0f6      	beq.n	80a1cd8 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 80a1cea:	7823      	ldrb	r3, [r4, #0]
 80a1cec:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 80a1cee:	bf44      	itt	mi
 80a1cf0:	69e3      	ldrmi	r3, [r4, #28]
 80a1cf2:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 80a1cf4:	8c23      	ldrh	r3, [r4, #32]
 80a1cf6:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 80a1cf8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80a1cfa:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 80a1cfc:	4b09      	ldr	r3, [pc, #36]	; (80a1d24 <_ZN7FatFile4syncEv+0x68>)
 80a1cfe:	681b      	ldr	r3, [r3, #0]
 80a1d00:	b12b      	cbz	r3, 80a1d0e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80a1d02:	f100 0116 	add.w	r1, r0, #22
 80a1d06:	3018      	adds	r0, #24
 80a1d08:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80a1d0a:	8b2b      	ldrh	r3, [r5, #24]
 80a1d0c:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 80a1d0e:	78a3      	ldrb	r3, [r4, #2]
 80a1d10:	f023 0304 	bic.w	r3, r3, #4
 80a1d14:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 80a1d16:	68a0      	ldr	r0, [r4, #8]
 80a1d18:	f7ff fabe 	bl	80a1298 <_ZN9FatVolume9cacheSyncEv>
 80a1d1c:	2800      	cmp	r0, #0
 80a1d1e:	d0db      	beq.n	80a1cd8 <_ZN7FatFile4syncEv+0x1c>
 80a1d20:	e7d0      	b.n	80a1cc4 <_ZN7FatFile4syncEv+0x8>
 80a1d22:	bf00      	nop
 80a1d24:	20001270 	.word	0x20001270

080a1d28 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 80a1d28:	b510      	push	{r4, lr}
 80a1d2a:	4604      	mov	r4, r0
  bool rtn = sync();
 80a1d2c:	f7ff ffc6 	bl	80a1cbc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 80a1d30:	2300      	movs	r3, #0
 80a1d32:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 80a1d34:	bd10      	pop	{r4, pc}

080a1d36 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80a1d36:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1d38:	461f      	mov	r7, r3
 80a1d3a:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80a1d3c:	2300      	movs	r3, #0
 80a1d3e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80a1d42:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80a1d46:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80a1d48:	4606      	mov	r6, r0
 80a1d4a:	460c      	mov	r4, r1
 80a1d4c:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80a1d4e:	b10b      	cbz	r3, 80a1d54 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 80a1d50:	2000      	movs	r0, #0
 80a1d52:	e03d      	b.n	80a1dd0 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80a1d54:	780b      	ldrb	r3, [r1, #0]
 80a1d56:	f013 0f70 	tst.w	r3, #112	; 0x70
 80a1d5a:	d0f9      	beq.n	80a1d50 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 80a1d5c:	7813      	ldrb	r3, [r2, #0]
 80a1d5e:	2b2f      	cmp	r3, #47	; 0x2f
 80a1d60:	d112      	bne.n	80a1d88 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
 80a1d62:	9b01      	ldr	r3, [sp, #4]
 80a1d64:	781a      	ldrb	r2, [r3, #0]
 80a1d66:	2a2f      	cmp	r2, #47	; 0x2f
 80a1d68:	d102      	bne.n	80a1d70 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
 80a1d6a:	3301      	adds	r3, #1
 80a1d6c:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 80a1d6e:	e7f8      	b.n	80a1d62 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 80a1d70:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 80a1d72:	b91a      	cbnz	r2, 80a1d7c <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
 80a1d74:	4630      	mov	r0, r6
 80a1d76:	f7ff fe02 	bl	80a197e <_ZN7FatFile8openRootEP9FatVolume>
 80a1d7a:	e029      	b.n	80a1dd0 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 80a1d7c:	a809      	add	r0, sp, #36	; 0x24
 80a1d7e:	f7ff fdfe 	bl	80a197e <_ZN7FatFile8openRootEP9FatVolume>
 80a1d82:	2800      	cmp	r0, #0
 80a1d84:	d0e4      	beq.n	80a1d50 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 80a1d86:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 80a1d88:	aa01      	add	r2, sp, #4
 80a1d8a:	a903      	add	r1, sp, #12
 80a1d8c:	9801      	ldr	r0, [sp, #4]
 80a1d8e:	f7ff fa9f 	bl	80a12d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80a1d92:	2800      	cmp	r0, #0
 80a1d94:	d0dc      	beq.n	80a1d50 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 80a1d96:	9b01      	ldr	r3, [sp, #4]
 80a1d98:	781b      	ldrb	r3, [r3, #0]
 80a1d9a:	b19b      	cbz	r3, 80a1dc4 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
 80a1d9c:	2300      	movs	r3, #0
 80a1d9e:	aa03      	add	r2, sp, #12
 80a1da0:	4621      	mov	r1, r4
 80a1da2:	4630      	mov	r0, r6
 80a1da4:	f7ff fbd6 	bl	80a1554 <_ZN7FatFile4openEPS_P7fname_ti>
 80a1da8:	2800      	cmp	r0, #0
 80a1daa:	d0d1      	beq.n	80a1d50 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80a1dac:	4635      	mov	r5, r6
 80a1dae:	ac09      	add	r4, sp, #36	; 0x24
 80a1db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1db4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1db6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1db8:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 80a1dba:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80a1dbc:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 80a1dbe:	f7ff ffb3 	bl	80a1d28 <_ZN7FatFile5closeEv>
 80a1dc2:	e7e0      	b.n	80a1d86 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
 80a1dc4:	463b      	mov	r3, r7
 80a1dc6:	aa03      	add	r2, sp, #12
 80a1dc8:	4621      	mov	r1, r4
 80a1dca:	4630      	mov	r0, r6
 80a1dcc:	f7ff fbc2 	bl	80a1554 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
 80a1dd0:	b013      	add	sp, #76	; 0x4c
 80a1dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1dd4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80a1dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 80a1dd8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80a1dda:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 80a1ddc:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80a1dde:	4604      	mov	r4, r0
 80a1de0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 80a1de2:	d508      	bpl.n	80a1df6 <_ZN7FatFile5writeEPKvj+0x22>
 80a1de4:	7883      	ldrb	r3, [r0, #2]
 80a1de6:	079a      	lsls	r2, r3, #30
 80a1de8:	d505      	bpl.n	80a1df6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 80a1dea:	071b      	lsls	r3, r3, #28
 80a1dec:	d50b      	bpl.n	80a1e06 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 80a1dee:	69e1      	ldr	r1, [r4, #28]
 80a1df0:	f7ff fead 	bl	80a1b4e <_ZN7FatFile7seekSetEm>
 80a1df4:	b938      	cbnz	r0, 80a1e06 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80a1df6:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80a1df8:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80a1dfc:	f043 0301 	orr.w	r3, r3, #1
 80a1e00:	7063      	strb	r3, [r4, #1]
  return -1;
 80a1e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 80a1e06:	6963      	ldr	r3, [r4, #20]
 80a1e08:	43db      	mvns	r3, r3
 80a1e0a:	4598      	cmp	r8, r3
 80a1e0c:	d8f3      	bhi.n	80a1df6 <_ZN7FatFile5writeEPKvj+0x22>
 80a1e0e:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80a1e10:	f04f 0a00 	mov.w	sl, #0
 80a1e14:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80a1e16:	2e00      	cmp	r6, #0
 80a1e18:	d07f      	beq.n	80a1f1a <_ZN7FatFile5writeEPKvj+0x146>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 80a1e1a:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 80a1e1c:	f3c3 0708 	ubfx	r7, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80a1e20:	7942      	ldrb	r2, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 80a1e22:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
 80a1e26:	d11c      	bne.n	80a1e62 <_ZN7FatFile5writeEPKvj+0x8e>
 80a1e28:	b9df      	cbnz	r7, 80a1e62 <_ZN7FatFile5writeEPKvj+0x8e>
      // start of new cluster
      if (m_curCluster != 0) {
 80a1e2a:	6921      	ldr	r1, [r4, #16]
 80a1e2c:	b171      	cbz	r1, 80a1e4c <_ZN7FatFile5writeEPKvj+0x78>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80a1e2e:	f104 0210 	add.w	r2, r4, #16
 80a1e32:	f000 f900 	bl	80a2036 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80a1e36:	2800      	cmp	r0, #0
 80a1e38:	dbdd      	blt.n	80a1df6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80a1e3a:	f040 808d 	bne.w	80a1f58 <_ZN7FatFile5writeEPKvj+0x184>
          // add cluster if at end of chain
          if (!addCluster()) {
 80a1e3e:	4620      	mov	r0, r4
 80a1e40:	f7ff fd44 	bl	80a18cc <_ZN7FatFile10addClusterEv>
 80a1e44:	2800      	cmp	r0, #0
 80a1e46:	f040 8087 	bne.w	80a1f58 <_ZN7FatFile5writeEPKvj+0x184>
 80a1e4a:	e7d4      	b.n	80a1df6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 80a1e4c:	6a23      	ldr	r3, [r4, #32]
 80a1e4e:	b93b      	cbnz	r3, 80a1e60 <_ZN7FatFile5writeEPKvj+0x8c>
          // allocate first cluster of file
          if (!addCluster()) {
 80a1e50:	4620      	mov	r0, r4
 80a1e52:	f7ff fd3b 	bl	80a18cc <_ZN7FatFile10addClusterEv>
 80a1e56:	2800      	cmp	r0, #0
 80a1e58:	d0cd      	beq.n	80a1df6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 80a1e5a:	6923      	ldr	r3, [r4, #16]
 80a1e5c:	6223      	str	r3, [r4, #32]
 80a1e5e:	e000      	b.n	80a1e62 <_ZN7FatFile5writeEPKvj+0x8e>
        } else {
          m_curCluster = m_firstCluster;
 80a1e60:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80a1e62:	6921      	ldr	r1, [r4, #16]
 80a1e64:	68a0      	ldr	r0, [r4, #8]
 80a1e66:	f000 f8e0 	bl	80a202a <_ZNK9FatVolume17clusterFirstBlockEm>
 80a1e6a:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 80a1e6c:	b917      	cbnz	r7, 80a1e74 <_ZN7FatFile5writeEPKvj+0xa0>
 80a1e6e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a1e72:	d221      	bcs.n	80a1eb8 <_ZN7FatFile5writeEPKvj+0xe4>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 80a1e74:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
 80a1e78:	42b5      	cmp	r5, r6
 80a1e7a:	bf28      	it	cs
 80a1e7c:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 80a1e7e:	b937      	cbnz	r7, 80a1e8e <_ZN7FatFile5writeEPKvj+0xba>
 80a1e80:	6963      	ldr	r3, [r4, #20]
 80a1e82:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 80a1e84:	4293      	cmp	r3, r2
 80a1e86:	bf34      	ite	cc
 80a1e88:	2201      	movcc	r2, #1
 80a1e8a:	2205      	movcs	r2, #5
 80a1e8c:	e000      	b.n	80a1e90 <_ZN7FatFile5writeEPKvj+0xbc>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80a1e8e:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a1e90:	68a0      	ldr	r0, [r4, #8]
 80a1e92:	3024      	adds	r0, #36	; 0x24
 80a1e94:	f000 f8a5 	bl	80a1fe2 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 80a1e98:	2800      	cmp	r0, #0
 80a1e9a:	d0ac      	beq.n	80a1df6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80a1e9c:	4438      	add	r0, r7
 80a1e9e:	462a      	mov	r2, r5
 80a1ea0:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 80a1ea2:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80a1ea4:	f003 fee7 	bl	80a5c76 <memcpy>
      if (512 == (n + blockOffset)) {
 80a1ea8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80a1eac:	d12f      	bne.n	80a1f0e <_ZN7FatFile5writeEPKvj+0x13a>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80a1eae:	68a0      	ldr	r0, [r4, #8]
 80a1eb0:	3024      	adds	r0, #36	; 0x24
 80a1eb2:	f000 f86f 	bl	80a1f94 <_ZN8FatCache4syncEv>
 80a1eb6:	e016      	b.n	80a1ee6 <_ZN7FatFile5writeEPKvj+0x112>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 80a1eb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a1ebc:	68a0      	ldr	r0, [r4, #8]
 80a1ebe:	d314      	bcc.n	80a1eea <_ZN7FatFile5writeEPKvj+0x116>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
 80a1ec0:	7902      	ldrb	r2, [r0, #4]
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
 80a1ec2:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
 80a1ec4:	1b52      	subs	r2, r2, r5
 80a1ec6:	b2d2      	uxtb	r2, r2
 80a1ec8:	4293      	cmp	r3, r2
 80a1eca:	bf28      	it	cs
 80a1ecc:	4613      	movcs	r3, r2
 80a1ece:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
 80a1ed0:	025d      	lsls	r5, r3, #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a1ed2:	4291      	cmp	r1, r2
 80a1ed4:	d302      	bcc.n	80a1edc <_ZN7FatFile5writeEPKvj+0x108>
 80a1ed6:	441a      	add	r2, r3
 80a1ed8:	4291      	cmp	r1, r2
 80a1eda:	d337      	bcc.n	80a1f4c <_ZN7FatFile5writeEPKvj+0x178>
 80a1edc:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
 80a1ede:	464a      	mov	r2, r9
 80a1ee0:	6838      	ldr	r0, [r7, #0]
 80a1ee2:	f000 fc6d 	bl	80a27c0 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 80a1ee6:	b990      	cbnz	r0, 80a1f0e <_ZN7FatFile5writeEPKvj+0x13a>
 80a1ee8:	e785      	b.n	80a1df6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 80a1eea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80a1eec:	464a      	mov	r2, r9
 80a1eee:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80a1ef0:	bf02      	ittt	eq
 80a1ef2:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80a1ef6:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80a1efa:	62c3      	streq	r3, [r0, #44]	; 0x2c
 80a1efc:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80a1efe:	6818      	ldr	r0, [r3, #0]
 80a1f00:	f000 fbec 	bl	80a26dc <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 80a1f04:	2800      	cmp	r0, #0
 80a1f06:	f43f af76 	beq.w	80a1df6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 80a1f0a:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80a1f0e:	6963      	ldr	r3, [r4, #20]
    src += n;
 80a1f10:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80a1f12:	442b      	add	r3, r5
 80a1f14:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 80a1f16:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80a1f18:	e77c      	b.n	80a1e14 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 80a1f1a:	69e2      	ldr	r2, [r4, #28]
 80a1f1c:	4293      	cmp	r3, r2
 80a1f1e:	d901      	bls.n	80a1f24 <_ZN7FatFile5writeEPKvj+0x150>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 80a1f20:	61e3      	str	r3, [r4, #28]
 80a1f22:	e002      	b.n	80a1f2a <_ZN7FatFile5writeEPKvj+0x156>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 80a1f24:	4b0f      	ldr	r3, [pc, #60]	; (80a1f64 <_ZN7FatFile5writeEPKvj+0x190>)
 80a1f26:	681b      	ldr	r3, [r3, #0]
 80a1f28:	b11b      	cbz	r3, 80a1f32 <_ZN7FatFile5writeEPKvj+0x15e>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 80a1f2a:	78a3      	ldrb	r3, [r4, #2]
 80a1f2c:	f043 0304 	orr.w	r3, r3, #4
 80a1f30:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
 80a1f32:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80a1f36:	2b00      	cmp	r3, #0
 80a1f38:	db02      	blt.n	80a1f40 <_ZN7FatFile5writeEPKvj+0x16c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 80a1f3a:	4640      	mov	r0, r8
 80a1f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
 80a1f40:	4620      	mov	r0, r4
 80a1f42:	f7ff febb 	bl	80a1cbc <_ZN7FatFile4syncEv>
 80a1f46:	2800      	cmp	r0, #0
 80a1f48:	d1f7      	bne.n	80a1f3a <_ZN7FatFile5writeEPKvj+0x166>
 80a1f4a:	e754      	b.n	80a1df6 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80a1f4c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80a1f50:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80a1f54:	62c2      	str	r2, [r0, #44]	; 0x2c
 80a1f56:	e7c1      	b.n	80a1edc <_ZN7FatFile5writeEPKvj+0x108>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80a1f58:	6921      	ldr	r1, [r4, #16]
 80a1f5a:	68a0      	ldr	r0, [r4, #8]
 80a1f5c:	f000 f865 	bl	80a202a <_ZNK9FatVolume17clusterFirstBlockEm>
 80a1f60:	4601      	mov	r1, r0
 80a1f62:	e784      	b.n	80a1e6e <_ZN7FatFile5writeEPKvj+0x9a>
 80a1f64:	20001270 	.word	0x20001270

080a1f68 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 80a1f68:	f000 bec8 	b.w	80a2cfc <HAL_Pin_Map>

080a1f6c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1f6c:	b570      	push	{r4, r5, r6, lr}
 80a1f6e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1f70:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1f72:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1f74:	b149      	cbz	r1, 80a1f8a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1f76:	f003 fee6 	bl	80a5d46 <strlen>
 80a1f7a:	682b      	ldr	r3, [r5, #0]
 80a1f7c:	4602      	mov	r2, r0
 80a1f7e:	4621      	mov	r1, r4
 80a1f80:	4628      	mov	r0, r5
    }
 80a1f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1f86:	68db      	ldr	r3, [r3, #12]
 80a1f88:	4718      	bx	r3
    }
 80a1f8a:	bd70      	pop	{r4, r5, r6, pc}

080a1f8c <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 80a1f8c:	f000 beb6 	b.w	80a2cfc <HAL_Pin_Map>

080a1f90 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 80a1f90:	f000 beb4 	b.w	80a2cfc <HAL_Pin_Map>

080a1f94 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80a1f94:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 80a1f96:	7803      	ldrb	r3, [r0, #0]
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80a1f98:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 80a1f9a:	07da      	lsls	r2, r3, #31
 80a1f9c:	d51e      	bpl.n	80a1fdc <_ZN8FatCache4syncEv+0x48>
 80a1f9e:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 80a1fa0:	f100 060c 	add.w	r6, r0, #12
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80a1fa4:	6881      	ldr	r1, [r0, #8]
 80a1fa6:	4632      	mov	r2, r6
 80a1fa8:	6818      	ldr	r0, [r3, #0]
 80a1faa:	f000 fb97 	bl	80a26dc <_ZN9SdSpiCard10writeBlockEmPKh>
 80a1fae:	4605      	mov	r5, r0
 80a1fb0:	b908      	cbnz	r0, 80a1fb6 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 80a1fb2:	2500      	movs	r5, #0
 80a1fb4:	e013      	b.n	80a1fde <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 80a1fb6:	7823      	ldrb	r3, [r4, #0]
 80a1fb8:	079b      	lsls	r3, r3, #30
 80a1fba:	d404      	bmi.n	80a1fc6 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 80a1fbc:	7823      	ldrb	r3, [r4, #0]
 80a1fbe:	f023 0301 	bic.w	r3, r3, #1
 80a1fc2:	7023      	strb	r3, [r4, #0]
 80a1fc4:	e00b      	b.n	80a1fde <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 80a1fc6:	6863      	ldr	r3, [r4, #4]
 80a1fc8:	68a0      	ldr	r0, [r4, #8]
 80a1fca:	6919      	ldr	r1, [r3, #16]
 80a1fcc:	4632      	mov	r2, r6
 80a1fce:	4401      	add	r1, r0
 80a1fd0:	6818      	ldr	r0, [r3, #0]
 80a1fd2:	f000 fb83 	bl	80a26dc <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 80a1fd6:	2800      	cmp	r0, #0
 80a1fd8:	d1f0      	bne.n	80a1fbc <_ZN8FatCache4syncEv+0x28>
 80a1fda:	e7ea      	b.n	80a1fb2 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 80a1fdc:	2501      	movs	r5, #1

fail:
  return false;
}
 80a1fde:	4628      	mov	r0, r5
 80a1fe0:	bd70      	pop	{r4, r5, r6, pc}

080a1fe2 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a1fe2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 80a1fe4:	6883      	ldr	r3, [r0, #8]
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a1fe6:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 80a1fe8:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a1fea:	460e      	mov	r6, r1
 80a1fec:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80a1fee:	d014      	beq.n	80a201a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 80a1ff0:	f7ff ffd0 	bl	80a1f94 <_ZN8FatCache4syncEv>
 80a1ff4:	b908      	cbnz	r0, 80a1ffa <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
 80a1ff6:	2000      	movs	r0, #0
 80a1ff8:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 80a1ffa:	076b      	lsls	r3, r5, #29
 80a1ffc:	d503      	bpl.n	80a2006 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 80a1ffe:	2300      	movs	r3, #0
 80a2000:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 80a2002:	60a6      	str	r6, [r4, #8]
 80a2004:	e009      	b.n	80a201a <_ZN8FatCache4readEmh+0x38>
 80a2006:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 80a2008:	f104 020c 	add.w	r2, r4, #12
 80a200c:	4631      	mov	r1, r6
 80a200e:	6818      	ldr	r0, [r3, #0]
 80a2010:	f000 fada 	bl	80a25c8 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80a2014:	2800      	cmp	r0, #0
 80a2016:	d1f2      	bne.n	80a1ffe <_ZN8FatCache4readEmh+0x1c>
 80a2018:	e7ed      	b.n	80a1ff6 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 80a201a:	4620      	mov	r0, r4
 80a201c:	7823      	ldrb	r3, [r4, #0]
 80a201e:	f005 0503 	and.w	r5, r5, #3
 80a2022:	431d      	orrs	r5, r3
 80a2024:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
 80a2028:	bd70      	pop	{r4, r5, r6, pc}

080a202a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 80a202a:	7983      	ldrb	r3, [r0, #6]
 80a202c:	3902      	subs	r1, #2
 80a202e:	6940      	ldr	r0, [r0, #20]
 80a2030:	4099      	lsls	r1, r3
}
 80a2032:	4408      	add	r0, r1
 80a2034:	4770      	bx	lr

080a2036 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a2036:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80a2038:	b570      	push	{r4, r5, r6, lr}
 80a203a:	4605      	mov	r5, r0
 80a203c:	460c      	mov	r4, r1
 80a203e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a2040:	d802      	bhi.n	80a2048 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 80a2042:	f04f 30ff 	mov.w	r0, #4294967295
 80a2046:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a2048:	69c3      	ldr	r3, [r0, #28]
 80a204a:	4299      	cmp	r1, r3
 80a204c:	d8f9      	bhi.n	80a2042 <_ZN9FatVolume6fatGetEmPm+0xc>
 80a204e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 80a2050:	2b20      	cmp	r3, #32
 80a2052:	d110      	bne.n	80a2076 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 80a2054:	6981      	ldr	r1, [r0, #24]
 80a2056:	2202      	movs	r2, #2
 80a2058:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80a205c:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a2060:	f7ff ffbf 	bl	80a1fe2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80a2064:	2800      	cmp	r0, #0
 80a2066:	d0ec      	beq.n	80a2042 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 80a2068:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80a206c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80a2070:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 80a2074:	e00f      	b.n	80a2096 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
 80a2076:	2b10      	cmp	r3, #16
 80a2078:	d1e3      	bne.n	80a2042 <_ZN9FatVolume6fatGetEmPm+0xc>
 80a207a:	6983      	ldr	r3, [r0, #24]
 80a207c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80a2080:	2202      	movs	r2, #2
 80a2082:	4419      	add	r1, r3
 80a2084:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a2088:	f7ff ffab 	bl	80a1fe2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80a208c:	2800      	cmp	r0, #0
 80a208e:	d0d8      	beq.n	80a2042 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 80a2090:	b2e4      	uxtb	r4, r4
 80a2092:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 80a2096:	69ea      	ldr	r2, [r5, #28]
 80a2098:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 80a209a:	bf9a      	itte	ls
 80a209c:	6033      	strls	r3, [r6, #0]
  return 1;
 80a209e:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 80a20a0:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 80a20a2:	bd70      	pop	{r4, r5, r6, pc}

080a20a4 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a20a4:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80a20a6:	b538      	push	{r3, r4, r5, lr}
 80a20a8:	460c      	mov	r4, r1
 80a20aa:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a20ac:	d801      	bhi.n	80a20b2 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 80a20ae:	2000      	movs	r0, #0
 80a20b0:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a20b2:	69c3      	ldr	r3, [r0, #28]
 80a20b4:	4299      	cmp	r1, r3
 80a20b6:	d8fa      	bhi.n	80a20ae <_ZN9FatVolume6fatPutEmm+0xa>
 80a20b8:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 80a20ba:	2b20      	cmp	r3, #32
 80a20bc:	d10e      	bne.n	80a20dc <_ZN9FatVolume6fatPutEmm+0x38>
 80a20be:	6981      	ldr	r1, [r0, #24]
 80a20c0:	2203      	movs	r2, #3
 80a20c2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80a20c6:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a20ca:	f7ff ff8a 	bl	80a1fe2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80a20ce:	2800      	cmp	r0, #0
 80a20d0:	d0ed      	beq.n	80a20ae <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 80a20d2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80a20d6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 80a20da:	e00f      	b.n	80a20fc <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
 80a20dc:	2b10      	cmp	r3, #16
 80a20de:	d1e6      	bne.n	80a20ae <_ZN9FatVolume6fatPutEmm+0xa>
 80a20e0:	6983      	ldr	r3, [r0, #24]
 80a20e2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80a20e6:	2203      	movs	r2, #3
 80a20e8:	4419      	add	r1, r3
 80a20ea:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a20ee:	f7ff ff78 	bl	80a1fe2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80a20f2:	2800      	cmp	r0, #0
 80a20f4:	d0db      	beq.n	80a20ae <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 80a20f6:	b2e4      	uxtb	r4, r4
 80a20f8:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 80a20fc:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 80a20fe:	bd38      	pop	{r3, r4, r5, pc}

080a2100 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80a2100:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 80a2104:	68c4      	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80a2106:	4605      	mov	r5, r0
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 80a2108:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80a210a:	460e      	mov	r6, r1
 80a210c:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 80a210e:	d207      	bcs.n	80a2120 <_ZN9FatVolume15allocateClusterEmPm+0x20>
 80a2110:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
 80a2112:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
 80a2114:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
 80a2116:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 80a2118:	429c      	cmp	r4, r3
 80a211a:	d903      	bls.n	80a2124 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
 80a211c:	b9cf      	cbnz	r7, 80a2152 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
 80a211e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
 80a2120:	2701      	movs	r7, #1
 80a2122:	e7f7      	b.n	80a2114 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
 80a2124:	42a6      	cmp	r6, r4
 80a2126:	d014      	beq.n	80a2152 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 80a2128:	aa01      	add	r2, sp, #4
 80a212a:	4621      	mov	r1, r4
 80a212c:	4628      	mov	r0, r5
 80a212e:	f7ff ff82 	bl	80a2036 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80a2132:	2800      	cmp	r0, #0
 80a2134:	db0d      	blt.n	80a2152 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 80a2136:	d0ed      	beq.n	80a2114 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 80a2138:	9b01      	ldr	r3, [sp, #4]
 80a213a:	2b00      	cmp	r3, #0
 80a213c:	d1ea      	bne.n	80a2114 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
 80a213e:	b107      	cbz	r7, 80a2142 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
 80a2140:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 80a2142:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80a2146:	4621      	mov	r1, r4
 80a2148:	4628      	mov	r0, r5
 80a214a:	f7ff ffab 	bl	80a20a4 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
 80a214e:	4607      	mov	r7, r0
 80a2150:	b908      	cbnz	r0, 80a2156 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 80a2152:	2700      	movs	r7, #0
 80a2154:	e00b      	b.n	80a216e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 80a2156:	b916      	cbnz	r6, 80a215e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
 80a2158:	f8c8 4000 	str.w	r4, [r8]
  return true;
 80a215c:	e007      	b.n	80a216e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
 80a215e:	4622      	mov	r2, r4
 80a2160:	4631      	mov	r1, r6
 80a2162:	4628      	mov	r0, r5
 80a2164:	f7ff ff9e 	bl	80a20a4 <_ZN9FatVolume6fatPutEmm>
 80a2168:	2800      	cmp	r0, #0
 80a216a:	d1f5      	bne.n	80a2158 <_ZN9FatVolume15allocateClusterEmPm+0x58>
 80a216c:	e7f1      	b.n	80a2152 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
 80a216e:	4638      	mov	r0, r7
 80a2170:	b002      	add	sp, #8
 80a2172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2176 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 80a2176:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a2178:	4605      	mov	r5, r0
 80a217a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 80a217c:	aa01      	add	r2, sp, #4
 80a217e:	4621      	mov	r1, r4
 80a2180:	4628      	mov	r0, r5
 80a2182:	f7ff ff58 	bl	80a2036 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80a2186:	1e06      	subs	r6, r0, #0
 80a2188:	da01      	bge.n	80a218e <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 80a218a:	2000      	movs	r0, #0
 80a218c:	e00f      	b.n	80a21ae <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 80a218e:	2200      	movs	r2, #0
 80a2190:	4621      	mov	r1, r4
 80a2192:	4628      	mov	r0, r5
 80a2194:	f7ff ff86 	bl	80a20a4 <_ZN9FatVolume6fatPutEmm>
 80a2198:	2800      	cmp	r0, #0
 80a219a:	d0f6      	beq.n	80a218a <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 80a219c:	68eb      	ldr	r3, [r5, #12]
 80a219e:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
 80a21a0:	bf9c      	itt	ls
 80a21a2:	f104 34ff 	addls.w	r4, r4, #4294967295
 80a21a6:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
 80a21a8:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 80a21aa:	2e00      	cmp	r6, #0
 80a21ac:	d1e6      	bne.n	80a217c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 80a21ae:	b002      	add	sp, #8
 80a21b0:	bd70      	pop	{r4, r5, r6, pc}

080a21b2 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 80a21b2:	b570      	push	{r4, r5, r6, lr}
 80a21b4:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 80a21b6:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80a21b8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 80a21ba:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80a21bc:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80a21c0:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 80a21c2:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80a21c4:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80a21c6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80a21ca:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80a21cc:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80a21d0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 80a21d4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
 80a21d8:	b1a1      	cbz	r1, 80a2204 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 80a21da:	2904      	cmp	r1, #4
 80a21dc:	d85d      	bhi.n	80a229a <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a21de:	4611      	mov	r1, r2
 80a21e0:	3024      	adds	r0, #36	; 0x24
 80a21e2:	f7ff fefe 	bl	80a1fe2 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80a21e6:	2800      	cmp	r0, #0
 80a21e8:	d057      	beq.n	80a229a <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 80a21ea:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 80a21ee:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 80a21f2:	065b      	lsls	r3, r3, #25
 80a21f4:	d151      	bne.n	80a229a <_ZN9FatVolume4initEh+0xe8>
 80a21f6:	351b      	adds	r5, #27
 80a21f8:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80a21fc:	f8d5 5006 	ldr.w	r5, [r5, #6]
 80a2200:	2d00      	cmp	r5, #0
 80a2202:	d04a      	beq.n	80a229a <_ZN9FatVolume4initEh+0xe8>
 80a2204:	2200      	movs	r2, #0
 80a2206:	4629      	mov	r1, r5
 80a2208:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a220c:	f7ff fee9 	bl	80a1fe2 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 80a2210:	2800      	cmp	r0, #0
 80a2212:	d042      	beq.n	80a229a <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 80a2214:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 80a2218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80a221c:	d13d      	bne.n	80a229a <_ZN9FatVolume4initEh+0xe8>
 80a221e:	7c03      	ldrb	r3, [r0, #16]
 80a2220:	2b02      	cmp	r3, #2
 80a2222:	d13a      	bne.n	80a229a <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
 80a2224:	89c3      	ldrh	r3, [r0, #14]
 80a2226:	2b00      	cmp	r3, #0
 80a2228:	d037      	beq.n	80a229a <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80a222a:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80a222c:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 80a222e:	1e4b      	subs	r3, r1, #1
 80a2230:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80a2232:	2300      	movs	r3, #0
 80a2234:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80a2236:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80a2238:	2301      	movs	r3, #1
 80a223a:	428b      	cmp	r3, r1
 80a223c:	d007      	beq.n	80a224e <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 80a223e:	3e01      	subs	r6, #1
 80a2240:	d02b      	beq.n	80a229a <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80a2242:	79a2      	ldrb	r2, [r4, #6]
 80a2244:	005b      	lsls	r3, r3, #1
 80a2246:	3201      	adds	r2, #1
 80a2248:	b2db      	uxtb	r3, r3
 80a224a:	71a2      	strb	r2, [r4, #6]
 80a224c:	e7f5      	b.n	80a223a <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 80a224e:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 80a2250:	b902      	cbnz	r2, 80a2254 <_ZN9FatVolume4initEh+0xa2>
 80a2252:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80a2254:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 80a2256:	89c6      	ldrh	r6, [r0, #14]
 80a2258:	442e      	add	r6, r5
 80a225a:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80a225c:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80a2260:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80a2264:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80a2266:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 80a2268:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 80a226c:	0152      	lsls	r2, r2, #5
 80a226e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 80a2272:	eb01 2262 	add.w	r2, r1, r2, asr #9
 80a2276:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 80a2278:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 80a227c:	b903      	cbnz	r3, 80a2280 <_ZN9FatVolume4initEh+0xce>
 80a227e:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 80a2280:	1aad      	subs	r5, r5, r2
 80a2282:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 80a2284:	79a5      	ldrb	r5, [r4, #6]
 80a2286:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 80a228a:	1c6b      	adds	r3, r5, #1
 80a228c:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 80a228e:	f640 73f4 	movw	r3, #4084	; 0xff4
 80a2292:	429d      	cmp	r5, r3
 80a2294:	d803      	bhi.n	80a229e <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
 80a2296:	230c      	movs	r3, #12
 80a2298:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 80a229a:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 80a229c:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 80a229e:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80a22a2:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 80a22a4:	bf89      	itett	hi
 80a22a6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 80a22a8:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 80a22aa:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 80a22ac:	2320      	movhi	r3, #32
 80a22ae:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 80a22b0:	2001      	movs	r0, #1

fail:
  return false;
}
 80a22b2:	bd70      	pop	{r4, r5, r6, pc}

080a22b4 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 80a22b4:	f000 bd22 	b.w	80a2cfc <HAL_Pin_Map>

080a22b8 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 80a22b8:	f000 bd20 	b.w	80a2cfc <HAL_Pin_Map>

080a22bc <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 80a22bc:	f000 bd1e 	b.w	80a2cfc <HAL_Pin_Map>

080a22c0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 80a22c0:	b570      	push	{r4, r5, r6, lr}
 80a22c2:	460e      	mov	r6, r1
 80a22c4:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a22c6:	f000 fd89 	bl	80a2ddc <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 80a22ca:	4c0c      	ldr	r4, [pc, #48]	; (80a22fc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 80a22cc:	6823      	ldr	r3, [r4, #0]
 80a22ce:	1ac0      	subs	r0, r0, r3
 80a22d0:	4b0b      	ldr	r3, [pc, #44]	; (80a2300 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 80a22d2:	4298      	cmp	r0, r3
 80a22d4:	d908      	bls.n	80a22e8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a22d6:	f000 fd89 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a22da:	4b0a      	ldr	r3, [pc, #40]	; (80a2304 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 80a22dc:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a22de:	f000 ff6b 	bl	80a31b8 <spark_process>
 80a22e2:	f000 fd7b 	bl	80a2ddc <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 80a22e6:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a22e8:	f000 fd80 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 80a22ec:	b280      	uxth	r0, r0
 80a22ee:	1b80      	subs	r0, r0, r6
}
 80a22f0:	42a8      	cmp	r0, r5
 80a22f2:	bfd4      	ite	le
 80a22f4:	2000      	movle	r0, #0
 80a22f6:	2001      	movgt	r0, #1
 80a22f8:	bd70      	pop	{r4, r5, r6, pc}
 80a22fa:	bf00      	nop
 80a22fc:	20001274 	.word	0x20001274
 80a2300:	000186a0 	.word	0x000186a0
 80a2304:	2000172c 	.word	0x2000172c

080a2308 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80a2308:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 80a230a:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80a230c:	4604      	mov	r4, r0
  if (!m_spiActive) {
 80a230e:	b94d      	cbnz	r5, 80a2324 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 80a2310:	6840      	ldr	r0, [r0, #4]
 80a2312:	f000 fa7d 	bl	80a2810 <_ZN14SdSpiAltDriver8activateEv>
 80a2316:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 80a2318:	4629      	mov	r1, r5
 80a231a:	7d18      	ldrb	r0, [r3, #20]
 80a231c:	f002 fb87 	bl	80a4a2e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 80a2320:	2301      	movs	r3, #1
 80a2322:	7223      	strb	r3, [r4, #8]
 80a2324:	bd38      	pop	{r3, r4, r5, pc}

080a2326 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80a2326:	b510      	push	{r4, lr}
  if (m_spiActive) {
 80a2328:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80a232a:	4604      	mov	r4, r0
  if (m_spiActive) {
 80a232c:	b16b      	cbz	r3, 80a234a <_ZN9SdSpiCard7spiStopEv+0x24>
 80a232e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
 80a2330:	2101      	movs	r1, #1
 80a2332:	7d18      	ldrb	r0, [r3, #20]
 80a2334:	f002 fb7b 	bl	80a4a2e <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a2338:	21ff      	movs	r1, #255	; 0xff
 80a233a:	6860      	ldr	r0, [r4, #4]
 80a233c:	f000 fa9a 	bl	80a2874 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
 80a2340:	6860      	ldr	r0, [r4, #4]
 80a2342:	f000 fa79 	bl	80a2838 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 80a2346:	2300      	movs	r3, #0
 80a2348:	7223      	strb	r3, [r4, #8]
 80a234a:	bd10      	pop	{r4, pc}

080a234c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80a234c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a234e:	4604      	mov	r4, r0
 80a2350:	460d      	mov	r5, r1
 80a2352:	4616      	mov	r6, r2
 80a2354:	f000 fd4a 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 80a2358:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a235a:	6860      	ldr	r0, [r4, #4]
 80a235c:	f000 fa6f 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
 80a2360:	28ff      	cmp	r0, #255	; 0xff
 80a2362:	7260      	strb	r0, [r4, #9]
 80a2364:	d109      	bne.n	80a237a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 80a2366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a236a:	4639      	mov	r1, r7
 80a236c:	4620      	mov	r0, r4
 80a236e:	f7ff ffa7 	bl	80a22c0 <_ZN9SdSpiCard10isTimedOutEtt>
 80a2372:	2800      	cmp	r0, #0
 80a2374:	d0f1      	beq.n	80a235a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a2376:	2355      	movs	r3, #85	; 0x55
 80a2378:	e00b      	b.n	80a2392 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
 80a237a:	28fe      	cmp	r0, #254	; 0xfe
 80a237c:	d001      	beq.n	80a2382 <_ZN9SdSpiCard8readDataEPhj+0x36>
 80a237e:	2350      	movs	r3, #80	; 0x50
 80a2380:	e007      	b.n	80a2392 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
 80a2382:	4632      	mov	r2, r6
 80a2384:	4629      	mov	r1, r5
 80a2386:	6860      	ldr	r0, [r4, #4]
 80a2388:	f000 fa5e 	bl	80a2848 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 80a238c:	7260      	strb	r0, [r4, #9]
 80a238e:	b130      	cbz	r0, 80a239e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a2390:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
 80a2392:	4620      	mov	r0, r4
 80a2394:	7023      	strb	r3, [r4, #0]
 80a2396:	f7ff ffc6 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a239a:	2000      	movs	r0, #0
}
 80a239c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a239e:	6860      	ldr	r0, [r4, #4]
 80a23a0:	f000 fa4d 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
 80a23a4:	6860      	ldr	r0, [r4, #4]
 80a23a6:	f000 fa4a 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
 80a23aa:	2001      	movs	r0, #1
 80a23ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a23ae <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 80a23ae:	b570      	push	{r4, r5, r6, lr}
 80a23b0:	4604      	mov	r4, r0
 80a23b2:	460e      	mov	r6, r1
 80a23b4:	f000 fd1a 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
 80a23b8:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 80a23ba:	4632      	mov	r2, r6
 80a23bc:	4629      	mov	r1, r5
 80a23be:	4620      	mov	r0, r4
 80a23c0:	f7ff ff7e 	bl	80a22c0 <_ZN9SdSpiCard10isTimedOutEtt>
 80a23c4:	b930      	cbnz	r0, 80a23d4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 80a23c6:	6860      	ldr	r0, [r4, #4]
 80a23c8:	f000 fa39 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 80a23cc:	28ff      	cmp	r0, #255	; 0xff
 80a23ce:	d1f4      	bne.n	80a23ba <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 80a23d0:	2001      	movs	r0, #1
 80a23d2:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
 80a23d4:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 80a23d6:	bd70      	pop	{r4, r5, r6, pc}

080a23d8 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80a23d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
 80a23da:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80a23dc:	4604      	mov	r4, r0
 80a23de:	460d      	mov	r5, r1
 80a23e0:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
 80a23e2:	b90b      	cbnz	r3, 80a23e8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 80a23e4:	f7ff ff90 	bl	80a2308 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
 80a23e8:	b125      	cbz	r5, 80a23f4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
 80a23ea:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a23ee:	4620      	mov	r0, r4
 80a23f0:	f7ff ffdd 	bl	80a23ae <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a23f4:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80a23f8:	6860      	ldr	r0, [r4, #4]
 80a23fa:	f000 fa3b 	bl	80a2874 <_ZN14SdSpiAltDriver4sendEh>
 80a23fe:	f10d 0607 	add.w	r6, sp, #7
 80a2402:	f10d 0703 	add.w	r7, sp, #3
 80a2406:	f816 1901 	ldrb.w	r1, [r6], #-1
 80a240a:	6860      	ldr	r0, [r4, #4]
 80a240c:	f000 fa32 	bl	80a2874 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
 80a2410:	42be      	cmp	r6, r7
 80a2412:	d1f8      	bne.n	80a2406 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80a2414:	2d00      	cmp	r5, #0
 80a2416:	bf0c      	ite	eq
 80a2418:	2195      	moveq	r1, #149	; 0x95
 80a241a:	2187      	movne	r1, #135	; 0x87
 80a241c:	6860      	ldr	r0, [r4, #4]
 80a241e:	f000 fa29 	bl	80a2874 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a2422:	6860      	ldr	r0, [r4, #4]
 80a2424:	f000 fa0b 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
 80a2428:	250b      	movs	r5, #11
 80a242a:	6860      	ldr	r0, [r4, #4]
 80a242c:	f000 fa07 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 80a2430:	0603      	lsls	r3, r0, #24
 80a2432:	7260      	strb	r0, [r4, #9]
 80a2434:	d503      	bpl.n	80a243e <_ZN9SdSpiCard11cardCommandEhm+0x66>
 80a2436:	3d01      	subs	r5, #1
 80a2438:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a243c:	d1f5      	bne.n	80a242a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
 80a243e:	b003      	add	sp, #12
 80a2440:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2442 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 80a2442:	b570      	push	{r4, r5, r6, lr}
 80a2444:	4604      	mov	r4, r0
 80a2446:	460d      	mov	r5, r1
 80a2448:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 80a244a:	2137      	movs	r1, #55	; 0x37
 80a244c:	2200      	movs	r2, #0
 80a244e:	f7ff ffc3 	bl	80a23d8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80a2452:	4632      	mov	r2, r6
 80a2454:	4629      	mov	r1, r5
 80a2456:	4620      	mov	r0, r4
  }
 80a2458:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
 80a245c:	f7ff bfbc 	b.w	80a23d8 <_ZN9SdSpiCard11cardCommandEhm>

080a2460 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80a2460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 80a2464:	2500      	movs	r5, #0
 80a2466:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 80a2468:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 80a246a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
 80a246c:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80a246e:	4604      	mov	r4, r0
 80a2470:	4690      	mov	r8, r2
 80a2472:	461e      	mov	r6, r3
 80a2474:	f000 fcba 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
 80a2478:	4641      	mov	r1, r8
 80a247a:	4607      	mov	r7, r0
 80a247c:	6860      	ldr	r0, [r4, #4]
 80a247e:	f000 f9cb 	bl	80a2818 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 80a2482:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 80a2484:	4a4f      	ldr	r2, [pc, #316]	; (80a25c4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
 80a2486:	f04f 0801 	mov.w	r8, #1
 80a248a:	721d      	strb	r5, [r3, #8]
 80a248c:	60da      	str	r2, [r3, #12]
 80a248e:	745d      	strb	r5, [r3, #17]
 80a2490:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
 80a2494:	4620      	mov	r0, r4
 80a2496:	f7ff ff37 	bl	80a2308 <_ZN9SdSpiCard8spiStartEv>
 80a249a:	6863      	ldr	r3, [r4, #4]
 80a249c:	4641      	mov	r1, r8
 80a249e:	7d18      	ldrb	r0, [r3, #20]
 80a24a0:	f002 fac5 	bl	80a4a2e <digitalWrite>
 80a24a4:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a24a6:	21ff      	movs	r1, #255	; 0xff
 80a24a8:	6860      	ldr	r0, [r4, #4]
 80a24aa:	3d01      	subs	r5, #1
 80a24ac:	f000 f9e2 	bl	80a2874 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
 80a24b0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a24b4:	d1f7      	bne.n	80a24a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
 80a24b6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 80a24b8:	4629      	mov	r1, r5
 80a24ba:	7d18      	ldrb	r0, [r3, #20]
 80a24bc:	f002 fab7 	bl	80a4a2e <digitalWrite>
 80a24c0:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 80a24c2:	2200      	movs	r2, #0
 80a24c4:	4611      	mov	r1, r2
 80a24c6:	4620      	mov	r0, r4
 80a24c8:	f7ff ff86 	bl	80a23d8 <_ZN9SdSpiCard11cardCommandEhm>
 80a24cc:	2801      	cmp	r0, #1
 80a24ce:	4680      	mov	r8, r0
 80a24d0:	d012      	beq.n	80a24f8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
 80a24d2:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
 80a24d4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a24d8:	d101      	bne.n	80a24de <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a24da:	2320      	movs	r3, #32
 80a24dc:	e057      	b.n	80a258e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a24de:	21fd      	movs	r1, #253	; 0xfd
 80a24e0:	6860      	ldr	r0, [r4, #4]
 80a24e2:	f000 f9c7 	bl	80a2874 <_ZN14SdSpiAltDriver4sendEh>
 80a24e6:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a24ea:	6860      	ldr	r0, [r4, #4]
 80a24ec:	f000 f9a7 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
 80a24f0:	f1b8 0801 	subs.w	r8, r8, #1
 80a24f4:	d1f9      	bne.n	80a24ea <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
 80a24f6:	e7e4      	b.n	80a24c2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80a24f8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80a24fc:	2108      	movs	r1, #8
 80a24fe:	4620      	mov	r0, r4
 80a2500:	f7ff ff6a 	bl	80a23d8 <_ZN9SdSpiCard11cardCommandEhm>
 80a2504:	2805      	cmp	r0, #5
 80a2506:	d102      	bne.n	80a250e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80a2508:	f884 800a 	strb.w	r8, [r4, #10]
 80a250c:	e00f      	b.n	80a252e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 80a250e:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a2510:	6860      	ldr	r0, [r4, #4]
 80a2512:	f000 f994 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
 80a2516:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80a2518:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 80a251c:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80a251e:	d1f7      	bne.n	80a2510 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 80a2520:	28aa      	cmp	r0, #170	; 0xaa
 80a2522:	d102      	bne.n	80a252a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80a2524:	2302      	movs	r3, #2
 80a2526:	72a3      	strb	r3, [r4, #10]
 80a2528:	e001      	b.n	80a252e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a252a:	2325      	movs	r3, #37	; 0x25
 80a252c:	e02f      	b.n	80a258e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80a252e:	7aa3      	ldrb	r3, [r4, #10]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 80a2530:	b2bf      	uxth	r7, r7
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80a2532:	2b02      	cmp	r3, #2
 80a2534:	bf0c      	ite	eq
 80a2536:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 80a253a:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 80a253c:	462a      	mov	r2, r5
 80a253e:	2129      	movs	r1, #41	; 0x29
 80a2540:	4620      	mov	r0, r4
 80a2542:	f7ff ff7e 	bl	80a2442 <_ZN9SdSpiCard8cardAcmdEhm>
 80a2546:	4602      	mov	r2, r0
 80a2548:	b148      	cbz	r0, 80a255e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 80a254a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80a254e:	4639      	mov	r1, r7
 80a2550:	4620      	mov	r0, r4
 80a2552:	f7ff feb5 	bl	80a22c0 <_ZN9SdSpiCard10isTimedOutEtt>
 80a2556:	2800      	cmp	r0, #0
 80a2558:	d0f0      	beq.n	80a253c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
 80a255a:	2343      	movs	r3, #67	; 0x43
 80a255c:	e017      	b.n	80a258e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 80a255e:	7aa3      	ldrb	r3, [r4, #10]
 80a2560:	2b02      	cmp	r3, #2
 80a2562:	d00e      	beq.n	80a2582 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
 80a2564:	4620      	mov	r0, r4
 80a2566:	f7ff fede 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
 80a256a:	6863      	ldr	r3, [r4, #4]
 80a256c:	68b0      	ldr	r0, [r6, #8]
 80a256e:	7934      	ldrb	r4, [r6, #4]
 80a2570:	7b31      	ldrb	r1, [r6, #12]
 80a2572:	7b72      	ldrb	r2, [r6, #13]
 80a2574:	60d8      	str	r0, [r3, #12]
 80a2576:	721c      	strb	r4, [r3, #8]
 80a2578:	7419      	strb	r1, [r3, #16]
 80a257a:	745a      	strb	r2, [r3, #17]
  return true;
 80a257c:	2001      	movs	r0, #1
 80a257e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 80a2582:	213a      	movs	r1, #58	; 0x3a
 80a2584:	4620      	mov	r0, r4
 80a2586:	f7ff ff27 	bl	80a23d8 <_ZN9SdSpiCard11cardCommandEhm>
 80a258a:	b138      	cbz	r0, 80a259c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
 80a258c:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
 80a258e:	4620      	mov	r0, r4
 80a2590:	7023      	strb	r3, [r4, #0]
 80a2592:	f7ff fec8 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a2596:	2000      	movs	r0, #0
}
 80a2598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a259c:	6860      	ldr	r0, [r4, #4]
 80a259e:	f000 f94e 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 80a25a2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 80a25a6:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80a25a8:	bf04      	itt	eq
 80a25aa:	2303      	moveq	r3, #3
 80a25ac:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a25ae:	6860      	ldr	r0, [r4, #4]
 80a25b0:	f000 f945 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
 80a25b4:	6860      	ldr	r0, [r4, #4]
 80a25b6:	f000 f942 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
 80a25ba:	6860      	ldr	r0, [r4, #4]
 80a25bc:	f000 f93f 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
 80a25c0:	e7d0      	b.n	80a2564 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
 80a25c2:	bf00      	nop
 80a25c4:	0003d090 	.word	0x0003d090

080a25c8 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a25c8:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a25ca:	7a83      	ldrb	r3, [r0, #10]
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a25cc:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a25ce:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a25d0:	bf18      	it	ne
 80a25d2:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 80a25d4:	460a      	mov	r2, r1
 80a25d6:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a25d8:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 80a25da:	f7ff fefd 	bl	80a23d8 <_ZN9SdSpiCard11cardCommandEhm>
 80a25de:	b110      	cbz	r0, 80a25e6 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a25e0:	2330      	movs	r3, #48	; 0x30
 80a25e2:	7023      	strb	r3, [r4, #0]
 80a25e4:	e00b      	b.n	80a25fe <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 80a25e6:	4629      	mov	r1, r5
 80a25e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a25ec:	4620      	mov	r0, r4
 80a25ee:	f7ff fead 	bl	80a234c <_ZN9SdSpiCard8readDataEPhj>
 80a25f2:	4605      	mov	r5, r0
 80a25f4:	b118      	cbz	r0, 80a25fe <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
 80a25f6:	4620      	mov	r0, r4
 80a25f8:	f7ff fe95 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return true;
 80a25fc:	e003      	b.n	80a2606 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
 80a25fe:	4620      	mov	r0, r4
 80a2600:	f7ff fe91 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a2604:	2500      	movs	r5, #0
}
 80a2606:	4628      	mov	r0, r5
 80a2608:	bd38      	pop	{r3, r4, r5, pc}

080a260a <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80a260a:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80a260c:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80a260e:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80a2610:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a2612:	bf18      	it	ne
 80a2614:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 80a2616:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80a2618:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 80a261a:	f7ff fedd 	bl	80a23d8 <_ZN9SdSpiCard11cardCommandEhm>
 80a261e:	b130      	cbz	r0, 80a262e <_ZN9SdSpiCard9readStartEm+0x24>
 80a2620:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
 80a2622:	4620      	mov	r0, r4
 80a2624:	7023      	strb	r3, [r4, #0]
 80a2626:	f7ff fe7e 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a262a:	2000      	movs	r0, #0
 80a262c:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
 80a262e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80a2630:	bd10      	pop	{r4, pc}

080a2632 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80a2632:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 80a2634:	2200      	movs	r2, #0
 80a2636:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80a2638:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 80a263a:	f7ff fecd 	bl	80a23d8 <_ZN9SdSpiCard11cardCommandEhm>
 80a263e:	b130      	cbz	r0, 80a264e <_ZN9SdSpiCard8readStopEv+0x1c>
 80a2640:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
 80a2642:	4620      	mov	r0, r4
 80a2644:	7023      	strb	r3, [r4, #0]
 80a2646:	f7ff fe6e 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a264a:	2000      	movs	r0, #0
 80a264c:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
 80a264e:	4620      	mov	r0, r4
 80a2650:	f7ff fe69 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return true;
 80a2654:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80a2656:	bd10      	pop	{r4, pc}

080a2658 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 80a2658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a265a:	4605      	mov	r5, r0
 80a265c:	4616      	mov	r6, r2
 80a265e:	461f      	mov	r7, r3
  if (!readStart(block)) {
 80a2660:	f7ff ffd3 	bl	80a260a <_ZN9SdSpiCard9readStartEm>
 80a2664:	b198      	cbz	r0, 80a268e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 80a2666:	2400      	movs	r4, #0
 80a2668:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 80a266a:	429f      	cmp	r7, r3
 80a266c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 80a2670:	d908      	bls.n	80a2684 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 80a2672:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a2676:	4628      	mov	r0, r5
 80a2678:	f7ff fe68 	bl	80a234c <_ZN9SdSpiCard8readDataEPhj>
 80a267c:	3401      	adds	r4, #1
 80a267e:	2800      	cmp	r0, #0
 80a2680:	d1f2      	bne.n	80a2668 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 80a2682:	e004      	b.n	80a268e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 80a2684:	4628      	mov	r0, r5
}
 80a2686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 80a268a:	f7ff bfd2 	b.w	80a2632 <_ZN9SdSpiCard8readStopEv>
}
 80a268e:	2000      	movs	r0, #0
 80a2690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2692 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 80a2692:	b538      	push	{r3, r4, r5, lr}
 80a2694:	4604      	mov	r4, r0
 80a2696:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a2698:	6840      	ldr	r0, [r0, #4]
 80a269a:	f000 f8eb 	bl	80a2874 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 80a269e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a26a2:	4629      	mov	r1, r5
 80a26a4:	6860      	ldr	r0, [r4, #4]
 80a26a6:	f000 f8e9 	bl	80a287c <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a26aa:	21ff      	movs	r1, #255	; 0xff
 80a26ac:	6860      	ldr	r0, [r4, #4]
 80a26ae:	f000 f8e1 	bl	80a2874 <_ZN14SdSpiAltDriver4sendEh>
 80a26b2:	21ff      	movs	r1, #255	; 0xff
 80a26b4:	6860      	ldr	r0, [r4, #4]
 80a26b6:	f000 f8dd 	bl	80a2874 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a26ba:	6860      	ldr	r0, [r4, #4]
 80a26bc:	f000 f8bf 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 80a26c0:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 80a26c2:	f000 001f 	and.w	r0, r0, #31
 80a26c6:	2805      	cmp	r0, #5
 80a26c8:	d006      	beq.n	80a26d8 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a26ca:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 80a26cc:	4620      	mov	r0, r4
 80a26ce:	7023      	strb	r3, [r4, #0]
 80a26d0:	f7ff fe29 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a26d4:	2000      	movs	r0, #0
 80a26d6:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 80a26d8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80a26da:	bd38      	pop	{r3, r4, r5, pc}

080a26dc <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a26dc:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a26de:	7a83      	ldrb	r3, [r0, #10]
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a26e0:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a26e2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a26e4:	bf18      	it	ne
 80a26e6:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 80a26e8:	460a      	mov	r2, r1
 80a26ea:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a26ec:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 80a26ee:	f7ff fe73 	bl	80a23d8 <_ZN9SdSpiCard11cardCommandEhm>
 80a26f2:	4606      	mov	r6, r0
 80a26f4:	b108      	cbz	r0, 80a26fa <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 80a26f6:	2332      	movs	r3, #50	; 0x32
 80a26f8:	e01d      	b.n	80a2736 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 80a26fa:	462a      	mov	r2, r5
 80a26fc:	21fe      	movs	r1, #254	; 0xfe
 80a26fe:	4620      	mov	r0, r4
 80a2700:	f7ff ffc7 	bl	80a2692 <_ZN9SdSpiCard9writeDataEhPKh>
 80a2704:	b1c0      	cbz	r0, 80a2738 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a2706:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80a270a:	4620      	mov	r0, r4
 80a270c:	f7ff fe4f 	bl	80a23ae <_ZN9SdSpiCard11waitNotBusyEt>
 80a2710:	4605      	mov	r5, r0
 80a2712:	b908      	cbnz	r0, 80a2718 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
 80a2714:	235a      	movs	r3, #90	; 0x5a
 80a2716:	e00e      	b.n	80a2736 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
 80a2718:	4632      	mov	r2, r6
 80a271a:	210d      	movs	r1, #13
 80a271c:	4620      	mov	r0, r4
 80a271e:	f7ff fe5b 	bl	80a23d8 <_ZN9SdSpiCard11cardCommandEhm>
 80a2722:	b938      	cbnz	r0, 80a2734 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a2724:	6860      	ldr	r0, [r4, #4]
 80a2726:	f000 f88a 	bl	80a283e <_ZN14SdSpiAltDriver7receiveEv>
 80a272a:	b918      	cbnz	r0, 80a2734 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
 80a272c:	4620      	mov	r0, r4
 80a272e:	f7ff fdfa 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return true;
 80a2732:	e005      	b.n	80a2740 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a2734:	2329      	movs	r3, #41	; 0x29
 80a2736:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
 80a2738:	4620      	mov	r0, r4
 80a273a:	f7ff fdf4 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a273e:	2500      	movs	r5, #0
}
 80a2740:	4628      	mov	r0, r5
 80a2742:	bd70      	pop	{r4, r5, r6, pc}

080a2744 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 80a2744:	b538      	push	{r3, r4, r5, lr}
 80a2746:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a2748:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 80a274c:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a274e:	f7ff fe2e 	bl	80a23ae <_ZN9SdSpiCard11waitNotBusyEt>
 80a2752:	b910      	cbnz	r0, 80a275a <_ZN9SdSpiCard9writeDataEPKh+0x16>
 80a2754:	235b      	movs	r3, #91	; 0x5b
 80a2756:	7023      	strb	r3, [r4, #0]
 80a2758:	e005      	b.n	80a2766 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 80a275a:	462a      	mov	r2, r5
 80a275c:	21fc      	movs	r1, #252	; 0xfc
 80a275e:	4620      	mov	r0, r4
 80a2760:	f7ff ff97 	bl	80a2692 <_ZN9SdSpiCard9writeDataEhPKh>
 80a2764:	b918      	cbnz	r0, 80a276e <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
 80a2766:	4620      	mov	r0, r4
 80a2768:	f7ff fddd 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a276c:	2000      	movs	r0, #0
}
 80a276e:	bd38      	pop	{r3, r4, r5, pc}

080a2770 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80a2770:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a2772:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80a2774:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a2776:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a2778:	bf18      	it	ne
 80a277a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 80a277c:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80a277e:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 80a2780:	f7ff fe2a 	bl	80a23d8 <_ZN9SdSpiCard11cardCommandEhm>
 80a2784:	b130      	cbz	r0, 80a2794 <_ZN9SdSpiCard10writeStartEm+0x24>
 80a2786:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 80a2788:	4620      	mov	r0, r4
 80a278a:	7023      	strb	r3, [r4, #0]
 80a278c:	f7ff fdcb 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a2790:	2000      	movs	r0, #0
 80a2792:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 80a2794:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80a2796:	bd10      	pop	{r4, pc}

080a2798 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 80a2798:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a279a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 80a279e:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a27a0:	f7ff fe05 	bl	80a23ae <_ZN9SdSpiCard11waitNotBusyEt>
 80a27a4:	4605      	mov	r5, r0
 80a27a6:	b120      	cbz	r0, 80a27b2 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a27a8:	21fd      	movs	r1, #253	; 0xfd
 80a27aa:	6860      	ldr	r0, [r4, #4]
 80a27ac:	f000 f862 	bl	80a2874 <_ZN14SdSpiAltDriver4sendEh>
 80a27b0:	e001      	b.n	80a27b6 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a27b2:	2356      	movs	r3, #86	; 0x56
 80a27b4:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 80a27b6:	4620      	mov	r0, r4
 80a27b8:	f7ff fdb5 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 80a27bc:	4628      	mov	r0, r5
 80a27be:	bd38      	pop	{r3, r4, r5, pc}

080a27c0 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80a27c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a27c2:	4605      	mov	r5, r0
 80a27c4:	4616      	mov	r6, r2
 80a27c6:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 80a27c8:	f7ff ffd2 	bl	80a2770 <_ZN9SdSpiCard10writeStartEm>
 80a27cc:	b170      	cbz	r0, 80a27ec <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 80a27ce:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80a27d0:	42bc      	cmp	r4, r7
 80a27d2:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80a27d6:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80a27d8:	d004      	beq.n	80a27e4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 80a27da:	f7ff ffb3 	bl	80a2744 <_ZN9SdSpiCard9writeDataEPKh>
 80a27de:	b128      	cbz	r0, 80a27ec <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80a27e0:	3401      	adds	r4, #1
 80a27e2:	e7f5      	b.n	80a27d0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
 80a27e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80a27e8:	f7ff bfd6 	b.w	80a2798 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
 80a27ec:	4628      	mov	r0, r5
 80a27ee:	f7ff fd9a 	bl	80a2326 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 80a27f2:	2000      	movs	r0, #0
 80a27f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a27f6 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 80a27f6:	f000 ba81 	b.w	80a2cfc <HAL_Pin_Map>

080a27fa <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 80a27fa:	f000 ba7f 	b.w	80a2cfc <HAL_Pin_Map>

080a27fe <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 80a27fe:	f000 ba7d 	b.w	80a2cfc <HAL_Pin_Map>
	...

080a2804 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80a2804:	4b01      	ldr	r3, [pc, #4]	; (80a280c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80a2806:	2201      	movs	r2, #1
 80a2808:	701a      	strb	r2, [r3, #0]
 80a280a:	4770      	bx	lr
 80a280c:	20001278 	.word	0x20001278

080a2810 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 80a2810:	1d01      	adds	r1, r0, #4
 80a2812:	6800      	ldr	r0, [r0, #0]
 80a2814:	f000 bd62 	b.w	80a32dc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

080a2818 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 80a2818:	b510      	push	{r4, lr}
 80a281a:	4604      	mov	r4, r0
  m_csPin = csPin;
 80a281c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 80a281e:	6800      	ldr	r0, [r0, #0]
 80a2820:	f000 fd3e 	bl	80a32a0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 80a2824:	7d20      	ldrb	r0, [r4, #20]
 80a2826:	2101      	movs	r1, #1
 80a2828:	f002 f8f0 	bl	80a4a0c <pinMode>
  digitalWrite(m_csPin, HIGH);
 80a282c:	7d20      	ldrb	r0, [r4, #20]
 80a282e:	2101      	movs	r1, #1
}
 80a2830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
 80a2834:	f002 b8fb 	b.w	80a4a2e <digitalWrite>

080a2838 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 80a2838:	6800      	ldr	r0, [r0, #0]
 80a283a:	f000 bd36 	b.w	80a32aa <_ZN8SPIClass14endTransactionEv>

080a283e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 80a283e:	21ff      	movs	r1, #255	; 0xff
 80a2840:	6800      	ldr	r0, [r0, #0]
 80a2842:	f000 bdbb 	b.w	80a33bc <_ZN8SPIClass8transferEh>
	...

080a2848 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 80a2848:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a284a:	4b08      	ldr	r3, [pc, #32]	; (80a286c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a284c:	2500      	movs	r5, #0
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a284e:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a2850:	4c07      	ldr	r4, [pc, #28]	; (80a2870 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a2852:	4613      	mov	r3, r2
 80a2854:	6800      	ldr	r0, [r0, #0]
 80a2856:	460a      	mov	r2, r1
 80a2858:	4629      	mov	r1, r5
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a285a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a285c:	f000 fdb4 	bl	80a33c8 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 80a2860:	7823      	ldrb	r3, [r4, #0]
 80a2862:	2b00      	cmp	r3, #0
 80a2864:	d0fc      	beq.n	80a2860 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 80a2866:	2000      	movs	r0, #0
 80a2868:	b003      	add	sp, #12
 80a286a:	bd30      	pop	{r4, r5, pc}
 80a286c:	080a2805 	.word	0x080a2805
 80a2870:	20001278 	.word	0x20001278

080a2874 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 80a2874:	6800      	ldr	r0, [r0, #0]
 80a2876:	f000 bda1 	b.w	80a33bc <_ZN8SPIClass8transferEh>
	...

080a287c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 80a287c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80a287e:	4b07      	ldr	r3, [pc, #28]	; (80a289c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a2880:	2500      	movs	r5, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80a2882:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a2884:	4c06      	ldr	r4, [pc, #24]	; (80a28a0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80a2886:	4613      	mov	r3, r2
 80a2888:	6800      	ldr	r0, [r0, #0]
 80a288a:	462a      	mov	r2, r5
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a288c:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80a288e:	f000 fd9b 	bl	80a33c8 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 80a2892:	7823      	ldrb	r3, [r4, #0]
 80a2894:	2b00      	cmp	r3, #0
 80a2896:	d0fc      	beq.n	80a2892 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
 80a2898:	b003      	add	sp, #12
 80a289a:	bd30      	pop	{r4, r5, pc}
 80a289c:	080a2805 	.word	0x080a2805
 80a28a0:	20001278 	.word	0x20001278

080a28a4 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 80a28a4:	f000 ba2a 	b.w	80a2cfc <HAL_Pin_Map>

080a28a8 <_ZL9date2daysthh>:

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
 80a28a8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
// utility code, some of this could be exposed in the DateTime API if needed

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
 80a28ac:	b530      	push	{r4, r5, lr}
    if (y >= 2000)
        y -= 2000;
 80a28ae:	bf28      	it	cs
 80a28b0:	f5a0 60fa 	subcs.w	r0, r0, #2000	; 0x7d0
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
        days += pgm_read_byte(daysInMonth + i - 1);
 80a28b4:	4d10      	ldr	r5, [pc, #64]	; (80a28f8 <_ZL9date2daysthh+0x50>)
const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
 80a28b6:	bf28      	it	cs
 80a28b8:	b280      	uxthcs	r0, r0
    uint16_t days = d;
 80a28ba:	b292      	uxth	r2, r2
 80a28bc:	2300      	movs	r3, #0
 80a28be:	3301      	adds	r3, #1
    for (uint8_t i = 1; i < m; ++i)
 80a28c0:	b2dc      	uxtb	r4, r3
 80a28c2:	42a1      	cmp	r1, r4
 80a28c4:	d905      	bls.n	80a28d2 <_ZL9date2daysthh+0x2a>
        days += pgm_read_byte(daysInMonth + i - 1);
 80a28c6:	18ec      	adds	r4, r5, r3
 80a28c8:	f814 4c01 	ldrb.w	r4, [r4, #-1]
 80a28cc:	4422      	add	r2, r4
 80a28ce:	b292      	uxth	r2, r2
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
 80a28d0:	e7f5      	b.n	80a28be <_ZL9date2daysthh+0x16>
        days += pgm_read_byte(daysInMonth + i - 1);
    if (m > 2 && y % 4 == 0)
 80a28d2:	2902      	cmp	r1, #2
 80a28d4:	d903      	bls.n	80a28de <_ZL9date2daysthh+0x36>
 80a28d6:	0783      	lsls	r3, r0, #30
        ++days;
 80a28d8:	bf04      	itt	eq
 80a28da:	3201      	addeq	r2, #1
 80a28dc:	b292      	uxtheq	r2, r2
    return days + 365 * y + (y + 3) / 4 - 1;
 80a28de:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 80a28e2:	1cc1      	adds	r1, r0, #3
 80a28e4:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80a28e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80a28ec:	1e43      	subs	r3, r0, #1
 80a28ee:	eb03 00a1 	add.w	r0, r3, r1, asr #2
 80a28f2:	4410      	add	r0, r2
}
 80a28f4:	b280      	uxth	r0, r0
 80a28f6:	bd30      	pop	{r4, r5, pc}
 80a28f8:	080a61cf 	.word	0x080a61cf

080a28fc <_ZL6conv2dPKc>:
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    uint8_t v = 0;
    if ('0' <= *p && *p <= '9')
 80a28fc:	7803      	ldrb	r3, [r0, #0]
        v = *p - '0';
    return 10 * v + *++p - '0';
 80a28fe:	7840      	ldrb	r0, [r0, #1]
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    uint8_t v = 0;
    if ('0' <= *p && *p <= '9')
 80a2900:	3b30      	subs	r3, #48	; 0x30
 80a2902:	b2db      	uxtb	r3, r3
  mm(copy.mm),
  ss(copy.ss)
{}

static uint8_t conv2d(const char* p) {
    uint8_t v = 0;
 80a2904:	2b0a      	cmp	r3, #10
 80a2906:	bf28      	it	cs
 80a2908:	2300      	movcs	r3, #0
    if ('0' <= *p && *p <= '9')
        v = *p - '0';
    return 10 * v + *++p - '0';
 80a290a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a290e:	3830      	subs	r0, #48	; 0x30
 80a2910:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 80a2914:	b2c0      	uxtb	r0, r0
 80a2916:	4770      	bx	lr

080a2918 <_ZL18write_i2c_registerhhh.constprop.7>:

  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
 80a2918:	b538      	push	{r3, r4, r5, lr}
 80a291a:	460c      	mov	r4, r1
 80a291c:	4605      	mov	r5, r0
  Wire.beginTransmission(addr);
 80a291e:	f002 f8db 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2922:	2168      	movs	r1, #104	; 0x68
 80a2924:	f001 ff6f 	bl	80a4806 <_ZN7TwoWire17beginTransmissionEh>
  Wire._I2C_WRITE((byte)reg);
 80a2928:	f002 f8d6 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a292c:	6803      	ldr	r3, [r0, #0]
 80a292e:	4629      	mov	r1, r5
 80a2930:	689b      	ldr	r3, [r3, #8]
 80a2932:	4798      	blx	r3
  Wire._I2C_WRITE((byte)val);
 80a2934:	f002 f8d0 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2938:	6803      	ldr	r3, [r0, #0]
 80a293a:	4621      	mov	r1, r4
 80a293c:	689b      	ldr	r3, [r3, #8]
 80a293e:	4798      	blx	r3
  Wire.endTransmission();
 80a2940:	f002 f8ca 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
}
 80a2944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
 80a2948:	f001 bf68 	b.w	80a481c <_ZN7TwoWire15endTransmissionEv>

080a294c <_ZL17read_i2c_registerhh.constprop.8>:
 #define _I2C_WRITE send
 #define _I2C_READ  receive
#endif


static uint8_t read_i2c_register(uint8_t addr, uint8_t reg) {
 80a294c:	b510      	push	{r4, lr}
 80a294e:	4604      	mov	r4, r0
  Wire.beginTransmission(addr);
 80a2950:	f002 f8c2 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2954:	2168      	movs	r1, #104	; 0x68
 80a2956:	f001 ff56 	bl	80a4806 <_ZN7TwoWire17beginTransmissionEh>
  Wire._I2C_WRITE((byte)reg);
 80a295a:	f002 f8bd 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a295e:	6803      	ldr	r3, [r0, #0]
 80a2960:	4621      	mov	r1, r4
 80a2962:	689b      	ldr	r3, [r3, #8]
 80a2964:	4798      	blx	r3
  Wire.endTransmission();
 80a2966:	f002 f8b7 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a296a:	f001 ff57 	bl	80a481c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(addr, (byte)1);
 80a296e:	f002 f8b3 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2972:	2201      	movs	r2, #1
 80a2974:	2168      	movs	r1, #104	; 0x68
 80a2976:	f001 ff3e 	bl	80a47f6 <_ZN7TwoWire11requestFromEhh>
  return Wire._I2C_READ();
 80a297a:	f002 f8ad 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a297e:	6803      	ldr	r3, [r0, #0]
 80a2980:	695b      	ldr	r3, [r3, #20]
 80a2982:	4798      	blx	r3
}
 80a2984:	b2c0      	uxtb	r0, r0
 80a2986:	bd10      	pop	{r4, pc}

080a2988 <_ZN8DateTimeC1Em>:
////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970
 80a2988:	4b23      	ldr	r3, [pc, #140]	; (80a2a18 <_ZN8DateTimeC1Em+0x90>)

    ss = t % 60;
 80a298a:	223c      	movs	r2, #60	; 0x3c
////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970
 80a298c:	440b      	add	r3, r1

////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
 80a298e:	b530      	push	{r4, r5, lr}
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970

    ss = t % 60;
 80a2990:	fbb3 f4f2 	udiv	r4, r3, r2
 80a2994:	fb02 3114 	mls	r1, r2, r4, r3
 80a2998:	7141      	strb	r1, [r0, #5]
    t /= 60;
    mm = t % 60;
 80a299a:	fbb4 f1f2 	udiv	r1, r4, r2
 80a299e:	fb02 4211 	mls	r2, r2, r1, r4
 80a29a2:	7102      	strb	r2, [r0, #4]
    t /= 60;
    hh = t % 24;
 80a29a4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80a29a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80a29ac:	2418      	movs	r4, #24
 80a29ae:	fbb2 f1f4 	udiv	r1, r2, r4
 80a29b2:	fb04 2211 	mls	r2, r4, r1, r2
 80a29b6:	70c2      	strb	r2, [r0, #3]
    uint16_t days = t / 24;
 80a29b8:	4a18      	ldr	r2, [pc, #96]	; (80a2a1c <_ZN8DateTimeC1Em+0x94>)
 80a29ba:	fbb3 f3f2 	udiv	r3, r3, r2
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
 80a29be:	2200      	movs	r2, #0
    ss = t % 60;
    t /= 60;
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
 80a29c0:	b29b      	uxth	r3, r3
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
 80a29c2:	7002      	strb	r2, [r0, #0]
        leap = yOff % 4 == 0;
 80a29c4:	7801      	ldrb	r1, [r0, #0]
 80a29c6:	f011 0403 	ands.w	r4, r1, #3
 80a29ca:	bf0c      	ite	eq
 80a29cc:	2201      	moveq	r2, #1
 80a29ce:	2200      	movne	r2, #0
        if (days < 365 + leap)
 80a29d0:	f502 75b6 	add.w	r5, r2, #364	; 0x16c
 80a29d4:	429d      	cmp	r5, r3
 80a29d6:	da07      	bge.n	80a29e8 <_ZN8DateTimeC1Em+0x60>
            break;
        days -= 365 + leap;
 80a29d8:	f5c2 427e 	rsb	r2, r2, #65024	; 0xfe00
 80a29dc:	3293      	adds	r2, #147	; 0x93
 80a29de:	4413      	add	r3, r2
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
 80a29e0:	3101      	adds	r1, #1
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
 80a29e2:	b29b      	uxth	r3, r3
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
 80a29e4:	7001      	strb	r1, [r0, #0]
 80a29e6:	e7ed      	b.n	80a29c4 <_ZN8DateTimeC1Em+0x3c>
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
 80a29e8:	2201      	movs	r2, #1
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
 80a29ea:	4d0d      	ldr	r5, [pc, #52]	; (80a2a20 <_ZN8DateTimeC1Em+0x98>)
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
 80a29ec:	7042      	strb	r2, [r0, #1]
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
 80a29ee:	7841      	ldrb	r1, [r0, #1]
 80a29f0:	186a      	adds	r2, r5, r1
 80a29f2:	f812 2c01 	ldrb.w	r2, [r2, #-1]
        if (leap && m == 2)
 80a29f6:	b91c      	cbnz	r4, 80a2a00 <_ZN8DateTimeC1Em+0x78>
 80a29f8:	2902      	cmp	r1, #2
            ++daysPerMonth;
 80a29fa:	bf04      	itt	eq
 80a29fc:	3201      	addeq	r2, #1
 80a29fe:	b2d2      	uxtbeq	r2, r2
        if (days < daysPerMonth)
 80a2a00:	b292      	uxth	r2, r2
 80a2a02:	4293      	cmp	r3, r2
 80a2a04:	d304      	bcc.n	80a2a10 <_ZN8DateTimeC1Em+0x88>
            break;
        days -= daysPerMonth;
 80a2a06:	1a9b      	subs	r3, r3, r2
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
 80a2a08:	3101      	adds	r1, #1
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
        if (leap && m == 2)
            ++daysPerMonth;
        if (days < daysPerMonth)
            break;
        days -= daysPerMonth;
 80a2a0a:	b29b      	uxth	r3, r3
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
 80a2a0c:	7041      	strb	r1, [r0, #1]
 80a2a0e:	e7ee      	b.n	80a29ee <_ZN8DateTimeC1Em+0x66>
            ++daysPerMonth;
        if (days < daysPerMonth)
            break;
        days -= daysPerMonth;
    }
    d = days + 1;
 80a2a10:	3301      	adds	r3, #1
 80a2a12:	7083      	strb	r3, [r0, #2]
}
 80a2a14:	bd30      	pop	{r4, r5, pc}
 80a2a16:	bf00      	nop
 80a2a18:	c792bc80 	.word	0xc792bc80
 80a2a1c:	00015180 	.word	0x00015180
 80a2a20:	080a61cf 	.word	0x080a61cf

080a2a24 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_>:
}

// A convenient constructor for using "the compiler's time":
// This version will save RAM by using PROGMEM to store it by using the F macro.
//   DateTime now (F(__DATE__), F(__TIME__));
DateTime::DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time) {
 80a2a24:	b530      	push	{r4, r5, lr}
 80a2a26:	460d      	mov	r5, r1
 80a2a28:	b085      	sub	sp, #20
 80a2a2a:	4604      	mov	r4, r0
    // sample input: date = "Dec 26 2009", time = "12:34:56"
    char buff[11];
    memcpy_P(buff, date, 11);
 80a2a2c:	6808      	ldr	r0, [r1, #0]
 80a2a2e:	6849      	ldr	r1, [r1, #4]
 80a2a30:	ab01      	add	r3, sp, #4
 80a2a32:	c303      	stmia	r3!, {r0, r1}
 80a2a34:	8928      	ldrh	r0, [r5, #8]
 80a2a36:	7aa9      	ldrb	r1, [r5, #10]
 80a2a38:	8018      	strh	r0, [r3, #0]
 80a2a3a:	7099      	strb	r1, [r3, #2]
    yOff = conv2d(buff + 9);
 80a2a3c:	f10d 000d 	add.w	r0, sp, #13
 80a2a40:	f7ff ff5c 	bl	80a28fc <_ZL6conv2dPKc>
    // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    switch (buff[0]) {
 80a2a44:	ad04      	add	r5, sp, #16
 80a2a46:	f815 3d0c 	ldrb.w	r3, [r5, #-12]!
//   DateTime now (F(__DATE__), F(__TIME__));
DateTime::DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time) {
    // sample input: date = "Dec 26 2009", time = "12:34:56"
    char buff[11];
    memcpy_P(buff, date, 11);
    yOff = conv2d(buff + 9);
 80a2a4a:	7020      	strb	r0, [r4, #0]
    // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    switch (buff[0]) {
 80a2a4c:	3b41      	subs	r3, #65	; 0x41
 80a2a4e:	2b12      	cmp	r3, #18
 80a2a50:	d830      	bhi.n	80a2ab4 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x90>
 80a2a52:	e8df f003 	tbb	[pc, r3]
 80a2a56:	2f19      	.short	0x2f19
 80a2a58:	172f2d2f 	.word	0x172f2d2f
 80a2a5c:	0a2f2f2f 	.word	0x0a2f2f2f
 80a2a60:	2b202f2f 	.word	0x2b202f2f
 80a2a64:	2f2f2f29 	.word	0x2f2f2f29
 80a2a68:	27          	.byte	0x27
 80a2a69:	00          	.byte	0x00
        case 'J': m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7); break;
 80a2a6a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80a2a6e:	2b61      	cmp	r3, #97	; 0x61
 80a2a70:	d006      	beq.n	80a2a80 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x5c>
 80a2a72:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2a76:	2b6e      	cmp	r3, #110	; 0x6e
 80a2a78:	bf0c      	ite	eq
 80a2a7a:	2306      	moveq	r3, #6
 80a2a7c:	2307      	movne	r3, #7
 80a2a7e:	e018      	b.n	80a2ab2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8e>
 80a2a80:	2301      	movs	r3, #1
 80a2a82:	e016      	b.n	80a2ab2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8e>
        case 'F': m = 2; break;
 80a2a84:	2302      	movs	r3, #2
 80a2a86:	e014      	b.n	80a2ab2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8e>
        case 'A': m = buff[2] == 'r' ? 4 : 8; break;
 80a2a88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2a8c:	2b72      	cmp	r3, #114	; 0x72
 80a2a8e:	bf0c      	ite	eq
 80a2a90:	2304      	moveq	r3, #4
 80a2a92:	2308      	movne	r3, #8
 80a2a94:	e00d      	b.n	80a2ab2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8e>
        case 'M': m = buff[2] == 'r' ? 3 : 5; break;
 80a2a96:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80a2a9a:	2b72      	cmp	r3, #114	; 0x72
 80a2a9c:	bf0c      	ite	eq
 80a2a9e:	2303      	moveq	r3, #3
 80a2aa0:	2305      	movne	r3, #5
 80a2aa2:	e006      	b.n	80a2ab2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8e>
        case 'S': m = 9; break;
 80a2aa4:	2309      	movs	r3, #9
 80a2aa6:	e004      	b.n	80a2ab2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8e>
        case 'O': m = 10; break;
 80a2aa8:	230a      	movs	r3, #10
 80a2aaa:	e002      	b.n	80a2ab2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8e>
        case 'N': m = 11; break;
 80a2aac:	230b      	movs	r3, #11
 80a2aae:	e000      	b.n	80a2ab2 <_ZN8DateTimeC1EPK19__FlashStringHelperS2_+0x8e>
        case 'D': m = 12; break;
 80a2ab0:	230c      	movs	r3, #12
 80a2ab2:	7063      	strb	r3, [r4, #1]
    }
    d = conv2d(buff + 4);
 80a2ab4:	a802      	add	r0, sp, #8
 80a2ab6:	f7ff ff21 	bl	80a28fc <_ZL6conv2dPKc>
    memcpy_P(buff, time, 8);
 80a2aba:	462b      	mov	r3, r5
        case 'S': m = 9; break;
        case 'O': m = 10; break;
        case 'N': m = 11; break;
        case 'D': m = 12; break;
    }
    d = conv2d(buff + 4);
 80a2abc:	70a0      	strb	r0, [r4, #2]
    memcpy_P(buff, time, 8);
 80a2abe:	6810      	ldr	r0, [r2, #0]
 80a2ac0:	6851      	ldr	r1, [r2, #4]
 80a2ac2:	c303      	stmia	r3!, {r0, r1}
    hh = conv2d(buff);
 80a2ac4:	4628      	mov	r0, r5
 80a2ac6:	f7ff ff19 	bl	80a28fc <_ZL6conv2dPKc>
 80a2aca:	70e0      	strb	r0, [r4, #3]
    mm = conv2d(buff + 3);
 80a2acc:	f10d 0007 	add.w	r0, sp, #7
 80a2ad0:	f7ff ff14 	bl	80a28fc <_ZL6conv2dPKc>
 80a2ad4:	7120      	strb	r0, [r4, #4]
    ss = conv2d(buff + 6);
 80a2ad6:	f10d 000a 	add.w	r0, sp, #10
 80a2ada:	f7ff ff0f 	bl	80a28fc <_ZL6conv2dPKc>
 80a2ade:	7160      	strb	r0, [r4, #5]
}
 80a2ae0:	4620      	mov	r0, r4
 80a2ae2:	b005      	add	sp, #20
 80a2ae4:	bd30      	pop	{r4, r5, pc}
	...

080a2ae8 <_ZNK8DateTime8unixtimeEv>:
uint8_t DateTime::dayOfTheWeek() const {    
    uint16_t day = date2days(yOff, m, d);
    return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
}

uint32_t DateTime::unixtime(void) const {
 80a2ae8:	b510      	push	{r4, lr}
 80a2aea:	4604      	mov	r4, r0
  uint32_t t;
  uint16_t days = date2days(yOff, m, d);
 80a2aec:	7882      	ldrb	r2, [r0, #2]
 80a2aee:	7841      	ldrb	r1, [r0, #1]
 80a2af0:	7800      	ldrb	r0, [r0, #0]
 80a2af2:	f7ff fed9 	bl	80a28a8 <_ZL9date2daysthh>
  t = time2long(days, hh, mm, ss);
 80a2af6:	78e2      	ldrb	r2, [r4, #3]
 80a2af8:	2318      	movs	r3, #24
 80a2afa:	fb03 2000 	mla	r0, r3, r0, r2
 80a2afe:	7923      	ldrb	r3, [r4, #4]
 80a2b00:	223c      	movs	r2, #60	; 0x3c
 80a2b02:	fb02 3000 	mla	r0, r2, r0, r3
 80a2b06:	7963      	ldrb	r3, [r4, #5]
 80a2b08:	fb02 3300 	mla	r3, r2, r0, r3
  t += SECONDS_FROM_1970_TO_2000;  // seconds from 1970 to 2000

  return t;
}
 80a2b0c:	4801      	ldr	r0, [pc, #4]	; (80a2b14 <_ZNK8DateTime8unixtimeEv+0x2c>)
 80a2b0e:	4418      	add	r0, r3
 80a2b10:	bd10      	pop	{r4, pc}
 80a2b12:	bf00      	nop
 80a2b14:	386d4380 	.word	0x386d4380

080a2b18 <_ZN10RTC_DS32315beginEv>:


////////////////////////////////////////////////////////////////////////////////
// RTC_DS3231 implementation

boolean RTC_DS3231::begin(void) {
 80a2b18:	b508      	push	{r3, lr}
  Wire.begin();
 80a2b1a:	f001 ffdd 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2b1e:	f001 fe5b 	bl	80a47d8 <_ZN7TwoWire5beginEv>
  return true;
}
 80a2b22:	2001      	movs	r0, #1
 80a2b24:	bd08      	pop	{r3, pc}

080a2b26 <_ZN10RTC_DS32319lostPowerEv>:

bool RTC_DS3231::lostPower(void) {
 80a2b26:	b508      	push	{r3, lr}
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
 80a2b28:	200f      	movs	r0, #15
 80a2b2a:	f7ff ff0f 	bl	80a294c <_ZL17read_i2c_registerhh.constprop.8>
}
 80a2b2e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 80a2b32:	bd08      	pop	{r3, pc}

080a2b34 <_ZN10RTC_DS32316adjustERK8DateTime>:

void RTC_DS3231::adjust(const DateTime& dt) {
 80a2b34:	b538      	push	{r3, r4, r5, lr}
 80a2b36:	4605      	mov	r5, r0
  Wire.beginTransmission(DS3231_ADDRESS);
 80a2b38:	f001 ffce 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2b3c:	2168      	movs	r1, #104	; 0x68
 80a2b3e:	f001 fe66 	bl	80a480e <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
 80a2b42:	f001 ffc9 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2b46:	6803      	ldr	r3, [r0, #0]
 80a2b48:	2100      	movs	r1, #0
 80a2b4a:	689b      	ldr	r3, [r3, #8]
 80a2b4c:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.second()));
 80a2b4e:	f001 ffc3 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2b52:	796b      	ldrb	r3, [r5, #5]
 80a2b54:	240a      	movs	r4, #10
 80a2b56:	fbb3 f1f4 	udiv	r1, r3, r4
 80a2b5a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a2b5e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80a2b62:	6803      	ldr	r3, [r0, #0]
 80a2b64:	b2c9      	uxtb	r1, r1
 80a2b66:	689b      	ldr	r3, [r3, #8]
 80a2b68:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
 80a2b6a:	f001 ffb5 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2b6e:	792b      	ldrb	r3, [r5, #4]
 80a2b70:	fbb3 f1f4 	udiv	r1, r3, r4
 80a2b74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a2b78:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80a2b7c:	6803      	ldr	r3, [r0, #0]
 80a2b7e:	b2c9      	uxtb	r1, r1
 80a2b80:	689b      	ldr	r3, [r3, #8]
 80a2b82:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
 80a2b84:	f001 ffa8 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2b88:	78eb      	ldrb	r3, [r5, #3]
 80a2b8a:	fbb3 f1f4 	udiv	r1, r3, r4
 80a2b8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a2b92:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80a2b96:	6803      	ldr	r3, [r0, #0]
 80a2b98:	b2c9      	uxtb	r1, r1
 80a2b9a:	689b      	ldr	r3, [r3, #8]
 80a2b9c:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(0));
 80a2b9e:	f001 ff9b 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2ba2:	6803      	ldr	r3, [r0, #0]
 80a2ba4:	2100      	movs	r1, #0
 80a2ba6:	689b      	ldr	r3, [r3, #8]
 80a2ba8:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.day()));
 80a2baa:	f001 ff95 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2bae:	78ab      	ldrb	r3, [r5, #2]
 80a2bb0:	fbb3 f1f4 	udiv	r1, r3, r4
 80a2bb4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a2bb8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80a2bbc:	6803      	ldr	r3, [r0, #0]
 80a2bbe:	b2c9      	uxtb	r1, r1
 80a2bc0:	689b      	ldr	r3, [r3, #8]
 80a2bc2:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.month()));
 80a2bc4:	f001 ff88 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2bc8:	786b      	ldrb	r3, [r5, #1]
 80a2bca:	fbb3 f1f4 	udiv	r1, r3, r4
 80a2bce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80a2bd2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80a2bd6:	6803      	ldr	r3, [r0, #0]
 80a2bd8:	b2c9      	uxtb	r1, r1
 80a2bda:	689b      	ldr	r3, [r3, #8]
 80a2bdc:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
 80a2bde:	f001 ff7b 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2be2:	7829      	ldrb	r1, [r5, #0]
 80a2be4:	6803      	ldr	r3, [r0, #0]
 80a2be6:	fbb1 f4f4 	udiv	r4, r1, r4
 80a2bea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80a2bee:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 80a2bf2:	689b      	ldr	r3, [r3, #8]
 80a2bf4:	b2c9      	uxtb	r1, r1
 80a2bf6:	4798      	blx	r3
  Wire.endTransmission();
 80a2bf8:	f001 ff6e 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2bfc:	f001 fe0e 	bl	80a481c <_ZN7TwoWire15endTransmissionEv>

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
 80a2c00:	200f      	movs	r0, #15
 80a2c02:	f7ff fea3 	bl	80a294c <_ZL17read_i2c_registerhh.constprop.8>
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
 80a2c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
 80a2c0a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80a2c0e:	200f      	movs	r0, #15
 80a2c10:	f7ff be82 	b.w	80a2918 <_ZL18write_i2c_registerhhh.constprop.7>

080a2c14 <_ZN10RTC_DS32313nowEv>:
}

DateTime RTC_DS3231::now() {
 80a2c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2c18:	4604      	mov	r4, r0
  Wire.beginTransmission(DS3231_ADDRESS);
 80a2c1a:	f001 ff5d 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2c1e:	2168      	movs	r1, #104	; 0x68
 80a2c20:	f001 fdf5 	bl	80a480e <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0);	
 80a2c24:	f001 ff58 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2c28:	6803      	ldr	r3, [r0, #0]
 80a2c2a:	2100      	movs	r1, #0
 80a2c2c:	689b      	ldr	r3, [r3, #8]
 80a2c2e:	4798      	blx	r3
  Wire.endTransmission();
 80a2c30:	f001 ff52 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2c34:	f001 fdf2 	bl	80a481c <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(DS3231_ADDRESS, 7);
 80a2c38:	f001 ff4e 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2c3c:	2207      	movs	r2, #7
 80a2c3e:	2168      	movs	r1, #104	; 0x68
 80a2c40:	f001 fddc 	bl	80a47fc <_ZN7TwoWire11requestFromEii>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
 80a2c44:	f001 ff48 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2c48:	6803      	ldr	r3, [r0, #0]
 80a2c4a:	695b      	ldr	r3, [r3, #20]
 80a2c4c:	4798      	blx	r3
 80a2c4e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
 80a2c52:	1105      	asrs	r5, r0, #4
 80a2c54:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
 80a2c58:	eb00 0045 	add.w	r0, r0, r5, lsl #1
 80a2c5c:	b2c5      	uxtb	r5, r0
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS3231_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
 80a2c5e:	f001 ff3b 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2c62:	6803      	ldr	r3, [r0, #0]
 80a2c64:	695b      	ldr	r3, [r3, #20]
 80a2c66:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
 80a2c68:	f3c0 1603 	ubfx	r6, r0, #4, #4
 80a2c6c:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
 80a2c70:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80a2c74:	b2c6      	uxtb	r6, r0
  Wire.endTransmission();

  Wire.requestFrom(DS3231_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
 80a2c76:	f001 ff2f 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2c7a:	6803      	ldr	r3, [r0, #0]
 80a2c7c:	695b      	ldr	r3, [r3, #20]
 80a2c7e:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
 80a2c80:	f3c0 1703 	ubfx	r7, r0, #4, #4
 80a2c84:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
 80a2c88:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 80a2c8c:	b2c7      	uxtb	r7, r0

  Wire.requestFrom(DS3231_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
 80a2c8e:	f001 ff23 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2c92:	6803      	ldr	r3, [r0, #0]
 80a2c94:	695b      	ldr	r3, [r3, #20]
 80a2c96:	4798      	blx	r3
  uint8_t d = bcd2bin(Wire._I2C_READ());
 80a2c98:	f001 ff1e 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2c9c:	6803      	ldr	r3, [r0, #0]
 80a2c9e:	695b      	ldr	r3, [r3, #20]
 80a2ca0:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
 80a2ca2:	f3c0 1803 	ubfx	r8, r0, #4, #4
 80a2ca6:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
 80a2caa:	eb00 0048 	add.w	r0, r0, r8, lsl #1
 80a2cae:	fa5f f880 	uxtb.w	r8, r0
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
 80a2cb2:	f001 ff11 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2cb6:	6803      	ldr	r3, [r0, #0]
 80a2cb8:	695b      	ldr	r3, [r3, #20]
 80a2cba:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
 80a2cbc:	f3c0 1903 	ubfx	r9, r0, #4, #4
 80a2cc0:	eba9 0989 	sub.w	r9, r9, r9, lsl #2
 80a2cc4:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 80a2cc8:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
 80a2ccc:	f001 ff04 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a2cd0:	6803      	ldr	r3, [r0, #0]
 80a2cd2:	695b      	ldr	r3, [r3, #20]
 80a2cd4:	4798      	blx	r3
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
 80a2cd6:	f3c0 1303 	ubfx	r3, r0, #4, #4
 80a2cda:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 80a2cde:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80a2ce2:	7020      	strb	r0, [r4, #0]
    m = month;
 80a2ce4:	f884 9001 	strb.w	r9, [r4, #1]
    d = day;
 80a2ce8:	f884 8002 	strb.w	r8, [r4, #2]
    hh = hour;
 80a2cec:	70e7      	strb	r7, [r4, #3]
    mm = min;
 80a2cee:	7126      	strb	r6, [r4, #4]
    ss = sec;
 80a2cf0:	7165      	strb	r5, [r4, #5]
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
 80a2cf2:	4620      	mov	r0, r4
 80a2cf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a2cf8 <_GLOBAL__sub_I__ZN8DateTimeC2Em>:
 80a2cf8:	f000 b800 	b.w	80a2cfc <HAL_Pin_Map>

080a2cfc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2cfc:	b508      	push	{r3, lr}
 80a2cfe:	4b02      	ldr	r3, [pc, #8]	; (80a2d08 <HAL_Pin_Map+0xc>)
 80a2d00:	681b      	ldr	r3, [r3, #0]
 80a2d02:	681b      	ldr	r3, [r3, #0]
 80a2d04:	9301      	str	r3, [sp, #4]
 80a2d06:	bd08      	pop	{r3, pc}
 80a2d08:	080601b0 	.word	0x080601b0

080a2d0c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2d0c:	b508      	push	{r3, lr}
 80a2d0e:	4b02      	ldr	r3, [pc, #8]	; (80a2d18 <HAL_Pin_Mode+0xc>)
 80a2d10:	681b      	ldr	r3, [r3, #0]
 80a2d12:	689b      	ldr	r3, [r3, #8]
 80a2d14:	9301      	str	r3, [sp, #4]
 80a2d16:	bd08      	pop	{r3, pc}
 80a2d18:	080601b0 	.word	0x080601b0

080a2d1c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2d1c:	b508      	push	{r3, lr}
 80a2d1e:	4b02      	ldr	r3, [pc, #8]	; (80a2d28 <HAL_Get_Pin_Mode+0xc>)
 80a2d20:	681b      	ldr	r3, [r3, #0]
 80a2d22:	68db      	ldr	r3, [r3, #12]
 80a2d24:	9301      	str	r3, [sp, #4]
 80a2d26:	bd08      	pop	{r3, pc}
 80a2d28:	080601b0 	.word	0x080601b0

080a2d2c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2d2c:	b508      	push	{r3, lr}
 80a2d2e:	4b02      	ldr	r3, [pc, #8]	; (80a2d38 <HAL_GPIO_Write+0xc>)
 80a2d30:	681b      	ldr	r3, [r3, #0]
 80a2d32:	691b      	ldr	r3, [r3, #16]
 80a2d34:	9301      	str	r3, [sp, #4]
 80a2d36:	bd08      	pop	{r3, pc}
 80a2d38:	080601b0 	.word	0x080601b0

080a2d3c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 80a2d3c:	b508      	push	{r3, lr}
 80a2d3e:	4b02      	ldr	r3, [pc, #8]	; (80a2d48 <HAL_Pulse_In+0xc>)
 80a2d40:	681b      	ldr	r3, [r3, #0]
 80a2d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2d44:	9301      	str	r3, [sp, #4]
 80a2d46:	bd08      	pop	{r3, pc}
 80a2d48:	080601b0 	.word	0x080601b0

080a2d4c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a2d4c:	b508      	push	{r3, lr}
 80a2d4e:	4b02      	ldr	r3, [pc, #8]	; (80a2d58 <HAL_SPI_Begin+0xc>)
 80a2d50:	681b      	ldr	r3, [r3, #0]
 80a2d52:	681b      	ldr	r3, [r3, #0]
 80a2d54:	9301      	str	r3, [sp, #4]
 80a2d56:	bd08      	pop	{r3, pc}
 80a2d58:	080601b4 	.word	0x080601b4

080a2d5c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a2d5c:	b508      	push	{r3, lr}
 80a2d5e:	4b02      	ldr	r3, [pc, #8]	; (80a2d68 <HAL_SPI_Send_Receive_Data+0xc>)
 80a2d60:	681b      	ldr	r3, [r3, #0]
 80a2d62:	695b      	ldr	r3, [r3, #20]
 80a2d64:	9301      	str	r3, [sp, #4]
 80a2d66:	bd08      	pop	{r3, pc}
 80a2d68:	080601b4 	.word	0x080601b4

080a2d6c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a2d6c:	b508      	push	{r3, lr}
 80a2d6e:	4b02      	ldr	r3, [pc, #8]	; (80a2d78 <HAL_SPI_Init+0xc>)
 80a2d70:	681b      	ldr	r3, [r3, #0]
 80a2d72:	69db      	ldr	r3, [r3, #28]
 80a2d74:	9301      	str	r3, [sp, #4]
 80a2d76:	bd08      	pop	{r3, pc}
 80a2d78:	080601b4 	.word	0x080601b4

080a2d7c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a2d7c:	b508      	push	{r3, lr}
 80a2d7e:	4b02      	ldr	r3, [pc, #8]	; (80a2d88 <HAL_SPI_Is_Enabled+0xc>)
 80a2d80:	681b      	ldr	r3, [r3, #0]
 80a2d82:	6a1b      	ldr	r3, [r3, #32]
 80a2d84:	9301      	str	r3, [sp, #4]
 80a2d86:	bd08      	pop	{r3, pc}
 80a2d88:	080601b4 	.word	0x080601b4

080a2d8c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a2d8c:	b508      	push	{r3, lr}
 80a2d8e:	4b02      	ldr	r3, [pc, #8]	; (80a2d98 <HAL_SPI_Info+0xc>)
 80a2d90:	681b      	ldr	r3, [r3, #0]
 80a2d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2d94:	9301      	str	r3, [sp, #4]
 80a2d96:	bd08      	pop	{r3, pc}
 80a2d98:	080601b4 	.word	0x080601b4

080a2d9c <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 80a2d9c:	b508      	push	{r3, lr}
 80a2d9e:	4b02      	ldr	r3, [pc, #8]	; (80a2da8 <HAL_SPI_DMA_Transfer+0xc>)
 80a2da0:	681b      	ldr	r3, [r3, #0]
 80a2da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2da4:	9301      	str	r3, [sp, #4]
 80a2da6:	bd08      	pop	{r3, pc}
 80a2da8:	080601b4 	.word	0x080601b4

080a2dac <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 80a2dac:	b508      	push	{r3, lr}
 80a2dae:	4b02      	ldr	r3, [pc, #8]	; (80a2db8 <HAL_SPI_DMA_Transfer_Status+0xc>)
 80a2db0:	681b      	ldr	r3, [r3, #0]
 80a2db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2db4:	9301      	str	r3, [sp, #4]
 80a2db6:	bd08      	pop	{r3, pc}
 80a2db8:	080601b4 	.word	0x080601b4

080a2dbc <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a2dbc:	b508      	push	{r3, lr}
 80a2dbe:	4b02      	ldr	r3, [pc, #8]	; (80a2dc8 <HAL_SPI_Set_Settings+0xc>)
 80a2dc0:	681b      	ldr	r3, [r3, #0]
 80a2dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2dc4:	9301      	str	r3, [sp, #4]
 80a2dc6:	bd08      	pop	{r3, pc}
 80a2dc8:	080601b4 	.word	0x080601b4

080a2dcc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a2dcc:	b508      	push	{r3, lr}
 80a2dce:	4b02      	ldr	r3, [pc, #8]	; (80a2dd8 <HAL_RNG_GetRandomNumber+0xc>)
 80a2dd0:	681b      	ldr	r3, [r3, #0]
 80a2dd2:	685b      	ldr	r3, [r3, #4]
 80a2dd4:	9301      	str	r3, [sp, #4]
 80a2dd6:	bd08      	pop	{r3, pc}
 80a2dd8:	0806019c 	.word	0x0806019c

080a2ddc <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a2ddc:	b508      	push	{r3, lr}
 80a2dde:	4b02      	ldr	r3, [pc, #8]	; (80a2de8 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a2de0:	681b      	ldr	r3, [r3, #0]
 80a2de2:	691b      	ldr	r3, [r3, #16]
 80a2de4:	9301      	str	r3, [sp, #4]
 80a2de6:	bd08      	pop	{r3, pc}
 80a2de8:	0806019c 	.word	0x0806019c

080a2dec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2dec:	b508      	push	{r3, lr}
 80a2dee:	4b02      	ldr	r3, [pc, #8]	; (80a2df8 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2df0:	681b      	ldr	r3, [r3, #0]
 80a2df2:	695b      	ldr	r3, [r3, #20]
 80a2df4:	9301      	str	r3, [sp, #4]
 80a2df6:	bd08      	pop	{r3, pc}
 80a2df8:	0806019c 	.word	0x0806019c

080a2dfc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a2dfc:	b508      	push	{r3, lr}
 80a2dfe:	4b02      	ldr	r3, [pc, #8]	; (80a2e08 <os_mutex_create+0xc>)
 80a2e00:	681b      	ldr	r3, [r3, #0]
 80a2e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2e04:	9301      	str	r3, [sp, #4]
 80a2e06:	bd08      	pop	{r3, pc}
 80a2e08:	080601d0 	.word	0x080601d0

080a2e0c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a2e0c:	b508      	push	{r3, lr}
 80a2e0e:	4b02      	ldr	r3, [pc, #8]	; (80a2e18 <os_mutex_lock+0xc>)
 80a2e10:	681b      	ldr	r3, [r3, #0]
 80a2e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2e14:	9301      	str	r3, [sp, #4]
 80a2e16:	bd08      	pop	{r3, pc}
 80a2e18:	080601d0 	.word	0x080601d0

080a2e1c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a2e1c:	b508      	push	{r3, lr}
 80a2e1e:	4b02      	ldr	r3, [pc, #8]	; (80a2e28 <os_mutex_unlock+0xc>)
 80a2e20:	681b      	ldr	r3, [r3, #0]
 80a2e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2e24:	9301      	str	r3, [sp, #4]
 80a2e26:	bd08      	pop	{r3, pc}
 80a2e28:	080601d0 	.word	0x080601d0

080a2e2c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2e2c:	b508      	push	{r3, lr}
 80a2e2e:	4b02      	ldr	r3, [pc, #8]	; (80a2e38 <HAL_USART_Init+0xc>)
 80a2e30:	681b      	ldr	r3, [r3, #0]
 80a2e32:	699b      	ldr	r3, [r3, #24]
 80a2e34:	9301      	str	r3, [sp, #4]
 80a2e36:	bd08      	pop	{r3, pc}
 80a2e38:	080601c4 	.word	0x080601c4

080a2e3c <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
 80a2e3c:	b508      	push	{r3, lr}
 80a2e3e:	4b02      	ldr	r3, [pc, #8]	; (80a2e48 <HAL_USART_End+0xc>)
 80a2e40:	681b      	ldr	r3, [r3, #0]
 80a2e42:	6a1b      	ldr	r3, [r3, #32]
 80a2e44:	9301      	str	r3, [sp, #4]
 80a2e46:	bd08      	pop	{r3, pc}
 80a2e48:	080601c4 	.word	0x080601c4

080a2e4c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2e4c:	b508      	push	{r3, lr}
 80a2e4e:	4b02      	ldr	r3, [pc, #8]	; (80a2e58 <HAL_USART_Write_Data+0xc>)
 80a2e50:	681b      	ldr	r3, [r3, #0]
 80a2e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2e54:	9301      	str	r3, [sp, #4]
 80a2e56:	bd08      	pop	{r3, pc}
 80a2e58:	080601c4 	.word	0x080601c4

080a2e5c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2e5c:	b508      	push	{r3, lr}
 80a2e5e:	4b02      	ldr	r3, [pc, #8]	; (80a2e68 <HAL_USART_Available_Data+0xc>)
 80a2e60:	681b      	ldr	r3, [r3, #0]
 80a2e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2e64:	9301      	str	r3, [sp, #4]
 80a2e66:	bd08      	pop	{r3, pc}
 80a2e68:	080601c4 	.word	0x080601c4

080a2e6c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2e6c:	b508      	push	{r3, lr}
 80a2e6e:	4b02      	ldr	r3, [pc, #8]	; (80a2e78 <HAL_USART_Read_Data+0xc>)
 80a2e70:	681b      	ldr	r3, [r3, #0]
 80a2e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2e74:	9301      	str	r3, [sp, #4]
 80a2e76:	bd08      	pop	{r3, pc}
 80a2e78:	080601c4 	.word	0x080601c4

080a2e7c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2e7c:	b508      	push	{r3, lr}
 80a2e7e:	4b02      	ldr	r3, [pc, #8]	; (80a2e88 <HAL_USART_Peek_Data+0xc>)
 80a2e80:	681b      	ldr	r3, [r3, #0]
 80a2e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2e84:	9301      	str	r3, [sp, #4]
 80a2e86:	bd08      	pop	{r3, pc}
 80a2e88:	080601c4 	.word	0x080601c4

080a2e8c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2e8c:	b508      	push	{r3, lr}
 80a2e8e:	4b02      	ldr	r3, [pc, #8]	; (80a2e98 <HAL_USART_Flush_Data+0xc>)
 80a2e90:	681b      	ldr	r3, [r3, #0]
 80a2e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2e94:	9301      	str	r3, [sp, #4]
 80a2e96:	bd08      	pop	{r3, pc}
 80a2e98:	080601c4 	.word	0x080601c4

080a2e9c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a2e9c:	b508      	push	{r3, lr}
 80a2e9e:	4b02      	ldr	r3, [pc, #8]	; (80a2ea8 <HAL_USART_Is_Enabled+0xc>)
 80a2ea0:	681b      	ldr	r3, [r3, #0]
 80a2ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2ea4:	9301      	str	r3, [sp, #4]
 80a2ea6:	bd08      	pop	{r3, pc}
 80a2ea8:	080601c4 	.word	0x080601c4

080a2eac <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2eac:	b508      	push	{r3, lr}
 80a2eae:	4b02      	ldr	r3, [pc, #8]	; (80a2eb8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2eb0:	681b      	ldr	r3, [r3, #0]
 80a2eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2eb4:	9301      	str	r3, [sp, #4]
 80a2eb6:	bd08      	pop	{r3, pc}
 80a2eb8:	080601c4 	.word	0x080601c4

080a2ebc <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a2ebc:	b508      	push	{r3, lr}
 80a2ebe:	4b02      	ldr	r3, [pc, #8]	; (80a2ec8 <HAL_USART_BeginConfig+0xc>)
 80a2ec0:	681b      	ldr	r3, [r3, #0]
 80a2ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2ec4:	9301      	str	r3, [sp, #4]
 80a2ec6:	bd08      	pop	{r3, pc}
 80a2ec8:	080601c4 	.word	0x080601c4

080a2ecc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a2ecc:	b508      	push	{r3, lr}
 80a2ece:	4b02      	ldr	r3, [pc, #8]	; (80a2ed8 <HAL_I2C_Begin+0xc>)
 80a2ed0:	681b      	ldr	r3, [r3, #0]
 80a2ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2ed4:	9301      	str	r3, [sp, #4]
 80a2ed6:	bd08      	pop	{r3, pc}
 80a2ed8:	080601ac 	.word	0x080601ac

080a2edc <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a2edc:	b508      	push	{r3, lr}
 80a2ede:	4b02      	ldr	r3, [pc, #8]	; (80a2ee8 <HAL_I2C_Request_Data+0xc>)
 80a2ee0:	681b      	ldr	r3, [r3, #0]
 80a2ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2ee4:	9301      	str	r3, [sp, #4]
 80a2ee6:	bd08      	pop	{r3, pc}
 80a2ee8:	080601ac 	.word	0x080601ac

080a2eec <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a2eec:	b508      	push	{r3, lr}
 80a2eee:	4b02      	ldr	r3, [pc, #8]	; (80a2ef8 <HAL_I2C_Begin_Transmission+0xc>)
 80a2ef0:	681b      	ldr	r3, [r3, #0]
 80a2ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2ef4:	9301      	str	r3, [sp, #4]
 80a2ef6:	bd08      	pop	{r3, pc}
 80a2ef8:	080601ac 	.word	0x080601ac

080a2efc <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a2efc:	b508      	push	{r3, lr}
 80a2efe:	4b02      	ldr	r3, [pc, #8]	; (80a2f08 <HAL_I2C_End_Transmission+0xc>)
 80a2f00:	681b      	ldr	r3, [r3, #0]
 80a2f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2f04:	9301      	str	r3, [sp, #4]
 80a2f06:	bd08      	pop	{r3, pc}
 80a2f08:	080601ac 	.word	0x080601ac

080a2f0c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2f0c:	b508      	push	{r3, lr}
 80a2f0e:	4b02      	ldr	r3, [pc, #8]	; (80a2f18 <HAL_I2C_Write_Data+0xc>)
 80a2f10:	681b      	ldr	r3, [r3, #0]
 80a2f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2f14:	9301      	str	r3, [sp, #4]
 80a2f16:	bd08      	pop	{r3, pc}
 80a2f18:	080601ac 	.word	0x080601ac

080a2f1c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2f1c:	b508      	push	{r3, lr}
 80a2f1e:	4b02      	ldr	r3, [pc, #8]	; (80a2f28 <HAL_I2C_Available_Data+0xc>)
 80a2f20:	681b      	ldr	r3, [r3, #0]
 80a2f22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2f24:	9301      	str	r3, [sp, #4]
 80a2f26:	bd08      	pop	{r3, pc}
 80a2f28:	080601ac 	.word	0x080601ac

080a2f2c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2f2c:	b508      	push	{r3, lr}
 80a2f2e:	4b02      	ldr	r3, [pc, #8]	; (80a2f38 <HAL_I2C_Read_Data+0xc>)
 80a2f30:	681b      	ldr	r3, [r3, #0]
 80a2f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2f34:	9301      	str	r3, [sp, #4]
 80a2f36:	bd08      	pop	{r3, pc}
 80a2f38:	080601ac 	.word	0x080601ac

080a2f3c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2f3c:	b508      	push	{r3, lr}
 80a2f3e:	4b02      	ldr	r3, [pc, #8]	; (80a2f48 <HAL_I2C_Peek_Data+0xc>)
 80a2f40:	681b      	ldr	r3, [r3, #0]
 80a2f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2f44:	9301      	str	r3, [sp, #4]
 80a2f46:	bd08      	pop	{r3, pc}
 80a2f48:	080601ac 	.word	0x080601ac

080a2f4c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2f4c:	b508      	push	{r3, lr}
 80a2f4e:	4b02      	ldr	r3, [pc, #8]	; (80a2f58 <HAL_I2C_Flush_Data+0xc>)
 80a2f50:	681b      	ldr	r3, [r3, #0]
 80a2f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2f54:	9301      	str	r3, [sp, #4]
 80a2f56:	bd08      	pop	{r3, pc}
 80a2f58:	080601ac 	.word	0x080601ac

080a2f5c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2f5c:	b508      	push	{r3, lr}
 80a2f5e:	4b02      	ldr	r3, [pc, #8]	; (80a2f68 <HAL_I2C_Is_Enabled+0xc>)
 80a2f60:	681b      	ldr	r3, [r3, #0]
 80a2f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2f64:	9301      	str	r3, [sp, #4]
 80a2f66:	bd08      	pop	{r3, pc}
 80a2f68:	080601ac 	.word	0x080601ac

080a2f6c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a2f6c:	b508      	push	{r3, lr}
 80a2f6e:	4b03      	ldr	r3, [pc, #12]	; (80a2f7c <HAL_I2C_Init+0x10>)
 80a2f70:	681b      	ldr	r3, [r3, #0]
 80a2f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2f76:	9301      	str	r3, [sp, #4]
 80a2f78:	bd08      	pop	{r3, pc}
 80a2f7a:	0000      	.short	0x0000
 80a2f7c:	080601ac 	.word	0x080601ac

080a2f80 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a2f80:	b508      	push	{r3, lr}
 80a2f82:	4b02      	ldr	r3, [pc, #8]	; (80a2f8c <socket_active_status+0xc>)
 80a2f84:	681b      	ldr	r3, [r3, #0]
 80a2f86:	681b      	ldr	r3, [r3, #0]
 80a2f88:	9301      	str	r3, [sp, #4]
 80a2f8a:	bd08      	pop	{r3, pc}
 80a2f8c:	080601bc 	.word	0x080601bc

080a2f90 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2f90:	b508      	push	{r3, lr}
 80a2f92:	4b02      	ldr	r3, [pc, #8]	; (80a2f9c <socket_handle_valid+0xc>)
 80a2f94:	681b      	ldr	r3, [r3, #0]
 80a2f96:	685b      	ldr	r3, [r3, #4]
 80a2f98:	9301      	str	r3, [sp, #4]
 80a2f9a:	bd08      	pop	{r3, pc}
 80a2f9c:	080601bc 	.word	0x080601bc

080a2fa0 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a2fa0:	b508      	push	{r3, lr}
 80a2fa2:	4b02      	ldr	r3, [pc, #8]	; (80a2fac <socket_create+0xc>)
 80a2fa4:	681b      	ldr	r3, [r3, #0]
 80a2fa6:	689b      	ldr	r3, [r3, #8]
 80a2fa8:	9301      	str	r3, [sp, #4]
 80a2faa:	bd08      	pop	{r3, pc}
 80a2fac:	080601bc 	.word	0x080601bc

080a2fb0 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a2fb0:	b508      	push	{r3, lr}
 80a2fb2:	4b02      	ldr	r3, [pc, #8]	; (80a2fbc <socket_connect+0xc>)
 80a2fb4:	681b      	ldr	r3, [r3, #0]
 80a2fb6:	68db      	ldr	r3, [r3, #12]
 80a2fb8:	9301      	str	r3, [sp, #4]
 80a2fba:	bd08      	pop	{r3, pc}
 80a2fbc:	080601bc 	.word	0x080601bc

080a2fc0 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a2fc0:	b508      	push	{r3, lr}
 80a2fc2:	4b02      	ldr	r3, [pc, #8]	; (80a2fcc <socket_receive+0xc>)
 80a2fc4:	681b      	ldr	r3, [r3, #0]
 80a2fc6:	691b      	ldr	r3, [r3, #16]
 80a2fc8:	9301      	str	r3, [sp, #4]
 80a2fca:	bd08      	pop	{r3, pc}
 80a2fcc:	080601bc 	.word	0x080601bc

080a2fd0 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a2fd0:	b508      	push	{r3, lr}
 80a2fd2:	4b02      	ldr	r3, [pc, #8]	; (80a2fdc <socket_close+0xc>)
 80a2fd4:	681b      	ldr	r3, [r3, #0]
 80a2fd6:	6a1b      	ldr	r3, [r3, #32]
 80a2fd8:	9301      	str	r3, [sp, #4]
 80a2fda:	bd08      	pop	{r3, pc}
 80a2fdc:	080601bc 	.word	0x080601bc

080a2fe0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a2fe0:	b508      	push	{r3, lr}
 80a2fe2:	4b02      	ldr	r3, [pc, #8]	; (80a2fec <socket_handle_invalid+0xc>)
 80a2fe4:	681b      	ldr	r3, [r3, #0]
 80a2fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2fe8:	9301      	str	r3, [sp, #4]
 80a2fea:	bd08      	pop	{r3, pc}
 80a2fec:	080601bc 	.word	0x080601bc

080a2ff0 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a2ff0:	b508      	push	{r3, lr}
 80a2ff2:	4b02      	ldr	r3, [pc, #8]	; (80a2ffc <socket_send_ex+0xc>)
 80a2ff4:	681b      	ldr	r3, [r3, #0]
 80a2ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2ff8:	9301      	str	r3, [sp, #4]
 80a2ffa:	bd08      	pop	{r3, pc}
 80a2ffc:	080601bc 	.word	0x080601bc

080a3000 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3000:	b508      	push	{r3, lr}
 80a3002:	4b02      	ldr	r3, [pc, #8]	; (80a300c <HAL_USB_USART_Init+0xc>)
 80a3004:	681b      	ldr	r3, [r3, #0]
 80a3006:	681b      	ldr	r3, [r3, #0]
 80a3008:	9301      	str	r3, [sp, #4]
 80a300a:	bd08      	pop	{r3, pc}
 80a300c:	080601d8 	.word	0x080601d8

080a3010 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3010:	b508      	push	{r3, lr}
 80a3012:	4b02      	ldr	r3, [pc, #8]	; (80a301c <HAL_USB_USART_Available_Data+0xc>)
 80a3014:	681b      	ldr	r3, [r3, #0]
 80a3016:	691b      	ldr	r3, [r3, #16]
 80a3018:	9301      	str	r3, [sp, #4]
 80a301a:	bd08      	pop	{r3, pc}
 80a301c:	080601d8 	.word	0x080601d8

080a3020 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3020:	b508      	push	{r3, lr}
 80a3022:	4b02      	ldr	r3, [pc, #8]	; (80a302c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3024:	681b      	ldr	r3, [r3, #0]
 80a3026:	695b      	ldr	r3, [r3, #20]
 80a3028:	9301      	str	r3, [sp, #4]
 80a302a:	bd08      	pop	{r3, pc}
 80a302c:	080601d8 	.word	0x080601d8

080a3030 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3030:	b508      	push	{r3, lr}
 80a3032:	4b02      	ldr	r3, [pc, #8]	; (80a303c <HAL_USB_USART_Receive_Data+0xc>)
 80a3034:	681b      	ldr	r3, [r3, #0]
 80a3036:	699b      	ldr	r3, [r3, #24]
 80a3038:	9301      	str	r3, [sp, #4]
 80a303a:	bd08      	pop	{r3, pc}
 80a303c:	080601d8 	.word	0x080601d8

080a3040 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3040:	b508      	push	{r3, lr}
 80a3042:	4b02      	ldr	r3, [pc, #8]	; (80a304c <HAL_USB_USART_Send_Data+0xc>)
 80a3044:	681b      	ldr	r3, [r3, #0]
 80a3046:	69db      	ldr	r3, [r3, #28]
 80a3048:	9301      	str	r3, [sp, #4]
 80a304a:	bd08      	pop	{r3, pc}
 80a304c:	080601d8 	.word	0x080601d8

080a3050 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3050:	b508      	push	{r3, lr}
 80a3052:	4b02      	ldr	r3, [pc, #8]	; (80a305c <HAL_USB_USART_Flush_Data+0xc>)
 80a3054:	681b      	ldr	r3, [r3, #0]
 80a3056:	6a1b      	ldr	r3, [r3, #32]
 80a3058:	9301      	str	r3, [sp, #4]
 80a305a:	bd08      	pop	{r3, pc}
 80a305c:	080601d8 	.word	0x080601d8

080a3060 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a3060:	b508      	push	{r3, lr}
 80a3062:	4b02      	ldr	r3, [pc, #8]	; (80a306c <HAL_NET_SetNetWatchDog+0xc>)
 80a3064:	681b      	ldr	r3, [r3, #0]
 80a3066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3068:	9301      	str	r3, [sp, #4]
 80a306a:	bd08      	pop	{r3, pc}
 80a306c:	080601c0 	.word	0x080601c0

080a3070 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3070:	b508      	push	{r3, lr}
 80a3072:	4b02      	ldr	r3, [pc, #8]	; (80a307c <inet_gethostbyname+0xc>)
 80a3074:	681b      	ldr	r3, [r3, #0]
 80a3076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3078:	9301      	str	r3, [sp, #4]
 80a307a:	bd08      	pop	{r3, pc}
 80a307c:	080601c0 	.word	0x080601c0

080a3080 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a3080:	b508      	push	{r3, lr}
 80a3082:	4b02      	ldr	r3, [pc, #8]	; (80a308c <log_message+0xc>)
 80a3084:	681b      	ldr	r3, [r3, #0]
 80a3086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a3088:	9301      	str	r3, [sp, #4]
 80a308a:	bd08      	pop	{r3, pc}
 80a308c:	080201a8 	.word	0x080201a8

080a3090 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a3090:	b508      	push	{r3, lr}
 80a3092:	4b02      	ldr	r3, [pc, #8]	; (80a309c <set_system_mode+0xc>)
 80a3094:	681b      	ldr	r3, [r3, #0]
 80a3096:	685b      	ldr	r3, [r3, #4]
 80a3098:	9301      	str	r3, [sp, #4]
 80a309a:	bd08      	pop	{r3, pc}
 80a309c:	080601a4 	.word	0x080601a4

080a30a0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a30a0:	b508      	push	{r3, lr}
 80a30a2:	4b02      	ldr	r3, [pc, #8]	; (80a30ac <system_delay_ms+0xc>)
 80a30a4:	681b      	ldr	r3, [r3, #0]
 80a30a6:	695b      	ldr	r3, [r3, #20]
 80a30a8:	9301      	str	r3, [sp, #4]
 80a30aa:	bd08      	pop	{r3, pc}
 80a30ac:	080601a4 	.word	0x080601a4

080a30b0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80a30b0:	b508      	push	{r3, lr}
 80a30b2:	4b02      	ldr	r3, [pc, #8]	; (80a30bc <system_thread_set_state+0xc>)
 80a30b4:	681b      	ldr	r3, [r3, #0]
 80a30b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a30b8:	9301      	str	r3, [sp, #4]
 80a30ba:	bd08      	pop	{r3, pc}
 80a30bc:	080601a4 	.word	0x080601a4

080a30c0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a30c0:	b508      	push	{r3, lr}
 80a30c2:	4b02      	ldr	r3, [pc, #8]	; (80a30cc <application_thread_current+0xc>)
 80a30c4:	681b      	ldr	r3, [r3, #0]
 80a30c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a30c8:	9301      	str	r3, [sp, #4]
 80a30ca:	bd08      	pop	{r3, pc}
 80a30cc:	080601a4 	.word	0x080601a4

080a30d0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a30d0:	b508      	push	{r3, lr}
 80a30d2:	4b02      	ldr	r3, [pc, #8]	; (80a30dc <application_thread_invoke+0xc>)
 80a30d4:	681b      	ldr	r3, [r3, #0]
 80a30d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a30d8:	9301      	str	r3, [sp, #4]
 80a30da:	bd08      	pop	{r3, pc}
 80a30dc:	080601a4 	.word	0x080601a4

080a30e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a30e0:	b508      	push	{r3, lr}
 80a30e2:	4b03      	ldr	r3, [pc, #12]	; (80a30f0 <system_ctrl_set_app_request_handler+0x10>)
 80a30e4:	681b      	ldr	r3, [r3, #0]
 80a30e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a30ea:	9301      	str	r3, [sp, #4]
 80a30ec:	bd08      	pop	{r3, pc}
 80a30ee:	0000      	.short	0x0000
 80a30f0:	080601a4 	.word	0x080601a4

080a30f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a30f4:	b508      	push	{r3, lr}
 80a30f6:	4b03      	ldr	r3, [pc, #12]	; (80a3104 <system_ctrl_set_result+0x10>)
 80a30f8:	681b      	ldr	r3, [r3, #0]
 80a30fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a30fe:	9301      	str	r3, [sp, #4]
 80a3100:	bd08      	pop	{r3, pc}
 80a3102:	0000      	.short	0x0000
 80a3104:	080601a4 	.word	0x080601a4

080a3108 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3108:	b508      	push	{r3, lr}
 80a310a:	4b02      	ldr	r3, [pc, #8]	; (80a3114 <network_connect+0xc>)
 80a310c:	681b      	ldr	r3, [r3, #0]
 80a310e:	685b      	ldr	r3, [r3, #4]
 80a3110:	9301      	str	r3, [sp, #4]
 80a3112:	bd08      	pop	{r3, pc}
 80a3114:	080601c8 	.word	0x080601c8

080a3118 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a3118:	b508      	push	{r3, lr}
 80a311a:	4b02      	ldr	r3, [pc, #8]	; (80a3124 <network_connecting+0xc>)
 80a311c:	681b      	ldr	r3, [r3, #0]
 80a311e:	689b      	ldr	r3, [r3, #8]
 80a3120:	9301      	str	r3, [sp, #4]
 80a3122:	bd08      	pop	{r3, pc}
 80a3124:	080601c8 	.word	0x080601c8

080a3128 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a3128:	b508      	push	{r3, lr}
 80a312a:	4b02      	ldr	r3, [pc, #8]	; (80a3134 <network_disconnect+0xc>)
 80a312c:	681b      	ldr	r3, [r3, #0]
 80a312e:	68db      	ldr	r3, [r3, #12]
 80a3130:	9301      	str	r3, [sp, #4]
 80a3132:	bd08      	pop	{r3, pc}
 80a3134:	080601c8 	.word	0x080601c8

080a3138 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a3138:	b508      	push	{r3, lr}
 80a313a:	4b02      	ldr	r3, [pc, #8]	; (80a3144 <network_ready+0xc>)
 80a313c:	681b      	ldr	r3, [r3, #0]
 80a313e:	691b      	ldr	r3, [r3, #16]
 80a3140:	9301      	str	r3, [sp, #4]
 80a3142:	bd08      	pop	{r3, pc}
 80a3144:	080601c8 	.word	0x080601c8

080a3148 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3148:	b508      	push	{r3, lr}
 80a314a:	4b02      	ldr	r3, [pc, #8]	; (80a3154 <network_on+0xc>)
 80a314c:	681b      	ldr	r3, [r3, #0]
 80a314e:	695b      	ldr	r3, [r3, #20]
 80a3150:	9301      	str	r3, [sp, #4]
 80a3152:	bd08      	pop	{r3, pc}
 80a3154:	080601c8 	.word	0x080601c8

080a3158 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a3158:	b508      	push	{r3, lr}
 80a315a:	4b02      	ldr	r3, [pc, #8]	; (80a3164 <network_off+0xc>)
 80a315c:	681b      	ldr	r3, [r3, #0]
 80a315e:	699b      	ldr	r3, [r3, #24]
 80a3160:	9301      	str	r3, [sp, #4]
 80a3162:	bd08      	pop	{r3, pc}
 80a3164:	080601c8 	.word	0x080601c8

080a3168 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a3168:	b508      	push	{r3, lr}
 80a316a:	4b02      	ldr	r3, [pc, #8]	; (80a3174 <network_listen+0xc>)
 80a316c:	681b      	ldr	r3, [r3, #0]
 80a316e:	69db      	ldr	r3, [r3, #28]
 80a3170:	9301      	str	r3, [sp, #4]
 80a3172:	bd08      	pop	{r3, pc}
 80a3174:	080601c8 	.word	0x080601c8

080a3178 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a3178:	b508      	push	{r3, lr}
 80a317a:	4b02      	ldr	r3, [pc, #8]	; (80a3184 <network_listening+0xc>)
 80a317c:	681b      	ldr	r3, [r3, #0]
 80a317e:	6a1b      	ldr	r3, [r3, #32]
 80a3180:	9301      	str	r3, [sp, #4]
 80a3182:	bd08      	pop	{r3, pc}
 80a3184:	080601c8 	.word	0x080601c8

080a3188 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
 80a3188:	b508      	push	{r3, lr}
 80a318a:	4b02      	ldr	r3, [pc, #8]	; (80a3194 <network_set_credentials+0xc>)
 80a318c:	681b      	ldr	r3, [r3, #0]
 80a318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3190:	9301      	str	r3, [sp, #4]
 80a3192:	bd08      	pop	{r3, pc}
 80a3194:	080601c8 	.word	0x080601c8

080a3198 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a3198:	b508      	push	{r3, lr}
 80a319a:	4b02      	ldr	r3, [pc, #8]	; (80a31a4 <network_set_listen_timeout+0xc>)
 80a319c:	681b      	ldr	r3, [r3, #0]
 80a319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a31a0:	9301      	str	r3, [sp, #4]
 80a31a2:	bd08      	pop	{r3, pc}
 80a31a4:	080601c8 	.word	0x080601c8

080a31a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a31a8:	b508      	push	{r3, lr}
 80a31aa:	4b02      	ldr	r3, [pc, #8]	; (80a31b4 <network_get_listen_timeout+0xc>)
 80a31ac:	681b      	ldr	r3, [r3, #0]
 80a31ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a31b0:	9301      	str	r3, [sp, #4]
 80a31b2:	bd08      	pop	{r3, pc}
 80a31b4:	080601c8 	.word	0x080601c8

080a31b8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a31b8:	b508      	push	{r3, lr}
 80a31ba:	4b02      	ldr	r3, [pc, #8]	; (80a31c4 <spark_process+0xc>)
 80a31bc:	681b      	ldr	r3, [r3, #0]
 80a31be:	689b      	ldr	r3, [r3, #8]
 80a31c0:	9301      	str	r3, [sp, #4]
 80a31c2:	bd08      	pop	{r3, pc}
 80a31c4:	080601cc 	.word	0x080601cc

080a31c8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a31c8:	b508      	push	{r3, lr}
 80a31ca:	4b02      	ldr	r3, [pc, #8]	; (80a31d4 <spark_cloud_flag_connected+0xc>)
 80a31cc:	681b      	ldr	r3, [r3, #0]
 80a31ce:	695b      	ldr	r3, [r3, #20]
 80a31d0:	9301      	str	r3, [sp, #4]
 80a31d2:	bd08      	pop	{r3, pc}
 80a31d4:	080601cc 	.word	0x080601cc

080a31d8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a31d8:	b508      	push	{r3, lr}
 80a31da:	4b02      	ldr	r3, [pc, #8]	; (80a31e4 <spark_send_event+0xc>)
 80a31dc:	681b      	ldr	r3, [r3, #0]
 80a31de:	6a1b      	ldr	r3, [r3, #32]
 80a31e0:	9301      	str	r3, [sp, #4]
 80a31e2:	bd08      	pop	{r3, pc}
 80a31e4:	080601cc 	.word	0x080601cc

080a31e8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a31e8:	b508      	push	{r3, lr}
 80a31ea:	4b02      	ldr	r3, [pc, #8]	; (80a31f4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a31ec:	681b      	ldr	r3, [r3, #0]
 80a31ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a31f0:	9301      	str	r3, [sp, #4]
 80a31f2:	bd08      	pop	{r3, pc}
 80a31f4:	080601cc 	.word	0x080601cc

080a31f8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a31f8:	b508      	push	{r3, lr}
 80a31fa:	4b02      	ldr	r3, [pc, #8]	; (80a3204 <malloc+0xc>)
 80a31fc:	681b      	ldr	r3, [r3, #0]
 80a31fe:	681b      	ldr	r3, [r3, #0]
 80a3200:	9301      	str	r3, [sp, #4]
 80a3202:	bd08      	pop	{r3, pc}
 80a3204:	080601a0 	.word	0x080601a0

080a3208 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a3208:	b508      	push	{r3, lr}
 80a320a:	4b02      	ldr	r3, [pc, #8]	; (80a3214 <free+0xc>)
 80a320c:	681b      	ldr	r3, [r3, #0]
 80a320e:	685b      	ldr	r3, [r3, #4]
 80a3210:	9301      	str	r3, [sp, #4]
 80a3212:	bd08      	pop	{r3, pc}
 80a3214:	080601a0 	.word	0x080601a0

080a3218 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a3218:	b508      	push	{r3, lr}
 80a321a:	4b02      	ldr	r3, [pc, #8]	; (80a3224 <realloc+0xc>)
 80a321c:	681b      	ldr	r3, [r3, #0]
 80a321e:	689b      	ldr	r3, [r3, #8]
 80a3220:	9301      	str	r3, [sp, #4]
 80a3222:	bd08      	pop	{r3, pc}
 80a3224:	080601a0 	.word	0x080601a0

080a3228 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a3228:	b508      	push	{r3, lr}
 80a322a:	4b02      	ldr	r3, [pc, #8]	; (80a3234 <snprintf+0xc>)
 80a322c:	681b      	ldr	r3, [r3, #0]
 80a322e:	69db      	ldr	r3, [r3, #28]
 80a3230:	9301      	str	r3, [sp, #4]
 80a3232:	bd08      	pop	{r3, pc}
 80a3234:	080601a0 	.word	0x080601a0

080a3238 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a3238:	b508      	push	{r3, lr}
 80a323a:	4b02      	ldr	r3, [pc, #8]	; (80a3244 <vsnprintf+0xc>)
 80a323c:	681b      	ldr	r3, [r3, #0]
 80a323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3240:	9301      	str	r3, [sp, #4]
 80a3242:	bd08      	pop	{r3, pc}
 80a3244:	080601a0 	.word	0x080601a0

080a3248 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a3248:	b508      	push	{r3, lr}
 80a324a:	4b02      	ldr	r3, [pc, #8]	; (80a3254 <abort+0xc>)
 80a324c:	681b      	ldr	r3, [r3, #0]
 80a324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3250:	9301      	str	r3, [sp, #4]
 80a3252:	bd08      	pop	{r3, pc}
 80a3254:	080601a0 	.word	0x080601a0

080a3258 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a3258:	b508      	push	{r3, lr}
 80a325a:	4b02      	ldr	r3, [pc, #8]	; (80a3264 <_malloc_r+0xc>)
 80a325c:	681b      	ldr	r3, [r3, #0]
 80a325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3260:	9301      	str	r3, [sp, #4]
 80a3262:	bd08      	pop	{r3, pc}
 80a3264:	080601a0 	.word	0x080601a0

080a3268 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a3268:	4770      	bx	lr

080a326a <_ZN8SPIClassD0Ev>:
 80a326a:	b510      	push	{r4, lr}
 80a326c:	4604      	mov	r4, r0
 80a326e:	2110      	movs	r1, #16
 80a3270:	f001 fc57 	bl	80a4b22 <_ZdlPvj>
 80a3274:	4620      	mov	r0, r4
 80a3276:	bd10      	pop	{r4, pc}

080a3278 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a3278:	b570      	push	{r4, r5, r6, lr}
 80a327a:	4604      	mov	r4, r0
 80a327c:	460e      	mov	r6, r1
 80a327e:	4b07      	ldr	r3, [pc, #28]	; (80a329c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a3280:	2500      	movs	r5, #0
 80a3282:	6003      	str	r3, [r0, #0]
 80a3284:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a3288:	f7ff fdb8 	bl	80a2dfc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a328c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a328e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a3290:	f7ff fd6c 	bl	80a2d6c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a3294:	60a5      	str	r5, [r4, #8]
}
 80a3296:	4620      	mov	r0, r4
 80a3298:	bd70      	pop	{r4, r5, r6, pc}
 80a329a:	bf00      	nop
 80a329c:	080a61e4 	.word	0x080a61e4

080a32a0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a32a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a32a4:	7900      	ldrb	r0, [r0, #4]
 80a32a6:	f7ff bd51 	b.w	80a2d4c <HAL_SPI_Begin>

080a32aa <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 80a32aa:	68c0      	ldr	r0, [r0, #12]
 80a32ac:	f7ff bdb6 	b.w	80a2e1c <os_mutex_unlock>

080a32b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a32b0:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a32b2:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a32b4:	6018      	str	r0, [r3, #0]
 80a32b6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a32b8:	6818      	ldr	r0, [r3, #0]
 80a32ba:	b2e5      	uxtb	r5, r4
 80a32bc:	4288      	cmp	r0, r1
 80a32be:	d906      	bls.n	80a32ce <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a32c0:	3401      	adds	r4, #1
 80a32c2:	2c08      	cmp	r4, #8
 80a32c4:	d002      	beq.n	80a32cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a32c6:	0840      	lsrs	r0, r0, #1
 80a32c8:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a32ca:	e7f5      	b.n	80a32b8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a32cc:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a32ce:	4b02      	ldr	r3, [pc, #8]	; (80a32d8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a32d0:	5d5b      	ldrb	r3, [r3, r5]
 80a32d2:	7013      	strb	r3, [r2, #0]
 80a32d4:	bd30      	pop	{r4, r5, pc}
 80a32d6:	bf00      	nop
 80a32d8:	080a61ec 	.word	0x080a61ec

080a32dc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 80a32dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a32e0:	4680      	mov	r8, r0
 80a32e2:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
 80a32e4:	68c0      	ldr	r0, [r0, #12]
 80a32e6:	460f      	mov	r7, r1
 80a32e8:	f7ff fd90 	bl	80a2e0c <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
 80a32ec:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a32f0:	2214      	movs	r2, #20
 80a32f2:	2100      	movs	r1, #0
 80a32f4:	a809      	add	r0, sp, #36	; 0x24
 80a32f6:	f002 fcc9 	bl	80a5c8c <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a32fa:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a32fc:	4620      	mov	r0, r4
 80a32fe:	2200      	movs	r2, #0
 80a3300:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a3302:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
 80a3306:	f7ff fd41 	bl	80a2d8c <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
 80a330a:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 80a330e:	b14c      	cbz	r4, 80a3324 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 80a3310:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a3314:	b92d      	cbnz	r5, 80a3322 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 80a3316:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a3318:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a331c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 80a3320:	e003      	b.n	80a332a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a3322:	2400      	movs	r4, #0
 80a3324:	46a1      	mov	r9, r4
 80a3326:	4626      	mov	r6, r4
 80a3328:	2501      	movs	r5, #1
 80a332a:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a332c:	b10d      	cbz	r5, 80a3332 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 80a332e:	2b00      	cmp	r3, #0
 80a3330:	d140      	bne.n	80a33b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
 80a3332:	429d      	cmp	r5, r3
 80a3334:	d10b      	bne.n	80a334e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 80a3336:	68ba      	ldr	r2, [r7, #8]
 80a3338:	42b2      	cmp	r2, r6
 80a333a:	d108      	bne.n	80a334e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a333c:	f88d 9020 	strb.w	r9, [sp, #32]
 80a3340:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a3344:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a3348:	89ba      	ldrh	r2, [r7, #12]
 80a334a:	4291      	cmp	r1, r2
 80a334c:	d032      	beq.n	80a33b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
 80a334e:	bb23      	cbnz	r3, 80a339a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
 80a3350:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
 80a3354:	f10d 020f 	add.w	r2, sp, #15
 80a3358:	ab04      	add	r3, sp, #16
 80a335a:	68b9      	ldr	r1, [r7, #8]
 80a335c:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a335e:	f7ff ffa7 	bl	80a32b0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 80a3362:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a3364:	b105      	cbz	r5, 80a3368 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
 80a3366:	bb13      	cbnz	r3, 80a33ae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
 80a3368:	42ab      	cmp	r3, r5
 80a336a:	d009      	beq.n	80a3380 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
 80a336c:	2100      	movs	r1, #0
 80a336e:	7b3b      	ldrb	r3, [r7, #12]
 80a3370:	9101      	str	r1, [sp, #4]
 80a3372:	7b7c      	ldrb	r4, [r7, #13]
 80a3374:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a3378:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a337c:	9400      	str	r4, [sp, #0]
 80a337e:	e013      	b.n	80a33a8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
 80a3380:	68bb      	ldr	r3, [r7, #8]
 80a3382:	42b3      	cmp	r3, r6
 80a3384:	d3f2      	bcc.n	80a336c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a3386:	f88d 9020 	strb.w	r9, [sp, #32]
 80a338a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a338e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a3392:	89bb      	ldrh	r3, [r7, #12]
 80a3394:	429a      	cmp	r2, r3
 80a3396:	d1e9      	bne.n	80a336c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
 80a3398:	e009      	b.n	80a33ae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
 80a339a:	2300      	movs	r3, #0
 80a339c:	461a      	mov	r2, r3
 80a339e:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a33a2:	9301      	str	r3, [sp, #4]
 80a33a4:	9300      	str	r3, [sp, #0]
 80a33a6:	2101      	movs	r1, #1
 80a33a8:	f7ff fd08 	bl	80a2dbc <HAL_SPI_Set_Settings>
 80a33ac:	e002      	b.n	80a33b4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
 80a33ae:	9b04      	ldr	r3, [sp, #16]
 80a33b0:	42b3      	cmp	r3, r6
 80a33b2:	d1db      	bne.n	80a336c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
 80a33b4:	2000      	movs	r0, #0
 80a33b6:	b00f      	add	sp, #60	; 0x3c
 80a33b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a33bc <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a33bc:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a33be:	7900      	ldrb	r0, [r0, #4]
 80a33c0:	f7ff fccc 	bl	80a2d5c <HAL_SPI_Send_Receive_Data>
}
 80a33c4:	b2c0      	uxtb	r0, r0
 80a33c6:	bd08      	pop	{r3, pc}

080a33c8 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80a33c8:	b530      	push	{r4, r5, lr}
 80a33ca:	b087      	sub	sp, #28
 80a33cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a33ce:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 80a33d0:	7900      	ldrb	r0, [r0, #4]
 80a33d2:	9500      	str	r5, [sp, #0]
 80a33d4:	f7ff fce2 	bl	80a2d9c <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 80a33d8:	b93d      	cbnz	r5, 80a33ea <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 80a33da:	a902      	add	r1, sp, #8
 80a33dc:	7920      	ldrb	r0, [r4, #4]
 80a33de:	f7ff fce5 	bl	80a2dac <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 80a33e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a33e6:	07db      	lsls	r3, r3, #31
 80a33e8:	d4f7      	bmi.n	80a33da <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 80a33ea:	b007      	add	sp, #28
 80a33ec:	bd30      	pop	{r4, r5, pc}

080a33ee <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a33ee:	7900      	ldrb	r0, [r0, #4]
 80a33f0:	f7ff bcc4 	b.w	80a2d7c <HAL_SPI_Is_Enabled>

080a33f4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a33f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a33f8:	4b03      	ldr	r3, [pc, #12]	; (80a3408 <_GLOBAL__sub_I_System+0x14>)
 80a33fa:	2000      	movs	r0, #0
 80a33fc:	7018      	strb	r0, [r3, #0]
 80a33fe:	8058      	strh	r0, [r3, #2]
 80a3400:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a3402:	f7ff be45 	b.w	80a3090 <set_system_mode>
 80a3406:	bf00      	nop
 80a3408:	2000127a 	.word	0x2000127a

080a340c <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a340c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a340e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3410:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a3412:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3416:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a3418:	2201      	movs	r2, #1
 80a341a:	f247 5330 	movw	r3, #30000	; 0x7530
 80a341e:	4621      	mov	r1, r4
 80a3420:	47a8      	blx	r5
}
 80a3422:	b003      	add	sp, #12
 80a3424:	bd30      	pop	{r4, r5, pc}

080a3426 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3426:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3428:	6803      	ldr	r3, [r0, #0]
 80a342a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a342c:	f247 5330 	movw	r3, #30000	; 0x7530
 80a3430:	46a4      	mov	ip, r4
}
 80a3432:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3434:	4760      	bx	ip

080a3436 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3436:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3438:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a343a:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a343c:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a3440:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a3442:	4621      	mov	r1, r4
 80a3444:	4613      	mov	r3, r2
 80a3446:	2201      	movs	r2, #1
 80a3448:	47a8      	blx	r5
}
 80a344a:	b003      	add	sp, #12
 80a344c:	bd30      	pop	{r4, r5, pc}

080a344e <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a344e:	4770      	bx	lr

080a3450 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a3450:	4770      	bx	lr

080a3452 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a3452:	2000      	movs	r0, #0
 80a3454:	4770      	bx	lr

080a3456 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a3456:	b510      	push	{r4, lr}
 80a3458:	4604      	mov	r4, r0
 80a345a:	2114      	movs	r1, #20
 80a345c:	f001 fb61 	bl	80a4b22 <_ZdlPvj>
 80a3460:	4620      	mov	r0, r4
 80a3462:	bd10      	pop	{r4, pc}

080a3464 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a3464:	f7fc be1d 	b.w	80a00a2 <_ZdlPv>

080a3468 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a3468:	b510      	push	{r4, lr}
 80a346a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a346c:	6803      	ldr	r3, [r0, #0]
 80a346e:	689b      	ldr	r3, [r3, #8]
 80a3470:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3472:	68a3      	ldr	r3, [r4, #8]
 80a3474:	3b01      	subs	r3, #1
 80a3476:	60a3      	str	r3, [r4, #8]
 80a3478:	b92b      	cbnz	r3, 80a3486 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80a347a:	6823      	ldr	r3, [r4, #0]
 80a347c:	4620      	mov	r0, r4
        }
    }
 80a347e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a3482:	68db      	ldr	r3, [r3, #12]
 80a3484:	4718      	bx	r3
 80a3486:	bd10      	pop	{r4, pc}

080a3488 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3488:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a348a:	4604      	mov	r4, r0
 80a348c:	4606      	mov	r6, r0
 80a348e:	694d      	ldr	r5, [r1, #20]
 80a3490:	4b04      	ldr	r3, [pc, #16]	; (80a34a4 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a3492:	358c      	adds	r5, #140	; 0x8c
 80a3494:	f844 3b04 	str.w	r3, [r4], #4
 80a3498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a349a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a349c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a349e:	4630      	mov	r0, r6
 80a34a0:	7023      	strb	r3, [r4, #0]
 80a34a2:	bd70      	pop	{r4, r5, r6, pc}
 80a34a4:	080a63a4 	.word	0x080a63a4

080a34a8 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a34a8:	b510      	push	{r4, lr}
 80a34aa:	6943      	ldr	r3, [r0, #20]
 80a34ac:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a34ae:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a34b2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a34b6:	429a      	cmp	r2, r3
 80a34b8:	d005      	beq.n	80a34c6 <_ZN9TCPClient4peekEv+0x1e>
 80a34ba:	6962      	ldr	r2, [r4, #20]
 80a34bc:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a34c0:	4413      	add	r3, r2
 80a34c2:	7918      	ldrb	r0, [r3, #4]
 80a34c4:	bd10      	pop	{r4, pc}
 80a34c6:	6803      	ldr	r3, [r0, #0]
 80a34c8:	691b      	ldr	r3, [r3, #16]
 80a34ca:	4798      	blx	r3
 80a34cc:	2800      	cmp	r0, #0
 80a34ce:	d1f4      	bne.n	80a34ba <_ZN9TCPClient4peekEv+0x12>
 80a34d0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a34d4:	bd10      	pop	{r4, pc}

080a34d6 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a34d6:	b510      	push	{r4, lr}
 80a34d8:	6943      	ldr	r3, [r0, #20]
 80a34da:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a34dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a34e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a34e4:	429a      	cmp	r2, r3
 80a34e6:	d008      	beq.n	80a34fa <_ZN9TCPClient4readEv+0x24>
 80a34e8:	6962      	ldr	r2, [r4, #20]
 80a34ea:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a34ee:	1c59      	adds	r1, r3, #1
 80a34f0:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a34f4:	4413      	add	r3, r2
 80a34f6:	7918      	ldrb	r0, [r3, #4]
 80a34f8:	bd10      	pop	{r4, pc}
 80a34fa:	6803      	ldr	r3, [r0, #0]
 80a34fc:	691b      	ldr	r3, [r3, #16]
 80a34fe:	4798      	blx	r3
 80a3500:	2800      	cmp	r0, #0
 80a3502:	d1f1      	bne.n	80a34e8 <_ZN9TCPClient4readEv+0x12>
 80a3504:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a3508:	bd10      	pop	{r4, pc}

080a350a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a350a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a350c:	6943      	ldr	r3, [r0, #20]
 80a350e:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a3510:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3514:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a3518:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a351a:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a351c:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a351e:	d106      	bne.n	80a352e <_ZN9TCPClient4readEPhj+0x24>
 80a3520:	6803      	ldr	r3, [r0, #0]
 80a3522:	691b      	ldr	r3, [r3, #16]
 80a3524:	4798      	blx	r3
 80a3526:	b910      	cbnz	r0, 80a352e <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a3528:	f04f 34ff 	mov.w	r4, #4294967295
 80a352c:	e014      	b.n	80a3558 <_ZN9TCPClient4readEPhj+0x4e>
 80a352e:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3530:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a3532:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3536:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a353a:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a353c:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a353e:	42bc      	cmp	r4, r7
 80a3540:	bf28      	it	cs
 80a3542:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3544:	3104      	adds	r1, #4
 80a3546:	4622      	mov	r2, r4
 80a3548:	f002 fb95 	bl	80a5c76 <memcpy>
 80a354c:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a354e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3552:	4423      	add	r3, r4
 80a3554:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a3558:	4620      	mov	r0, r4
 80a355a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a355c <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a355c:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a355e:	2300      	movs	r3, #0
 80a3560:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3564:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3566:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a356a:	4770      	bx	lr

080a356c <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a356c:	b538      	push	{r3, r4, r5, lr}
 80a356e:	6942      	ldr	r2, [r0, #20]
 80a3570:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a3572:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3576:	b11b      	cbz	r3, 80a3580 <_ZN9TCPClient9availableEv+0x14>
 80a3578:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a357c:	429a      	cmp	r2, r3
 80a357e:	d00c      	beq.n	80a359a <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a3580:	6920      	ldr	r0, [r4, #16]
 80a3582:	f001 fa09 	bl	80a4998 <_ZN5spark12NetworkClass4fromEm>
 80a3586:	6803      	ldr	r3, [r0, #0]
 80a3588:	68db      	ldr	r3, [r3, #12]
 80a358a:	4798      	blx	r3
 80a358c:	b318      	cbz	r0, 80a35d6 <_ZN9TCPClient9availableEv+0x6a>
 80a358e:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3590:	6818      	ldr	r0, [r3, #0]
 80a3592:	f7ff fcfd 	bl	80a2f90 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a3596:	b918      	cbnz	r0, 80a35a0 <_ZN9TCPClient9availableEv+0x34>
 80a3598:	e01d      	b.n	80a35d6 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a359a:	f7ff ffdf 	bl	80a355c <_ZN9TCPClient12flush_bufferEv>
 80a359e:	e7ef      	b.n	80a3580 <_ZN9TCPClient9availableEv+0x14>
 80a35a0:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a35a2:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a35a6:	297f      	cmp	r1, #127	; 0x7f
 80a35a8:	d815      	bhi.n	80a35d6 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a35aa:	1d05      	adds	r5, r0, #4
 80a35ac:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a35b0:	2300      	movs	r3, #0
 80a35b2:	4429      	add	r1, r5
 80a35b4:	6800      	ldr	r0, [r0, #0]
 80a35b6:	f7ff fd03 	bl	80a2fc0 <socket_receive>
            if (ret > 0)
 80a35ba:	2800      	cmp	r0, #0
 80a35bc:	dd0b      	ble.n	80a35d6 <_ZN9TCPClient9availableEv+0x6a>
 80a35be:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a35c0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a35c4:	b90a      	cbnz	r2, 80a35ca <_ZN9TCPClient9availableEv+0x5e>
 80a35c6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a35ca:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a35cc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a35d0:	4418      	add	r0, r3
 80a35d2:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a35d6:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a35d8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a35dc:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a35e0:	1a18      	subs	r0, r3, r0
}
 80a35e2:	bd38      	pop	{r3, r4, r5, pc}

080a35e4 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a35e4:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a35e6:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a35e8:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a35ea:	6818      	ldr	r0, [r3, #0]
 80a35ec:	f7ff fcd0 	bl	80a2f90 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a35f0:	b118      	cbz	r0, 80a35fa <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a35f2:	6963      	ldr	r3, [r4, #20]
 80a35f4:	6818      	ldr	r0, [r3, #0]
 80a35f6:	f7ff fceb 	bl	80a2fd0 <socket_close>
 80a35fa:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a35fc:	f7ff fcf0 	bl	80a2fe0 <socket_handle_invalid>
 80a3600:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3602:	6960      	ldr	r0, [r4, #20]
 80a3604:	2211      	movs	r2, #17
 80a3606:	2100      	movs	r1, #0
 80a3608:	308c      	adds	r0, #140	; 0x8c
 80a360a:	f002 fb3f 	bl	80a5c8c <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a360e:	4620      	mov	r0, r4
}
 80a3610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a3614:	f7ff bfa2 	b.w	80a355c <_ZN9TCPClient12flush_bufferEv>

080a3618 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a361c:	461f      	mov	r7, r3
    stop();
 80a361e:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3620:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a3622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3624:	4606      	mov	r6, r0
 80a3626:	460c      	mov	r4, r1
 80a3628:	4615      	mov	r5, r2
    stop();
 80a362a:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a362c:	4638      	mov	r0, r7
 80a362e:	f001 f9b3 	bl	80a4998 <_ZN5spark12NetworkClass4fromEm>
 80a3632:	6803      	ldr	r3, [r0, #0]
 80a3634:	68db      	ldr	r3, [r3, #12]
 80a3636:	4798      	blx	r3
 80a3638:	2800      	cmp	r0, #0
 80a363a:	d056      	beq.n	80a36ea <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a363c:	9700      	str	r7, [sp, #0]
 80a363e:	462b      	mov	r3, r5
 80a3640:	2206      	movs	r2, #6
 80a3642:	2101      	movs	r1, #1
 80a3644:	2002      	movs	r0, #2
 80a3646:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a364a:	f7ff fca9 	bl	80a2fa0 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a364e:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3650:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3654:	2700      	movs	r7, #0
 80a3656:	9302      	str	r3, [sp, #8]
 80a3658:	6973      	ldr	r3, [r6, #20]
 80a365a:	9703      	str	r7, [sp, #12]
 80a365c:	681b      	ldr	r3, [r3, #0]
 80a365e:	2001      	movs	r0, #1
 80a3660:	9301      	str	r3, [sp, #4]
 80a3662:	4b23      	ldr	r3, [pc, #140]	; (80a36f0 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3664:	aa02      	add	r2, sp, #8
 80a3666:	9300      	str	r3, [sp, #0]
 80a3668:	4922      	ldr	r1, [pc, #136]	; (80a36f4 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a366a:	463b      	mov	r3, r7
 80a366c:	f7ff fd08 	bl	80a3080 <log_message>

          if (socket_handle_valid(d_->sock))
 80a3670:	6973      	ldr	r3, [r6, #20]
 80a3672:	6818      	ldr	r0, [r3, #0]
 80a3674:	f7ff fc8c 	bl	80a2f90 <socket_handle_valid>
 80a3678:	2800      	cmp	r0, #0
 80a367a:	d036      	beq.n	80a36ea <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a367c:	4630      	mov	r0, r6
 80a367e:	f7ff ff6d 	bl	80a355c <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a3682:	2302      	movs	r3, #2
 80a3684:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3688:	0a2b      	lsrs	r3, r5, #8
 80a368a:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a368e:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3690:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3694:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3698:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a369a:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a369e:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a36a2:	7963      	ldrb	r3, [r4, #5]
 80a36a4:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a36a8:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a36ac:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a36b0:	f7ff fcd6 	bl	80a3060 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a36b4:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a36b6:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a36b8:	2210      	movs	r2, #16
 80a36ba:	a902      	add	r1, sp, #8
 80a36bc:	6818      	ldr	r0, [r3, #0]
 80a36be:	f7ff fc77 	bl	80a2fb0 <socket_connect>
 80a36c2:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a36c4:	4628      	mov	r0, r5
 80a36c6:	f7ff fccb 	bl	80a3060 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a36ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a36cc:	6975      	ldr	r5, [r6, #20]
 80a36ce:	358c      	adds	r5, #140	; 0x8c
 80a36d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a36d2:	6823      	ldr	r3, [r4, #0]
 80a36d4:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a36d6:	f1b8 0f00 	cmp.w	r8, #0
 80a36da:	d005      	beq.n	80a36e8 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a36dc:	6833      	ldr	r3, [r6, #0]
 80a36de:	4630      	mov	r0, r6
 80a36e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a36e2:	4798      	blx	r3
 80a36e4:	4638      	mov	r0, r7
 80a36e6:	e000      	b.n	80a36ea <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a36e8:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a36ea:	b00a      	add	sp, #40	; 0x28
 80a36ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a36f0:	080a6263 	.word	0x080a6263
 80a36f4:	080a625c 	.word	0x080a625c

080a36f8 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a36f8:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a36fa:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a36fc:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a36fe:	6818      	ldr	r0, [r3, #0]
 80a3700:	f7ff fc46 	bl	80a2f90 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a3704:	b908      	cbnz	r0, 80a370a <_ZN9TCPClient6statusEv+0x12>
 80a3706:	2000      	movs	r0, #0
 80a3708:	bd10      	pop	{r4, pc}
 80a370a:	6920      	ldr	r0, [r4, #16]
 80a370c:	f001 f944 	bl	80a4998 <_ZN5spark12NetworkClass4fromEm>
 80a3710:	6803      	ldr	r3, [r0, #0]
 80a3712:	68db      	ldr	r3, [r3, #12]
 80a3714:	4798      	blx	r3
 80a3716:	2800      	cmp	r0, #0
 80a3718:	d0f5      	beq.n	80a3706 <_ZN9TCPClient6statusEv+0xe>
 80a371a:	6963      	ldr	r3, [r4, #20]
 80a371c:	6818      	ldr	r0, [r3, #0]
 80a371e:	f7ff fc2f 	bl	80a2f80 <socket_active_status>
 80a3722:	fab0 f080 	clz	r0, r0
 80a3726:	0940      	lsrs	r0, r0, #5
}
 80a3728:	bd10      	pop	{r4, pc}

080a372a <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a372a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a372e:	2500      	movs	r5, #0
 80a3730:	6045      	str	r5, [r0, #4]
 80a3732:	4604      	mov	r4, r0
 80a3734:	460e      	mov	r6, r1
 80a3736:	4617      	mov	r7, r2
 80a3738:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a373a:	f7ff ffdd 	bl	80a36f8 <_ZN9TCPClient6statusEv>
 80a373e:	b160      	cbz	r0, 80a375a <_ZN9TCPClient5writeEPKhjm+0x30>
 80a3740:	6960      	ldr	r0, [r4, #20]
 80a3742:	9501      	str	r5, [sp, #4]
 80a3744:	f8cd 8000 	str.w	r8, [sp]
 80a3748:	462b      	mov	r3, r5
 80a374a:	463a      	mov	r2, r7
 80a374c:	4631      	mov	r1, r6
 80a374e:	6800      	ldr	r0, [r0, #0]
 80a3750:	f7ff fc4e 	bl	80a2ff0 <socket_send_ex>
    if (ret < 0) {
 80a3754:	2800      	cmp	r0, #0
 80a3756:	da03      	bge.n	80a3760 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a3758:	e001      	b.n	80a375e <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a375a:	f04f 30ff 	mov.w	r0, #4294967295
 80a375e:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a3760:	b002      	add	sp, #8
 80a3762:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3766 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a3766:	b538      	push	{r3, r4, r5, lr}
 80a3768:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a376a:	f7ff ffc5 	bl	80a36f8 <_ZN9TCPClient6statusEv>
 80a376e:	bb00      	cbnz	r0, 80a37b2 <_ZN9TCPClient9connectedEv+0x4c>
 80a3770:	6963      	ldr	r3, [r4, #20]
 80a3772:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a3776:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a377a:	4291      	cmp	r1, r2
 80a377c:	d119      	bne.n	80a37b2 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a377e:	6818      	ldr	r0, [r3, #0]
 80a3780:	f7ff fc06 	bl	80a2f90 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3784:	b128      	cbz	r0, 80a3792 <_ZN9TCPClient9connectedEv+0x2c>
 80a3786:	6963      	ldr	r3, [r4, #20]
 80a3788:	6818      	ldr	r0, [r3, #0]
 80a378a:	f7ff fbf9 	bl	80a2f80 <socket_active_status>
 80a378e:	2801      	cmp	r0, #1
 80a3790:	d001      	beq.n	80a3796 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a3792:	2500      	movs	r5, #0
 80a3794:	e00e      	b.n	80a37b4 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a3796:	6823      	ldr	r3, [r4, #0]
 80a3798:	4620      	mov	r0, r4
 80a379a:	691b      	ldr	r3, [r3, #16]
 80a379c:	4798      	blx	r3
 80a379e:	2800      	cmp	r0, #0
 80a37a0:	bf14      	ite	ne
 80a37a2:	2501      	movne	r5, #1
 80a37a4:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a37a6:	d105      	bne.n	80a37b4 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a37a8:	6823      	ldr	r3, [r4, #0]
 80a37aa:	4620      	mov	r0, r4
 80a37ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a37ae:	4798      	blx	r3
 80a37b0:	e000      	b.n	80a37b4 <_ZN9TCPClient9connectedEv+0x4e>
 80a37b2:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a37b4:	4628      	mov	r0, r5
 80a37b6:	bd38      	pop	{r3, r4, r5, pc}

080a37b8 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a37b8:	b508      	push	{r3, lr}
   return (status()!=0);
 80a37ba:	f7ff ff9d 	bl	80a36f8 <_ZN9TCPClient6statusEv>
}
 80a37be:	3000      	adds	r0, #0
 80a37c0:	bf18      	it	ne
 80a37c2:	2001      	movne	r0, #1
 80a37c4:	bd08      	pop	{r3, pc}

080a37c6 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a37c6:	b510      	push	{r4, lr}
 80a37c8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a37ca:	2300      	movs	r3, #0
 80a37cc:	6001      	str	r1, [r0, #0]
 80a37ce:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a37d2:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a37d6:	3088      	adds	r0, #136	; 0x88
 80a37d8:	f000 fe14 	bl	80a4404 <_ZN9IPAddressC1Ev>
}
 80a37dc:	4620      	mov	r0, r4
 80a37de:	bd10      	pop	{r4, pc}

080a37e0 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a37e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a37e4:	b570      	push	{r4, r5, r6, lr}
 80a37e6:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a37e8:	4a14      	ldr	r2, [pc, #80]	; (80a383c <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a37ea:	2300      	movs	r3, #0
 80a37ec:	6043      	str	r3, [r0, #4]
 80a37ee:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a37f0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a37f2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a37f4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a37f6:	20a0      	movs	r0, #160	; 0xa0
 80a37f8:	460e      	mov	r6, r1
 80a37fa:	f7fc fc50 	bl	80a009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a37fe:	4605      	mov	r5, r0
 80a3800:	b110      	cbz	r0, 80a3808 <_ZN9TCPClientC1Em+0x28>
 80a3802:	4631      	mov	r1, r6
 80a3804:	f7ff ffdf 	bl	80a37c6 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a3808:	2014      	movs	r0, #20
 80a380a:	f7fc fc48 	bl	80a009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a380e:	4603      	mov	r3, r0
 80a3810:	b128      	cbz	r0, 80a381e <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a3812:	2201      	movs	r2, #1
 80a3814:	6042      	str	r2, [r0, #4]
 80a3816:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a3818:	4a09      	ldr	r2, [pc, #36]	; (80a3840 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a381a:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a381c:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a381e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a3820:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a3822:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a3824:	b128      	cbz	r0, 80a3832 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a3826:	6843      	ldr	r3, [r0, #4]
 80a3828:	3b01      	subs	r3, #1
 80a382a:	6043      	str	r3, [r0, #4]
 80a382c:	b90b      	cbnz	r3, 80a3832 <_ZN9TCPClientC1Em+0x52>
 80a382e:	f7ff fe1b 	bl	80a3468 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a3832:	4620      	mov	r0, r4
 80a3834:	f7ff fe92 	bl	80a355c <_ZN9TCPClient12flush_bufferEv>
}
 80a3838:	4620      	mov	r0, r4
 80a383a:	bd70      	pop	{r4, r5, r6, pc}
 80a383c:	080a6218 	.word	0x080a6218
 80a3840:	080a61fc 	.word	0x080a61fc

080a3844 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3844:	b510      	push	{r4, lr}
 80a3846:	4604      	mov	r4, r0
 80a3848:	f7ff fbca 	bl	80a2fe0 <socket_handle_invalid>
 80a384c:	4601      	mov	r1, r0
 80a384e:	4620      	mov	r0, r4
 80a3850:	f7ff ffc6 	bl	80a37e0 <_ZN9TCPClientC1Em>
{
}
 80a3854:	4620      	mov	r0, r4
 80a3856:	bd10      	pop	{r4, pc}

080a3858 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a3858:	b510      	push	{r4, lr}
 80a385a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a385c:	6800      	ldr	r0, [r0, #0]
 80a385e:	f7ff fb97 	bl	80a2f90 <socket_handle_valid>
 80a3862:	b110      	cbz	r0, 80a386a <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3864:	6820      	ldr	r0, [r4, #0]
 80a3866:	f7ff fbb3 	bl	80a2fd0 <socket_close>
    }
}
 80a386a:	4620      	mov	r0, r4
 80a386c:	bd10      	pop	{r4, pc}

080a386e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a386e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a3870:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a3872:	4620      	mov	r0, r4
 80a3874:	f7ff fff0 	bl	80a3858 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a3878:	b124      	cbz	r4, 80a3884 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a387a:	4620      	mov	r0, r4
 80a387c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3880:	f7fc bc0f 	b.w	80a00a2 <_ZdlPv>
 80a3884:	bd10      	pop	{r4, pc}
	...

080a3888 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a388c:	461f      	mov	r7, r3
    stop();
 80a388e:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3890:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a3892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3894:	4606      	mov	r6, r0
 80a3896:	460d      	mov	r5, r1
 80a3898:	4690      	mov	r8, r2
    stop();
 80a389a:	4798      	blx	r3
    if (Network.ready())
 80a389c:	4813      	ldr	r0, [pc, #76]	; (80a38ec <_ZN9TCPClient7connectEPKctm+0x64>)
 80a389e:	f001 f82e 	bl	80a48fe <_ZN5spark12NetworkClass5readyEv>
 80a38a2:	b300      	cbz	r0, 80a38e6 <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a38a4:	a802      	add	r0, sp, #8
 80a38a6:	f000 fdad 	bl	80a4404 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a38aa:	4628      	mov	r0, r5
 80a38ac:	f002 fa4b 	bl	80a5d46 <strlen>
 80a38b0:	2400      	movs	r4, #0
 80a38b2:	b281      	uxth	r1, r0
 80a38b4:	9400      	str	r4, [sp, #0]
 80a38b6:	463b      	mov	r3, r7
 80a38b8:	aa03      	add	r2, sp, #12
 80a38ba:	4628      	mov	r0, r5
 80a38bc:	f7ff fbd8 	bl	80a3070 <inet_gethostbyname>
 80a38c0:	b980      	cbnz	r0, 80a38e4 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a38c2:	6833      	ldr	r3, [r6, #0]
 80a38c4:	ad09      	add	r5, sp, #36	; 0x24
 80a38c6:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a38ca:	4b09      	ldr	r3, [pc, #36]	; (80a38f0 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a38cc:	ac03      	add	r4, sp, #12
 80a38ce:	9308      	str	r3, [sp, #32]
 80a38d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a38d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a38d4:	6823      	ldr	r3, [r4, #0]
 80a38d6:	4642      	mov	r2, r8
 80a38d8:	702b      	strb	r3, [r5, #0]
 80a38da:	a908      	add	r1, sp, #32
 80a38dc:	463b      	mov	r3, r7
 80a38de:	4630      	mov	r0, r6
 80a38e0:	47c8      	blx	r9
 80a38e2:	e000      	b.n	80a38e6 <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a38e4:	4620      	mov	r0, r4
}
 80a38e6:	b00f      	add	sp, #60	; 0x3c
 80a38e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a38ec:	20001704 	.word	0x20001704
 80a38f0:	080a63a4 	.word	0x080a63a4

080a38f4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a38f4:	b510      	push	{r4, lr}
 80a38f6:	4604      	mov	r4, r0
{
	free(buffer);
 80a38f8:	6800      	ldr	r0, [r0, #0]
 80a38fa:	f7ff fc85 	bl	80a3208 <free>
}
 80a38fe:	4620      	mov	r0, r4
 80a3900:	bd10      	pop	{r4, pc}

080a3902 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a3902:	b510      	push	{r4, lr}
 80a3904:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a3906:	6800      	ldr	r0, [r0, #0]
 80a3908:	b108      	cbz	r0, 80a390e <_ZN6String10invalidateEv+0xc>
 80a390a:	f7ff fc7d 	bl	80a3208 <free>
	buffer = NULL;
 80a390e:	2300      	movs	r3, #0
 80a3910:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a3912:	60a3      	str	r3, [r4, #8]
 80a3914:	6063      	str	r3, [r4, #4]
 80a3916:	bd10      	pop	{r4, pc}

080a3918 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a3918:	b538      	push	{r3, r4, r5, lr}
 80a391a:	4604      	mov	r4, r0
 80a391c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a391e:	6800      	ldr	r0, [r0, #0]
 80a3920:	3101      	adds	r1, #1
 80a3922:	f7ff fc79 	bl	80a3218 <realloc>
	if (newbuffer) {
 80a3926:	b110      	cbz	r0, 80a392e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3928:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a392c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a392e:	bd38      	pop	{r3, r4, r5, pc}

080a3930 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3930:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a3932:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3934:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a3936:	b113      	cbz	r3, 80a393e <_ZN6String7reserveEj+0xe>
 80a3938:	6843      	ldr	r3, [r0, #4]
 80a393a:	428b      	cmp	r3, r1
 80a393c:	d207      	bcs.n	80a394e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a393e:	4620      	mov	r0, r4
 80a3940:	f7ff ffea 	bl	80a3918 <_ZN6String12changeBufferEj>
 80a3944:	b120      	cbz	r0, 80a3950 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a3946:	68a3      	ldr	r3, [r4, #8]
 80a3948:	b90b      	cbnz	r3, 80a394e <_ZN6String7reserveEj+0x1e>
 80a394a:	6822      	ldr	r2, [r4, #0]
 80a394c:	7013      	strb	r3, [r2, #0]
 80a394e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a3950:	bd10      	pop	{r4, pc}

080a3952 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3952:	b570      	push	{r4, r5, r6, lr}
 80a3954:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3956:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3958:	4604      	mov	r4, r0
 80a395a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a395c:	f7ff ffe8 	bl	80a3930 <_ZN6String7reserveEj>
 80a3960:	b918      	cbnz	r0, 80a396a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a3962:	4620      	mov	r0, r4
 80a3964:	f7ff ffcd 	bl	80a3902 <_ZN6String10invalidateEv>
		return *this;
 80a3968:	e009      	b.n	80a397e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a396a:	462a      	mov	r2, r5
 80a396c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a396e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a3970:	6820      	ldr	r0, [r4, #0]
 80a3972:	f002 f980 	bl	80a5c76 <memcpy>
	buffer[len] = 0;
 80a3976:	6822      	ldr	r2, [r4, #0]
 80a3978:	68a3      	ldr	r3, [r4, #8]
 80a397a:	2100      	movs	r1, #0
 80a397c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a397e:	4620      	mov	r0, r4
 80a3980:	bd70      	pop	{r4, r5, r6, pc}

080a3982 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3982:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3984:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3986:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3988:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a398a:	6043      	str	r3, [r0, #4]
	len = 0;
 80a398c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a398e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a3990:	460d      	mov	r5, r1
 80a3992:	b139      	cbz	r1, 80a39a4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a3994:	4608      	mov	r0, r1
 80a3996:	f002 f9d6 	bl	80a5d46 <strlen>
 80a399a:	4629      	mov	r1, r5
 80a399c:	4602      	mov	r2, r0
 80a399e:	4620      	mov	r0, r4
 80a39a0:	f7ff ffd7 	bl	80a3952 <_ZN6String4copyEPKcj>
}
 80a39a4:	4620      	mov	r0, r4
 80a39a6:	bd38      	pop	{r3, r4, r5, pc}

080a39a8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a39a8:	b538      	push	{r3, r4, r5, lr}
 80a39aa:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a39ac:	460c      	mov	r4, r1
 80a39ae:	b141      	cbz	r1, 80a39c2 <_ZN6StringaSEPKc+0x1a>
 80a39b0:	4608      	mov	r0, r1
 80a39b2:	f002 f9c8 	bl	80a5d46 <strlen>
 80a39b6:	4621      	mov	r1, r4
 80a39b8:	4602      	mov	r2, r0
 80a39ba:	4628      	mov	r0, r5
 80a39bc:	f7ff ffc9 	bl	80a3952 <_ZN6String4copyEPKcj>
 80a39c0:	e001      	b.n	80a39c6 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a39c2:	f7ff ff9e 	bl	80a3902 <_ZN6String10invalidateEv>

	return *this;
}
 80a39c6:	4628      	mov	r0, r5
 80a39c8:	bd38      	pop	{r3, r4, r5, pc}

080a39ca <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a39ca:	b570      	push	{r4, r5, r6, lr}
 80a39cc:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a39ce:	460e      	mov	r6, r1
 80a39d0:	b909      	cbnz	r1, 80a39d6 <_ZN6String6concatEPKcj+0xc>
 80a39d2:	2000      	movs	r0, #0
 80a39d4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a39d6:	b16a      	cbz	r2, 80a39f4 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a39d8:	6883      	ldr	r3, [r0, #8]
 80a39da:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a39dc:	4629      	mov	r1, r5
 80a39de:	f7ff ffa7 	bl	80a3930 <_ZN6String7reserveEj>
 80a39e2:	2800      	cmp	r0, #0
 80a39e4:	d0f5      	beq.n	80a39d2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a39e6:	6820      	ldr	r0, [r4, #0]
 80a39e8:	68a3      	ldr	r3, [r4, #8]
 80a39ea:	4631      	mov	r1, r6
 80a39ec:	4418      	add	r0, r3
 80a39ee:	f002 f987 	bl	80a5d00 <strcpy>
	len = newlen;
 80a39f2:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a39f4:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a39f6:	bd70      	pop	{r4, r5, r6, pc}

080a39f8 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a39f8:	688a      	ldr	r2, [r1, #8]
 80a39fa:	6809      	ldr	r1, [r1, #0]
 80a39fc:	f7ff bfe5 	b.w	80a39ca <_ZN6String6concatEPKcj>

080a3a00 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a3a00:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a3a02:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a3a04:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a3a06:	b912      	cbnz	r2, 80a3a0e <_ZNK6String6equalsEPKc+0xe>
 80a3a08:	b919      	cbnz	r1, 80a3a12 <_ZNK6String6equalsEPKc+0x12>
 80a3a0a:	2001      	movs	r0, #1
 80a3a0c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a3a0e:	b911      	cbnz	r1, 80a3a16 <_ZNK6String6equalsEPKc+0x16>
 80a3a10:	6803      	ldr	r3, [r0, #0]
 80a3a12:	7818      	ldrb	r0, [r3, #0]
 80a3a14:	e002      	b.n	80a3a1c <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a3a16:	6800      	ldr	r0, [r0, #0]
 80a3a18:	f002 f968 	bl	80a5cec <strcmp>
 80a3a1c:	fab0 f080 	clz	r0, r0
 80a3a20:	0940      	lsrs	r0, r0, #5
}
 80a3a22:	bd08      	pop	{r3, pc}

080a3a24 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a3a24:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a3a26:	6883      	ldr	r3, [r0, #8]
 80a3a28:	4293      	cmp	r3, r2
 80a3a2a:	d907      	bls.n	80a3a3c <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a3a2c:	6804      	ldr	r4, [r0, #0]
 80a3a2e:	6809      	ldr	r1, [r1, #0]
 80a3a30:	18a0      	adds	r0, r4, r2
 80a3a32:	f002 f990 	bl	80a5d56 <strstr>
	if (found == NULL) return -1;
 80a3a36:	b108      	cbz	r0, 80a3a3c <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a3a38:	1b00      	subs	r0, r0, r4
 80a3a3a:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
 80a3a3c:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
 80a3a40:	bd10      	pop	{r4, pc}

080a3a42 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
 80a3a42:	2200      	movs	r2, #0
 80a3a44:	f7ff bfee 	b.w	80a3a24 <_ZNK6String7indexOfERKS_j>

080a3a48 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a3a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3a4c:	461c      	mov	r4, r3
	if (left > right) {
 80a3a4e:	429a      	cmp	r2, r3
 80a3a50:	bf88      	it	hi
 80a3a52:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a3a54:	460e      	mov	r6, r1
 80a3a56:	4615      	mov	r5, r2
	if (left > right) {
 80a3a58:	bf88      	it	hi
 80a3a5a:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a3a5c:	490d      	ldr	r1, [pc, #52]	; (80a3a94 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a3a5e:	bf88      	it	hi
 80a3a60:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a3a62:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a3a64:	f7ff ff8d 	bl	80a3982 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a3a68:	68b1      	ldr	r1, [r6, #8]
 80a3a6a:	428d      	cmp	r5, r1
 80a3a6c:	d80f      	bhi.n	80a3a8e <_ZNK6String9substringEjj+0x46>
 80a3a6e:	428c      	cmp	r4, r1
 80a3a70:	bf28      	it	cs
 80a3a72:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a3a74:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 80a3a76:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a3a78:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 80a3a7c:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 80a3a7e:	6831      	ldr	r1, [r6, #0]
 80a3a80:	4638      	mov	r0, r7
 80a3a82:	4429      	add	r1, r5
 80a3a84:	f7ff ff90 	bl	80a39a8 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80a3a88:	6833      	ldr	r3, [r6, #0]
 80a3a8a:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 80a3a8e:	4638      	mov	r0, r7
 80a3a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3a94:	080a61ce 	.word	0x080a61ce

080a3a98 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a3a98:	b510      	push	{r4, lr}
 80a3a9a:	4604      	mov	r4, r0
	return substring(left, len);
 80a3a9c:	688b      	ldr	r3, [r1, #8]
 80a3a9e:	f7ff ffd3 	bl	80a3a48 <_ZNK6String9substringEjj>
}
 80a3aa2:	4620      	mov	r0, r4
 80a3aa4:	bd10      	pop	{r4, pc}

080a3aa6 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3aa8:	4606      	mov	r6, r0
 80a3aaa:	460d      	mov	r5, r1
 80a3aac:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a3aae:	2400      	movs	r4, #0
  while (size--) {
 80a3ab0:	42bd      	cmp	r5, r7
 80a3ab2:	d00c      	beq.n	80a3ace <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a3ab4:	6833      	ldr	r3, [r6, #0]
 80a3ab6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3aba:	689b      	ldr	r3, [r3, #8]
 80a3abc:	4630      	mov	r0, r6
 80a3abe:	4798      	blx	r3
     if (chunk>=0)
 80a3ac0:	2800      	cmp	r0, #0
 80a3ac2:	db01      	blt.n	80a3ac8 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a3ac4:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a3ac6:	e7f3      	b.n	80a3ab0 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a3ac8:	2c00      	cmp	r4, #0
 80a3aca:	bf08      	it	eq
 80a3acc:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3ace:	4620      	mov	r0, r4
 80a3ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3ad2 <_ZN5Print5printEPKc>:
 80a3ad2:	b508      	push	{r3, lr}
 80a3ad4:	f7fe fa4a 	bl	80a1f6c <_ZN5Print5writeEPKc>
 80a3ad8:	bd08      	pop	{r3, pc}

080a3ada <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a3ada:	6803      	ldr	r3, [r0, #0]
 80a3adc:	689b      	ldr	r3, [r3, #8]
 80a3ade:	4718      	bx	r3

080a3ae0 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3ae0:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a3ae2:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3ae4:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a3ae6:	f7ff fff8 	bl	80a3ada <_ZN5Print5printEc>
  n += print('\n');
 80a3aea:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a3aec:	4604      	mov	r4, r0
  n += print('\n');
 80a3aee:	4628      	mov	r0, r5
 80a3af0:	f7ff fff3 	bl	80a3ada <_ZN5Print5printEc>
  return n;
}
 80a3af4:	4420      	add	r0, r4
 80a3af6:	bd38      	pop	{r3, r4, r5, pc}

080a3af8 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a3af8:	b538      	push	{r3, r4, r5, lr}
 80a3afa:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3afc:	f7fe fa36 	bl	80a1f6c <_ZN5Print5writeEPKc>
 80a3b00:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a3b02:	4628      	mov	r0, r5
 80a3b04:	f7ff ffec 	bl	80a3ae0 <_ZN5Print7printlnEv>
  return n;
}
 80a3b08:	4420      	add	r0, r4
 80a3b0a:	bd38      	pop	{r3, r4, r5, pc}

080a3b0c <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a3b0c:	2a01      	cmp	r2, #1
 80a3b0e:	bf98      	it	ls
 80a3b10:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3b12:	b530      	push	{r4, r5, lr}
 80a3b14:	460b      	mov	r3, r1
 80a3b16:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a3b18:	2100      	movs	r1, #0
 80a3b1a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a3b1e:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a3b22:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a3b26:	fb05 3312 	mls	r3, r5, r2, r3
 80a3b2a:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3b2c:	2b09      	cmp	r3, #9
 80a3b2e:	bf94      	ite	ls
 80a3b30:	3330      	addls	r3, #48	; 0x30
 80a3b32:	3337      	addhi	r3, #55	; 0x37
 80a3b34:	b2db      	uxtb	r3, r3
 80a3b36:	4621      	mov	r1, r4
 80a3b38:	f804 3901 	strb.w	r3, [r4], #-1
 80a3b3c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a3b3e:	2d00      	cmp	r5, #0
 80a3b40:	d1ef      	bne.n	80a3b22 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a3b42:	f7fe fa13 	bl	80a1f6c <_ZN5Print5writeEPKc>
}
 80a3b46:	b00b      	add	sp, #44	; 0x2c
 80a3b48:	bd30      	pop	{r4, r5, pc}

080a3b4a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a3b4a:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a3b4c:	b922      	cbnz	r2, 80a3b58 <_ZN5Print5printEmi+0xe>
 80a3b4e:	6803      	ldr	r3, [r0, #0]
 80a3b50:	b2c9      	uxtb	r1, r1
 80a3b52:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a3b54:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a3b56:	4718      	bx	r3
  else return printNumber(n, base);
 80a3b58:	b2d2      	uxtb	r2, r2
}
 80a3b5a:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3b5c:	f7ff bfd6 	b.w	80a3b0c <_ZN5Print11printNumberEmh>

080a3b60 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a3b60:	f7ff bff3 	b.w	80a3b4a <_ZN5Print5printEmi>

080a3b64 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a3b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3b68:	4607      	mov	r7, r0
 80a3b6a:	460e      	mov	r6, r1
  if (base == 0) {
 80a3b6c:	4615      	mov	r5, r2
 80a3b6e:	b92a      	cbnz	r2, 80a3b7c <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a3b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a3b74:	6803      	ldr	r3, [r0, #0]
 80a3b76:	b2c9      	uxtb	r1, r1
 80a3b78:	689b      	ldr	r3, [r3, #8]
 80a3b7a:	4718      	bx	r3
  } else if (base == 10) {
 80a3b7c:	2a0a      	cmp	r2, #10
 80a3b7e:	d102      	bne.n	80a3b86 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a3b80:	2900      	cmp	r1, #0
 80a3b82:	da01      	bge.n	80a3b88 <_ZN5Print5printEli+0x24>
 80a3b84:	e004      	b.n	80a3b90 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3b86:	b2d2      	uxtb	r2, r2
  }
}
 80a3b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3b8c:	f7ff bfbe 	b.w	80a3b0c <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3b90:	212d      	movs	r1, #45	; 0x2d
 80a3b92:	f7ff ffa2 	bl	80a3ada <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a3b96:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3b98:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a3b9a:	4271      	negs	r1, r6
 80a3b9c:	4638      	mov	r0, r7
 80a3b9e:	f7ff ffb5 	bl	80a3b0c <_ZN5Print11printNumberEmh>
 80a3ba2:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a3ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3ba8 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3ba8:	f7ff bfdc 	b.w	80a3b64 <_ZN5Print5printEli>

080a3bac <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a3bac:	b538      	push	{r3, r4, r5, lr}
 80a3bae:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3bb0:	f7ff ffd8 	bl	80a3b64 <_ZN5Print5printEli>
 80a3bb4:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a3bb6:	4628      	mov	r0, r5
 80a3bb8:	f7ff ff92 	bl	80a3ae0 <_ZN5Print7printlnEv>
  return n;
}
 80a3bbc:	4420      	add	r0, r4
 80a3bbe:	bd38      	pop	{r3, r4, r5, pc}

080a3bc0 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a3bc0:	b40c      	push	{r2, r3}
 80a3bc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3bc6:	b087      	sub	sp, #28
 80a3bc8:	af00      	add	r7, sp, #0
 80a3bca:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a3bce:	f854 9b04 	ldr.w	r9, [r4], #4
 80a3bd2:	4605      	mov	r5, r0
 80a3bd4:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a3bd6:	4623      	mov	r3, r4
 80a3bd8:	464a      	mov	r2, r9
 80a3bda:	2114      	movs	r1, #20
 80a3bdc:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a3bde:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a3be0:	f7ff fb2a 	bl	80a3238 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a3be4:	2813      	cmp	r0, #19
 80a3be6:	d805      	bhi.n	80a3bf4 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3be8:	1d39      	adds	r1, r7, #4
 80a3bea:	4628      	mov	r0, r5
 80a3bec:	f7fe f9be 	bl	80a1f6c <_ZN5Print5writeEPKc>
 80a3bf0:	4604      	mov	r4, r0
 80a3bf2:	e013      	b.n	80a3c1c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a3bf4:	f100 0308 	add.w	r3, r0, #8
 80a3bf8:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a3bfc:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a3bfe:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a3c02:	1c41      	adds	r1, r0, #1
 80a3c04:	4623      	mov	r3, r4
 80a3c06:	464a      	mov	r2, r9
 80a3c08:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a3c0a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a3c0c:	f7ff fb14 	bl	80a3238 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3c10:	4669      	mov	r1, sp
 80a3c12:	4628      	mov	r0, r5
 80a3c14:	f7fe f9aa 	bl	80a1f6c <_ZN5Print5writeEPKc>
 80a3c18:	4604      	mov	r4, r0
 80a3c1a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a3c1c:	b11e      	cbz	r6, 80a3c26 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a3c1e:	4628      	mov	r0, r5
 80a3c20:	f7ff ff5e 	bl	80a3ae0 <_ZN5Print7printlnEv>
 80a3c24:	4404      	add	r4, r0
    return n;
}
 80a3c26:	4620      	mov	r0, r4
 80a3c28:	371c      	adds	r7, #28
 80a3c2a:	46bd      	mov	sp, r7
 80a3c2c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3c30:	b002      	add	sp, #8
 80a3c32:	4770      	bx	lr

080a3c34 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a3c34:	2300      	movs	r3, #0
 80a3c36:	461a      	mov	r2, r3
 80a3c38:	4619      	mov	r1, r3
 80a3c3a:	6840      	ldr	r0, [r0, #4]
 80a3c3c:	f7ff ba84 	b.w	80a3148 <network_on>

080a3c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a3c40:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a3c42:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a3c44:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a3c46:	b17c      	cbz	r4, 80a3c68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a3c48:	6863      	ldr	r3, [r4, #4]
 80a3c4a:	3b01      	subs	r3, #1
 80a3c4c:	6063      	str	r3, [r4, #4]
 80a3c4e:	b95b      	cbnz	r3, 80a3c68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a3c50:	6823      	ldr	r3, [r4, #0]
 80a3c52:	4620      	mov	r0, r4
 80a3c54:	689b      	ldr	r3, [r3, #8]
 80a3c56:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3c58:	68a3      	ldr	r3, [r4, #8]
 80a3c5a:	3b01      	subs	r3, #1
 80a3c5c:	60a3      	str	r3, [r4, #8]
 80a3c5e:	b91b      	cbnz	r3, 80a3c68 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a3c60:	6823      	ldr	r3, [r4, #0]
 80a3c62:	4620      	mov	r0, r4
 80a3c64:	68db      	ldr	r3, [r3, #12]
 80a3c66:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a3c68:	4628      	mov	r0, r5
 80a3c6a:	bd38      	pop	{r3, r4, r5, pc}

080a3c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a3c6c:	680b      	ldr	r3, [r1, #0]
 80a3c6e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a3c70:	b113      	cbz	r3, 80a3c78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a3c72:	685a      	ldr	r2, [r3, #4]
 80a3c74:	3201      	adds	r2, #1
 80a3c76:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a3c78:	4770      	bx	lr
	...

080a3c7c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a3c7c:	4a01      	ldr	r2, [pc, #4]	; (80a3c84 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a3c7e:	4b02      	ldr	r3, [pc, #8]	; (80a3c88 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a3c80:	601a      	str	r2, [r3, #0]
 80a3c82:	4770      	bx	lr
 80a3c84:	080a62ed 	.word	0x080a62ed
 80a3c88:	20001280 	.word	0x20001280

080a3c8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3c8c:	4b02      	ldr	r3, [pc, #8]	; (80a3c98 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a3c8e:	681a      	ldr	r2, [r3, #0]
 80a3c90:	4b02      	ldr	r3, [pc, #8]	; (80a3c9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a3c92:	601a      	str	r2, [r3, #0]
 80a3c94:	4770      	bx	lr
 80a3c96:	bf00      	nop
 80a3c98:	20000098 	.word	0x20000098
 80a3c9c:	20001284 	.word	0x20001284

080a3ca0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a3ca0:	2100      	movs	r1, #0
 80a3ca2:	f7ff b9fd 	b.w	80a30a0 <system_delay_ms>

080a3ca6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a3ca6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a3ca8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a3caa:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a3cac:	b113      	cbz	r3, 80a3cb4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a3cae:	2203      	movs	r2, #3
 80a3cb0:	4601      	mov	r1, r0
 80a3cb2:	4798      	blx	r3
    }
 80a3cb4:	4620      	mov	r0, r4
 80a3cb6:	bd10      	pop	{r4, pc}

080a3cb8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a3cb8:	b510      	push	{r4, lr}
 80a3cba:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3cbc:	f7ff fff3 	bl	80a3ca6 <_ZNSt14_Function_baseD1Ev>
 80a3cc0:	4620      	mov	r0, r4
 80a3cc2:	bd10      	pop	{r4, pc}

080a3cc4 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a3cc4:	b513      	push	{r0, r1, r4, lr}
 80a3cc6:	460b      	mov	r3, r1
 80a3cc8:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3cca:	c803      	ldmia	r0, {r0, r1}
 80a3ccc:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a3cd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a3cd4:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a3cd8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a3cdc:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a3ce0:	b002      	add	sp, #8
 80a3ce2:	bd10      	pop	{r4, pc}

080a3ce4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3ce4:	4803      	ldr	r0, [pc, #12]	; (80a3cf4 <_GLOBAL__sub_I_RGB+0x10>)
 80a3ce6:	2300      	movs	r3, #0
 80a3ce8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a3cea:	4a03      	ldr	r2, [pc, #12]	; (80a3cf8 <_GLOBAL__sub_I_RGB+0x14>)
 80a3cec:	4903      	ldr	r1, [pc, #12]	; (80a3cfc <_GLOBAL__sub_I_RGB+0x18>)
 80a3cee:	f000 bf13 	b.w	80a4b18 <__aeabi_atexit>
 80a3cf2:	bf00      	nop
 80a3cf4:	20001288 	.word	0x20001288
 80a3cf8:	20000104 	.word	0x20000104
 80a3cfc:	080a3cb9 	.word	0x080a3cb9

080a3d00 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a3d00:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3d02:	4b14      	ldr	r3, [pc, #80]	; (80a3d54 <serialEventRun+0x54>)
 80a3d04:	b133      	cbz	r3, 80a3d14 <serialEventRun+0x14>
 80a3d06:	f000 fc2b 	bl	80a4560 <_Z16_fetch_usbserialv>
 80a3d0a:	6803      	ldr	r3, [r0, #0]
 80a3d0c:	691b      	ldr	r3, [r3, #16]
 80a3d0e:	4798      	blx	r3
 80a3d10:	2800      	cmp	r0, #0
 80a3d12:	dc16      	bgt.n	80a3d42 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3d14:	4b10      	ldr	r3, [pc, #64]	; (80a3d58 <serialEventRun+0x58>)
 80a3d16:	b133      	cbz	r3, 80a3d26 <serialEventRun+0x26>
 80a3d18:	f000 fce6 	bl	80a46e8 <_Z22__fetch_global_Serial1v>
 80a3d1c:	6803      	ldr	r3, [r0, #0]
 80a3d1e:	691b      	ldr	r3, [r3, #16]
 80a3d20:	4798      	blx	r3
 80a3d22:	2800      	cmp	r0, #0
 80a3d24:	dc10      	bgt.n	80a3d48 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3d26:	4b0d      	ldr	r3, [pc, #52]	; (80a3d5c <serialEventRun+0x5c>)
 80a3d28:	b10b      	cbz	r3, 80a3d2e <serialEventRun+0x2e>
 80a3d2a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3d2e:	4b0c      	ldr	r3, [pc, #48]	; (80a3d60 <serialEventRun+0x60>)
 80a3d30:	b17b      	cbz	r3, 80a3d52 <serialEventRun+0x52>
 80a3d32:	f000 fc51 	bl	80a45d8 <_Z17_fetch_usbserial1v>
 80a3d36:	6803      	ldr	r3, [r0, #0]
 80a3d38:	691b      	ldr	r3, [r3, #16]
 80a3d3a:	4798      	blx	r3
 80a3d3c:	2800      	cmp	r0, #0
 80a3d3e:	dc06      	bgt.n	80a3d4e <serialEventRun+0x4e>
 80a3d40:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a3d42:	f3af 8000 	nop.w
 80a3d46:	e7e5      	b.n	80a3d14 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a3d48:	f3af 8000 	nop.w
 80a3d4c:	e7eb      	b.n	80a3d26 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a3d4e:	f3af 8000 	nop.w
 80a3d52:	bd08      	pop	{r3, pc}
	...

080a3d64 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a3d64:	b508      	push	{r3, lr}
	serialEventRun();
 80a3d66:	f7ff ffcb 	bl	80a3d00 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3d6a:	f7ff f83f 	bl	80a2dec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a3d6e:	4b01      	ldr	r3, [pc, #4]	; (80a3d74 <_post_loop+0x10>)
 80a3d70:	6018      	str	r0, [r3, #0]
 80a3d72:	bd08      	pop	{r3, pc}
 80a3d74:	2000172c 	.word	0x2000172c

080a3d78 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3d78:	4802      	ldr	r0, [pc, #8]	; (80a3d84 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a3d7a:	4a03      	ldr	r2, [pc, #12]	; (80a3d88 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a3d7c:	4903      	ldr	r1, [pc, #12]	; (80a3d8c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a3d7e:	1a12      	subs	r2, r2, r0
 80a3d80:	f001 bf79 	b.w	80a5c76 <memcpy>
 80a3d84:	40024000 	.word	0x40024000
 80a3d88:	40024004 	.word	0x40024004
 80a3d8c:	080a6690 	.word	0x080a6690

080a3d90 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a3d90:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3d92:	2300      	movs	r3, #0
 80a3d94:	9300      	str	r3, [sp, #0]
 80a3d96:	461a      	mov	r2, r3
 80a3d98:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3d9c:	f7ff f9aa 	bl	80a30f4 <system_ctrl_set_result>
}
 80a3da0:	b003      	add	sp, #12
 80a3da2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3da8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a3da8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3daa:	8843      	ldrh	r3, [r0, #2]
 80a3dac:	2b0a      	cmp	r3, #10
 80a3dae:	d008      	beq.n	80a3dc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3db0:	2b50      	cmp	r3, #80	; 0x50
 80a3db2:	d109      	bne.n	80a3dc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a3db4:	4b09      	ldr	r3, [pc, #36]	; (80a3ddc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3db6:	681b      	ldr	r3, [r3, #0]
 80a3db8:	b13b      	cbz	r3, 80a3dca <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a3dba:	b003      	add	sp, #12
 80a3dbc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a3dc0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a3dc2:	f7ff ffe5 	bl	80a3d90 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a3dc6:	e006      	b.n	80a3dd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3dc8:	2300      	movs	r3, #0
 80a3dca:	9300      	str	r3, [sp, #0]
 80a3dcc:	461a      	mov	r2, r3
 80a3dce:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3dd2:	f7ff f98f 	bl	80a30f4 <system_ctrl_set_result>
        break;
    }
}
 80a3dd6:	b003      	add	sp, #12
 80a3dd8:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3ddc:	20001298 	.word	0x20001298

080a3de0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a3de0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3de2:	4c10      	ldr	r4, [pc, #64]	; (80a3e24 <module_user_init_hook+0x44>)
 80a3de4:	4d10      	ldr	r5, [pc, #64]	; (80a3e28 <module_user_init_hook+0x48>)
 80a3de6:	6823      	ldr	r3, [r4, #0]
 80a3de8:	42ab      	cmp	r3, r5
 80a3dea:	4b10      	ldr	r3, [pc, #64]	; (80a3e2c <module_user_init_hook+0x4c>)
 80a3dec:	bf0c      	ite	eq
 80a3dee:	2201      	moveq	r2, #1
 80a3df0:	2200      	movne	r2, #0
 80a3df2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3df4:	d002      	beq.n	80a3dfc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3df6:	f7ff ffbf 	bl	80a3d78 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3dfa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3dfc:	f7fe ffe6 	bl	80a2dcc <HAL_RNG_GetRandomNumber>
 80a3e00:	4604      	mov	r4, r0
    srand(seed);
 80a3e02:	f001 ff4b 	bl	80a5c9c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3e06:	4b0a      	ldr	r3, [pc, #40]	; (80a3e30 <module_user_init_hook+0x50>)
 80a3e08:	b113      	cbz	r3, 80a3e10 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a3e0a:	4620      	mov	r0, r4
 80a3e0c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3e10:	2100      	movs	r1, #0
 80a3e12:	4807      	ldr	r0, [pc, #28]	; (80a3e30 <module_user_init_hook+0x50>)
 80a3e14:	f7ff f9e8 	bl	80a31e8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3e1c:	2100      	movs	r1, #0
 80a3e1e:	4805      	ldr	r0, [pc, #20]	; (80a3e34 <module_user_init_hook+0x54>)
 80a3e20:	f7ff b95e 	b.w	80a30e0 <system_ctrl_set_app_request_handler>
 80a3e24:	40024000 	.word	0x40024000
 80a3e28:	9a271c1e 	.word	0x9a271c1e
 80a3e2c:	2000129c 	.word	0x2000129c
 80a3e30:	00000000 	.word	0x00000000
 80a3e34:	080a3da9 	.word	0x080a3da9

080a3e38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a3e38:	4770      	bx	lr

080a3e3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a3e3a:	2000      	movs	r0, #0
 80a3e3c:	4770      	bx	lr

080a3e3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a3e3e:	b510      	push	{r4, lr}
 80a3e40:	4604      	mov	r4, r0
 80a3e42:	2110      	movs	r1, #16
 80a3e44:	f000 fe6d 	bl	80a4b22 <_ZdlPvj>
 80a3e48:	4620      	mov	r0, r4
 80a3e4a:	bd10      	pop	{r4, pc}

080a3e4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a3e4c:	b508      	push	{r3, lr}
      { delete this; }
 80a3e4e:	b108      	cbz	r0, 80a3e54 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a3e50:	f7ff fff5 	bl	80a3e3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a3e54:	bd08      	pop	{r3, pc}

080a3e56 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a3e56:	2200      	movs	r2, #0
 80a3e58:	6002      	str	r2, [r0, #0]
 80a3e5a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a3e5e:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a3e60:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3e62:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a3e66:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3e68:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3e6a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a3e6c:	680c      	ldr	r4, [r1, #0]
 80a3e6e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3e70:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a3e72:	bd10      	pop	{r4, pc}

080a3e74 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a3e74:	b510      	push	{r4, lr}
 80a3e76:	4604      	mov	r4, r0
    free((void*)msg_);
 80a3e78:	6800      	ldr	r0, [r0, #0]
 80a3e7a:	f7ff f9c5 	bl	80a3208 <free>
}
 80a3e7e:	4620      	mov	r0, r4
 80a3e80:	bd10      	pop	{r4, pc}

080a3e82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a3e82:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a3e84:	68c4      	ldr	r4, [r0, #12]
 80a3e86:	b1f4      	cbz	r4, 80a3ec6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a3e88:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a3e8a:	2b02      	cmp	r3, #2
 80a3e8c:	d103      	bne.n	80a3e96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a3e8e:	f104 000c 	add.w	r0, r4, #12
 80a3e92:	f7ff ffef 	bl	80a3e74 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a3e96:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a3e98:	b135      	cbz	r5, 80a3ea8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3e9a:	4628      	mov	r0, r5
 80a3e9c:	f7ff ff03 	bl	80a3ca6 <_ZNSt14_Function_baseD1Ev>
 80a3ea0:	2110      	movs	r1, #16
 80a3ea2:	4628      	mov	r0, r5
 80a3ea4:	f000 fe3d 	bl	80a4b22 <_ZdlPvj>
 80a3ea8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a3eaa:	b135      	cbz	r5, 80a3eba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a3eac:	4628      	mov	r0, r5
 80a3eae:	f7ff fefa 	bl	80a3ca6 <_ZNSt14_Function_baseD1Ev>
 80a3eb2:	2110      	movs	r1, #16
 80a3eb4:	4628      	mov	r0, r5
 80a3eb6:	f000 fe34 	bl	80a4b22 <_ZdlPvj>
 80a3eba:	4620      	mov	r0, r4
 80a3ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a3ec0:	2114      	movs	r1, #20
 80a3ec2:	f000 be2e 	b.w	80a4b22 <_ZdlPvj>
 80a3ec6:	bd38      	pop	{r3, r4, r5, pc}

080a3ec8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a3ec8:	b513      	push	{r0, r1, r4, lr}
 80a3eca:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3ecc:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a3ed0:	2300      	movs	r3, #0
 80a3ed2:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a3ed4:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3ed6:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a3ed8:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3eda:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a3edc:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a3ede:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3ee0:	f7ff feae 	bl	80a3c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3ee4:	4620      	mov	r0, r4
 80a3ee6:	b002      	add	sp, #8
 80a3ee8:	bd10      	pop	{r4, pc}

080a3eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a3eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3eec:	460c      	mov	r4, r1
 80a3eee:	4606      	mov	r6, r0
 80a3ef0:	460f      	mov	r7, r1
 80a3ef2:	f854 3b04 	ldr.w	r3, [r4], #4
 80a3ef6:	ad02      	add	r5, sp, #8
 80a3ef8:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a3efc:	4621      	mov	r1, r4
 80a3efe:	a801      	add	r0, sp, #4
 80a3f00:	f7ff feb4 	bl	80a3c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a3f04:	4629      	mov	r1, r5
 80a3f06:	4630      	mov	r0, r6
 80a3f08:	f7ff ffde 	bl	80a3ec8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3f0c:	a801      	add	r0, sp, #4
 80a3f0e:	f7ff fe97 	bl	80a3c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3f12:	4620      	mov	r0, r4
 80a3f14:	f7ff fe94 	bl	80a3c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a3f18:	4638      	mov	r0, r7
 80a3f1a:	2108      	movs	r1, #8
 80a3f1c:	f000 fe01 	bl	80a4b22 <_ZdlPvj>
        return p;
    }
 80a3f20:	4630      	mov	r0, r6
 80a3f22:	b003      	add	sp, #12
 80a3f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a3f28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a3f28:	b538      	push	{r3, r4, r5, lr}
 80a3f2a:	2300      	movs	r3, #0
 80a3f2c:	4604      	mov	r4, r0
 80a3f2e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3f30:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a3f32:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3f34:	f7fc f8b3 	bl	80a009e <_Znwj>
 80a3f38:	b128      	cbz	r0, 80a3f46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a3f3a:	2301      	movs	r3, #1
 80a3f3c:	6043      	str	r3, [r0, #4]
 80a3f3e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a3f40:	4b02      	ldr	r3, [pc, #8]	; (80a3f4c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a3f42:	60c5      	str	r5, [r0, #12]
 80a3f44:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3f46:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a3f48:	4620      	mov	r0, r4
 80a3f4a:	bd38      	pop	{r3, r4, r5, pc}
 80a3f4c:	080a6388 	.word	0x080a6388

080a3f50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3f50:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a3f52:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3f54:	b90a      	cbnz	r2, 80a3f5a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a3f56:	f000 fde6 	bl	80a4b26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3f5a:	68c3      	ldr	r3, [r0, #12]
    }
 80a3f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3f60:	4718      	bx	r3

080a3f62 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3f62:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3f64:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a3f66:	f100 0110 	add.w	r1, r0, #16
 80a3f6a:	f7ff fff1 	bl	80a3f50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a3f6e:	bd08      	pop	{r3, pc}

080a3f70 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3f70:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a3f72:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3f74:	b90a      	cbnz	r2, 80a3f7a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a3f76:	f000 fdd6 	bl	80a4b26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3f7a:	68c3      	ldr	r3, [r0, #12]
    }
 80a3f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3f80:	4718      	bx	r3

080a3f82 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3f82:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3f84:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a3f86:	f100 0110 	add.w	r1, r0, #16
 80a3f8a:	f7ff fff1 	bl	80a3f70 <_ZNKSt8functionIFvRKbEEclES1_>
 80a3f8e:	bd08      	pop	{r3, pc}

080a3f90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3f90:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3f92:	2300      	movs	r3, #0
 80a3f94:	6083      	str	r3, [r0, #8]
 80a3f96:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3f98:	4604      	mov	r4, r0
 80a3f9a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a3f9c:	b12b      	cbz	r3, 80a3faa <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3f9e:	2202      	movs	r2, #2
 80a3fa0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3fa2:	68eb      	ldr	r3, [r5, #12]
 80a3fa4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a3fa6:	68ab      	ldr	r3, [r5, #8]
 80a3fa8:	60a3      	str	r3, [r4, #8]
	}
    }
 80a3faa:	4620      	mov	r0, r4
 80a3fac:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a3fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3fb2:	b089      	sub	sp, #36	; 0x24
 80a3fb4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a3fb6:	4668      	mov	r0, sp
 80a3fb8:	f7ff ff4d 	bl	80a3e56 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a3fbc:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a3fc0:	2300      	movs	r3, #0
 80a3fc2:	f88d 3008 	strb.w	r3, [sp, #8]
 80a3fc6:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a3fca:	2b00      	cmp	r3, #0
 80a3fcc:	d103      	bne.n	80a3fd6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a3fce:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a3fd2:	2900      	cmp	r1, #0
 80a3fd4:	d1f7      	bne.n	80a3fc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a3fd6:	d002      	beq.n	80a3fde <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a3fd8:	f88d 3008 	strb.w	r3, [sp, #8]
 80a3fdc:	e063      	b.n	80a40a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a3fde:	f114 050c 	adds.w	r5, r4, #12
 80a3fe2:	d003      	beq.n	80a3fec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a3fe4:	4669      	mov	r1, sp
 80a3fe6:	4628      	mov	r0, r5
 80a3fe8:	f7ff ff35 	bl	80a3e56 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a3fec:	f3bf 8f5f 	dmb	sy
 80a3ff0:	2301      	movs	r3, #1
 80a3ff2:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a3ff4:	f3bf 8f5f 	dmb	sy
 80a3ff8:	f104 0308 	add.w	r3, r4, #8
 80a3ffc:	2000      	movs	r0, #0
 80a3ffe:	e853 6f00 	ldrex	r6, [r3]
 80a4002:	e843 0200 	strex	r2, r0, [r3]
 80a4006:	2a00      	cmp	r2, #0
 80a4008:	d1f9      	bne.n	80a3ffe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a400a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a400e:	2e00      	cmp	r6, #0
 80a4010:	d049      	beq.n	80a40a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a4012:	f7ff f855 	bl	80a30c0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a4016:	b120      	cbz	r0, 80a4022 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4018:	4629      	mov	r1, r5
 80a401a:	4630      	mov	r0, r6
 80a401c:	f7ff ff98 	bl	80a3f50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a4020:	e03a      	b.n	80a4098 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4022:	4631      	mov	r1, r6
 80a4024:	a802      	add	r0, sp, #8
 80a4026:	f7ff ffb3 	bl	80a3f90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a402a:	68e0      	ldr	r0, [r4, #12]
 80a402c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a4030:	b108      	cbz	r0, 80a4036 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a4032:	f001 fe6d 	bl	80a5d10 <strdup>
 80a4036:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a4038:	2010      	movs	r0, #16
 80a403a:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a403e:	f7fc f82e 	bl	80a009e <_Znwj>
 80a4042:	4605      	mov	r5, r0
 80a4044:	b1e8      	cbz	r0, 80a4082 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4046:	2700      	movs	r7, #0
 80a4048:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a404a:	2018      	movs	r0, #24
 80a404c:	f7fc f827 	bl	80a009e <_Znwj>
 80a4050:	4604      	mov	r4, r0
 80a4052:	b188      	cbz	r0, 80a4078 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a4054:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4056:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a4058:	a802      	add	r0, sp, #8
 80a405a:	f7ff fe33 	bl	80a3cc4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a405e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a4060:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4062:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4064:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4066:	9204      	str	r2, [sp, #16]
 80a4068:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a406a:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a406c:	60e3      	str	r3, [r4, #12]
 80a406e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a4072:	9205      	str	r2, [sp, #20]
 80a4074:	f7ff feef 	bl	80a3e56 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a4078:	4b0d      	ldr	r3, [pc, #52]	; (80a40b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a407a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a407c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a407e:	4b0d      	ldr	r3, [pc, #52]	; (80a40b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a4080:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a4082:	a806      	add	r0, sp, #24
 80a4084:	f7ff fef6 	bl	80a3e74 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4088:	a802      	add	r0, sp, #8
 80a408a:	f7ff fe0c 	bl	80a3ca6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a408e:	2200      	movs	r2, #0
 80a4090:	4629      	mov	r1, r5
 80a4092:	4809      	ldr	r0, [pc, #36]	; (80a40b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a4094:	f7ff f81c 	bl	80a30d0 <application_thread_invoke>
 80a4098:	4630      	mov	r0, r6
 80a409a:	f7ff fe04 	bl	80a3ca6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a409e:	2110      	movs	r1, #16
 80a40a0:	4630      	mov	r0, r6
 80a40a2:	f000 fd3e 	bl	80a4b22 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a40a6:	4668      	mov	r0, sp
 80a40a8:	f7ff fee4 	bl	80a3e74 <_ZN8particle5ErrorD1Ev>
    }
 80a40ac:	b009      	add	sp, #36	; 0x24
 80a40ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a40b0:	080a3f63 	.word	0x080a3f63
 80a40b4:	080a41d9 	.word	0x080a41d9
 80a40b8:	080a4735 	.word	0x080a4735

080a40bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a40bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a40c0:	b08b      	sub	sp, #44	; 0x2c
 80a40c2:	4606      	mov	r6, r0
 80a40c4:	460f      	mov	r7, r1
 80a40c6:	4690      	mov	r8, r2
 80a40c8:	4699      	mov	r9, r3
 80a40ca:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a40ce:	f7ff f87b 	bl	80a31c8 <spark_cloud_flag_connected>
 80a40d2:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a40d4:	4683      	mov	fp, r0
 80a40d6:	bb30      	cbnz	r0, 80a4126 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a40d8:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a40dc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a40de:	a905      	add	r1, sp, #20
 80a40e0:	4628      	mov	r0, r5
 80a40e2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a40e6:	f7ff feb6 	bl	80a3e56 <_ZN8particle5ErrorC1EOS0_>
 80a40ea:	2014      	movs	r0, #20
 80a40ec:	f7fb ffd7 	bl	80a009e <_Znwj>
 80a40f0:	4604      	mov	r4, r0
 80a40f2:	b158      	cbz	r0, 80a410c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a40f4:	2302      	movs	r3, #2
 80a40f6:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a40f8:	2301      	movs	r3, #1
 80a40fa:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a40fc:	f8c0 b004 	str.w	fp, [r0, #4]
 80a4100:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a4104:	4629      	mov	r1, r5
 80a4106:	300c      	adds	r0, #12
 80a4108:	f7ff fea5 	bl	80a3e56 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a410c:	4630      	mov	r0, r6
 80a410e:	4621      	mov	r1, r4
 80a4110:	f840 4b04 	str.w	r4, [r0], #4
 80a4114:	f7ff ff08 	bl	80a3f28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a4118:	4628      	mov	r0, r5
 80a411a:	f7ff feab 	bl	80a3e74 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a411e:	a805      	add	r0, sp, #20
 80a4120:	f7ff fea8 	bl	80a3e74 <_ZN8particle5ErrorD1Ev>
 80a4124:	e052      	b.n	80a41cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a4126:	2400      	movs	r4, #0
 80a4128:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a412a:	2014      	movs	r0, #20
 80a412c:	606c      	str	r4, [r5, #4]
 80a412e:	60ac      	str	r4, [r5, #8]
 80a4130:	9307      	str	r3, [sp, #28]
 80a4132:	f7fb ffb4 	bl	80a009e <_Znwj>
 80a4136:	4601      	mov	r1, r0
 80a4138:	b118      	cbz	r0, 80a4142 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a413a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a413c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a413e:	6044      	str	r4, [r0, #4]
 80a4140:	6084      	str	r4, [r0, #8]
 80a4142:	a804      	add	r0, sp, #16
 80a4144:	9103      	str	r1, [sp, #12]
 80a4146:	f7ff feef 	bl	80a3f28 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a414a:	4b22      	ldr	r3, [pc, #136]	; (80a41d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a414c:	2008      	movs	r0, #8
 80a414e:	9308      	str	r3, [sp, #32]
 80a4150:	f7fb ffa5 	bl	80a009e <_Znwj>
 80a4154:	4604      	mov	r4, r0
 80a4156:	b128      	cbz	r0, 80a4164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4158:	9b03      	ldr	r3, [sp, #12]
 80a415a:	a904      	add	r1, sp, #16
 80a415c:	f840 3b04 	str.w	r3, [r0], #4
 80a4160:	f7ff fd84 	bl	80a3c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4164:	9500      	str	r5, [sp, #0]
 80a4166:	fa5f f38a 	uxtb.w	r3, sl
 80a416a:	464a      	mov	r2, r9
 80a416c:	4641      	mov	r1, r8
 80a416e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a4170:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a4172:	f7ff f831 	bl	80a31d8 <spark_send_event>
 80a4176:	b920      	cbnz	r0, 80a4182 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a4178:	9b03      	ldr	r3, [sp, #12]
 80a417a:	785b      	ldrb	r3, [r3, #1]
 80a417c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a4180:	b183      	cbz	r3, 80a41a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a4182:	9b03      	ldr	r3, [sp, #12]
 80a4184:	a904      	add	r1, sp, #16
 80a4186:	a806      	add	r0, sp, #24
 80a4188:	9305      	str	r3, [sp, #20]
 80a418a:	f7ff fd6f 	bl	80a3c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a418e:	a905      	add	r1, sp, #20
 80a4190:	4630      	mov	r0, r6
 80a4192:	f7ff fe99 	bl	80a3ec8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a4196:	a806      	add	r0, sp, #24
 80a4198:	f7ff fd52 	bl	80a3c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a419c:	a804      	add	r0, sp, #16
 80a419e:	f7ff fd4f 	bl	80a3c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a41a2:	e013      	b.n	80a41cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a41a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a41a8:	a905      	add	r1, sp, #20
 80a41aa:	a803      	add	r0, sp, #12
 80a41ac:	9205      	str	r2, [sp, #20]
 80a41ae:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a41b2:	f7ff fefd 	bl	80a3fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a41b6:	a805      	add	r0, sp, #20
 80a41b8:	f7ff fe5c 	bl	80a3e74 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a41bc:	a805      	add	r0, sp, #20
 80a41be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a41c0:	f7ff fe93 	bl	80a3eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a41c4:	a806      	add	r0, sp, #24
 80a41c6:	f7ff fd3b 	bl	80a3c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a41ca:	e7da      	b.n	80a4182 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a41cc:	4630      	mov	r0, r6
 80a41ce:	b00b      	add	sp, #44	; 0x2c
 80a41d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a41d4:	080a4349 	.word	0x080a4349

080a41d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a41d8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a41da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a41dc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a41de:	d006      	beq.n	80a41ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a41e0:	2a03      	cmp	r2, #3
 80a41e2:	d017      	beq.n	80a4214 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a41e4:	2a01      	cmp	r2, #1
 80a41e6:	d122      	bne.n	80a422e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a41e8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a41ea:	6003      	str	r3, [r0, #0]
	      break;
 80a41ec:	e01f      	b.n	80a422e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a41ee:	2018      	movs	r0, #24
 80a41f0:	680e      	ldr	r6, [r1, #0]
 80a41f2:	f7fb ff54 	bl	80a009e <_Znwj>
 80a41f6:	4605      	mov	r5, r0
 80a41f8:	b150      	cbz	r0, 80a4210 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a41fa:	4631      	mov	r1, r6
 80a41fc:	f7ff fec8 	bl	80a3f90 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a4200:	6930      	ldr	r0, [r6, #16]
 80a4202:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a4206:	b108      	cbz	r0, 80a420c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a4208:	f001 fd82 	bl	80a5d10 <strdup>
 80a420c:	6128      	str	r0, [r5, #16]
 80a420e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a4210:	6025      	str	r5, [r4, #0]
 80a4212:	e00c      	b.n	80a422e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a4214:	6804      	ldr	r4, [r0, #0]
 80a4216:	b154      	cbz	r4, 80a422e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a4218:	f104 0010 	add.w	r0, r4, #16
 80a421c:	f7ff fe2a 	bl	80a3e74 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4220:	4620      	mov	r0, r4
 80a4222:	f7ff fd40 	bl	80a3ca6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a4226:	2118      	movs	r1, #24
 80a4228:	4620      	mov	r0, r4
 80a422a:	f000 fc7a 	bl	80a4b22 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a422e:	2000      	movs	r0, #0
 80a4230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4232 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a4232:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4234:	2300      	movs	r3, #0
 80a4236:	6083      	str	r3, [r0, #8]
 80a4238:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a423a:	4604      	mov	r4, r0
 80a423c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a423e:	b12b      	cbz	r3, 80a424c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a4240:	2202      	movs	r2, #2
 80a4242:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a4244:	68eb      	ldr	r3, [r5, #12]
 80a4246:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4248:	68ab      	ldr	r3, [r5, #8]
 80a424a:	60a3      	str	r3, [r4, #8]
	}
    }
 80a424c:	4620      	mov	r0, r4
 80a424e:	bd38      	pop	{r3, r4, r5, pc}

080a4250 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a4250:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a4252:	b570      	push	{r4, r5, r6, lr}
 80a4254:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a4256:	d006      	beq.n	80a4266 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a4258:	2a03      	cmp	r2, #3
 80a425a:	d011      	beq.n	80a4280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a425c:	2a01      	cmp	r2, #1
 80a425e:	d118      	bne.n	80a4292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a4260:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a4262:	6003      	str	r3, [r0, #0]
	      break;
 80a4264:	e015      	b.n	80a4292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a4266:	2014      	movs	r0, #20
 80a4268:	680e      	ldr	r6, [r1, #0]
 80a426a:	f7fb ff18 	bl	80a009e <_Znwj>
 80a426e:	4605      	mov	r5, r0
 80a4270:	b120      	cbz	r0, 80a427c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a4272:	4631      	mov	r1, r6
 80a4274:	f7ff ffdd 	bl	80a4232 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a4278:	7c33      	ldrb	r3, [r6, #16]
 80a427a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a427c:	6025      	str	r5, [r4, #0]
 80a427e:	e008      	b.n	80a4292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a4280:	6804      	ldr	r4, [r0, #0]
 80a4282:	b134      	cbz	r4, 80a4292 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4284:	4620      	mov	r0, r4
 80a4286:	f7ff fd0e 	bl	80a3ca6 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a428a:	2114      	movs	r1, #20
 80a428c:	4620      	mov	r0, r4
 80a428e:	f000 fc48 	bl	80a4b22 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a4292:	2000      	movs	r0, #0
 80a4294:	bd70      	pop	{r4, r5, r6, pc}
	...

080a4298 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a4298:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a429a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a429c:	f3bf 8f5f 	dmb	sy
 80a42a0:	b087      	sub	sp, #28
 80a42a2:	2300      	movs	r3, #0
 80a42a4:	e850 6f00 	ldrex	r6, [r0]
 80a42a8:	e840 3200 	strex	r2, r3, [r0]
 80a42ac:	2a00      	cmp	r2, #0
 80a42ae:	d1f9      	bne.n	80a42a4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a42b0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a42b4:	2e00      	cmp	r6, #0
 80a42b6:	d03f      	beq.n	80a4338 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a42b8:	4618      	mov	r0, r3
 80a42ba:	f7fe ff01 	bl	80a30c0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a42be:	4607      	mov	r7, r0
 80a42c0:	b120      	cbz	r0, 80a42cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a42c2:	4621      	mov	r1, r4
 80a42c4:	4630      	mov	r0, r6
 80a42c6:	f7ff fe53 	bl	80a3f70 <_ZNKSt8functionIFvRKbEEclES1_>
 80a42ca:	e02e      	b.n	80a432a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a42cc:	4631      	mov	r1, r6
 80a42ce:	a801      	add	r0, sp, #4
 80a42d0:	f7ff ffaf 	bl	80a4232 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a42d4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a42d6:	2010      	movs	r0, #16
 80a42d8:	f88d 3014 	strb.w	r3, [sp, #20]
 80a42dc:	f7fb fedf 	bl	80a009e <_Znwj>
 80a42e0:	4605      	mov	r5, r0
 80a42e2:	b1d0      	cbz	r0, 80a431a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a42e4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a42e6:	2014      	movs	r0, #20
 80a42e8:	f7fb fed9 	bl	80a009e <_Znwj>
 80a42ec:	4604      	mov	r4, r0
 80a42ee:	b178      	cbz	r0, 80a4310 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a42f0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a42f2:	4601      	mov	r1, r0
 80a42f4:	a801      	add	r0, sp, #4
 80a42f6:	f7ff fce5 	bl	80a3cc4 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a42fa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a42fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a42fe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4300:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a4302:	9203      	str	r2, [sp, #12]
 80a4304:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4306:	60e3      	str	r3, [r4, #12]
 80a4308:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a430c:	9204      	str	r2, [sp, #16]
 80a430e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a4310:	4b0a      	ldr	r3, [pc, #40]	; (80a433c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4312:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a4314:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a4316:	4b0a      	ldr	r3, [pc, #40]	; (80a4340 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a4318:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a431a:	a801      	add	r0, sp, #4
 80a431c:	f7ff fcc3 	bl	80a3ca6 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4320:	2200      	movs	r2, #0
 80a4322:	4629      	mov	r1, r5
 80a4324:	4807      	ldr	r0, [pc, #28]	; (80a4344 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a4326:	f7fe fed3 	bl	80a30d0 <application_thread_invoke>
 80a432a:	4630      	mov	r0, r6
 80a432c:	f7ff fcbb 	bl	80a3ca6 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a4330:	2110      	movs	r1, #16
 80a4332:	4630      	mov	r0, r6
 80a4334:	f000 fbf5 	bl	80a4b22 <_ZdlPvj>
        }
    }
 80a4338:	b007      	add	sp, #28
 80a433a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a433c:	080a3f83 	.word	0x080a3f83
 80a4340:	080a4251 	.word	0x080a4251
 80a4344:	080a4735 	.word	0x080a4735

080a4348 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a4348:	b530      	push	{r4, r5, lr}
 80a434a:	4604      	mov	r4, r0
 80a434c:	b085      	sub	sp, #20
 80a434e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a4350:	4668      	mov	r0, sp
 80a4352:	4611      	mov	r1, r2
 80a4354:	f7ff fdc9 	bl	80a3eea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a4358:	b17c      	cbz	r4, 80a437a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a435a:	b224      	sxth	r4, r4
 80a435c:	4628      	mov	r0, r5
 80a435e:	b10d      	cbz	r5, 80a4364 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a4360:	f001 fcd6 	bl	80a5d10 <strdup>
 80a4364:	9002      	str	r0, [sp, #8]
 80a4366:	a902      	add	r1, sp, #8
 80a4368:	4668      	mov	r0, sp
 80a436a:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a436e:	f7ff fe1f 	bl	80a3fb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a4372:	a802      	add	r0, sp, #8
 80a4374:	f7ff fd7e 	bl	80a3e74 <_ZN8particle5ErrorD1Ev>
 80a4378:	e01d      	b.n	80a43b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a437a:	f04f 0201 	mov.w	r2, #1
 80a437e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a4380:	f88d 4008 	strb.w	r4, [sp, #8]
 80a4384:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a4388:	42a3      	cmp	r3, r4
 80a438a:	d103      	bne.n	80a4394 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a438c:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a4390:	2900      	cmp	r1, #0
 80a4392:	d1f7      	bne.n	80a4384 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a4394:	d002      	beq.n	80a439c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a4396:	f88d 3008 	strb.w	r3, [sp, #8]
 80a439a:	e00c      	b.n	80a43b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a439c:	f110 010c 	adds.w	r1, r0, #12
 80a43a0:	f04f 0301 	mov.w	r3, #1
 80a43a4:	bf18      	it	ne
 80a43a6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a43a8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a43ac:	3004      	adds	r0, #4
 80a43ae:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a43b2:	f7ff ff71 	bl	80a4298 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a43b6:	a801      	add	r0, sp, #4
 80a43b8:	f7ff fc42 	bl	80a3c40 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a43bc:	b005      	add	sp, #20
 80a43be:	bd30      	pop	{r4, r5, pc}

080a43c0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a43c0:	4770      	bx	lr

080a43c2 <_ZN9IPAddressD0Ev>:
 80a43c2:	b510      	push	{r4, lr}
 80a43c4:	4604      	mov	r4, r0
 80a43c6:	2118      	movs	r1, #24
 80a43c8:	f000 fbab 	bl	80a4b22 <_ZdlPvj>
 80a43cc:	4620      	mov	r0, r4
 80a43ce:	bd10      	pop	{r4, pc}

080a43d0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a43d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a43d2:	460f      	mov	r7, r1
 80a43d4:	f100 0608 	add.w	r6, r0, #8
 80a43d8:	1d05      	adds	r5, r0, #4
 80a43da:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a43dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a43e0:	220a      	movs	r2, #10
 80a43e2:	4638      	mov	r0, r7
 80a43e4:	f7ff fbbc 	bl	80a3b60 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a43e8:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a43ea:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a43ec:	d007      	beq.n	80a43fe <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a43ee:	2c00      	cmp	r4, #0
 80a43f0:	d0f4      	beq.n	80a43dc <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a43f2:	212e      	movs	r1, #46	; 0x2e
 80a43f4:	4638      	mov	r0, r7
 80a43f6:	f7ff fb70 	bl	80a3ada <_ZN5Print5printEc>
 80a43fa:	4404      	add	r4, r0
 80a43fc:	e7ee      	b.n	80a43dc <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a43fe:	4620      	mov	r0, r4
 80a4400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a4404 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a4404:	b510      	push	{r4, lr}
 80a4406:	4604      	mov	r4, r0
 80a4408:	4b04      	ldr	r3, [pc, #16]	; (80a441c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a440a:	2211      	movs	r2, #17
 80a440c:	f840 3b04 	str.w	r3, [r0], #4
 80a4410:	2100      	movs	r1, #0
 80a4412:	f001 fc3b 	bl	80a5c8c <memset>
{
    clear();
}
 80a4416:	4620      	mov	r0, r4
 80a4418:	bd10      	pop	{r4, pc}
 80a441a:	bf00      	nop
 80a441c:	080a63a4 	.word	0x080a63a4

080a4420 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4420:	4603      	mov	r3, r0
 80a4422:	4a07      	ldr	r2, [pc, #28]	; (80a4440 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4424:	b510      	push	{r4, lr}
 80a4426:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a442a:	f101 0210 	add.w	r2, r1, #16
 80a442e:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4432:	4291      	cmp	r1, r2
 80a4434:	f843 4b04 	str.w	r4, [r3], #4
 80a4438:	d1f9      	bne.n	80a442e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a443a:	780a      	ldrb	r2, [r1, #0]
 80a443c:	701a      	strb	r2, [r3, #0]
}
 80a443e:	bd10      	pop	{r4, pc}
 80a4440:	080a63a4 	.word	0x080a63a4

080a4444 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a4444:	4a02      	ldr	r2, [pc, #8]	; (80a4450 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a4446:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a4448:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a444a:	2204      	movs	r2, #4
 80a444c:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a444e:	4770      	bx	lr
 80a4450:	080a63a4 	.word	0x080a63a4

080a4454 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a4454:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4456:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a445a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a445e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a4462:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a4466:	2304      	movs	r3, #4
 80a4468:	6041      	str	r1, [r0, #4]
 80a446a:	7503      	strb	r3, [r0, #20]
 80a446c:	bd10      	pop	{r4, pc}
	...

080a4470 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4472:	4d04      	ldr	r5, [pc, #16]	; (80a4484 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4474:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4476:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a447a:	9500      	str	r5, [sp, #0]
 80a447c:	f7ff ffea 	bl	80a4454 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4480:	b003      	add	sp, #12
 80a4482:	bd30      	pop	{r4, r5, pc}
 80a4484:	080a63a4 	.word	0x080a63a4

080a4488 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4488:	7441      	strb	r1, [r0, #17]
 80a448a:	4770      	bx	lr

080a448c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a448c:	4770      	bx	lr

080a448e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a448e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4490:	2100      	movs	r1, #0
 80a4492:	7c00      	ldrb	r0, [r0, #16]
 80a4494:	f7fe fdcc 	bl	80a3030 <HAL_USB_USART_Receive_Data>
}
 80a4498:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a449c:	bf28      	it	cs
 80a449e:	f04f 30ff 	movcs.w	r0, #4294967295
 80a44a2:	bd08      	pop	{r3, pc}

080a44a4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a44a4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a44a6:	2101      	movs	r1, #1
 80a44a8:	7c00      	ldrb	r0, [r0, #16]
 80a44aa:	f7fe fdc1 	bl	80a3030 <HAL_USB_USART_Receive_Data>
}
 80a44ae:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a44b2:	bf28      	it	cs
 80a44b4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a44b8:	bd08      	pop	{r3, pc}

080a44ba <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a44ba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a44bc:	7c00      	ldrb	r0, [r0, #16]
 80a44be:	f7fe fdaf 	bl	80a3020 <HAL_USB_USART_Available_Data_For_Write>
}
 80a44c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a44c6:	bd08      	pop	{r3, pc}

080a44c8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a44c8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a44ca:	7c00      	ldrb	r0, [r0, #16]
 80a44cc:	f7fe fda0 	bl	80a3010 <HAL_USB_USART_Available_Data>
}
 80a44d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a44d4:	bd08      	pop	{r3, pc}

080a44d6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a44d6:	7c00      	ldrb	r0, [r0, #16]
 80a44d8:	f7fe bdba 	b.w	80a3050 <HAL_USB_USART_Flush_Data>

080a44dc <_ZN9USBSerialD0Ev>:
 80a44dc:	b510      	push	{r4, lr}
 80a44de:	4604      	mov	r4, r0
 80a44e0:	2114      	movs	r1, #20
 80a44e2:	f000 fb1e 	bl	80a4b22 <_ZdlPvj>
 80a44e6:	4620      	mov	r0, r4
 80a44e8:	bd10      	pop	{r4, pc}

080a44ea <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a44ea:	b538      	push	{r3, r4, r5, lr}
 80a44ec:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a44ee:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a44f0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a44f2:	f7fe fd95 	bl	80a3020 <HAL_USB_USART_Available_Data_For_Write>
 80a44f6:	2800      	cmp	r0, #0
 80a44f8:	dc01      	bgt.n	80a44fe <_ZN9USBSerial5writeEh+0x14>
 80a44fa:	7c60      	ldrb	r0, [r4, #17]
 80a44fc:	b128      	cbz	r0, 80a450a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a44fe:	4629      	mov	r1, r5
 80a4500:	7c20      	ldrb	r0, [r4, #16]
 80a4502:	f7fe fd9d 	bl	80a3040 <HAL_USB_USART_Send_Data>
 80a4506:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a450a:	bd38      	pop	{r3, r4, r5, pc}

080a450c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a450c:	b510      	push	{r4, lr}
 80a450e:	4604      	mov	r4, r0
 80a4510:	2300      	movs	r3, #0
 80a4512:	6063      	str	r3, [r4, #4]
 80a4514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4518:	60a3      	str	r3, [r4, #8]
 80a451a:	4b05      	ldr	r3, [pc, #20]	; (80a4530 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a451c:	4608      	mov	r0, r1
 80a451e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a4520:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a4522:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a4524:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a4526:	4611      	mov	r1, r2
 80a4528:	f7fe fd6a 	bl	80a3000 <HAL_USB_USART_Init>
}
 80a452c:	4620      	mov	r0, r4
 80a452e:	bd10      	pop	{r4, pc}
 80a4530:	080a63b8 	.word	0x080a63b8

080a4534 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a4534:	b510      	push	{r4, lr}
 80a4536:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4538:	2214      	movs	r2, #20
 80a453a:	2100      	movs	r1, #0
 80a453c:	f001 fba6 	bl	80a5c8c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a4540:	4b05      	ldr	r3, [pc, #20]	; (80a4558 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4542:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a4544:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a4546:	4b05      	ldr	r3, [pc, #20]	; (80a455c <_Z19acquireSerialBufferv+0x28>)
 80a4548:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a454a:	f240 1301 	movw	r3, #257	; 0x101
 80a454e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a4550:	2381      	movs	r3, #129	; 0x81
 80a4552:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a4554:	bd10      	pop	{r4, pc}
 80a4556:	bf00      	nop
 80a4558:	20001325 	.word	0x20001325
 80a455c:	200012a4 	.word	0x200012a4

080a4560 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a4560:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4562:	4d0e      	ldr	r5, [pc, #56]	; (80a459c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a4564:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4566:	a801      	add	r0, sp, #4
 80a4568:	f7ff ffe4 	bl	80a4534 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a456c:	6829      	ldr	r1, [r5, #0]
 80a456e:	f011 0401 	ands.w	r4, r1, #1
 80a4572:	d110      	bne.n	80a4596 <_Z16_fetch_usbserialv+0x36>
 80a4574:	4628      	mov	r0, r5
 80a4576:	f7fb fd96 	bl	80a00a6 <__cxa_guard_acquire>
 80a457a:	b160      	cbz	r0, 80a4596 <_Z16_fetch_usbserialv+0x36>
 80a457c:	aa01      	add	r2, sp, #4
 80a457e:	4621      	mov	r1, r4
 80a4580:	4807      	ldr	r0, [pc, #28]	; (80a45a0 <_Z16_fetch_usbserialv+0x40>)
 80a4582:	f7ff ffc3 	bl	80a450c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4586:	4628      	mov	r0, r5
 80a4588:	f7fb fd92 	bl	80a00b0 <__cxa_guard_release>
 80a458c:	4a05      	ldr	r2, [pc, #20]	; (80a45a4 <_Z16_fetch_usbserialv+0x44>)
 80a458e:	4906      	ldr	r1, [pc, #24]	; (80a45a8 <_Z16_fetch_usbserialv+0x48>)
 80a4590:	4803      	ldr	r0, [pc, #12]	; (80a45a0 <_Z16_fetch_usbserialv+0x40>)
 80a4592:	f000 fac1 	bl	80a4b18 <__aeabi_atexit>
	return _usbserial;
}
 80a4596:	4802      	ldr	r0, [pc, #8]	; (80a45a0 <_Z16_fetch_usbserialv+0x40>)
 80a4598:	b007      	add	sp, #28
 80a459a:	bd30      	pop	{r4, r5, pc}
 80a459c:	200012a0 	.word	0x200012a0
 80a45a0:	20001428 	.word	0x20001428
 80a45a4:	20000104 	.word	0x20000104
 80a45a8:	080a448d 	.word	0x080a448d

080a45ac <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a45ac:	b510      	push	{r4, lr}
 80a45ae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a45b0:	2214      	movs	r2, #20
 80a45b2:	2100      	movs	r1, #0
 80a45b4:	f001 fb6a 	bl	80a5c8c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a45b8:	4b05      	ldr	r3, [pc, #20]	; (80a45d0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a45ba:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a45bc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a45be:	4b05      	ldr	r3, [pc, #20]	; (80a45d4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a45c0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a45c2:	f240 1301 	movw	r3, #257	; 0x101
 80a45c6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a45c8:	2381      	movs	r3, #129	; 0x81
 80a45ca:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a45cc:	bd10      	pop	{r4, pc}
 80a45ce:	bf00      	nop
 80a45d0:	200014d8 	.word	0x200014d8
 80a45d4:	20001440 	.word	0x20001440

080a45d8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a45d8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a45da:	4c0e      	ldr	r4, [pc, #56]	; (80a4614 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a45dc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a45de:	a801      	add	r0, sp, #4
 80a45e0:	f7ff ffe4 	bl	80a45ac <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a45e4:	6823      	ldr	r3, [r4, #0]
 80a45e6:	07db      	lsls	r3, r3, #31
 80a45e8:	d410      	bmi.n	80a460c <_Z17_fetch_usbserial1v+0x34>
 80a45ea:	4620      	mov	r0, r4
 80a45ec:	f7fb fd5b 	bl	80a00a6 <__cxa_guard_acquire>
 80a45f0:	b160      	cbz	r0, 80a460c <_Z17_fetch_usbserial1v+0x34>
 80a45f2:	aa01      	add	r2, sp, #4
 80a45f4:	2101      	movs	r1, #1
 80a45f6:	4808      	ldr	r0, [pc, #32]	; (80a4618 <_Z17_fetch_usbserial1v+0x40>)
 80a45f8:	f7ff ff88 	bl	80a450c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a45fc:	4620      	mov	r0, r4
 80a45fe:	f7fb fd57 	bl	80a00b0 <__cxa_guard_release>
 80a4602:	4a06      	ldr	r2, [pc, #24]	; (80a461c <_Z17_fetch_usbserial1v+0x44>)
 80a4604:	4906      	ldr	r1, [pc, #24]	; (80a4620 <_Z17_fetch_usbserial1v+0x48>)
 80a4606:	4804      	ldr	r0, [pc, #16]	; (80a4618 <_Z17_fetch_usbserial1v+0x40>)
 80a4608:	f000 fa86 	bl	80a4b18 <__aeabi_atexit>
  return _usbserial1;
}
 80a460c:	4802      	ldr	r0, [pc, #8]	; (80a4618 <_Z17_fetch_usbserial1v+0x40>)
 80a460e:	b006      	add	sp, #24
 80a4610:	bd10      	pop	{r4, pc}
 80a4612:	bf00      	nop
 80a4614:	2000143c 	.word	0x2000143c
 80a4618:	200014c4 	.word	0x200014c4
 80a461c:	20000104 	.word	0x20000104
 80a4620:	080a448d 	.word	0x080a448d

080a4624 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a4624:	4770      	bx	lr

080a4626 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4626:	7441      	strb	r1, [r0, #17]
 80a4628:	4770      	bx	lr

080a462a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a462a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a462c:	7c00      	ldrb	r0, [r0, #16]
 80a462e:	f7fe fc3d 	bl	80a2eac <HAL_USART_Available_Data_For_Write>
}
 80a4632:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4636:	bd08      	pop	{r3, pc}

080a4638 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4638:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a463a:	7c00      	ldrb	r0, [r0, #16]
 80a463c:	f7fe fc0e 	bl	80a2e5c <HAL_USART_Available_Data>
}
 80a4640:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4644:	bd08      	pop	{r3, pc}

080a4646 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a4646:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a4648:	7c00      	ldrb	r0, [r0, #16]
 80a464a:	f7fe fc17 	bl	80a2e7c <HAL_USART_Peek_Data>
}
 80a464e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4652:	bf28      	it	cs
 80a4654:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4658:	bd08      	pop	{r3, pc}

080a465a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a465a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a465c:	7c00      	ldrb	r0, [r0, #16]
 80a465e:	f7fe fc05 	bl	80a2e6c <HAL_USART_Read_Data>
}
 80a4662:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4666:	bf28      	it	cs
 80a4668:	f04f 30ff 	movcs.w	r0, #4294967295
 80a466c:	bd08      	pop	{r3, pc}

080a466e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a466e:	7c00      	ldrb	r0, [r0, #16]
 80a4670:	f7fe bc0c 	b.w	80a2e8c <HAL_USART_Flush_Data>

080a4674 <_ZN11USARTSerialD0Ev>:
 80a4674:	b510      	push	{r4, lr}
 80a4676:	4604      	mov	r4, r0
 80a4678:	2114      	movs	r1, #20
 80a467a:	f000 fa52 	bl	80a4b22 <_ZdlPvj>
 80a467e:	4620      	mov	r0, r4
 80a4680:	bd10      	pop	{r4, pc}

080a4682 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4682:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a4684:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a4686:	4604      	mov	r4, r0
 80a4688:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a468a:	b925      	cbnz	r5, 80a4696 <_ZN11USARTSerial5writeEh+0x14>
 80a468c:	7c00      	ldrb	r0, [r0, #16]
 80a468e:	f7fe fc0d 	bl	80a2eac <HAL_USART_Available_Data_For_Write>
 80a4692:	2800      	cmp	r0, #0
 80a4694:	dd05      	ble.n	80a46a2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a4696:	4631      	mov	r1, r6
 80a4698:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a469a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a469e:	f7fe bbd5 	b.w	80a2e4c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a46a2:	4628      	mov	r0, r5
 80a46a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a46a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a46a8:	b510      	push	{r4, lr}
 80a46aa:	4604      	mov	r4, r0
 80a46ac:	4608      	mov	r0, r1
 80a46ae:	4611      	mov	r1, r2
 80a46b0:	2200      	movs	r2, #0
 80a46b2:	6062      	str	r2, [r4, #4]
 80a46b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a46b8:	60a2      	str	r2, [r4, #8]
 80a46ba:	4a05      	ldr	r2, [pc, #20]	; (80a46d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a46bc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a46be:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a46c0:	2201      	movs	r2, #1
 80a46c2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a46c4:	461a      	mov	r2, r3
 80a46c6:	f7fe fbb1 	bl	80a2e2c <HAL_USART_Init>
}
 80a46ca:	4620      	mov	r0, r4
 80a46cc:	bd10      	pop	{r4, pc}
 80a46ce:	bf00      	nop
 80a46d0:	080a63e8 	.word	0x080a63e8

080a46d4 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a46d4:	2300      	movs	r3, #0
 80a46d6:	7c00      	ldrb	r0, [r0, #16]
 80a46d8:	f7fe bbf0 	b.w	80a2ebc <HAL_USART_BeginConfig>

080a46dc <_ZN11USARTSerial3endEv>:
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
 80a46dc:	7c00      	ldrb	r0, [r0, #16]
 80a46de:	f7fe bbad 	b.w	80a2e3c <HAL_USART_End>

080a46e2 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a46e2:	7c00      	ldrb	r0, [r0, #16]
 80a46e4:	f7fe bbda 	b.w	80a2e9c <HAL_USART_Is_Enabled>

080a46e8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a46e8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a46ea:	4d0c      	ldr	r5, [pc, #48]	; (80a471c <_Z22__fetch_global_Serial1v+0x34>)
 80a46ec:	6829      	ldr	r1, [r5, #0]
 80a46ee:	f011 0401 	ands.w	r4, r1, #1
 80a46f2:	d111      	bne.n	80a4718 <_Z22__fetch_global_Serial1v+0x30>
 80a46f4:	4628      	mov	r0, r5
 80a46f6:	f7fb fcd6 	bl	80a00a6 <__cxa_guard_acquire>
 80a46fa:	b168      	cbz	r0, 80a4718 <_Z22__fetch_global_Serial1v+0x30>
 80a46fc:	4a08      	ldr	r2, [pc, #32]	; (80a4720 <_Z22__fetch_global_Serial1v+0x38>)
 80a46fe:	4621      	mov	r1, r4
 80a4700:	4b08      	ldr	r3, [pc, #32]	; (80a4724 <_Z22__fetch_global_Serial1v+0x3c>)
 80a4702:	4809      	ldr	r0, [pc, #36]	; (80a4728 <_Z22__fetch_global_Serial1v+0x40>)
 80a4704:	f7ff ffd0 	bl	80a46a8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a4708:	4628      	mov	r0, r5
 80a470a:	f7fb fcd1 	bl	80a00b0 <__cxa_guard_release>
 80a470e:	4a07      	ldr	r2, [pc, #28]	; (80a472c <_Z22__fetch_global_Serial1v+0x44>)
 80a4710:	4907      	ldr	r1, [pc, #28]	; (80a4730 <_Z22__fetch_global_Serial1v+0x48>)
 80a4712:	4805      	ldr	r0, [pc, #20]	; (80a4728 <_Z22__fetch_global_Serial1v+0x40>)
 80a4714:	f000 fa00 	bl	80a4b18 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a4718:	4803      	ldr	r0, [pc, #12]	; (80a4728 <_Z22__fetch_global_Serial1v+0x40>)
 80a471a:	bd38      	pop	{r3, r4, r5, pc}
 80a471c:	20001674 	.word	0x20001674
 80a4720:	20001678 	.word	0x20001678
 80a4724:	200015f0 	.word	0x200015f0
 80a4728:	200015dc 	.word	0x200015dc
 80a472c:	20000104 	.word	0x20000104
 80a4730:	080a4625 	.word	0x080a4625

080a4734 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a4734:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4736:	6883      	ldr	r3, [r0, #8]
 80a4738:	4604      	mov	r4, r0
 80a473a:	b90b      	cbnz	r3, 80a4740 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a473c:	f000 f9f3 	bl	80a4b26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4740:	68c3      	ldr	r3, [r0, #12]
 80a4742:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a4744:	68a3      	ldr	r3, [r4, #8]
 80a4746:	b11b      	cbz	r3, 80a4750 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a4748:	2203      	movs	r2, #3
 80a474a:	4621      	mov	r1, r4
 80a474c:	4620      	mov	r0, r4
 80a474e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a4750:	4620      	mov	r0, r4
}
 80a4752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a4756:	2110      	movs	r1, #16
 80a4758:	f000 b9e3 	b.w	80a4b22 <_ZdlPvj>

080a475c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a475c:	4770      	bx	lr

080a475e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a475e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4760:	4606      	mov	r6, r0
 80a4762:	4615      	mov	r5, r2
 80a4764:	460c      	mov	r4, r1
 80a4766:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4768:	42bc      	cmp	r4, r7
 80a476a:	d006      	beq.n	80a477a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a476c:	6833      	ldr	r3, [r6, #0]
 80a476e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4772:	689b      	ldr	r3, [r3, #8]
 80a4774:	4630      	mov	r0, r6
 80a4776:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4778:	e7f6      	b.n	80a4768 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a477a:	4628      	mov	r0, r5
 80a477c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a477e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a477e:	2200      	movs	r2, #0
 80a4780:	7c00      	ldrb	r0, [r0, #16]
 80a4782:	f7fe bbc3 	b.w	80a2f0c <HAL_I2C_Write_Data>

080a4786 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a4786:	2100      	movs	r1, #0
 80a4788:	7c00      	ldrb	r0, [r0, #16]
 80a478a:	f7fe bbc7 	b.w	80a2f1c <HAL_I2C_Available_Data>

080a478e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a478e:	2100      	movs	r1, #0
 80a4790:	7c00      	ldrb	r0, [r0, #16]
 80a4792:	f7fe bbcb 	b.w	80a2f2c <HAL_I2C_Read_Data>

080a4796 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a4796:	2100      	movs	r1, #0
 80a4798:	7c00      	ldrb	r0, [r0, #16]
 80a479a:	f7fe bbcf 	b.w	80a2f3c <HAL_I2C_Peek_Data>

080a479e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a479e:	2100      	movs	r1, #0
 80a47a0:	7c00      	ldrb	r0, [r0, #16]
 80a47a2:	f7fe bbd3 	b.w	80a2f4c <HAL_I2C_Flush_Data>

080a47a6 <_ZN7TwoWireD0Ev>:
 80a47a6:	b510      	push	{r4, lr}
 80a47a8:	4604      	mov	r4, r0
 80a47aa:	2114      	movs	r1, #20
 80a47ac:	f000 f9b9 	bl	80a4b22 <_ZdlPvj>
 80a47b0:	4620      	mov	r0, r4
 80a47b2:	bd10      	pop	{r4, pc}

080a47b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a47b4:	b510      	push	{r4, lr}
 80a47b6:	4604      	mov	r4, r0
 80a47b8:	4608      	mov	r0, r1
 80a47ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a47be:	60a3      	str	r3, [r4, #8]
 80a47c0:	4b04      	ldr	r3, [pc, #16]	; (80a47d4 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a47c2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a47c4:	7420      	strb	r0, [r4, #16]
 80a47c6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a47c8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a47ca:	f7fe fbcf 	bl	80a2f6c <HAL_I2C_Init>

}
 80a47ce:	4620      	mov	r0, r4
 80a47d0:	bd10      	pop	{r4, pc}
 80a47d2:	bf00      	nop
 80a47d4:	080a6418 	.word	0x080a6418

080a47d8 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a47d8:	2300      	movs	r3, #0
 80a47da:	461a      	mov	r2, r3
 80a47dc:	4619      	mov	r1, r3
 80a47de:	7c00      	ldrb	r0, [r0, #16]
 80a47e0:	f7fe bb74 	b.w	80a2ecc <HAL_I2C_Begin>

080a47e4 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a47e4:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a47e6:	2400      	movs	r4, #0
 80a47e8:	7c00      	ldrb	r0, [r0, #16]
 80a47ea:	9400      	str	r4, [sp, #0]
 80a47ec:	f7fe fb76 	bl	80a2edc <HAL_I2C_Request_Data>
  return result;
}
 80a47f0:	b2c0      	uxtb	r0, r0
 80a47f2:	b002      	add	sp, #8
 80a47f4:	bd10      	pop	{r4, pc}

080a47f6 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a47f6:	2301      	movs	r3, #1
 80a47f8:	f7ff bff4 	b.w	80a47e4 <_ZN7TwoWire11requestFromEhhh>

080a47fc <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a47fc:	2301      	movs	r3, #1
 80a47fe:	b2d2      	uxtb	r2, r2
 80a4800:	b2c9      	uxtb	r1, r1
 80a4802:	f7ff bfef 	b.w	80a47e4 <_ZN7TwoWire11requestFromEhhh>

080a4806 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a4806:	2200      	movs	r2, #0
 80a4808:	7c00      	ldrb	r0, [r0, #16]
 80a480a:	f7fe bb6f 	b.w	80a2eec <HAL_I2C_Begin_Transmission>

080a480e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a480e:	b2c9      	uxtb	r1, r1
 80a4810:	f7ff bff9 	b.w	80a4806 <_ZN7TwoWire17beginTransmissionEh>

080a4814 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a4814:	2200      	movs	r2, #0
 80a4816:	7c00      	ldrb	r0, [r0, #16]
 80a4818:	f7fe bb70 	b.w	80a2efc <HAL_I2C_End_Transmission>

080a481c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a481c:	2101      	movs	r1, #1
 80a481e:	f7ff bff9 	b.w	80a4814 <_ZN7TwoWire15endTransmissionEh>

080a4822 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a4822:	2100      	movs	r1, #0
 80a4824:	7c00      	ldrb	r0, [r0, #16]
 80a4826:	f7fe bb99 	b.w	80a2f5c <HAL_I2C_Is_Enabled>

080a482a <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a482a:	2200      	movs	r2, #0
 80a482c:	4611      	mov	r1, r2
 80a482e:	6840      	ldr	r0, [r0, #4]
 80a4830:	f7fe bc82 	b.w	80a3138 <network_ready>

080a4834 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4834:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4836:	4616      	mov	r6, r2
 80a4838:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a483a:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a483c:	460f      	mov	r7, r1
 80a483e:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a4840:	2100      	movs	r1, #0
 80a4842:	a803      	add	r0, sp, #12
 80a4844:	f001 fa22 	bl	80a5c8c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4848:	4630      	mov	r0, r6
 80a484a:	f001 fa7c 	bl	80a5d46 <strlen>
 80a484e:	2500      	movs	r5, #0
 80a4850:	9500      	str	r5, [sp, #0]
 80a4852:	b281      	uxth	r1, r0
 80a4854:	687b      	ldr	r3, [r7, #4]
 80a4856:	aa03      	add	r2, sp, #12
 80a4858:	4630      	mov	r0, r6
 80a485a:	f7fe fc09 	bl	80a3070 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a485e:	b120      	cbz	r0, 80a486a <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a4860:	4629      	mov	r1, r5
 80a4862:	4620      	mov	r0, r4
 80a4864:	f7ff fdee 	bl	80a4444 <_ZN9IPAddressC1Em>
 80a4868:	e003      	b.n	80a4872 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a486a:	a903      	add	r1, sp, #12
 80a486c:	4620      	mov	r0, r4
 80a486e:	f7ff fdd7 	bl	80a4420 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a4872:	4620      	mov	r0, r4
 80a4874:	b009      	add	sp, #36	; 0x24
 80a4876:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4878 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a4878:	2200      	movs	r2, #0
 80a487a:	4611      	mov	r1, r2
 80a487c:	6840      	ldr	r0, [r0, #4]
 80a487e:	f7fe bc7b 	b.w	80a3178 <network_listening>

080a4882 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a4882:	2200      	movs	r2, #0
 80a4884:	4611      	mov	r1, r2
 80a4886:	6840      	ldr	r0, [r0, #4]
 80a4888:	f7fe bc8e 	b.w	80a31a8 <network_get_listen_timeout>

080a488c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a488c:	2200      	movs	r2, #0
 80a488e:	6840      	ldr	r0, [r0, #4]
 80a4890:	f7fe bc82 	b.w	80a3198 <network_set_listen_timeout>

080a4894 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a4894:	2200      	movs	r2, #0
 80a4896:	f081 0101 	eor.w	r1, r1, #1
 80a489a:	6840      	ldr	r0, [r0, #4]
 80a489c:	f7fe bc64 	b.w	80a3168 <network_listen>

080a48a0 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a48a0:	2300      	movs	r3, #0
 80a48a2:	461a      	mov	r2, r3
 80a48a4:	4619      	mov	r1, r3
 80a48a6:	6840      	ldr	r0, [r0, #4]
 80a48a8:	f7fe bc56 	b.w	80a3158 <network_off>

080a48ac <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a48ac:	2200      	movs	r2, #0
 80a48ae:	4611      	mov	r1, r2
 80a48b0:	6840      	ldr	r0, [r0, #4]
 80a48b2:	f7fe bc31 	b.w	80a3118 <network_connecting>

080a48b6 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a48b6:	2200      	movs	r2, #0
 80a48b8:	2102      	movs	r1, #2
 80a48ba:	6840      	ldr	r0, [r0, #4]
 80a48bc:	f7fe bc34 	b.w	80a3128 <network_disconnect>

080a48c0 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a48c0:	2300      	movs	r3, #0
 80a48c2:	461a      	mov	r2, r3
 80a48c4:	6840      	ldr	r0, [r0, #4]
 80a48c6:	f7fe bc1f 	b.w	80a3108 <network_connect>
	...

080a48cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a48cc:	4b02      	ldr	r3, [pc, #8]	; (80a48d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a48ce:	2204      	movs	r2, #4
 80a48d0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a48d2:	4a02      	ldr	r2, [pc, #8]	; (80a48dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a48d4:	601a      	str	r2, [r3, #0]
 80a48d6:	4770      	bx	lr
 80a48d8:	200016fc 	.word	0x200016fc
 80a48dc:	080a6440 	.word	0x080a6440

080a48e0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a48e0:	2300      	movs	r3, #0
 80a48e2:	461a      	mov	r2, r3
 80a48e4:	6840      	ldr	r0, [r0, #4]
 80a48e6:	f7fe bc0f 	b.w	80a3108 <network_connect>

080a48ea <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a48ea:	2200      	movs	r2, #0
 80a48ec:	2102      	movs	r1, #2
 80a48ee:	6840      	ldr	r0, [r0, #4]
 80a48f0:	f7fe bc1a 	b.w	80a3128 <network_disconnect>

080a48f4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a48f4:	2200      	movs	r2, #0
 80a48f6:	4611      	mov	r1, r2
 80a48f8:	6840      	ldr	r0, [r0, #4]
 80a48fa:	f7fe bc0d 	b.w	80a3118 <network_connecting>

080a48fe <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a48fe:	2200      	movs	r2, #0
 80a4900:	4611      	mov	r1, r2
 80a4902:	6840      	ldr	r0, [r0, #4]
 80a4904:	f7fe bc18 	b.w	80a3138 <network_ready>

080a4908 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a4908:	2300      	movs	r3, #0
 80a490a:	461a      	mov	r2, r3
 80a490c:	4619      	mov	r1, r3
 80a490e:	6840      	ldr	r0, [r0, #4]
 80a4910:	f7fe bc1a 	b.w	80a3148 <network_on>

080a4914 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a4914:	2300      	movs	r3, #0
 80a4916:	461a      	mov	r2, r3
 80a4918:	4619      	mov	r1, r3
 80a491a:	6840      	ldr	r0, [r0, #4]
 80a491c:	f7fe bc1c 	b.w	80a3158 <network_off>

080a4920 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a4920:	2200      	movs	r2, #0
 80a4922:	f081 0101 	eor.w	r1, r1, #1
 80a4926:	6840      	ldr	r0, [r0, #4]
 80a4928:	f7fe bc1e 	b.w	80a3168 <network_listen>

080a492c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a492c:	2200      	movs	r2, #0
 80a492e:	6840      	ldr	r0, [r0, #4]
 80a4930:	f7fe bc32 	b.w	80a3198 <network_set_listen_timeout>

080a4934 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a4934:	2200      	movs	r2, #0
 80a4936:	4611      	mov	r1, r2
 80a4938:	6840      	ldr	r0, [r0, #4]
 80a493a:	f7fe bc35 	b.w	80a31a8 <network_get_listen_timeout>

080a493e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a493e:	2200      	movs	r2, #0
 80a4940:	4611      	mov	r1, r2
 80a4942:	6840      	ldr	r0, [r0, #4]
 80a4944:	f7fe bc18 	b.w	80a3178 <network_listening>

080a4948 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a4948:	b570      	push	{r4, r5, r6, lr}
 80a494a:	4616      	mov	r6, r2
 80a494c:	b08e      	sub	sp, #56	; 0x38
 80a494e:	4604      	mov	r4, r0
    IPAddress addr;
 80a4950:	a808      	add	r0, sp, #32
 80a4952:	f7ff fd57 	bl	80a4404 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a4956:	2211      	movs	r2, #17
 80a4958:	2100      	movs	r1, #0
 80a495a:	a803      	add	r0, sp, #12
 80a495c:	f001 f996 	bl	80a5c8c <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4960:	4630      	mov	r0, r6
 80a4962:	f001 f9f0 	bl	80a5d46 <strlen>
 80a4966:	2500      	movs	r5, #0
 80a4968:	4b0a      	ldr	r3, [pc, #40]	; (80a4994 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a496a:	9500      	str	r5, [sp, #0]
 80a496c:	b281      	uxth	r1, r0
 80a496e:	685b      	ldr	r3, [r3, #4]
 80a4970:	aa03      	add	r2, sp, #12
 80a4972:	4630      	mov	r0, r6
 80a4974:	f7fe fb7c 	bl	80a3070 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4978:	b120      	cbz	r0, 80a4984 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a497a:	4629      	mov	r1, r5
 80a497c:	4620      	mov	r0, r4
 80a497e:	f7ff fd61 	bl	80a4444 <_ZN9IPAddressC1Em>
 80a4982:	e003      	b.n	80a498c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a4984:	a903      	add	r1, sp, #12
 80a4986:	4620      	mov	r0, r4
 80a4988:	f7ff fd4a 	bl	80a4420 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a498c:	4620      	mov	r0, r4
 80a498e:	b00e      	add	sp, #56	; 0x38
 80a4990:	bd70      	pop	{r4, r5, r6, pc}
 80a4992:	bf00      	nop
 80a4994:	200016fc 	.word	0x200016fc

080a4998 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a4998:	4b03      	ldr	r3, [pc, #12]	; (80a49a8 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a499a:	4a04      	ldr	r2, [pc, #16]	; (80a49ac <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a499c:	2804      	cmp	r0, #4
 80a499e:	bf0c      	ite	eq
 80a49a0:	4610      	moveq	r0, r2
 80a49a2:	4618      	movne	r0, r3
 80a49a4:	4770      	bx	lr
 80a49a6:	bf00      	nop
 80a49a8:	20001704 	.word	0x20001704
 80a49ac:	200016fc 	.word	0x200016fc

080a49b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a49b0:	4b02      	ldr	r3, [pc, #8]	; (80a49bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a49b2:	4a03      	ldr	r2, [pc, #12]	; (80a49c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a49b4:	601a      	str	r2, [r3, #0]
 80a49b6:	2200      	movs	r2, #0
 80a49b8:	605a      	str	r2, [r3, #4]
 80a49ba:	4770      	bx	lr
 80a49bc:	20001704 	.word	0x20001704
 80a49c0:	080a6474 	.word	0x080a6474

080a49c4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a49c4:	b510      	push	{r4, lr}
 80a49c6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a49c8:	480f      	ldr	r0, [pc, #60]	; (80a4a08 <pinAvailable+0x44>)
 80a49ca:	f7fe fd10 	bl	80a33ee <_ZN8SPIClass9isEnabledEv>
 80a49ce:	b128      	cbz	r0, 80a49dc <pinAvailable+0x18>
 80a49d0:	f1a4 030d 	sub.w	r3, r4, #13
 80a49d4:	2b02      	cmp	r3, #2
 80a49d6:	d801      	bhi.n	80a49dc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a49d8:	2000      	movs	r0, #0
 80a49da:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a49dc:	f000 f87c 	bl	80a4ad8 <_Z19__fetch_global_Wirev>
 80a49e0:	f7ff ff1f 	bl	80a4822 <_ZN7TwoWire9isEnabledEv>
 80a49e4:	b108      	cbz	r0, 80a49ea <pinAvailable+0x26>
 80a49e6:	2c01      	cmp	r4, #1
 80a49e8:	d9f6      	bls.n	80a49d8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a49ea:	f7ff fe7d 	bl	80a46e8 <_Z22__fetch_global_Serial1v>
 80a49ee:	f7ff fe78 	bl	80a46e2 <_ZN11USARTSerial9isEnabledEv>
 80a49f2:	b118      	cbz	r0, 80a49fc <pinAvailable+0x38>
 80a49f4:	f1a4 0312 	sub.w	r3, r4, #18
 80a49f8:	2b01      	cmp	r3, #1
 80a49fa:	d9ed      	bls.n	80a49d8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a49fc:	2c17      	cmp	r4, #23
 80a49fe:	bf8c      	ite	hi
 80a4a00:	2000      	movhi	r0, #0
 80a4a02:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a4a04:	bd10      	pop	{r4, pc}
 80a4a06:	bf00      	nop
 80a4a08:	2000170c 	.word	0x2000170c

080a4a0c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4a0c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a4a0e:	b538      	push	{r3, r4, r5, lr}
 80a4a10:	4604      	mov	r4, r0
 80a4a12:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4a14:	d80a      	bhi.n	80a4a2c <pinMode+0x20>
 80a4a16:	29ff      	cmp	r1, #255	; 0xff
 80a4a18:	d008      	beq.n	80a4a2c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a4a1a:	f7ff ffd3 	bl	80a49c4 <pinAvailable>
 80a4a1e:	b128      	cbz	r0, 80a4a2c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4a20:	4629      	mov	r1, r5
 80a4a22:	4620      	mov	r0, r4
}
 80a4a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4a28:	f7fe b970 	b.w	80a2d0c <HAL_Pin_Mode>
 80a4a2c:	bd38      	pop	{r3, r4, r5, pc}

080a4a2e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a4a2e:	b538      	push	{r3, r4, r5, lr}
 80a4a30:	4604      	mov	r4, r0
 80a4a32:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4a34:	f7fe f972 	bl	80a2d1c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a4a38:	28ff      	cmp	r0, #255	; 0xff
 80a4a3a:	d010      	beq.n	80a4a5e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a4a3c:	2806      	cmp	r0, #6
 80a4a3e:	d804      	bhi.n	80a4a4a <digitalWrite+0x1c>
 80a4a40:	234d      	movs	r3, #77	; 0x4d
 80a4a42:	fa23 f000 	lsr.w	r0, r3, r0
 80a4a46:	07c3      	lsls	r3, r0, #31
 80a4a48:	d409      	bmi.n	80a4a5e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a4a4a:	4620      	mov	r0, r4
 80a4a4c:	f7ff ffba 	bl	80a49c4 <pinAvailable>
 80a4a50:	b128      	cbz	r0, 80a4a5e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4a52:	4629      	mov	r1, r5
 80a4a54:	4620      	mov	r0, r4
}
 80a4a56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4a5a:	f7fe b967 	b.w	80a2d2c <HAL_GPIO_Write>
 80a4a5e:	bd38      	pop	{r3, r4, r5, pc}

080a4a60 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 80a4a60:	f7fe b96c 	b.w	80a2d3c <HAL_Pulse_In>

080a4a64 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a4a64:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a4a66:	4c0c      	ldr	r4, [pc, #48]	; (80a4a98 <_GLOBAL__sub_I_SPI+0x34>)
 80a4a68:	4e0c      	ldr	r6, [pc, #48]	; (80a4a9c <_GLOBAL__sub_I_SPI+0x38>)
 80a4a6a:	4d0d      	ldr	r5, [pc, #52]	; (80a4aa0 <_GLOBAL__sub_I_SPI+0x3c>)
 80a4a6c:	2100      	movs	r1, #0
 80a4a6e:	4620      	mov	r0, r4
 80a4a70:	f7fe fc02 	bl	80a3278 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a4a74:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a4a76:	4c0b      	ldr	r4, [pc, #44]	; (80a4aa4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a4a78:	4632      	mov	r2, r6
 80a4a7a:	4629      	mov	r1, r5
 80a4a7c:	f000 f84c 	bl	80a4b18 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a4a80:	2101      	movs	r1, #1
 80a4a82:	4620      	mov	r0, r4
 80a4a84:	f7fe fbf8 	bl	80a3278 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a4a88:	4632      	mov	r2, r6
 80a4a8a:	4629      	mov	r1, r5
 80a4a8c:	4620      	mov	r0, r4
 80a4a8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a4a92:	f000 b841 	b.w	80a4b18 <__aeabi_atexit>
 80a4a96:	bf00      	nop
 80a4a98:	2000170c 	.word	0x2000170c
 80a4a9c:	20000104 	.word	0x20000104
 80a4aa0:	080a3269 	.word	0x080a3269
 80a4aa4:	2000171c 	.word	0x2000171c

080a4aa8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a4aa8:	b513      	push	{r0, r1, r4, lr}
 80a4aaa:	4c08      	ldr	r4, [pc, #32]	; (80a4acc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a4aac:	2300      	movs	r3, #0
 80a4aae:	461a      	mov	r2, r3
 80a4ab0:	4619      	mov	r1, r3
 80a4ab2:	9300      	str	r3, [sp, #0]
 80a4ab4:	4620      	mov	r0, r4
 80a4ab6:	f7ff fcdb 	bl	80a4470 <_ZN9IPAddressC1Ehhhh>
 80a4aba:	4620      	mov	r0, r4
 80a4abc:	4a04      	ldr	r2, [pc, #16]	; (80a4ad0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a4abe:	4905      	ldr	r1, [pc, #20]	; (80a4ad4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a4ac0:	b002      	add	sp, #8
 80a4ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a4ac6:	f000 b827 	b.w	80a4b18 <__aeabi_atexit>
 80a4aca:	bf00      	nop
 80a4acc:	20001730 	.word	0x20001730
 80a4ad0:	20000104 	.word	0x20000104
 80a4ad4:	080a43c1 	.word	0x080a43c1

080a4ad8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a4ad8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a4ada:	4d0b      	ldr	r5, [pc, #44]	; (80a4b08 <_Z19__fetch_global_Wirev+0x30>)
 80a4adc:	6829      	ldr	r1, [r5, #0]
 80a4ade:	f011 0401 	ands.w	r4, r1, #1
 80a4ae2:	d10f      	bne.n	80a4b04 <_Z19__fetch_global_Wirev+0x2c>
 80a4ae4:	4628      	mov	r0, r5
 80a4ae6:	f7fb fade 	bl	80a00a6 <__cxa_guard_acquire>
 80a4aea:	b158      	cbz	r0, 80a4b04 <_Z19__fetch_global_Wirev+0x2c>
 80a4aec:	4621      	mov	r1, r4
 80a4aee:	4807      	ldr	r0, [pc, #28]	; (80a4b0c <_Z19__fetch_global_Wirev+0x34>)
 80a4af0:	f7ff fe60 	bl	80a47b4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a4af4:	4628      	mov	r0, r5
 80a4af6:	f7fb fadb 	bl	80a00b0 <__cxa_guard_release>
 80a4afa:	4a05      	ldr	r2, [pc, #20]	; (80a4b10 <_Z19__fetch_global_Wirev+0x38>)
 80a4afc:	4905      	ldr	r1, [pc, #20]	; (80a4b14 <_Z19__fetch_global_Wirev+0x3c>)
 80a4afe:	4803      	ldr	r0, [pc, #12]	; (80a4b0c <_Z19__fetch_global_Wirev+0x34>)
 80a4b00:	f000 f80a 	bl	80a4b18 <__aeabi_atexit>
	return wire;
}
 80a4b04:	4801      	ldr	r0, [pc, #4]	; (80a4b0c <_Z19__fetch_global_Wirev+0x34>)
 80a4b06:	bd38      	pop	{r3, r4, r5, pc}
 80a4b08:	20001748 	.word	0x20001748
 80a4b0c:	2000174c 	.word	0x2000174c
 80a4b10:	20000104 	.word	0x20000104
 80a4b14:	080a475d 	.word	0x080a475d

080a4b18 <__aeabi_atexit>:
 80a4b18:	460b      	mov	r3, r1
 80a4b1a:	4601      	mov	r1, r0
 80a4b1c:	4618      	mov	r0, r3
 80a4b1e:	f001 b88d 	b.w	80a5c3c <__cxa_atexit>

080a4b22 <_ZdlPvj>:
 80a4b22:	f7fb babe 	b.w	80a00a2 <_ZdlPv>

080a4b26 <_ZSt25__throw_bad_function_callv>:
 80a4b26:	b508      	push	{r3, lr}
 80a4b28:	f7fe fb8e 	bl	80a3248 <abort>

080a4b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4b2c:	4b18      	ldr	r3, [pc, #96]	; (80a4b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4b2e:	681a      	ldr	r2, [r3, #0]
 80a4b30:	07d1      	lsls	r1, r2, #31
 80a4b32:	bf5c      	itt	pl
 80a4b34:	2201      	movpl	r2, #1
 80a4b36:	601a      	strpl	r2, [r3, #0]
 80a4b38:	4b16      	ldr	r3, [pc, #88]	; (80a4b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4b3a:	681a      	ldr	r2, [r3, #0]
 80a4b3c:	07d2      	lsls	r2, r2, #31
 80a4b3e:	bf5c      	itt	pl
 80a4b40:	2201      	movpl	r2, #1
 80a4b42:	601a      	strpl	r2, [r3, #0]
 80a4b44:	4b14      	ldr	r3, [pc, #80]	; (80a4b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4b46:	681a      	ldr	r2, [r3, #0]
 80a4b48:	07d0      	lsls	r0, r2, #31
 80a4b4a:	bf5c      	itt	pl
 80a4b4c:	2201      	movpl	r2, #1
 80a4b4e:	601a      	strpl	r2, [r3, #0]
 80a4b50:	4b12      	ldr	r3, [pc, #72]	; (80a4b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4b52:	681a      	ldr	r2, [r3, #0]
 80a4b54:	07d1      	lsls	r1, r2, #31
 80a4b56:	bf5c      	itt	pl
 80a4b58:	2201      	movpl	r2, #1
 80a4b5a:	601a      	strpl	r2, [r3, #0]
 80a4b5c:	4b10      	ldr	r3, [pc, #64]	; (80a4ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4b5e:	681a      	ldr	r2, [r3, #0]
 80a4b60:	07d2      	lsls	r2, r2, #31
 80a4b62:	bf5c      	itt	pl
 80a4b64:	2201      	movpl	r2, #1
 80a4b66:	601a      	strpl	r2, [r3, #0]
 80a4b68:	4b0e      	ldr	r3, [pc, #56]	; (80a4ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4b6a:	681a      	ldr	r2, [r3, #0]
 80a4b6c:	07d0      	lsls	r0, r2, #31
 80a4b6e:	bf5c      	itt	pl
 80a4b70:	2201      	movpl	r2, #1
 80a4b72:	601a      	strpl	r2, [r3, #0]
 80a4b74:	4b0c      	ldr	r3, [pc, #48]	; (80a4ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4b76:	681a      	ldr	r2, [r3, #0]
 80a4b78:	07d1      	lsls	r1, r2, #31
 80a4b7a:	bf5c      	itt	pl
 80a4b7c:	2201      	movpl	r2, #1
 80a4b7e:	601a      	strpl	r2, [r3, #0]
 80a4b80:	4b0a      	ldr	r3, [pc, #40]	; (80a4bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4b82:	681a      	ldr	r2, [r3, #0]
 80a4b84:	07d2      	lsls	r2, r2, #31
 80a4b86:	bf5c      	itt	pl
 80a4b88:	2201      	movpl	r2, #1
 80a4b8a:	601a      	strpl	r2, [r3, #0]
 80a4b8c:	4770      	bx	lr
 80a4b8e:	bf00      	nop
 80a4b90:	2000177c 	.word	0x2000177c
 80a4b94:	20001778 	.word	0x20001778
 80a4b98:	20001774 	.word	0x20001774
 80a4b9c:	20001770 	.word	0x20001770
 80a4ba0:	2000176c 	.word	0x2000176c
 80a4ba4:	20001768 	.word	0x20001768
 80a4ba8:	20001764 	.word	0x20001764
 80a4bac:	20001760 	.word	0x20001760

080a4bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a4bb0:	4b24      	ldr	r3, [pc, #144]	; (80a4c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a4bb2:	681a      	ldr	r2, [r3, #0]
 80a4bb4:	07d0      	lsls	r0, r2, #31
 80a4bb6:	bf5c      	itt	pl
 80a4bb8:	2201      	movpl	r2, #1
 80a4bba:	601a      	strpl	r2, [r3, #0]
 80a4bbc:	4b22      	ldr	r3, [pc, #136]	; (80a4c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a4bbe:	681a      	ldr	r2, [r3, #0]
 80a4bc0:	07d1      	lsls	r1, r2, #31
 80a4bc2:	bf5c      	itt	pl
 80a4bc4:	2201      	movpl	r2, #1
 80a4bc6:	601a      	strpl	r2, [r3, #0]
 80a4bc8:	4b20      	ldr	r3, [pc, #128]	; (80a4c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a4bca:	681a      	ldr	r2, [r3, #0]
 80a4bcc:	07d2      	lsls	r2, r2, #31
 80a4bce:	bf5c      	itt	pl
 80a4bd0:	2201      	movpl	r2, #1
 80a4bd2:	601a      	strpl	r2, [r3, #0]
 80a4bd4:	4b1e      	ldr	r3, [pc, #120]	; (80a4c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a4bd6:	681a      	ldr	r2, [r3, #0]
 80a4bd8:	07d0      	lsls	r0, r2, #31
 80a4bda:	bf5c      	itt	pl
 80a4bdc:	2201      	movpl	r2, #1
 80a4bde:	601a      	strpl	r2, [r3, #0]
 80a4be0:	4b1c      	ldr	r3, [pc, #112]	; (80a4c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a4be2:	681a      	ldr	r2, [r3, #0]
 80a4be4:	07d1      	lsls	r1, r2, #31
 80a4be6:	bf5c      	itt	pl
 80a4be8:	2201      	movpl	r2, #1
 80a4bea:	601a      	strpl	r2, [r3, #0]
 80a4bec:	4b1a      	ldr	r3, [pc, #104]	; (80a4c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a4bee:	681a      	ldr	r2, [r3, #0]
 80a4bf0:	07d2      	lsls	r2, r2, #31
 80a4bf2:	bf5c      	itt	pl
 80a4bf4:	2201      	movpl	r2, #1
 80a4bf6:	601a      	strpl	r2, [r3, #0]
 80a4bf8:	4b18      	ldr	r3, [pc, #96]	; (80a4c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a4bfa:	681a      	ldr	r2, [r3, #0]
 80a4bfc:	07d0      	lsls	r0, r2, #31
 80a4bfe:	bf5c      	itt	pl
 80a4c00:	2201      	movpl	r2, #1
 80a4c02:	601a      	strpl	r2, [r3, #0]
 80a4c04:	4b16      	ldr	r3, [pc, #88]	; (80a4c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a4c06:	681a      	ldr	r2, [r3, #0]
 80a4c08:	07d1      	lsls	r1, r2, #31
 80a4c0a:	bf5c      	itt	pl
 80a4c0c:	2201      	movpl	r2, #1
 80a4c0e:	601a      	strpl	r2, [r3, #0]
 80a4c10:	4b14      	ldr	r3, [pc, #80]	; (80a4c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a4c12:	681a      	ldr	r2, [r3, #0]
 80a4c14:	07d2      	lsls	r2, r2, #31
 80a4c16:	bf5c      	itt	pl
 80a4c18:	2201      	movpl	r2, #1
 80a4c1a:	601a      	strpl	r2, [r3, #0]
 80a4c1c:	4b12      	ldr	r3, [pc, #72]	; (80a4c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a4c1e:	681a      	ldr	r2, [r3, #0]
 80a4c20:	07d0      	lsls	r0, r2, #31
 80a4c22:	bf5c      	itt	pl
 80a4c24:	2201      	movpl	r2, #1
 80a4c26:	601a      	strpl	r2, [r3, #0]
 80a4c28:	4b10      	ldr	r3, [pc, #64]	; (80a4c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a4c2a:	681a      	ldr	r2, [r3, #0]
 80a4c2c:	07d1      	lsls	r1, r2, #31
 80a4c2e:	bf5c      	itt	pl
 80a4c30:	2201      	movpl	r2, #1
 80a4c32:	601a      	strpl	r2, [r3, #0]
 80a4c34:	4b0e      	ldr	r3, [pc, #56]	; (80a4c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a4c36:	681a      	ldr	r2, [r3, #0]
 80a4c38:	07d2      	lsls	r2, r2, #31
 80a4c3a:	bf5c      	itt	pl
 80a4c3c:	2201      	movpl	r2, #1
 80a4c3e:	601a      	strpl	r2, [r3, #0]
 80a4c40:	4770      	bx	lr
 80a4c42:	bf00      	nop
 80a4c44:	200017ac 	.word	0x200017ac
 80a4c48:	200017a8 	.word	0x200017a8
 80a4c4c:	200017a4 	.word	0x200017a4
 80a4c50:	200017a0 	.word	0x200017a0
 80a4c54:	2000179c 	.word	0x2000179c
 80a4c58:	20001798 	.word	0x20001798
 80a4c5c:	20001794 	.word	0x20001794
 80a4c60:	20001790 	.word	0x20001790
 80a4c64:	2000178c 	.word	0x2000178c
 80a4c68:	20001788 	.word	0x20001788
 80a4c6c:	20001784 	.word	0x20001784
 80a4c70:	20001780 	.word	0x20001780

080a4c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a4c74:	4b24      	ldr	r3, [pc, #144]	; (80a4d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a4c76:	681a      	ldr	r2, [r3, #0]
 80a4c78:	07d0      	lsls	r0, r2, #31
 80a4c7a:	bf5c      	itt	pl
 80a4c7c:	2201      	movpl	r2, #1
 80a4c7e:	601a      	strpl	r2, [r3, #0]
 80a4c80:	4b22      	ldr	r3, [pc, #136]	; (80a4d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a4c82:	681a      	ldr	r2, [r3, #0]
 80a4c84:	07d1      	lsls	r1, r2, #31
 80a4c86:	bf5c      	itt	pl
 80a4c88:	2201      	movpl	r2, #1
 80a4c8a:	601a      	strpl	r2, [r3, #0]
 80a4c8c:	4b20      	ldr	r3, [pc, #128]	; (80a4d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a4c8e:	681a      	ldr	r2, [r3, #0]
 80a4c90:	07d2      	lsls	r2, r2, #31
 80a4c92:	bf5c      	itt	pl
 80a4c94:	2201      	movpl	r2, #1
 80a4c96:	601a      	strpl	r2, [r3, #0]
 80a4c98:	4b1e      	ldr	r3, [pc, #120]	; (80a4d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a4c9a:	681a      	ldr	r2, [r3, #0]
 80a4c9c:	07d0      	lsls	r0, r2, #31
 80a4c9e:	bf5c      	itt	pl
 80a4ca0:	2201      	movpl	r2, #1
 80a4ca2:	601a      	strpl	r2, [r3, #0]
 80a4ca4:	4b1c      	ldr	r3, [pc, #112]	; (80a4d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a4ca6:	681a      	ldr	r2, [r3, #0]
 80a4ca8:	07d1      	lsls	r1, r2, #31
 80a4caa:	bf5c      	itt	pl
 80a4cac:	2201      	movpl	r2, #1
 80a4cae:	601a      	strpl	r2, [r3, #0]
 80a4cb0:	4b1a      	ldr	r3, [pc, #104]	; (80a4d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a4cb2:	681a      	ldr	r2, [r3, #0]
 80a4cb4:	07d2      	lsls	r2, r2, #31
 80a4cb6:	bf5c      	itt	pl
 80a4cb8:	2201      	movpl	r2, #1
 80a4cba:	601a      	strpl	r2, [r3, #0]
 80a4cbc:	4b18      	ldr	r3, [pc, #96]	; (80a4d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a4cbe:	681a      	ldr	r2, [r3, #0]
 80a4cc0:	07d0      	lsls	r0, r2, #31
 80a4cc2:	bf5c      	itt	pl
 80a4cc4:	2201      	movpl	r2, #1
 80a4cc6:	601a      	strpl	r2, [r3, #0]
 80a4cc8:	4b16      	ldr	r3, [pc, #88]	; (80a4d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a4cca:	681a      	ldr	r2, [r3, #0]
 80a4ccc:	07d1      	lsls	r1, r2, #31
 80a4cce:	bf5c      	itt	pl
 80a4cd0:	2201      	movpl	r2, #1
 80a4cd2:	601a      	strpl	r2, [r3, #0]
 80a4cd4:	4b14      	ldr	r3, [pc, #80]	; (80a4d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a4cd6:	681a      	ldr	r2, [r3, #0]
 80a4cd8:	07d2      	lsls	r2, r2, #31
 80a4cda:	bf5c      	itt	pl
 80a4cdc:	2201      	movpl	r2, #1
 80a4cde:	601a      	strpl	r2, [r3, #0]
 80a4ce0:	4b12      	ldr	r3, [pc, #72]	; (80a4d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a4ce2:	681a      	ldr	r2, [r3, #0]
 80a4ce4:	07d0      	lsls	r0, r2, #31
 80a4ce6:	bf5c      	itt	pl
 80a4ce8:	2201      	movpl	r2, #1
 80a4cea:	601a      	strpl	r2, [r3, #0]
 80a4cec:	4b10      	ldr	r3, [pc, #64]	; (80a4d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a4cee:	681a      	ldr	r2, [r3, #0]
 80a4cf0:	07d1      	lsls	r1, r2, #31
 80a4cf2:	bf5c      	itt	pl
 80a4cf4:	2201      	movpl	r2, #1
 80a4cf6:	601a      	strpl	r2, [r3, #0]
 80a4cf8:	4b0e      	ldr	r3, [pc, #56]	; (80a4d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a4cfa:	681a      	ldr	r2, [r3, #0]
 80a4cfc:	07d2      	lsls	r2, r2, #31
 80a4cfe:	bf5c      	itt	pl
 80a4d00:	2201      	movpl	r2, #1
 80a4d02:	601a      	strpl	r2, [r3, #0]
 80a4d04:	4770      	bx	lr
 80a4d06:	bf00      	nop
 80a4d08:	200017dc 	.word	0x200017dc
 80a4d0c:	200017d8 	.word	0x200017d8
 80a4d10:	200017d4 	.word	0x200017d4
 80a4d14:	200017d0 	.word	0x200017d0
 80a4d18:	200017cc 	.word	0x200017cc
 80a4d1c:	200017c8 	.word	0x200017c8
 80a4d20:	200017c4 	.word	0x200017c4
 80a4d24:	200017c0 	.word	0x200017c0
 80a4d28:	200017bc 	.word	0x200017bc
 80a4d2c:	200017b8 	.word	0x200017b8
 80a4d30:	200017b4 	.word	0x200017b4
 80a4d34:	200017b0 	.word	0x200017b0

080a4d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4d38:	4b18      	ldr	r3, [pc, #96]	; (80a4d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4d3a:	681a      	ldr	r2, [r3, #0]
 80a4d3c:	07d1      	lsls	r1, r2, #31
 80a4d3e:	bf5c      	itt	pl
 80a4d40:	2201      	movpl	r2, #1
 80a4d42:	601a      	strpl	r2, [r3, #0]
 80a4d44:	4b16      	ldr	r3, [pc, #88]	; (80a4da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4d46:	681a      	ldr	r2, [r3, #0]
 80a4d48:	07d2      	lsls	r2, r2, #31
 80a4d4a:	bf5c      	itt	pl
 80a4d4c:	2201      	movpl	r2, #1
 80a4d4e:	601a      	strpl	r2, [r3, #0]
 80a4d50:	4b14      	ldr	r3, [pc, #80]	; (80a4da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4d52:	681a      	ldr	r2, [r3, #0]
 80a4d54:	07d0      	lsls	r0, r2, #31
 80a4d56:	bf5c      	itt	pl
 80a4d58:	2201      	movpl	r2, #1
 80a4d5a:	601a      	strpl	r2, [r3, #0]
 80a4d5c:	4b12      	ldr	r3, [pc, #72]	; (80a4da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4d5e:	681a      	ldr	r2, [r3, #0]
 80a4d60:	07d1      	lsls	r1, r2, #31
 80a4d62:	bf5c      	itt	pl
 80a4d64:	2201      	movpl	r2, #1
 80a4d66:	601a      	strpl	r2, [r3, #0]
 80a4d68:	4b10      	ldr	r3, [pc, #64]	; (80a4dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4d6a:	681a      	ldr	r2, [r3, #0]
 80a4d6c:	07d2      	lsls	r2, r2, #31
 80a4d6e:	bf5c      	itt	pl
 80a4d70:	2201      	movpl	r2, #1
 80a4d72:	601a      	strpl	r2, [r3, #0]
 80a4d74:	4b0e      	ldr	r3, [pc, #56]	; (80a4db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4d76:	681a      	ldr	r2, [r3, #0]
 80a4d78:	07d0      	lsls	r0, r2, #31
 80a4d7a:	bf5c      	itt	pl
 80a4d7c:	2201      	movpl	r2, #1
 80a4d7e:	601a      	strpl	r2, [r3, #0]
 80a4d80:	4b0c      	ldr	r3, [pc, #48]	; (80a4db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4d82:	681a      	ldr	r2, [r3, #0]
 80a4d84:	07d1      	lsls	r1, r2, #31
 80a4d86:	bf5c      	itt	pl
 80a4d88:	2201      	movpl	r2, #1
 80a4d8a:	601a      	strpl	r2, [r3, #0]
 80a4d8c:	4b0a      	ldr	r3, [pc, #40]	; (80a4db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4d8e:	681a      	ldr	r2, [r3, #0]
 80a4d90:	07d2      	lsls	r2, r2, #31
 80a4d92:	bf5c      	itt	pl
 80a4d94:	2201      	movpl	r2, #1
 80a4d96:	601a      	strpl	r2, [r3, #0]
 80a4d98:	4770      	bx	lr
 80a4d9a:	bf00      	nop
 80a4d9c:	200017fc 	.word	0x200017fc
 80a4da0:	200017f8 	.word	0x200017f8
 80a4da4:	200017f4 	.word	0x200017f4
 80a4da8:	200017f0 	.word	0x200017f0
 80a4dac:	200017ec 	.word	0x200017ec
 80a4db0:	200017e8 	.word	0x200017e8
 80a4db4:	200017e4 	.word	0x200017e4
 80a4db8:	200017e0 	.word	0x200017e0

080a4dbc <__aeabi_drsub>:
 80a4dbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4dc0:	e002      	b.n	80a4dc8 <__adddf3>
 80a4dc2:	bf00      	nop

080a4dc4 <__aeabi_dsub>:
 80a4dc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4dc8 <__adddf3>:
 80a4dc8:	b530      	push	{r4, r5, lr}
 80a4dca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a4dce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a4dd2:	ea94 0f05 	teq	r4, r5
 80a4dd6:	bf08      	it	eq
 80a4dd8:	ea90 0f02 	teqeq	r0, r2
 80a4ddc:	bf1f      	itttt	ne
 80a4dde:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a4de2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a4de6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a4dea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4dee:	f000 80e2 	beq.w	80a4fb6 <__adddf3+0x1ee>
 80a4df2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a4df6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4dfa:	bfb8      	it	lt
 80a4dfc:	426d      	neglt	r5, r5
 80a4dfe:	dd0c      	ble.n	80a4e1a <__adddf3+0x52>
 80a4e00:	442c      	add	r4, r5
 80a4e02:	ea80 0202 	eor.w	r2, r0, r2
 80a4e06:	ea81 0303 	eor.w	r3, r1, r3
 80a4e0a:	ea82 0000 	eor.w	r0, r2, r0
 80a4e0e:	ea83 0101 	eor.w	r1, r3, r1
 80a4e12:	ea80 0202 	eor.w	r2, r0, r2
 80a4e16:	ea81 0303 	eor.w	r3, r1, r3
 80a4e1a:	2d36      	cmp	r5, #54	; 0x36
 80a4e1c:	bf88      	it	hi
 80a4e1e:	bd30      	pophi	{r4, r5, pc}
 80a4e20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4e24:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4e28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4e2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4e30:	d002      	beq.n	80a4e38 <__adddf3+0x70>
 80a4e32:	4240      	negs	r0, r0
 80a4e34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4e38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4e3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4e40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4e44:	d002      	beq.n	80a4e4c <__adddf3+0x84>
 80a4e46:	4252      	negs	r2, r2
 80a4e48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4e4c:	ea94 0f05 	teq	r4, r5
 80a4e50:	f000 80a7 	beq.w	80a4fa2 <__adddf3+0x1da>
 80a4e54:	f1a4 0401 	sub.w	r4, r4, #1
 80a4e58:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4e5c:	db0d      	blt.n	80a4e7a <__adddf3+0xb2>
 80a4e5e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a4e62:	fa22 f205 	lsr.w	r2, r2, r5
 80a4e66:	1880      	adds	r0, r0, r2
 80a4e68:	f141 0100 	adc.w	r1, r1, #0
 80a4e6c:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4e70:	1880      	adds	r0, r0, r2
 80a4e72:	fa43 f305 	asr.w	r3, r3, r5
 80a4e76:	4159      	adcs	r1, r3
 80a4e78:	e00e      	b.n	80a4e98 <__adddf3+0xd0>
 80a4e7a:	f1a5 0520 	sub.w	r5, r5, #32
 80a4e7e:	f10e 0e20 	add.w	lr, lr, #32
 80a4e82:	2a01      	cmp	r2, #1
 80a4e84:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4e88:	bf28      	it	cs
 80a4e8a:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a4e8e:	fa43 f305 	asr.w	r3, r3, r5
 80a4e92:	18c0      	adds	r0, r0, r3
 80a4e94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4e98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4e9c:	d507      	bpl.n	80a4eae <__adddf3+0xe6>
 80a4e9e:	f04f 0e00 	mov.w	lr, #0
 80a4ea2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4ea6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a4eaa:	eb6e 0101 	sbc.w	r1, lr, r1
 80a4eae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4eb2:	d31b      	bcc.n	80a4eec <__adddf3+0x124>
 80a4eb4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4eb8:	d30c      	bcc.n	80a4ed4 <__adddf3+0x10c>
 80a4eba:	0849      	lsrs	r1, r1, #1
 80a4ebc:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4ec0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4ec4:	f104 0401 	add.w	r4, r4, #1
 80a4ec8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4ecc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4ed0:	f080 809a 	bcs.w	80a5008 <__adddf3+0x240>
 80a4ed4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4ed8:	bf08      	it	eq
 80a4eda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4ede:	f150 0000 	adcs.w	r0, r0, #0
 80a4ee2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4ee6:	ea41 0105 	orr.w	r1, r1, r5
 80a4eea:	bd30      	pop	{r4, r5, pc}
 80a4eec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a4ef0:	4140      	adcs	r0, r0
 80a4ef2:	eb41 0101 	adc.w	r1, r1, r1
 80a4ef6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4efa:	f1a4 0401 	sub.w	r4, r4, #1
 80a4efe:	d1e9      	bne.n	80a4ed4 <__adddf3+0x10c>
 80a4f00:	f091 0f00 	teq	r1, #0
 80a4f04:	bf04      	itt	eq
 80a4f06:	4601      	moveq	r1, r0
 80a4f08:	2000      	moveq	r0, #0
 80a4f0a:	fab1 f381 	clz	r3, r1
 80a4f0e:	bf08      	it	eq
 80a4f10:	3320      	addeq	r3, #32
 80a4f12:	f1a3 030b 	sub.w	r3, r3, #11
 80a4f16:	f1b3 0220 	subs.w	r2, r3, #32
 80a4f1a:	da0c      	bge.n	80a4f36 <__adddf3+0x16e>
 80a4f1c:	320c      	adds	r2, #12
 80a4f1e:	dd08      	ble.n	80a4f32 <__adddf3+0x16a>
 80a4f20:	f102 0c14 	add.w	ip, r2, #20
 80a4f24:	f1c2 020c 	rsb	r2, r2, #12
 80a4f28:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4f2c:	fa21 f102 	lsr.w	r1, r1, r2
 80a4f30:	e00c      	b.n	80a4f4c <__adddf3+0x184>
 80a4f32:	f102 0214 	add.w	r2, r2, #20
 80a4f36:	bfd8      	it	le
 80a4f38:	f1c2 0c20 	rsble	ip, r2, #32
 80a4f3c:	fa01 f102 	lsl.w	r1, r1, r2
 80a4f40:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4f44:	bfdc      	itt	le
 80a4f46:	ea41 010c 	orrle.w	r1, r1, ip
 80a4f4a:	4090      	lslle	r0, r2
 80a4f4c:	1ae4      	subs	r4, r4, r3
 80a4f4e:	bfa2      	ittt	ge
 80a4f50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4f54:	4329      	orrge	r1, r5
 80a4f56:	bd30      	popge	{r4, r5, pc}
 80a4f58:	ea6f 0404 	mvn.w	r4, r4
 80a4f5c:	3c1f      	subs	r4, #31
 80a4f5e:	da1c      	bge.n	80a4f9a <__adddf3+0x1d2>
 80a4f60:	340c      	adds	r4, #12
 80a4f62:	dc0e      	bgt.n	80a4f82 <__adddf3+0x1ba>
 80a4f64:	f104 0414 	add.w	r4, r4, #20
 80a4f68:	f1c4 0220 	rsb	r2, r4, #32
 80a4f6c:	fa20 f004 	lsr.w	r0, r0, r4
 80a4f70:	fa01 f302 	lsl.w	r3, r1, r2
 80a4f74:	ea40 0003 	orr.w	r0, r0, r3
 80a4f78:	fa21 f304 	lsr.w	r3, r1, r4
 80a4f7c:	ea45 0103 	orr.w	r1, r5, r3
 80a4f80:	bd30      	pop	{r4, r5, pc}
 80a4f82:	f1c4 040c 	rsb	r4, r4, #12
 80a4f86:	f1c4 0220 	rsb	r2, r4, #32
 80a4f8a:	fa20 f002 	lsr.w	r0, r0, r2
 80a4f8e:	fa01 f304 	lsl.w	r3, r1, r4
 80a4f92:	ea40 0003 	orr.w	r0, r0, r3
 80a4f96:	4629      	mov	r1, r5
 80a4f98:	bd30      	pop	{r4, r5, pc}
 80a4f9a:	fa21 f004 	lsr.w	r0, r1, r4
 80a4f9e:	4629      	mov	r1, r5
 80a4fa0:	bd30      	pop	{r4, r5, pc}
 80a4fa2:	f094 0f00 	teq	r4, #0
 80a4fa6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a4faa:	bf06      	itte	eq
 80a4fac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a4fb0:	3401      	addeq	r4, #1
 80a4fb2:	3d01      	subne	r5, #1
 80a4fb4:	e74e      	b.n	80a4e54 <__adddf3+0x8c>
 80a4fb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4fba:	bf18      	it	ne
 80a4fbc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4fc0:	d029      	beq.n	80a5016 <__adddf3+0x24e>
 80a4fc2:	ea94 0f05 	teq	r4, r5
 80a4fc6:	bf08      	it	eq
 80a4fc8:	ea90 0f02 	teqeq	r0, r2
 80a4fcc:	d005      	beq.n	80a4fda <__adddf3+0x212>
 80a4fce:	ea54 0c00 	orrs.w	ip, r4, r0
 80a4fd2:	bf04      	itt	eq
 80a4fd4:	4619      	moveq	r1, r3
 80a4fd6:	4610      	moveq	r0, r2
 80a4fd8:	bd30      	pop	{r4, r5, pc}
 80a4fda:	ea91 0f03 	teq	r1, r3
 80a4fde:	bf1e      	ittt	ne
 80a4fe0:	2100      	movne	r1, #0
 80a4fe2:	2000      	movne	r0, #0
 80a4fe4:	bd30      	popne	{r4, r5, pc}
 80a4fe6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a4fea:	d105      	bne.n	80a4ff8 <__adddf3+0x230>
 80a4fec:	0040      	lsls	r0, r0, #1
 80a4fee:	4149      	adcs	r1, r1
 80a4ff0:	bf28      	it	cs
 80a4ff2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a4ff6:	bd30      	pop	{r4, r5, pc}
 80a4ff8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4ffc:	bf3c      	itt	cc
 80a4ffe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a5002:	bd30      	popcc	{r4, r5, pc}
 80a5004:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5008:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a500c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5010:	f04f 0000 	mov.w	r0, #0
 80a5014:	bd30      	pop	{r4, r5, pc}
 80a5016:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a501a:	bf1a      	itte	ne
 80a501c:	4619      	movne	r1, r3
 80a501e:	4610      	movne	r0, r2
 80a5020:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a5024:	bf1c      	itt	ne
 80a5026:	460b      	movne	r3, r1
 80a5028:	4602      	movne	r2, r0
 80a502a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a502e:	bf06      	itte	eq
 80a5030:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a5034:	ea91 0f03 	teqeq	r1, r3
 80a5038:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a503c:	bd30      	pop	{r4, r5, pc}
 80a503e:	bf00      	nop

080a5040 <__aeabi_ui2d>:
 80a5040:	f090 0f00 	teq	r0, #0
 80a5044:	bf04      	itt	eq
 80a5046:	2100      	moveq	r1, #0
 80a5048:	4770      	bxeq	lr
 80a504a:	b530      	push	{r4, r5, lr}
 80a504c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5050:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5054:	f04f 0500 	mov.w	r5, #0
 80a5058:	f04f 0100 	mov.w	r1, #0
 80a505c:	e750      	b.n	80a4f00 <__adddf3+0x138>
 80a505e:	bf00      	nop

080a5060 <__aeabi_i2d>:
 80a5060:	f090 0f00 	teq	r0, #0
 80a5064:	bf04      	itt	eq
 80a5066:	2100      	moveq	r1, #0
 80a5068:	4770      	bxeq	lr
 80a506a:	b530      	push	{r4, r5, lr}
 80a506c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5070:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5074:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a5078:	bf48      	it	mi
 80a507a:	4240      	negmi	r0, r0
 80a507c:	f04f 0100 	mov.w	r1, #0
 80a5080:	e73e      	b.n	80a4f00 <__adddf3+0x138>
 80a5082:	bf00      	nop

080a5084 <__aeabi_f2d>:
 80a5084:	0042      	lsls	r2, r0, #1
 80a5086:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a508a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a508e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a5092:	bf1f      	itttt	ne
 80a5094:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a5098:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a509c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a50a0:	4770      	bxne	lr
 80a50a2:	f092 0f00 	teq	r2, #0
 80a50a6:	bf14      	ite	ne
 80a50a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a50ac:	4770      	bxeq	lr
 80a50ae:	b530      	push	{r4, r5, lr}
 80a50b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a50b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a50b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a50bc:	e720      	b.n	80a4f00 <__adddf3+0x138>
 80a50be:	bf00      	nop

080a50c0 <__aeabi_ul2d>:
 80a50c0:	ea50 0201 	orrs.w	r2, r0, r1
 80a50c4:	bf08      	it	eq
 80a50c6:	4770      	bxeq	lr
 80a50c8:	b530      	push	{r4, r5, lr}
 80a50ca:	f04f 0500 	mov.w	r5, #0
 80a50ce:	e00a      	b.n	80a50e6 <__aeabi_l2d+0x16>

080a50d0 <__aeabi_l2d>:
 80a50d0:	ea50 0201 	orrs.w	r2, r0, r1
 80a50d4:	bf08      	it	eq
 80a50d6:	4770      	bxeq	lr
 80a50d8:	b530      	push	{r4, r5, lr}
 80a50da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a50de:	d502      	bpl.n	80a50e6 <__aeabi_l2d+0x16>
 80a50e0:	4240      	negs	r0, r0
 80a50e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a50e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a50ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a50ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a50f2:	f43f aedc 	beq.w	80a4eae <__adddf3+0xe6>
 80a50f6:	f04f 0203 	mov.w	r2, #3
 80a50fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a50fe:	bf18      	it	ne
 80a5100:	3203      	addne	r2, #3
 80a5102:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5106:	bf18      	it	ne
 80a5108:	3203      	addne	r2, #3
 80a510a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a510e:	f1c2 0320 	rsb	r3, r2, #32
 80a5112:	fa00 fc03 	lsl.w	ip, r0, r3
 80a5116:	fa20 f002 	lsr.w	r0, r0, r2
 80a511a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a511e:	ea40 000e 	orr.w	r0, r0, lr
 80a5122:	fa21 f102 	lsr.w	r1, r1, r2
 80a5126:	4414      	add	r4, r2
 80a5128:	e6c1      	b.n	80a4eae <__adddf3+0xe6>
 80a512a:	bf00      	nop

080a512c <__aeabi_dmul>:
 80a512c:	b570      	push	{r4, r5, r6, lr}
 80a512e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5132:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5136:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a513a:	bf1d      	ittte	ne
 80a513c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5140:	ea94 0f0c 	teqne	r4, ip
 80a5144:	ea95 0f0c 	teqne	r5, ip
 80a5148:	f000 f8de 	bleq	80a5308 <__aeabi_dmul+0x1dc>
 80a514c:	442c      	add	r4, r5
 80a514e:	ea81 0603 	eor.w	r6, r1, r3
 80a5152:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5156:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a515a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a515e:	bf18      	it	ne
 80a5160:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5164:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5168:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a516c:	d038      	beq.n	80a51e0 <__aeabi_dmul+0xb4>
 80a516e:	fba0 ce02 	umull	ip, lr, r0, r2
 80a5172:	f04f 0500 	mov.w	r5, #0
 80a5176:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a517a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a517e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a5182:	f04f 0600 	mov.w	r6, #0
 80a5186:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a518a:	f09c 0f00 	teq	ip, #0
 80a518e:	bf18      	it	ne
 80a5190:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5194:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5198:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a519c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a51a0:	d204      	bcs.n	80a51ac <__aeabi_dmul+0x80>
 80a51a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a51a6:	416d      	adcs	r5, r5
 80a51a8:	eb46 0606 	adc.w	r6, r6, r6
 80a51ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a51b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a51b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a51b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a51bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a51c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a51c4:	bf88      	it	hi
 80a51c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a51ca:	d81e      	bhi.n	80a520a <__aeabi_dmul+0xde>
 80a51cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a51d0:	bf08      	it	eq
 80a51d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a51d6:	f150 0000 	adcs.w	r0, r0, #0
 80a51da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a51de:	bd70      	pop	{r4, r5, r6, pc}
 80a51e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a51e4:	ea46 0101 	orr.w	r1, r6, r1
 80a51e8:	ea40 0002 	orr.w	r0, r0, r2
 80a51ec:	ea81 0103 	eor.w	r1, r1, r3
 80a51f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a51f4:	bfc2      	ittt	gt
 80a51f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a51fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a51fe:	bd70      	popgt	{r4, r5, r6, pc}
 80a5200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5204:	f04f 0e00 	mov.w	lr, #0
 80a5208:	3c01      	subs	r4, #1
 80a520a:	f300 80ab 	bgt.w	80a5364 <__aeabi_dmul+0x238>
 80a520e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a5212:	bfde      	ittt	le
 80a5214:	2000      	movle	r0, #0
 80a5216:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a521a:	bd70      	pople	{r4, r5, r6, pc}
 80a521c:	f1c4 0400 	rsb	r4, r4, #0
 80a5220:	3c20      	subs	r4, #32
 80a5222:	da35      	bge.n	80a5290 <__aeabi_dmul+0x164>
 80a5224:	340c      	adds	r4, #12
 80a5226:	dc1b      	bgt.n	80a5260 <__aeabi_dmul+0x134>
 80a5228:	f104 0414 	add.w	r4, r4, #20
 80a522c:	f1c4 0520 	rsb	r5, r4, #32
 80a5230:	fa00 f305 	lsl.w	r3, r0, r5
 80a5234:	fa20 f004 	lsr.w	r0, r0, r4
 80a5238:	fa01 f205 	lsl.w	r2, r1, r5
 80a523c:	ea40 0002 	orr.w	r0, r0, r2
 80a5240:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5244:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5248:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a524c:	fa21 f604 	lsr.w	r6, r1, r4
 80a5250:	eb42 0106 	adc.w	r1, r2, r6
 80a5254:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5258:	bf08      	it	eq
 80a525a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a525e:	bd70      	pop	{r4, r5, r6, pc}
 80a5260:	f1c4 040c 	rsb	r4, r4, #12
 80a5264:	f1c4 0520 	rsb	r5, r4, #32
 80a5268:	fa00 f304 	lsl.w	r3, r0, r4
 80a526c:	fa20 f005 	lsr.w	r0, r0, r5
 80a5270:	fa01 f204 	lsl.w	r2, r1, r4
 80a5274:	ea40 0002 	orr.w	r0, r0, r2
 80a5278:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a527c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5280:	f141 0100 	adc.w	r1, r1, #0
 80a5284:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5288:	bf08      	it	eq
 80a528a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a528e:	bd70      	pop	{r4, r5, r6, pc}
 80a5290:	f1c4 0520 	rsb	r5, r4, #32
 80a5294:	fa00 f205 	lsl.w	r2, r0, r5
 80a5298:	ea4e 0e02 	orr.w	lr, lr, r2
 80a529c:	fa20 f304 	lsr.w	r3, r0, r4
 80a52a0:	fa01 f205 	lsl.w	r2, r1, r5
 80a52a4:	ea43 0302 	orr.w	r3, r3, r2
 80a52a8:	fa21 f004 	lsr.w	r0, r1, r4
 80a52ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a52b0:	fa21 f204 	lsr.w	r2, r1, r4
 80a52b4:	ea20 0002 	bic.w	r0, r0, r2
 80a52b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a52bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a52c0:	bf08      	it	eq
 80a52c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a52c6:	bd70      	pop	{r4, r5, r6, pc}
 80a52c8:	f094 0f00 	teq	r4, #0
 80a52cc:	d10f      	bne.n	80a52ee <__aeabi_dmul+0x1c2>
 80a52ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a52d2:	0040      	lsls	r0, r0, #1
 80a52d4:	eb41 0101 	adc.w	r1, r1, r1
 80a52d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a52dc:	bf08      	it	eq
 80a52de:	3c01      	subeq	r4, #1
 80a52e0:	d0f7      	beq.n	80a52d2 <__aeabi_dmul+0x1a6>
 80a52e2:	ea41 0106 	orr.w	r1, r1, r6
 80a52e6:	f095 0f00 	teq	r5, #0
 80a52ea:	bf18      	it	ne
 80a52ec:	4770      	bxne	lr
 80a52ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a52f2:	0052      	lsls	r2, r2, #1
 80a52f4:	eb43 0303 	adc.w	r3, r3, r3
 80a52f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a52fc:	bf08      	it	eq
 80a52fe:	3d01      	subeq	r5, #1
 80a5300:	d0f7      	beq.n	80a52f2 <__aeabi_dmul+0x1c6>
 80a5302:	ea43 0306 	orr.w	r3, r3, r6
 80a5306:	4770      	bx	lr
 80a5308:	ea94 0f0c 	teq	r4, ip
 80a530c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a5310:	bf18      	it	ne
 80a5312:	ea95 0f0c 	teqne	r5, ip
 80a5316:	d00c      	beq.n	80a5332 <__aeabi_dmul+0x206>
 80a5318:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a531c:	bf18      	it	ne
 80a531e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5322:	d1d1      	bne.n	80a52c8 <__aeabi_dmul+0x19c>
 80a5324:	ea81 0103 	eor.w	r1, r1, r3
 80a5328:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a532c:	f04f 0000 	mov.w	r0, #0
 80a5330:	bd70      	pop	{r4, r5, r6, pc}
 80a5332:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5336:	bf06      	itte	eq
 80a5338:	4610      	moveq	r0, r2
 80a533a:	4619      	moveq	r1, r3
 80a533c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5340:	d019      	beq.n	80a5376 <__aeabi_dmul+0x24a>
 80a5342:	ea94 0f0c 	teq	r4, ip
 80a5346:	d102      	bne.n	80a534e <__aeabi_dmul+0x222>
 80a5348:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a534c:	d113      	bne.n	80a5376 <__aeabi_dmul+0x24a>
 80a534e:	ea95 0f0c 	teq	r5, ip
 80a5352:	d105      	bne.n	80a5360 <__aeabi_dmul+0x234>
 80a5354:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5358:	bf1c      	itt	ne
 80a535a:	4610      	movne	r0, r2
 80a535c:	4619      	movne	r1, r3
 80a535e:	d10a      	bne.n	80a5376 <__aeabi_dmul+0x24a>
 80a5360:	ea81 0103 	eor.w	r1, r1, r3
 80a5364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5368:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a536c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a5370:	f04f 0000 	mov.w	r0, #0
 80a5374:	bd70      	pop	{r4, r5, r6, pc}
 80a5376:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a537a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a537e:	bd70      	pop	{r4, r5, r6, pc}

080a5380 <__aeabi_ddiv>:
 80a5380:	b570      	push	{r4, r5, r6, lr}
 80a5382:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5386:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a538a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a538e:	bf1d      	ittte	ne
 80a5390:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5394:	ea94 0f0c 	teqne	r4, ip
 80a5398:	ea95 0f0c 	teqne	r5, ip
 80a539c:	f000 f8a7 	bleq	80a54ee <__aeabi_ddiv+0x16e>
 80a53a0:	eba4 0405 	sub.w	r4, r4, r5
 80a53a4:	ea81 0e03 	eor.w	lr, r1, r3
 80a53a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a53ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a53b0:	f000 8088 	beq.w	80a54c4 <__aeabi_ddiv+0x144>
 80a53b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a53b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a53bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a53c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a53c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a53c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a53cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a53d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a53d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a53d8:	429d      	cmp	r5, r3
 80a53da:	bf08      	it	eq
 80a53dc:	4296      	cmpeq	r6, r2
 80a53de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a53e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a53e6:	d202      	bcs.n	80a53ee <__aeabi_ddiv+0x6e>
 80a53e8:	085b      	lsrs	r3, r3, #1
 80a53ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80a53ee:	1ab6      	subs	r6, r6, r2
 80a53f0:	eb65 0503 	sbc.w	r5, r5, r3
 80a53f4:	085b      	lsrs	r3, r3, #1
 80a53f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a53fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a53fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a5402:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5406:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a540a:	bf22      	ittt	cs
 80a540c:	1ab6      	subcs	r6, r6, r2
 80a540e:	4675      	movcs	r5, lr
 80a5410:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5414:	085b      	lsrs	r3, r3, #1
 80a5416:	ea4f 0232 	mov.w	r2, r2, rrx
 80a541a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a541e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5422:	bf22      	ittt	cs
 80a5424:	1ab6      	subcs	r6, r6, r2
 80a5426:	4675      	movcs	r5, lr
 80a5428:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a542c:	085b      	lsrs	r3, r3, #1
 80a542e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5432:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5436:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a543a:	bf22      	ittt	cs
 80a543c:	1ab6      	subcs	r6, r6, r2
 80a543e:	4675      	movcs	r5, lr
 80a5440:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5444:	085b      	lsrs	r3, r3, #1
 80a5446:	ea4f 0232 	mov.w	r2, r2, rrx
 80a544a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a544e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5452:	bf22      	ittt	cs
 80a5454:	1ab6      	subcs	r6, r6, r2
 80a5456:	4675      	movcs	r5, lr
 80a5458:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a545c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a5460:	d018      	beq.n	80a5494 <__aeabi_ddiv+0x114>
 80a5462:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5466:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a546a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a546e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a5472:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5476:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a547a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a547e:	d1c0      	bne.n	80a5402 <__aeabi_ddiv+0x82>
 80a5480:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5484:	d10b      	bne.n	80a549e <__aeabi_ddiv+0x11e>
 80a5486:	ea41 0100 	orr.w	r1, r1, r0
 80a548a:	f04f 0000 	mov.w	r0, #0
 80a548e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a5492:	e7b6      	b.n	80a5402 <__aeabi_ddiv+0x82>
 80a5494:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5498:	bf04      	itt	eq
 80a549a:	4301      	orreq	r1, r0
 80a549c:	2000      	moveq	r0, #0
 80a549e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a54a2:	bf88      	it	hi
 80a54a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a54a8:	f63f aeaf 	bhi.w	80a520a <__aeabi_dmul+0xde>
 80a54ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80a54b0:	bf04      	itt	eq
 80a54b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a54b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a54ba:	f150 0000 	adcs.w	r0, r0, #0
 80a54be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a54c2:	bd70      	pop	{r4, r5, r6, pc}
 80a54c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a54c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a54cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a54d0:	bfc2      	ittt	gt
 80a54d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a54d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a54da:	bd70      	popgt	{r4, r5, r6, pc}
 80a54dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a54e0:	f04f 0e00 	mov.w	lr, #0
 80a54e4:	3c01      	subs	r4, #1
 80a54e6:	e690      	b.n	80a520a <__aeabi_dmul+0xde>
 80a54e8:	ea45 0e06 	orr.w	lr, r5, r6
 80a54ec:	e68d      	b.n	80a520a <__aeabi_dmul+0xde>
 80a54ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a54f2:	ea94 0f0c 	teq	r4, ip
 80a54f6:	bf08      	it	eq
 80a54f8:	ea95 0f0c 	teqeq	r5, ip
 80a54fc:	f43f af3b 	beq.w	80a5376 <__aeabi_dmul+0x24a>
 80a5500:	ea94 0f0c 	teq	r4, ip
 80a5504:	d10a      	bne.n	80a551c <__aeabi_ddiv+0x19c>
 80a5506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a550a:	f47f af34 	bne.w	80a5376 <__aeabi_dmul+0x24a>
 80a550e:	ea95 0f0c 	teq	r5, ip
 80a5512:	f47f af25 	bne.w	80a5360 <__aeabi_dmul+0x234>
 80a5516:	4610      	mov	r0, r2
 80a5518:	4619      	mov	r1, r3
 80a551a:	e72c      	b.n	80a5376 <__aeabi_dmul+0x24a>
 80a551c:	ea95 0f0c 	teq	r5, ip
 80a5520:	d106      	bne.n	80a5530 <__aeabi_ddiv+0x1b0>
 80a5522:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5526:	f43f aefd 	beq.w	80a5324 <__aeabi_dmul+0x1f8>
 80a552a:	4610      	mov	r0, r2
 80a552c:	4619      	mov	r1, r3
 80a552e:	e722      	b.n	80a5376 <__aeabi_dmul+0x24a>
 80a5530:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5534:	bf18      	it	ne
 80a5536:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a553a:	f47f aec5 	bne.w	80a52c8 <__aeabi_dmul+0x19c>
 80a553e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a5542:	f47f af0d 	bne.w	80a5360 <__aeabi_dmul+0x234>
 80a5546:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a554a:	f47f aeeb 	bne.w	80a5324 <__aeabi_dmul+0x1f8>
 80a554e:	e712      	b.n	80a5376 <__aeabi_dmul+0x24a>

080a5550 <__aeabi_d2iz>:
 80a5550:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5554:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5558:	d215      	bcs.n	80a5586 <__aeabi_d2iz+0x36>
 80a555a:	d511      	bpl.n	80a5580 <__aeabi_d2iz+0x30>
 80a555c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5560:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5564:	d912      	bls.n	80a558c <__aeabi_d2iz+0x3c>
 80a5566:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a556a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a556e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5572:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5576:	fa23 f002 	lsr.w	r0, r3, r2
 80a557a:	bf18      	it	ne
 80a557c:	4240      	negne	r0, r0
 80a557e:	4770      	bx	lr
 80a5580:	f04f 0000 	mov.w	r0, #0
 80a5584:	4770      	bx	lr
 80a5586:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a558a:	d105      	bne.n	80a5598 <__aeabi_d2iz+0x48>
 80a558c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5590:	bf08      	it	eq
 80a5592:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5596:	4770      	bx	lr
 80a5598:	f04f 0000 	mov.w	r0, #0
 80a559c:	4770      	bx	lr
 80a559e:	bf00      	nop

080a55a0 <__aeabi_d2f>:
 80a55a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a55a4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a55a8:	bf24      	itt	cs
 80a55aa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a55ae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a55b2:	d90d      	bls.n	80a55d0 <__aeabi_d2f+0x30>
 80a55b4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a55b8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a55bc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a55c0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a55c4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a55c8:	bf08      	it	eq
 80a55ca:	f020 0001 	biceq.w	r0, r0, #1
 80a55ce:	4770      	bx	lr
 80a55d0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a55d4:	d121      	bne.n	80a561a <__aeabi_d2f+0x7a>
 80a55d6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a55da:	bfbc      	itt	lt
 80a55dc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a55e0:	4770      	bxlt	lr
 80a55e2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a55e6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a55ea:	f1c2 0218 	rsb	r2, r2, #24
 80a55ee:	f1c2 0c20 	rsb	ip, r2, #32
 80a55f2:	fa10 f30c 	lsls.w	r3, r0, ip
 80a55f6:	fa20 f002 	lsr.w	r0, r0, r2
 80a55fa:	bf18      	it	ne
 80a55fc:	f040 0001 	orrne.w	r0, r0, #1
 80a5600:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5604:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a5608:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a560c:	ea40 000c 	orr.w	r0, r0, ip
 80a5610:	fa23 f302 	lsr.w	r3, r3, r2
 80a5614:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a5618:	e7cc      	b.n	80a55b4 <__aeabi_d2f+0x14>
 80a561a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a561e:	d107      	bne.n	80a5630 <__aeabi_d2f+0x90>
 80a5620:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a5624:	bf1e      	ittt	ne
 80a5626:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a562a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a562e:	4770      	bxne	lr
 80a5630:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a5634:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5638:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a563c:	4770      	bx	lr
 80a563e:	bf00      	nop

080a5640 <__aeabi_frsub>:
 80a5640:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5644:	e002      	b.n	80a564c <__addsf3>
 80a5646:	bf00      	nop

080a5648 <__aeabi_fsub>:
 80a5648:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a564c <__addsf3>:
 80a564c:	0042      	lsls	r2, r0, #1
 80a564e:	bf1f      	itttt	ne
 80a5650:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5654:	ea92 0f03 	teqne	r2, r3
 80a5658:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a565c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5660:	d06a      	beq.n	80a5738 <__addsf3+0xec>
 80a5662:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a5666:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a566a:	bfc1      	itttt	gt
 80a566c:	18d2      	addgt	r2, r2, r3
 80a566e:	4041      	eorgt	r1, r0
 80a5670:	4048      	eorgt	r0, r1
 80a5672:	4041      	eorgt	r1, r0
 80a5674:	bfb8      	it	lt
 80a5676:	425b      	neglt	r3, r3
 80a5678:	2b19      	cmp	r3, #25
 80a567a:	bf88      	it	hi
 80a567c:	4770      	bxhi	lr
 80a567e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5682:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5686:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a568a:	bf18      	it	ne
 80a568c:	4240      	negne	r0, r0
 80a568e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5692:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a5696:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a569a:	bf18      	it	ne
 80a569c:	4249      	negne	r1, r1
 80a569e:	ea92 0f03 	teq	r2, r3
 80a56a2:	d03f      	beq.n	80a5724 <__addsf3+0xd8>
 80a56a4:	f1a2 0201 	sub.w	r2, r2, #1
 80a56a8:	fa41 fc03 	asr.w	ip, r1, r3
 80a56ac:	eb10 000c 	adds.w	r0, r0, ip
 80a56b0:	f1c3 0320 	rsb	r3, r3, #32
 80a56b4:	fa01 f103 	lsl.w	r1, r1, r3
 80a56b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a56bc:	d502      	bpl.n	80a56c4 <__addsf3+0x78>
 80a56be:	4249      	negs	r1, r1
 80a56c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a56c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a56c8:	d313      	bcc.n	80a56f2 <__addsf3+0xa6>
 80a56ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a56ce:	d306      	bcc.n	80a56de <__addsf3+0x92>
 80a56d0:	0840      	lsrs	r0, r0, #1
 80a56d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a56d6:	f102 0201 	add.w	r2, r2, #1
 80a56da:	2afe      	cmp	r2, #254	; 0xfe
 80a56dc:	d251      	bcs.n	80a5782 <__addsf3+0x136>
 80a56de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a56e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a56e6:	bf08      	it	eq
 80a56e8:	f020 0001 	biceq.w	r0, r0, #1
 80a56ec:	ea40 0003 	orr.w	r0, r0, r3
 80a56f0:	4770      	bx	lr
 80a56f2:	0049      	lsls	r1, r1, #1
 80a56f4:	eb40 0000 	adc.w	r0, r0, r0
 80a56f8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a56fc:	f1a2 0201 	sub.w	r2, r2, #1
 80a5700:	d1ed      	bne.n	80a56de <__addsf3+0x92>
 80a5702:	fab0 fc80 	clz	ip, r0
 80a5706:	f1ac 0c08 	sub.w	ip, ip, #8
 80a570a:	ebb2 020c 	subs.w	r2, r2, ip
 80a570e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a5712:	bfaa      	itet	ge
 80a5714:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5718:	4252      	neglt	r2, r2
 80a571a:	4318      	orrge	r0, r3
 80a571c:	bfbc      	itt	lt
 80a571e:	40d0      	lsrlt	r0, r2
 80a5720:	4318      	orrlt	r0, r3
 80a5722:	4770      	bx	lr
 80a5724:	f092 0f00 	teq	r2, #0
 80a5728:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a572c:	bf06      	itte	eq
 80a572e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a5732:	3201      	addeq	r2, #1
 80a5734:	3b01      	subne	r3, #1
 80a5736:	e7b5      	b.n	80a56a4 <__addsf3+0x58>
 80a5738:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a573c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5740:	bf18      	it	ne
 80a5742:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5746:	d021      	beq.n	80a578c <__addsf3+0x140>
 80a5748:	ea92 0f03 	teq	r2, r3
 80a574c:	d004      	beq.n	80a5758 <__addsf3+0x10c>
 80a574e:	f092 0f00 	teq	r2, #0
 80a5752:	bf08      	it	eq
 80a5754:	4608      	moveq	r0, r1
 80a5756:	4770      	bx	lr
 80a5758:	ea90 0f01 	teq	r0, r1
 80a575c:	bf1c      	itt	ne
 80a575e:	2000      	movne	r0, #0
 80a5760:	4770      	bxne	lr
 80a5762:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a5766:	d104      	bne.n	80a5772 <__addsf3+0x126>
 80a5768:	0040      	lsls	r0, r0, #1
 80a576a:	bf28      	it	cs
 80a576c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5770:	4770      	bx	lr
 80a5772:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a5776:	bf3c      	itt	cc
 80a5778:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a577c:	4770      	bxcc	lr
 80a577e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5782:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a5786:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a578a:	4770      	bx	lr
 80a578c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5790:	bf16      	itet	ne
 80a5792:	4608      	movne	r0, r1
 80a5794:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5798:	4601      	movne	r1, r0
 80a579a:	0242      	lsls	r2, r0, #9
 80a579c:	bf06      	itte	eq
 80a579e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a57a2:	ea90 0f01 	teqeq	r0, r1
 80a57a6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a57aa:	4770      	bx	lr

080a57ac <__aeabi_ui2f>:
 80a57ac:	f04f 0300 	mov.w	r3, #0
 80a57b0:	e004      	b.n	80a57bc <__aeabi_i2f+0x8>
 80a57b2:	bf00      	nop

080a57b4 <__aeabi_i2f>:
 80a57b4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a57b8:	bf48      	it	mi
 80a57ba:	4240      	negmi	r0, r0
 80a57bc:	ea5f 0c00 	movs.w	ip, r0
 80a57c0:	bf08      	it	eq
 80a57c2:	4770      	bxeq	lr
 80a57c4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a57c8:	4601      	mov	r1, r0
 80a57ca:	f04f 0000 	mov.w	r0, #0
 80a57ce:	e01c      	b.n	80a580a <__aeabi_l2f+0x2a>

080a57d0 <__aeabi_ul2f>:
 80a57d0:	ea50 0201 	orrs.w	r2, r0, r1
 80a57d4:	bf08      	it	eq
 80a57d6:	4770      	bxeq	lr
 80a57d8:	f04f 0300 	mov.w	r3, #0
 80a57dc:	e00a      	b.n	80a57f4 <__aeabi_l2f+0x14>
 80a57de:	bf00      	nop

080a57e0 <__aeabi_l2f>:
 80a57e0:	ea50 0201 	orrs.w	r2, r0, r1
 80a57e4:	bf08      	it	eq
 80a57e6:	4770      	bxeq	lr
 80a57e8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a57ec:	d502      	bpl.n	80a57f4 <__aeabi_l2f+0x14>
 80a57ee:	4240      	negs	r0, r0
 80a57f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a57f4:	ea5f 0c01 	movs.w	ip, r1
 80a57f8:	bf02      	ittt	eq
 80a57fa:	4684      	moveq	ip, r0
 80a57fc:	4601      	moveq	r1, r0
 80a57fe:	2000      	moveq	r0, #0
 80a5800:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5804:	bf08      	it	eq
 80a5806:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a580a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a580e:	fabc f28c 	clz	r2, ip
 80a5812:	3a08      	subs	r2, #8
 80a5814:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a5818:	db10      	blt.n	80a583c <__aeabi_l2f+0x5c>
 80a581a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a581e:	4463      	add	r3, ip
 80a5820:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5824:	f1c2 0220 	rsb	r2, r2, #32
 80a5828:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a582c:	fa20 f202 	lsr.w	r2, r0, r2
 80a5830:	eb43 0002 	adc.w	r0, r3, r2
 80a5834:	bf08      	it	eq
 80a5836:	f020 0001 	biceq.w	r0, r0, #1
 80a583a:	4770      	bx	lr
 80a583c:	f102 0220 	add.w	r2, r2, #32
 80a5840:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5844:	f1c2 0220 	rsb	r2, r2, #32
 80a5848:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a584c:	fa21 f202 	lsr.w	r2, r1, r2
 80a5850:	eb43 0002 	adc.w	r0, r3, r2
 80a5854:	bf08      	it	eq
 80a5856:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a585a:	4770      	bx	lr

080a585c <__aeabi_fmul>:
 80a585c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5860:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5864:	bf1e      	ittt	ne
 80a5866:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a586a:	ea92 0f0c 	teqne	r2, ip
 80a586e:	ea93 0f0c 	teqne	r3, ip
 80a5872:	d06f      	beq.n	80a5954 <__aeabi_fmul+0xf8>
 80a5874:	441a      	add	r2, r3
 80a5876:	ea80 0c01 	eor.w	ip, r0, r1
 80a587a:	0240      	lsls	r0, r0, #9
 80a587c:	bf18      	it	ne
 80a587e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a5882:	d01e      	beq.n	80a58c2 <__aeabi_fmul+0x66>
 80a5884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a5888:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a588c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5890:	fba0 3101 	umull	r3, r1, r0, r1
 80a5894:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5898:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a589c:	bf3e      	ittt	cc
 80a589e:	0049      	lslcc	r1, r1, #1
 80a58a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a58a4:	005b      	lslcc	r3, r3, #1
 80a58a6:	ea40 0001 	orr.w	r0, r0, r1
 80a58aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a58ae:	2afd      	cmp	r2, #253	; 0xfd
 80a58b0:	d81d      	bhi.n	80a58ee <__aeabi_fmul+0x92>
 80a58b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a58b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a58ba:	bf08      	it	eq
 80a58bc:	f020 0001 	biceq.w	r0, r0, #1
 80a58c0:	4770      	bx	lr
 80a58c2:	f090 0f00 	teq	r0, #0
 80a58c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a58ca:	bf08      	it	eq
 80a58cc:	0249      	lsleq	r1, r1, #9
 80a58ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a58d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a58d6:	3a7f      	subs	r2, #127	; 0x7f
 80a58d8:	bfc2      	ittt	gt
 80a58da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a58de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a58e2:	4770      	bxgt	lr
 80a58e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a58e8:	f04f 0300 	mov.w	r3, #0
 80a58ec:	3a01      	subs	r2, #1
 80a58ee:	dc5d      	bgt.n	80a59ac <__aeabi_fmul+0x150>
 80a58f0:	f112 0f19 	cmn.w	r2, #25
 80a58f4:	bfdc      	itt	le
 80a58f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a58fa:	4770      	bxle	lr
 80a58fc:	f1c2 0200 	rsb	r2, r2, #0
 80a5900:	0041      	lsls	r1, r0, #1
 80a5902:	fa21 f102 	lsr.w	r1, r1, r2
 80a5906:	f1c2 0220 	rsb	r2, r2, #32
 80a590a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a590e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a5912:	f140 0000 	adc.w	r0, r0, #0
 80a5916:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a591a:	bf08      	it	eq
 80a591c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5920:	4770      	bx	lr
 80a5922:	f092 0f00 	teq	r2, #0
 80a5926:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a592a:	bf02      	ittt	eq
 80a592c:	0040      	lsleq	r0, r0, #1
 80a592e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5932:	3a01      	subeq	r2, #1
 80a5934:	d0f9      	beq.n	80a592a <__aeabi_fmul+0xce>
 80a5936:	ea40 000c 	orr.w	r0, r0, ip
 80a593a:	f093 0f00 	teq	r3, #0
 80a593e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5942:	bf02      	ittt	eq
 80a5944:	0049      	lsleq	r1, r1, #1
 80a5946:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a594a:	3b01      	subeq	r3, #1
 80a594c:	d0f9      	beq.n	80a5942 <__aeabi_fmul+0xe6>
 80a594e:	ea41 010c 	orr.w	r1, r1, ip
 80a5952:	e78f      	b.n	80a5874 <__aeabi_fmul+0x18>
 80a5954:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5958:	ea92 0f0c 	teq	r2, ip
 80a595c:	bf18      	it	ne
 80a595e:	ea93 0f0c 	teqne	r3, ip
 80a5962:	d00a      	beq.n	80a597a <__aeabi_fmul+0x11e>
 80a5964:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5968:	bf18      	it	ne
 80a596a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a596e:	d1d8      	bne.n	80a5922 <__aeabi_fmul+0xc6>
 80a5970:	ea80 0001 	eor.w	r0, r0, r1
 80a5974:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5978:	4770      	bx	lr
 80a597a:	f090 0f00 	teq	r0, #0
 80a597e:	bf17      	itett	ne
 80a5980:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5984:	4608      	moveq	r0, r1
 80a5986:	f091 0f00 	teqne	r1, #0
 80a598a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a598e:	d014      	beq.n	80a59ba <__aeabi_fmul+0x15e>
 80a5990:	ea92 0f0c 	teq	r2, ip
 80a5994:	d101      	bne.n	80a599a <__aeabi_fmul+0x13e>
 80a5996:	0242      	lsls	r2, r0, #9
 80a5998:	d10f      	bne.n	80a59ba <__aeabi_fmul+0x15e>
 80a599a:	ea93 0f0c 	teq	r3, ip
 80a599e:	d103      	bne.n	80a59a8 <__aeabi_fmul+0x14c>
 80a59a0:	024b      	lsls	r3, r1, #9
 80a59a2:	bf18      	it	ne
 80a59a4:	4608      	movne	r0, r1
 80a59a6:	d108      	bne.n	80a59ba <__aeabi_fmul+0x15e>
 80a59a8:	ea80 0001 	eor.w	r0, r0, r1
 80a59ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a59b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a59b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a59b8:	4770      	bx	lr
 80a59ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a59be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a59c2:	4770      	bx	lr

080a59c4 <__aeabi_fdiv>:
 80a59c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a59c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a59cc:	bf1e      	ittt	ne
 80a59ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a59d2:	ea92 0f0c 	teqne	r2, ip
 80a59d6:	ea93 0f0c 	teqne	r3, ip
 80a59da:	d069      	beq.n	80a5ab0 <__aeabi_fdiv+0xec>
 80a59dc:	eba2 0203 	sub.w	r2, r2, r3
 80a59e0:	ea80 0c01 	eor.w	ip, r0, r1
 80a59e4:	0249      	lsls	r1, r1, #9
 80a59e6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a59ea:	d037      	beq.n	80a5a5c <__aeabi_fdiv+0x98>
 80a59ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a59f0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a59f4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a59f8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a59fc:	428b      	cmp	r3, r1
 80a59fe:	bf38      	it	cc
 80a5a00:	005b      	lslcc	r3, r3, #1
 80a5a02:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a5a06:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5a0a:	428b      	cmp	r3, r1
 80a5a0c:	bf24      	itt	cs
 80a5a0e:	1a5b      	subcs	r3, r3, r1
 80a5a10:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5a14:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5a18:	bf24      	itt	cs
 80a5a1a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a5a1e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5a22:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a5a26:	bf24      	itt	cs
 80a5a28:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5a30:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a5a34:	bf24      	itt	cs
 80a5a36:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a5a3a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5a3e:	011b      	lsls	r3, r3, #4
 80a5a40:	bf18      	it	ne
 80a5a42:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a5a46:	d1e0      	bne.n	80a5a0a <__aeabi_fdiv+0x46>
 80a5a48:	2afd      	cmp	r2, #253	; 0xfd
 80a5a4a:	f63f af50 	bhi.w	80a58ee <__aeabi_fmul+0x92>
 80a5a4e:	428b      	cmp	r3, r1
 80a5a50:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5a54:	bf08      	it	eq
 80a5a56:	f020 0001 	biceq.w	r0, r0, #1
 80a5a5a:	4770      	bx	lr
 80a5a5c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5a60:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5a64:	327f      	adds	r2, #127	; 0x7f
 80a5a66:	bfc2      	ittt	gt
 80a5a68:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5a6c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5a70:	4770      	bxgt	lr
 80a5a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5a76:	f04f 0300 	mov.w	r3, #0
 80a5a7a:	3a01      	subs	r2, #1
 80a5a7c:	e737      	b.n	80a58ee <__aeabi_fmul+0x92>
 80a5a7e:	f092 0f00 	teq	r2, #0
 80a5a82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5a86:	bf02      	ittt	eq
 80a5a88:	0040      	lsleq	r0, r0, #1
 80a5a8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5a8e:	3a01      	subeq	r2, #1
 80a5a90:	d0f9      	beq.n	80a5a86 <__aeabi_fdiv+0xc2>
 80a5a92:	ea40 000c 	orr.w	r0, r0, ip
 80a5a96:	f093 0f00 	teq	r3, #0
 80a5a9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5a9e:	bf02      	ittt	eq
 80a5aa0:	0049      	lsleq	r1, r1, #1
 80a5aa2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5aa6:	3b01      	subeq	r3, #1
 80a5aa8:	d0f9      	beq.n	80a5a9e <__aeabi_fdiv+0xda>
 80a5aaa:	ea41 010c 	orr.w	r1, r1, ip
 80a5aae:	e795      	b.n	80a59dc <__aeabi_fdiv+0x18>
 80a5ab0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5ab4:	ea92 0f0c 	teq	r2, ip
 80a5ab8:	d108      	bne.n	80a5acc <__aeabi_fdiv+0x108>
 80a5aba:	0242      	lsls	r2, r0, #9
 80a5abc:	f47f af7d 	bne.w	80a59ba <__aeabi_fmul+0x15e>
 80a5ac0:	ea93 0f0c 	teq	r3, ip
 80a5ac4:	f47f af70 	bne.w	80a59a8 <__aeabi_fmul+0x14c>
 80a5ac8:	4608      	mov	r0, r1
 80a5aca:	e776      	b.n	80a59ba <__aeabi_fmul+0x15e>
 80a5acc:	ea93 0f0c 	teq	r3, ip
 80a5ad0:	d104      	bne.n	80a5adc <__aeabi_fdiv+0x118>
 80a5ad2:	024b      	lsls	r3, r1, #9
 80a5ad4:	f43f af4c 	beq.w	80a5970 <__aeabi_fmul+0x114>
 80a5ad8:	4608      	mov	r0, r1
 80a5ada:	e76e      	b.n	80a59ba <__aeabi_fmul+0x15e>
 80a5adc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5ae0:	bf18      	it	ne
 80a5ae2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5ae6:	d1ca      	bne.n	80a5a7e <__aeabi_fdiv+0xba>
 80a5ae8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5aec:	f47f af5c 	bne.w	80a59a8 <__aeabi_fmul+0x14c>
 80a5af0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5af4:	f47f af3c 	bne.w	80a5970 <__aeabi_fmul+0x114>
 80a5af8:	e75f      	b.n	80a59ba <__aeabi_fmul+0x15e>
 80a5afa:	bf00      	nop

080a5afc <__gesf2>:
 80a5afc:	f04f 3cff 	mov.w	ip, #4294967295
 80a5b00:	e006      	b.n	80a5b10 <__cmpsf2+0x4>
 80a5b02:	bf00      	nop

080a5b04 <__lesf2>:
 80a5b04:	f04f 0c01 	mov.w	ip, #1
 80a5b08:	e002      	b.n	80a5b10 <__cmpsf2+0x4>
 80a5b0a:	bf00      	nop

080a5b0c <__cmpsf2>:
 80a5b0c:	f04f 0c01 	mov.w	ip, #1
 80a5b10:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5b14:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5b18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5b1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5b20:	bf18      	it	ne
 80a5b22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5b26:	d011      	beq.n	80a5b4c <__cmpsf2+0x40>
 80a5b28:	b001      	add	sp, #4
 80a5b2a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a5b2e:	bf18      	it	ne
 80a5b30:	ea90 0f01 	teqne	r0, r1
 80a5b34:	bf58      	it	pl
 80a5b36:	ebb2 0003 	subspl.w	r0, r2, r3
 80a5b3a:	bf88      	it	hi
 80a5b3c:	17c8      	asrhi	r0, r1, #31
 80a5b3e:	bf38      	it	cc
 80a5b40:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a5b44:	bf18      	it	ne
 80a5b46:	f040 0001 	orrne.w	r0, r0, #1
 80a5b4a:	4770      	bx	lr
 80a5b4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5b50:	d102      	bne.n	80a5b58 <__cmpsf2+0x4c>
 80a5b52:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a5b56:	d105      	bne.n	80a5b64 <__cmpsf2+0x58>
 80a5b58:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5b5c:	d1e4      	bne.n	80a5b28 <__cmpsf2+0x1c>
 80a5b5e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a5b62:	d0e1      	beq.n	80a5b28 <__cmpsf2+0x1c>
 80a5b64:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5b68:	4770      	bx	lr
 80a5b6a:	bf00      	nop

080a5b6c <__aeabi_cfrcmple>:
 80a5b6c:	4684      	mov	ip, r0
 80a5b6e:	4608      	mov	r0, r1
 80a5b70:	4661      	mov	r1, ip
 80a5b72:	e7ff      	b.n	80a5b74 <__aeabi_cfcmpeq>

080a5b74 <__aeabi_cfcmpeq>:
 80a5b74:	b50f      	push	{r0, r1, r2, r3, lr}
 80a5b76:	f7ff ffc9 	bl	80a5b0c <__cmpsf2>
 80a5b7a:	2800      	cmp	r0, #0
 80a5b7c:	bf48      	it	mi
 80a5b7e:	f110 0f00 	cmnmi.w	r0, #0
 80a5b82:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a5b84 <__aeabi_fcmpeq>:
 80a5b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5b88:	f7ff fff4 	bl	80a5b74 <__aeabi_cfcmpeq>
 80a5b8c:	bf0c      	ite	eq
 80a5b8e:	2001      	moveq	r0, #1
 80a5b90:	2000      	movne	r0, #0
 80a5b92:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5b96:	bf00      	nop

080a5b98 <__aeabi_fcmplt>:
 80a5b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5b9c:	f7ff ffea 	bl	80a5b74 <__aeabi_cfcmpeq>
 80a5ba0:	bf34      	ite	cc
 80a5ba2:	2001      	movcc	r0, #1
 80a5ba4:	2000      	movcs	r0, #0
 80a5ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5baa:	bf00      	nop

080a5bac <__aeabi_fcmple>:
 80a5bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5bb0:	f7ff ffe0 	bl	80a5b74 <__aeabi_cfcmpeq>
 80a5bb4:	bf94      	ite	ls
 80a5bb6:	2001      	movls	r0, #1
 80a5bb8:	2000      	movhi	r0, #0
 80a5bba:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5bbe:	bf00      	nop

080a5bc0 <__aeabi_fcmpge>:
 80a5bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5bc4:	f7ff ffd2 	bl	80a5b6c <__aeabi_cfrcmple>
 80a5bc8:	bf94      	ite	ls
 80a5bca:	2001      	movls	r0, #1
 80a5bcc:	2000      	movhi	r0, #0
 80a5bce:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5bd2:	bf00      	nop

080a5bd4 <__aeabi_fcmpgt>:
 80a5bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5bd8:	f7ff ffc8 	bl	80a5b6c <__aeabi_cfrcmple>
 80a5bdc:	bf34      	ite	cc
 80a5bde:	2001      	movcc	r0, #1
 80a5be0:	2000      	movcs	r0, #0
 80a5be2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5be6:	bf00      	nop

080a5be8 <__aeabi_f2iz>:
 80a5be8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5bec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a5bf0:	d30f      	bcc.n	80a5c12 <__aeabi_f2iz+0x2a>
 80a5bf2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a5bf6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a5bfa:	d90d      	bls.n	80a5c18 <__aeabi_f2iz+0x30>
 80a5bfc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a5c00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5c04:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5c08:	fa23 f002 	lsr.w	r0, r3, r2
 80a5c0c:	bf18      	it	ne
 80a5c0e:	4240      	negne	r0, r0
 80a5c10:	4770      	bx	lr
 80a5c12:	f04f 0000 	mov.w	r0, #0
 80a5c16:	4770      	bx	lr
 80a5c18:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a5c1c:	d101      	bne.n	80a5c22 <__aeabi_f2iz+0x3a>
 80a5c1e:	0242      	lsls	r2, r0, #9
 80a5c20:	d105      	bne.n	80a5c2e <__aeabi_f2iz+0x46>
 80a5c22:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a5c26:	bf08      	it	eq
 80a5c28:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5c2c:	4770      	bx	lr
 80a5c2e:	f04f 0000 	mov.w	r0, #0
 80a5c32:	4770      	bx	lr

080a5c34 <atoi>:
 80a5c34:	220a      	movs	r2, #10
 80a5c36:	2100      	movs	r1, #0
 80a5c38:	f000 b92e 	b.w	80a5e98 <strtol>

080a5c3c <__cxa_atexit>:
 80a5c3c:	b510      	push	{r4, lr}
 80a5c3e:	4c05      	ldr	r4, [pc, #20]	; (80a5c54 <__cxa_atexit+0x18>)
 80a5c40:	4613      	mov	r3, r2
 80a5c42:	b12c      	cbz	r4, 80a5c50 <__cxa_atexit+0x14>
 80a5c44:	460a      	mov	r2, r1
 80a5c46:	4601      	mov	r1, r0
 80a5c48:	2002      	movs	r0, #2
 80a5c4a:	f3af 8000 	nop.w
 80a5c4e:	bd10      	pop	{r4, pc}
 80a5c50:	4620      	mov	r0, r4
 80a5c52:	bd10      	pop	{r4, pc}
 80a5c54:	00000000 	.word	0x00000000

080a5c58 <memcmp>:
 80a5c58:	b510      	push	{r4, lr}
 80a5c5a:	3901      	subs	r1, #1
 80a5c5c:	4402      	add	r2, r0
 80a5c5e:	4290      	cmp	r0, r2
 80a5c60:	d007      	beq.n	80a5c72 <memcmp+0x1a>
 80a5c62:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a5c66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a5c6a:	42a3      	cmp	r3, r4
 80a5c6c:	d0f7      	beq.n	80a5c5e <memcmp+0x6>
 80a5c6e:	1b18      	subs	r0, r3, r4
 80a5c70:	bd10      	pop	{r4, pc}
 80a5c72:	2000      	movs	r0, #0
 80a5c74:	bd10      	pop	{r4, pc}

080a5c76 <memcpy>:
 80a5c76:	b510      	push	{r4, lr}
 80a5c78:	1e43      	subs	r3, r0, #1
 80a5c7a:	440a      	add	r2, r1
 80a5c7c:	4291      	cmp	r1, r2
 80a5c7e:	d004      	beq.n	80a5c8a <memcpy+0x14>
 80a5c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a5c88:	e7f8      	b.n	80a5c7c <memcpy+0x6>
 80a5c8a:	bd10      	pop	{r4, pc}

080a5c8c <memset>:
 80a5c8c:	4603      	mov	r3, r0
 80a5c8e:	4402      	add	r2, r0
 80a5c90:	4293      	cmp	r3, r2
 80a5c92:	d002      	beq.n	80a5c9a <memset+0xe>
 80a5c94:	f803 1b01 	strb.w	r1, [r3], #1
 80a5c98:	e7fa      	b.n	80a5c90 <memset+0x4>
 80a5c9a:	4770      	bx	lr

080a5c9c <srand>:
 80a5c9c:	b538      	push	{r3, r4, r5, lr}
 80a5c9e:	4b12      	ldr	r3, [pc, #72]	; (80a5ce8 <srand+0x4c>)
 80a5ca0:	4605      	mov	r5, r0
 80a5ca2:	681c      	ldr	r4, [r3, #0]
 80a5ca4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5ca6:	b9d3      	cbnz	r3, 80a5cde <srand+0x42>
 80a5ca8:	2018      	movs	r0, #24
 80a5caa:	f7fd faa5 	bl	80a31f8 <malloc>
 80a5cae:	f243 330e 	movw	r3, #13070	; 0x330e
 80a5cb2:	63a0      	str	r0, [r4, #56]	; 0x38
 80a5cb4:	8003      	strh	r3, [r0, #0]
 80a5cb6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a5cba:	8043      	strh	r3, [r0, #2]
 80a5cbc:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5cc0:	8083      	strh	r3, [r0, #4]
 80a5cc2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a5cc6:	80c3      	strh	r3, [r0, #6]
 80a5cc8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5ccc:	8103      	strh	r3, [r0, #8]
 80a5cce:	2305      	movs	r3, #5
 80a5cd0:	8143      	strh	r3, [r0, #10]
 80a5cd2:	230b      	movs	r3, #11
 80a5cd4:	8183      	strh	r3, [r0, #12]
 80a5cd6:	2201      	movs	r2, #1
 80a5cd8:	2300      	movs	r3, #0
 80a5cda:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5cde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5ce0:	2200      	movs	r2, #0
 80a5ce2:	611d      	str	r5, [r3, #16]
 80a5ce4:	615a      	str	r2, [r3, #20]
 80a5ce6:	bd38      	pop	{r3, r4, r5, pc}
 80a5ce8:	20000100 	.word	0x20000100

080a5cec <strcmp>:
 80a5cec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a5cf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a5cf4:	2a01      	cmp	r2, #1
 80a5cf6:	bf28      	it	cs
 80a5cf8:	429a      	cmpcs	r2, r3
 80a5cfa:	d0f7      	beq.n	80a5cec <strcmp>
 80a5cfc:	1ad0      	subs	r0, r2, r3
 80a5cfe:	4770      	bx	lr

080a5d00 <strcpy>:
 80a5d00:	4603      	mov	r3, r0
 80a5d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a5d06:	f803 2b01 	strb.w	r2, [r3], #1
 80a5d0a:	2a00      	cmp	r2, #0
 80a5d0c:	d1f9      	bne.n	80a5d02 <strcpy+0x2>
 80a5d0e:	4770      	bx	lr

080a5d10 <strdup>:
 80a5d10:	4b02      	ldr	r3, [pc, #8]	; (80a5d1c <strdup+0xc>)
 80a5d12:	4601      	mov	r1, r0
 80a5d14:	6818      	ldr	r0, [r3, #0]
 80a5d16:	f000 b803 	b.w	80a5d20 <_strdup_r>
 80a5d1a:	bf00      	nop
 80a5d1c:	20000100 	.word	0x20000100

080a5d20 <_strdup_r>:
 80a5d20:	b570      	push	{r4, r5, r6, lr}
 80a5d22:	4606      	mov	r6, r0
 80a5d24:	4608      	mov	r0, r1
 80a5d26:	460c      	mov	r4, r1
 80a5d28:	f000 f80d 	bl	80a5d46 <strlen>
 80a5d2c:	1c45      	adds	r5, r0, #1
 80a5d2e:	4629      	mov	r1, r5
 80a5d30:	4630      	mov	r0, r6
 80a5d32:	f7fd fa91 	bl	80a3258 <_malloc_r>
 80a5d36:	4606      	mov	r6, r0
 80a5d38:	b118      	cbz	r0, 80a5d42 <_strdup_r+0x22>
 80a5d3a:	462a      	mov	r2, r5
 80a5d3c:	4621      	mov	r1, r4
 80a5d3e:	f7ff ff9a 	bl	80a5c76 <memcpy>
 80a5d42:	4630      	mov	r0, r6
 80a5d44:	bd70      	pop	{r4, r5, r6, pc}

080a5d46 <strlen>:
 80a5d46:	4603      	mov	r3, r0
 80a5d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5d4c:	2a00      	cmp	r2, #0
 80a5d4e:	d1fb      	bne.n	80a5d48 <strlen+0x2>
 80a5d50:	1a18      	subs	r0, r3, r0
 80a5d52:	3801      	subs	r0, #1
 80a5d54:	4770      	bx	lr

080a5d56 <strstr>:
 80a5d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5d58:	7803      	ldrb	r3, [r0, #0]
 80a5d5a:	b963      	cbnz	r3, 80a5d76 <strstr+0x20>
 80a5d5c:	780b      	ldrb	r3, [r1, #0]
 80a5d5e:	2b00      	cmp	r3, #0
 80a5d60:	bf18      	it	ne
 80a5d62:	2000      	movne	r0, #0
 80a5d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5d66:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a5d6a:	b162      	cbz	r2, 80a5d86 <strstr+0x30>
 80a5d6c:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80a5d70:	4630      	mov	r0, r6
 80a5d72:	4297      	cmp	r7, r2
 80a5d74:	d0f7      	beq.n	80a5d66 <strstr+0x10>
 80a5d76:	4603      	mov	r3, r0
 80a5d78:	1c46      	adds	r6, r0, #1
 80a5d7a:	7800      	ldrb	r0, [r0, #0]
 80a5d7c:	b110      	cbz	r0, 80a5d84 <strstr+0x2e>
 80a5d7e:	1e4d      	subs	r5, r1, #1
 80a5d80:	1e5c      	subs	r4, r3, #1
 80a5d82:	e7f0      	b.n	80a5d66 <strstr+0x10>
 80a5d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5d86:	4618      	mov	r0, r3
 80a5d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a5d8c <_strtol_r>:
 80a5d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5d90:	460f      	mov	r7, r1
 80a5d92:	4680      	mov	r8, r0
 80a5d94:	483f      	ldr	r0, [pc, #252]	; (80a5e94 <_strtol_r+0x108>)
 80a5d96:	f8d0 9000 	ldr.w	r9, [r0]
 80a5d9a:	463d      	mov	r5, r7
 80a5d9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5da0:	eb09 0004 	add.w	r0, r9, r4
 80a5da4:	7840      	ldrb	r0, [r0, #1]
 80a5da6:	f000 0008 	and.w	r0, r0, #8
 80a5daa:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a5dae:	b108      	cbz	r0, 80a5db4 <_strtol_r+0x28>
 80a5db0:	462f      	mov	r7, r5
 80a5db2:	e7f2      	b.n	80a5d9a <_strtol_r+0xe>
 80a5db4:	2c2d      	cmp	r4, #45	; 0x2d
 80a5db6:	d103      	bne.n	80a5dc0 <_strtol_r+0x34>
 80a5db8:	1cbd      	adds	r5, r7, #2
 80a5dba:	787c      	ldrb	r4, [r7, #1]
 80a5dbc:	2601      	movs	r6, #1
 80a5dbe:	e003      	b.n	80a5dc8 <_strtol_r+0x3c>
 80a5dc0:	2c2b      	cmp	r4, #43	; 0x2b
 80a5dc2:	bf04      	itt	eq
 80a5dc4:	787c      	ldrbeq	r4, [r7, #1]
 80a5dc6:	1cbd      	addeq	r5, r7, #2
 80a5dc8:	b113      	cbz	r3, 80a5dd0 <_strtol_r+0x44>
 80a5dca:	2b10      	cmp	r3, #16
 80a5dcc:	d10a      	bne.n	80a5de4 <_strtol_r+0x58>
 80a5dce:	e05b      	b.n	80a5e88 <_strtol_r+0xfc>
 80a5dd0:	2c30      	cmp	r4, #48	; 0x30
 80a5dd2:	d157      	bne.n	80a5e84 <_strtol_r+0xf8>
 80a5dd4:	7828      	ldrb	r0, [r5, #0]
 80a5dd6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5dda:	2858      	cmp	r0, #88	; 0x58
 80a5ddc:	d14d      	bne.n	80a5e7a <_strtol_r+0xee>
 80a5dde:	786c      	ldrb	r4, [r5, #1]
 80a5de0:	2310      	movs	r3, #16
 80a5de2:	3502      	adds	r5, #2
 80a5de4:	2e00      	cmp	r6, #0
 80a5de6:	bf14      	ite	ne
 80a5de8:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a5dec:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a5df0:	fbbc faf3 	udiv	sl, ip, r3
 80a5df4:	2700      	movs	r7, #0
 80a5df6:	4638      	mov	r0, r7
 80a5df8:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a5dfc:	eb09 0e04 	add.w	lr, r9, r4
 80a5e00:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a5e04:	f01e 0f04 	tst.w	lr, #4
 80a5e08:	d001      	beq.n	80a5e0e <_strtol_r+0x82>
 80a5e0a:	3c30      	subs	r4, #48	; 0x30
 80a5e0c:	e00b      	b.n	80a5e26 <_strtol_r+0x9a>
 80a5e0e:	f01e 0e03 	ands.w	lr, lr, #3
 80a5e12:	d01b      	beq.n	80a5e4c <_strtol_r+0xc0>
 80a5e14:	f1be 0f01 	cmp.w	lr, #1
 80a5e18:	bf0c      	ite	eq
 80a5e1a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a5e1e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a5e22:	ebce 0404 	rsb	r4, lr, r4
 80a5e26:	42a3      	cmp	r3, r4
 80a5e28:	dd10      	ble.n	80a5e4c <_strtol_r+0xc0>
 80a5e2a:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a5e2e:	d00a      	beq.n	80a5e46 <_strtol_r+0xba>
 80a5e30:	4550      	cmp	r0, sl
 80a5e32:	d806      	bhi.n	80a5e42 <_strtol_r+0xb6>
 80a5e34:	d101      	bne.n	80a5e3a <_strtol_r+0xae>
 80a5e36:	4564      	cmp	r4, ip
 80a5e38:	dc03      	bgt.n	80a5e42 <_strtol_r+0xb6>
 80a5e3a:	fb03 4000 	mla	r0, r3, r0, r4
 80a5e3e:	2701      	movs	r7, #1
 80a5e40:	e001      	b.n	80a5e46 <_strtol_r+0xba>
 80a5e42:	f04f 37ff 	mov.w	r7, #4294967295
 80a5e46:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5e4a:	e7d7      	b.n	80a5dfc <_strtol_r+0x70>
 80a5e4c:	1c7b      	adds	r3, r7, #1
 80a5e4e:	d10c      	bne.n	80a5e6a <_strtol_r+0xde>
 80a5e50:	2e00      	cmp	r6, #0
 80a5e52:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a5e56:	bf14      	ite	ne
 80a5e58:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a5e5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5e60:	f8c8 3000 	str.w	r3, [r8]
 80a5e64:	b92a      	cbnz	r2, 80a5e72 <_strtol_r+0xe6>
 80a5e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5e6a:	b106      	cbz	r6, 80a5e6e <_strtol_r+0xe2>
 80a5e6c:	4240      	negs	r0, r0
 80a5e6e:	b172      	cbz	r2, 80a5e8e <_strtol_r+0x102>
 80a5e70:	b107      	cbz	r7, 80a5e74 <_strtol_r+0xe8>
 80a5e72:	1e69      	subs	r1, r5, #1
 80a5e74:	6011      	str	r1, [r2, #0]
 80a5e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5e7a:	2430      	movs	r4, #48	; 0x30
 80a5e7c:	2b00      	cmp	r3, #0
 80a5e7e:	d1b1      	bne.n	80a5de4 <_strtol_r+0x58>
 80a5e80:	2308      	movs	r3, #8
 80a5e82:	e7af      	b.n	80a5de4 <_strtol_r+0x58>
 80a5e84:	230a      	movs	r3, #10
 80a5e86:	e7ad      	b.n	80a5de4 <_strtol_r+0x58>
 80a5e88:	2c30      	cmp	r4, #48	; 0x30
 80a5e8a:	d0a3      	beq.n	80a5dd4 <_strtol_r+0x48>
 80a5e8c:	e7aa      	b.n	80a5de4 <_strtol_r+0x58>
 80a5e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5e92:	bf00      	nop
 80a5e94:	2000009c 	.word	0x2000009c

080a5e98 <strtol>:
 80a5e98:	4613      	mov	r3, r2
 80a5e9a:	460a      	mov	r2, r1
 80a5e9c:	4601      	mov	r1, r0
 80a5e9e:	4802      	ldr	r0, [pc, #8]	; (80a5ea8 <strtol+0x10>)
 80a5ea0:	6800      	ldr	r0, [r0, #0]
 80a5ea2:	f7ff bf73 	b.w	80a5d8c <_strtol_r>
 80a5ea6:	bf00      	nop
 80a5ea8:	20000100 	.word	0x20000100

080a5eac <dynalib_user>:
 80a5eac:	080a0021 080a0061 080a008d 080a0091     !...a...........
 80a5ebc:	00000000                                ....

080a5ec0 <_ZTVN8particle13__SPISettingsE>:
	...
 80a5ec8:	080a00e5                                ....

080a5ecc <_ZTV6SdFile>:
	...
 80a5ed4:	080a00b7 080a00d7 080a00bf 080a00b9     ................
 80a5ee4:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
 80a5ef4:	50533c00 74655349 676e6974 65642073     .<SPISettings de
 80a5f04:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
 80a5f14:	2073676e 6c257325 73252075 444f4d20     ngs %s%lu %s MOD
 80a5f24:	3e642545 6d695400 702c0065 5f30316d     E%d>.Time.,pm10_
 80a5f34:	6e617473 64726164 6d702c00 735f3532     standard.,pm25_s
 80a5f44:	646e6174 00647261 316d702c 735f3030     tandard.,pm100_s
 80a5f54:	646e6174 00647261 316d702c 6e655f30     tandard.,pm10_en
 80a5f64:	702c0076 5f35326d 00766e65 316d702c     v.,pm25_env.,pm1
 80a5f74:	655f3030 2c00766e 6d753350 35502c00     00_env.,P3um.,P5
 80a5f84:	2c006d75 75303150 502c006d 6d753532     um.,P10um.,P25um
 80a5f94:	35502c00 006d7530 3031502c 006d7530     .,P50um.,P100um.
 80a5fa4:	6568632c 75736b63 532c006d 796e6968     ,checksum.,Shiny
 80a5fb4:	2c006965 706d6554 74617265 00657275     ei.,Temperature.
 80a5fc4:	6d75482c 74696469 34310079 3a32303a     ,Humidity.14:02:
 80a5fd4:	4a003232 31206e61 30322035 2f003032     22.Jan 15 2020./
 80a5fe4:	61646e69 31306174 7068702e 6573753f     indata01.php?use
 80a5ff4:	6d616e72 73253d65 73617026 726f7773     rname=%s&passwor
 80a6004:	73253d64 6e626426 3d656d61 74267325     d=%s&dbname=%s&t
 80a6014:	656c6261 656d616e 2673253d 30316d70     ablename=%s&pm10
 80a6024:	6474735f 2664253d 35326d70 6474735f     _std=%d&pm25_std
 80a6034:	2664253d 30316d70 74735f30 64253d64     =%d&pm100_std=%d
 80a6044:	316d7026 6e655f30 64253d76 326d7026     &pm10_env=%d&pm2
 80a6054:	6e655f35 64253d76 316d7026 655f3030     5_env=%d&pm100_e
 80a6064:	253d766e 33702664 2664253d 253d3570     nv=%d&p3=%d&p5=%
 80a6074:	31702664 64253d30 35327026 2664253d     d&p10=%d&p25=%d&
 80a6084:	3d303570 70266425 3d303031 63266425     p50=%d&p100=%d&c
 80a6094:	6b636568 3d6d7573 53266425 796e6968     hecksum=%d&Shiny
 80a60a4:	253d6965 65542666 7265706d 72757461     ei=%f&Temperatur
 80a60b4:	66253d65 6d754826 74696469 66253d79     e=%f&Humidity=%f
 80a60c4:	74227b00 22656d69 2522203a 2c22646c     .{"time": "%ld",
 80a60d4:	6d702220 3a223031 22642522 7022202c      "pm10":"%d", "p
 80a60e4:	2235326d 6425223a 22202c22 30316d70     m25":"%d", "pm10
 80a60f4:	223a2230 2c226425 6e702220 3a223330     0":"%d", "pn03":
 80a6104:	22642522 7022202c 2235306e 6425223a     "%d", "pn05":"%d
 80a6114:	22202c22 30316e70 25223a22 202c2264     ", "pn10":"%d", 
 80a6124:	326e7022 223a2235 2c226425 6e702220     "pn25":"%d", "pn
 80a6134:	3a223035 22642522 7022202c 3030316e     50":"%d", "pn100
 80a6144:	25223a22 202c2264 69685322 6965796e     ":"%d", "Shinyei
 80a6154:	25223a22 202c2266 6d657422 223a2270     ":"%f", "temp":"
 80a6164:	2c226625 75682220 6964696d 3a227974     %f", "humidity":
 80a6174:	22662522 4547007d 72610054 336e6f67     "%f"}.GET.argon3
 80a6184:	61746164 63634100 00747065 002a2f2a     data.Accept.*/*.
 80a6194:	54544820 2e312f50 000a0d30 736f6c63      HTTP/1.0...clos
 80a61a4:	6f430065 63656e6e 6e6f6974 534f4800     e.Connection.HOS
 80a61b4:	6f430054 6e65746e 654c2d74 6874676e     T.Content-Length
 80a61c4:	534f5000 0a0d0054 1f000a0d                       .POST......

080a61cf <_ZL11daysInMonth>:
 80a61cf:	1e1f1c1f 1f1f1e1f 1f1e1f1e 00000000              .............

080a61dc <_ZTV8SPIClass>:
	...
 80a61e4:	080a3269 080a326b                       i2..k2..

080a61ec <_ZL14clock_divisors>:
 80a61ec:	18100800 38302820                       .... (08

080a61f4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a61fc:	080a3451 080a3457 080a386f 080a3465     Q4..W4..o8..e4..
 80a620c:	080a3453                                S4..

080a6210 <_ZTV9TCPClient>:
	...
 80a6218:	080a0189 080a01b5 080a340d 080a3427     .........4..'4..
 80a6228:	080a356d 080a34d7 080a34a9 080a344f     m5...4...4..O4..
 80a6238:	080a3619 080a3889 080a350b 080a35e5     .6...8...5...5..
 80a6248:	080a3767 080a37b9 080a3437 080a372b     g7...7..74..+7..
 80a6258:	080a3489 69726977 5400676e 6c435043     .4..wiring.TCPCl
 80a6268:	746e6569 636f7320 3d74656b 62007825     ient socket=%x.b
 80a6278:	00647561 69726553 55006c61 65534253     aud.Serial.USBSe
 80a6288:	6c616972 79740031 70006570 6d617261     rial1.type.param
 80a6298:	646d6300 00646900 00646e68 6d727473     .cmd.id.hnd.strm
 80a62a8:	6c696600 766c0074 6461006c 6e614864     .filt.lvl.addHan
 80a62b8:	72656c64 6d657200 4865766f 6c646e61     dler.removeHandl
 80a62c8:	65007265 486d756e 6c646e61 00737265     er.enumHandlers.
 80a62d8:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
 80a62e8:	72656c64 70706100 31302500 00207530     dler.app.%010u .
 80a62f8:	2500205d 202c0064 3a292800 5b200020     ] .%d., .(): . [
 80a6308:	646f6300 203d2065 00692500 61746564     .code = .%i.deta
 80a6318:	20736c69 6c00203d 6e66006e 646f6300     ils = .ln.fn.cod
 80a6328:	65640065 6c696174 6e6f6e00 72740065     e.detail.none.tr
 80a6338:	00656361 6f666e69 72617700 7265006e     ace.info.warn.er
 80a6348:	00726f72 696e6170 6c610063 005a006c     ror.panic.all.Z.
 80a6358:	33302b25 30253a64 25007532 6d252d59     %+03d:%02u.%Y-%m
 80a6368:	5464252d 253a4825 53253a4d 61007a25     -%dT%H:%M:%S%z.a
 80a6378:	69746373 0000656d                       sctime..

080a6380 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a6388:	080a3e39 080a3e3f 080a3e83 080a3e4d     9>..?>...>..M>..
 80a6398:	080a3e3b                                ;>..

080a639c <_ZTV9IPAddress>:
	...
 80a63a4:	080a43d1 080a43c1 080a43c3              .C...C...C..

080a63b0 <_ZTV9USBSerial>:
	...
 80a63b8:	080a448d 080a44dd 080a44eb 080a3aa7     .D...D...D...:..
 80a63c8:	080a44c9 080a448f 080a44a5 080a44d7     .D...D...D...D..
 80a63d8:	080a44bb 080a4489                       .D...D..

080a63e0 <_ZTV11USARTSerial>:
	...
 80a63e8:	080a4625 080a4675 080a4683 080a3aa7     %F..uF...F...:..
 80a63f8:	080a4639 080a465b 080a4647 080a466f     9F..[F..GF..oF..
 80a6408:	080a4627 080a462b                       'F..+F..

080a6410 <_ZTV7TwoWire>:
	...
 80a6418:	080a475d 080a47a7 080a477f 080a475f     ]G...G...G.._G..
 80a6428:	080a4787 080a478f 080a4797 080a479f     .G...G...G...G..

080a6438 <_ZTVN5spark9WiFiClassE>:
	...
 80a6440:	080a48c1 080a48b7 080a48ad 080a482b     .H...H...H..+H..
 80a6450:	080a3c35 080a48a1 080a4895 080a488d     5<...H...H...H..
 80a6460:	080a4883 080a4879 080a4835              .H..yH..5H..

080a646c <_ZTVN5spark12NetworkClassE>:
	...
 80a6474:	080a48e1 080a48eb 080a48f5 080a48ff     .H...H...H...H..
 80a6484:	080a4909 080a4915 080a4921 080a492d     .I...I..!I..-I..
 80a6494:	080a4935 080a493f 080a4949              5I..?I..II..

080a64a0 <_ctype_>:
 80a64a0:	20202000 20202020 28282020 20282828     .         ((((( 
 80a64b0:	20202020 20202020 20202020 20202020                     
 80a64c0:	10108820 10101010 10101010 10101010      ...............
 80a64d0:	04040410 04040404 10040404 10101010     ................
 80a64e0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a64f0:	01010101 01010101 01010101 10101010     ................
 80a6500:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a6510:	02020202 02020202 02020202 10101010     ................
 80a6520:	00000020 00000000 00000000 00000000      ...............
	...

080a65a4 <__sf_fake_stdin>:
	...

080a65c4 <__sf_fake_stdout>:
	...

080a65e4 <__sf_fake_stderr>:
	...
 80a6604:	00000043                                         C.

080a6606 <link_const_variable_data_end>:
	...

080a6608 <link_constructors_location>:
 80a6608:	080a0bad 	.word	0x080a0bad
 80a660c:	080a0ff7 	.word	0x080a0ff7
 80a6610:	080a0ffb 	.word	0x080a0ffb
 80a6614:	080a1055 	.word	0x080a1055
 80a6618:	080a1291 	.word	0x080a1291
 80a661c:	080a1295 	.word	0x080a1295
 80a6620:	080a18bd 	.word	0x080a18bd
 80a6624:	080a18c1 	.word	0x080a18c1
 80a6628:	080a18c5 	.word	0x080a18c5
 80a662c:	080a18c9 	.word	0x080a18c9
 80a6630:	080a1f69 	.word	0x080a1f69
 80a6634:	080a1f8d 	.word	0x080a1f8d
 80a6638:	080a1f91 	.word	0x080a1f91
 80a663c:	080a22b5 	.word	0x080a22b5
 80a6640:	080a22b9 	.word	0x080a22b9
 80a6644:	080a22bd 	.word	0x080a22bd
 80a6648:	080a27f7 	.word	0x080a27f7
 80a664c:	080a27fb 	.word	0x080a27fb
 80a6650:	080a27ff 	.word	0x080a27ff
 80a6654:	080a28a5 	.word	0x080a28a5
 80a6658:	080a2cf9 	.word	0x080a2cf9
 80a665c:	080a33f5 	.word	0x080a33f5
 80a6660:	080a3c7d 	.word	0x080a3c7d
 80a6664:	080a3c8d 	.word	0x080a3c8d
 80a6668:	080a3ce5 	.word	0x080a3ce5
 80a666c:	080a48cd 	.word	0x080a48cd
 80a6670:	080a49b1 	.word	0x080a49b1
 80a6674:	080a4a65 	.word	0x080a4a65
 80a6678:	080a4aa9 	.word	0x080a4aa9
 80a667c:	080a4b2d 	.word	0x080a4b2d
 80a6680:	080a4bb1 	.word	0x080a4bb1
 80a6684:	080a4c75 	.word	0x080a4c75
 80a6688:	080a4d39 	.word	0x080a4d39

080a668c <link_constructors_end>:
 80a668c:	00000000 	.word	0x00000000
