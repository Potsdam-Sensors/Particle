
c:/Users/13479/Desktop/PotsdamSensors/Particle/SD1/target/1.1.1/argon/SD1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bf8  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00019d48  2**0
                  CONTENTS
  3 .data         0000010c  2003d148  000d9c10  0000d148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000159c  2003d254  2003d254  0001d254  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d9d1c  000d9d1c  00019d1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d9d44  000d9d44  00019d44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   001671f7  00000000  00000000  00019d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0001ef7c  00000000  00000000  00180f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0002103a  00000000  00000000  0019febb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002b50  00000000  00000000  001c0ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00004780  00000000  00000000  001c3a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004c7c8  00000000  00000000  001c81c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00052eec  00000000  00000000  0021498d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000e2cdd  00000000  00000000  00267879  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000d9a0  00000000  00000000  0034a558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	e8 93 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 f8dc 	bl	d91ea <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 f8e1 	bl	d9200 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d148 	.word	0x2003d148
   d4048:	000d9c10 	.word	0x000d9c10
   d404c:	2003d254 	.word	0x2003d254
   d4050:	2003d254 	.word	0x2003d254
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fc31 	bl	d78c0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9c10 	.word	0x000d9c10
   d4080:	000d9b88 	.word	0x000d9b88

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8ee 	b.w	d4264 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb77 	bl	d477c <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bbe3 	b.w	d785c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f003 b8ad 	b.w	d71f4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f003 b8b3 	b.w	d7204 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f003 b8b1 	b.w	d7204 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d40b2:	4770      	bx	lr

000d40b4 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d40b4:	3008      	adds	r0, #8
   d40b6:	f001 bec7 	b.w	d5e48 <_ZN7FatFile5writeEPKvj>

000d40ba <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
   d40ba:	b507      	push	{r0, r1, r2, lr}
   d40bc:	ab02      	add	r3, sp, #8
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d40be:	2201      	movs	r2, #1
   d40c0:	f803 1d01 	strb.w	r1, [r3, #-1]!
   d40c4:	3008      	adds	r0, #8
   d40c6:	4619      	mov	r1, r3
   d40c8:	f001 febe 	bl	d5e48 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
   d40cc:	b003      	add	sp, #12
   d40ce:	f85d fb04 	ldr.w	pc, [sp], #4

000d40d2 <_ZN6SdFileD0Ev>:
   d40d2:	b510      	push	{r4, lr}
   d40d4:	4604      	mov	r4, r0
   d40d6:	f7ff ffe0 	bl	d409a <_ZdlPv>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}
	...

000d40e0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d40e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d40e2:	4602      	mov	r2, r0
   d40e4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d40e6:	7913      	ldrb	r3, [r2, #4]
   d40e8:	6895      	ldr	r5, [r2, #8]
   d40ea:	b133      	cbz	r3, d40fa <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d40ec:	b93d      	cbnz	r5, d40fe <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d40ee:	490c      	ldr	r1, [pc, #48]	; (d4120 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d40f0:	b004      	add	sp, #16
   d40f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d40f6:	f003 baac 	b.w	d7652 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d40fa:	4b0a      	ldr	r3, [pc, #40]	; (d4124 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d40fc:	e000      	b.n	d4100 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d40fe:	4b0a      	ldr	r3, [pc, #40]	; (d4128 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4100:	7b16      	ldrb	r6, [r2, #12]
   d4102:	4c0a      	ldr	r4, [pc, #40]	; (d412c <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d4104:	490a      	ldr	r1, [pc, #40]	; (d4130 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d4106:	7b52      	ldrb	r2, [r2, #13]
   d4108:	9202      	str	r2, [sp, #8]
   d410a:	2e01      	cmp	r6, #1
   d410c:	bf08      	it	eq
   d410e:	4621      	moveq	r1, r4
   d4110:	9101      	str	r1, [sp, #4]
   d4112:	9500      	str	r5, [sp, #0]
   d4114:	4a07      	ldr	r2, [pc, #28]	; (d4134 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d4116:	2100      	movs	r1, #0
   d4118:	f003 fb15 	bl	d7746 <_ZN5Print11printf_implEbPKcz>
  }
   d411c:	b004      	add	sp, #16
   d411e:	bd70      	pop	{r4, r5, r6, pc}
   d4120:	000d9431 	.word	0x000d9431
   d4124:	000d9709 	.word	0x000d9709
   d4128:	000d9420 	.word	0x000d9420
   d412c:	000d9429 	.word	0x000d9429
   d4130:	000d942d 	.word	0x000d942d
   d4134:	000d9447 	.word	0x000d9447

000d4138 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d4138:	b510      	push	{r4, lr}
   d413a:	4604      	mov	r4, r0
   d413c:	3004      	adds	r0, #4
   d413e:	f003 f999 	bl	d7474 <_ZN6StringD1Ev>
   d4142:	4620      	mov	r0, r4
   d4144:	bd10      	pop	{r4, pc}

000d4146 <_ZN14http_request_tD1Ev>:
  String path;
  // TODO: Look at setting the port by default.
  //int port = 80;
  int port;
  String body;
} http_request_t;
   d4146:	b510      	push	{r4, lr}
   d4148:	4604      	mov	r4, r0
   d414a:	303c      	adds	r0, #60	; 0x3c
   d414c:	f003 f992 	bl	d7474 <_ZN6StringD1Ev>
   d4150:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4154:	f003 f98e 	bl	d7474 <_ZN6StringD1Ev>
   d4158:	4620      	mov	r0, r4
   d415a:	f003 f98b 	bl	d7474 <_ZN6StringD1Ev>
   d415e:	4620      	mov	r0, r4
   d4160:	bd10      	pop	{r4, pc}
	...

000d4164 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4164:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4166:	6984      	ldr	r4, [r0, #24]
   d4168:	4b0a      	ldr	r3, [pc, #40]	; (d4194 <_ZN9TCPClientD1Ev+0x30>)
   d416a:	6003      	str	r3, [r0, #0]
   d416c:	4605      	mov	r5, r0
   d416e:	b17c      	cbz	r4, d4190 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4170:	6863      	ldr	r3, [r4, #4]
   d4172:	3b01      	subs	r3, #1
   d4174:	6063      	str	r3, [r4, #4]
   d4176:	b95b      	cbnz	r3, d4190 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4178:	6823      	ldr	r3, [r4, #0]
   d417a:	4620      	mov	r0, r4
   d417c:	689b      	ldr	r3, [r3, #8]
   d417e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4180:	68a3      	ldr	r3, [r4, #8]
   d4182:	3b01      	subs	r3, #1
   d4184:	60a3      	str	r3, [r4, #8]
   d4186:	b91b      	cbnz	r3, d4190 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4188:	6823      	ldr	r3, [r4, #0]
   d418a:	4620      	mov	r0, r4
   d418c:	68db      	ldr	r3, [r3, #12]
   d418e:	4798      	blx	r3
   d4190:	4628      	mov	r0, r5
   d4192:	bd38      	pop	{r3, r4, r5, pc}
   d4194:	000d995c 	.word	0x000d995c

000d4198 <_ZN10HttpClientD1Ev>:
{
  int status;
  String body;
} http_response_t;

class HttpClient {
   d4198:	b510      	push	{r4, lr}
   d419a:	4604      	mov	r4, r0
   d419c:	f7ff ffe2 	bl	d4164 <_ZN9TCPClientD1Ev>
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZN9TCPClientD0Ev>:
   d41a4:	b510      	push	{r4, lr}
   d41a6:	4604      	mov	r4, r0
   d41a8:	f7ff ffdc 	bl	d4164 <_ZN9TCPClientD1Ev>
   d41ac:	4620      	mov	r0, r4
   d41ae:	f7ff ff74 	bl	d409a <_ZdlPv>
   d41b2:	4620      	mov	r0, r4
   d41b4:	bd10      	pop	{r4, pc}

000d41b6 <_ZN7FatFile6existsEPKc>:
   * dirFile.exists("TOFIND.TXT") searches for "TOFIND.TXT" in  the directory
   * dirFile.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
   d41b6:	b500      	push	{lr}
   d41b8:	b08b      	sub	sp, #44	; 0x2c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d41ba:	2300      	movs	r3, #0
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d41bc:	460a      	mov	r2, r1
   d41be:	4601      	mov	r1, r0
   d41c0:	a801      	add	r0, sp, #4
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d41c2:	f88d 3004 	strb.w	r3, [sp, #4]
   d41c6:	f88d 3005 	strb.w	r3, [sp, #5]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile file;
    return file.open(this, path, O_RDONLY);
   d41ca:	f001 fdee 	bl	d5daa <_ZN7FatFile4openEPS_PKci>
  }
   d41ce:	b00b      	add	sp, #44	; 0x2c
   d41d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d41d4 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
   d41d4:	4613      	mov	r3, r2
   d41d6:	460a      	mov	r2, r1
   d41d8:	4901      	ldr	r1, [pc, #4]	; (d41e0 <_ZN7FatFile4openEPKci+0xc>)
   d41da:	6809      	ldr	r1, [r1, #0]
   d41dc:	f001 bde5 	b.w	d5daa <_ZN7FatFile4openEPS_PKci>
   d41e0:	2003e3c0 	.word	0x2003e3c0

000d41e4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41e4:	b530      	push	{r4, r5, lr}
   d41e6:	b085      	sub	sp, #20
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d41e8:	4b1c      	ldr	r3, [pc, #112]	; (d425c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
   d41ea:	9300      	str	r3, [sp, #0]
   d41ec:	7913      	ldrb	r3, [r2, #4]
   d41ee:	f88d 3004 	strb.w	r3, [sp, #4]
   d41f2:	6893      	ldr	r3, [r2, #8]
   d41f4:	9302      	str	r3, [sp, #8]
   d41f6:	7b13      	ldrb	r3, [r2, #12]
   d41f8:	f88d 300c 	strb.w	r3, [sp, #12]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41fc:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d4200:	7b53      	ldrb	r3, [r2, #13]
   d4202:	f88d 300d 	strb.w	r3, [sp, #13]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d4206:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d4208:	460a      	mov	r2, r1
   d420a:	466b      	mov	r3, sp
   d420c:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d4210:	4628      	mov	r0, r5
   d4212:	f002 f961 	bl	d64d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
   d4216:	b1f0      	cbz	r0, d4256 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d4218:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d421a:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   d421e:	4628      	mov	r0, r5
   d4220:	f001 fdbc 	bl	d5d9c <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d4224:	2101      	movs	r1, #1
   d4226:	4620      	mov	r0, r4
   d4228:	f001 ffff 	bl	d622a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d422c:	4601      	mov	r1, r0
   d422e:	b168      	cbz	r0, d424c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
   d4230:	4621      	mov	r1, r4
   d4232:	4628      	mov	r0, r5
   d4234:	f001 fbdd 	bl	d59f2 <_ZN7FatFile8openRootEP9FatVolume>
   d4238:	b168      	cbz	r0, d4256 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
   d423a:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d423e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
   d4242:	bf16      	itet	ne
   d4244:	4b06      	ldrne	r3, [pc, #24]	; (d4260 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
   d4246:	4618      	moveq	r0, r3
   d4248:	601d      	strne	r5, [r3, #0]
   d424a:	e005      	b.n	d4258 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
   d424c:	4620      	mov	r0, r4
   d424e:	f001 ffec 	bl	d622a <_ZN9FatVolume4initEh>
   d4252:	2800      	cmp	r0, #0
   d4254:	d1ec      	bne.n	d4230 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
   d4256:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d4258:	b005      	add	sp, #20
   d425a:	bd30      	pop	{r4, r5, pc}
   d425c:	000d9404 	.word	0x000d9404
   d4260:	2003e3c0 	.word	0x2003e3c0

000d4264 <setup>:
void logData1(SdFile file, char fileName[]);
void handler(const char *eventName, const char *data);
void handler2(const char *eventName, const char *data);
void Postrequest();

void setup(){
   d4264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4268:	b098      	sub	sp, #96	; 0x60
  Serial.begin(115200);
   d426a:	f003 fc29 	bl	d7ac0 <_Z16_fetch_usbserialv>
   d426e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d4272:	f003 fc13 	bl	d7a9c <_ZN9USBSerial5beginEl>
  while(!Serial);
   d4276:	f003 fc23 	bl	d7ac0 <_Z16_fetch_usbserialv>
   d427a:	f003 fc16 	bl	d7aaa <_ZN9USBSerialcvbEv>
   d427e:	2800      	cmp	r0, #0
   d4280:	d0f9      	beq.n	d4276 <setup+0x12>
  delay(4000); 
   d4282:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   d4286:	f003 faab 	bl	d77e0 <delay>
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d428a:	4d35      	ldr	r5, [pc, #212]	; (d4360 <setup+0xfc>)
   d428c:	4c35      	ldr	r4, [pc, #212]	; (d4364 <setup+0x100>)
  Serial.println("hello");
   d428e:	f003 fc17 	bl	d7ac0 <_Z16_fetch_usbserialv>
   d4292:	4935      	ldr	r1, [pc, #212]	; (d4368 <setup+0x104>)
   d4294:	f003 f9f0 	bl	d7678 <_ZN5Print7printlnEPKc>
    
  Serial.println("hello222");
   d4298:	f003 fc12 	bl	d7ac0 <_Z16_fetch_usbserialv>
   d429c:	4933      	ldr	r1, [pc, #204]	; (d436c <setup+0x108>)
   d429e:	f003 f9eb 	bl	d7678 <_ZN5Print7printlnEPKc>
   d42a2:	4628      	mov	r0, r5
   d42a4:	f004 ffee 	bl	d9284 <strlen>
   d42a8:	4680      	mov	r8, r0
   d42aa:	4620      	mov	r0, r4
   d42ac:	f004 ffea 	bl	d9284 <strlen>

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d42b0:	264c      	movs	r6, #76	; 0x4c
    bool setCredentials(const char *ssid, const char *password) {
        return setCredentials(ssid, password, WPA2);
    }

    bool setCredentials(const char *ssid, const char *password, unsigned long security, unsigned long cipher=WLAN_CIPHER_NOT_SET) {
        return setCredentials(ssid, ssid ? strlen(ssid) : 0, password, password ? strlen(password) : 0, security, cipher);
   d42b2:	4607      	mov	r7, r0

    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
   d42b4:	4632      	mov	r2, r6
   d42b6:	2100      	movs	r1, #0
   d42b8:	a805      	add	r0, sp, #20
   d42ba:	f004 ffa1 	bl	d9200 <memset>
        creds.size = sizeof(creds);
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
   d42be:	2303      	movs	r3, #3
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d42c0:	482b      	ldr	r0, [pc, #172]	; (d4370 <setup+0x10c>)
        creds.size = sizeof(creds);
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
        creds.password_len = passwordLen;
        creds.security = WLanSecurityType(security);
   d42c2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d42c6:	2300      	movs	r3, #0
   d42c8:	4619      	mov	r1, r3
   d42ca:	aa05      	add	r2, sp, #20
   d42cc:	6840      	ldr	r0, [r0, #4]
        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
        creds.ssid = ssid;
        creds.ssid_len = ssidLen;
        creds.password = password;
   d42ce:	9408      	str	r4, [sp, #32]
    bool setCredentials(const char *ssid, unsigned int ssidLen, const char *password,
            unsigned int passwordLen, unsigned long security=WLAN_SEC_UNSEC, unsigned long cipher=WLAN_CIPHER_NOT_SET) {

        WLanCredentials creds;
        memset(&creds, 0, sizeof(creds));
        creds.size = sizeof(creds);
   d42d0:	9605      	str	r6, [sp, #20]
        creds.ssid = ssid;
   d42d2:	9506      	str	r5, [sp, #24]
        creds.ssid_len = ssidLen;
   d42d4:	f8cd 801c 	str.w	r8, [sp, #28]
        creds.password = password;
        creds.password_len = passwordLen;
   d42d8:	9709      	str	r7, [sp, #36]	; 0x24
        creds.security = WLanSecurityType(security);
        creds.cipher = WLanSecurityCipher(cipher);
        return (network_set_credentials(*this, 0, &creds, NULL) == 0);
   d42da:	f002 ff63 	bl	d71a4 <network_set_credentials>
  //setting wifi
  WiFi.setCredentials(wifissid, wifipassword, WPA2);//options are WPA2 (default if not chosen), WEP, WPA
  
  //Serial for plantower
  Serial1.begin(9600, SERIAL_8N1);
   d42de:	f003 fc5f 	bl	d7ba0 <_Z22__fetch_global_Serial1v>
   d42e2:	2200      	movs	r2, #0
   d42e4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d42e8:	f003 fc50 	bl	d7b8c <_ZN11USARTSerial5beginEmm>

  //Setup for Shinyei
  pinMode(Shinyei,INPUT);
   d42ec:	4b21      	ldr	r3, [pc, #132]	; (d4374 <setup+0x110>)
   d42ee:	2100      	movs	r1, #0
   d42f0:	8818      	ldrh	r0, [r3, #0]
   d42f2:	f004 f95b 	bl	d85ac <pinMode>
   d42f6:	2404      	movs	r4, #4
  
  //Setup for humidity and temperature sensor
  int count2 = 0;
  while(!htu.begin() && count2 != 3){ //count for if htu not connected
   d42f8:	481f      	ldr	r0, [pc, #124]	; (d4378 <setup+0x114>)
   d42fa:	f000 fea0 	bl	d503e <_ZN15Adafruit_Si70215beginEv>
   d42fe:	b988      	cbnz	r0, d4324 <setup+0xc0>
   d4300:	3c01      	subs	r4, #1
   d4302:	d00f      	beq.n	d4324 <setup+0xc0>
	    delay(1000); 
   d4304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4308:	f003 fa6a 	bl	d77e0 <delay>
      count2++;
      Serial.println(htu.begin());
   d430c:	f003 fbd8 	bl	d7ac0 <_Z16_fetch_usbserialv>
   d4310:	4605      	mov	r5, r0
   d4312:	4819      	ldr	r0, [pc, #100]	; (d4378 <setup+0x114>)
   d4314:	f000 fe93 	bl	d503e <_ZN15Adafruit_Si70215beginEv>
   d4318:	220a      	movs	r2, #10
   d431a:	4601      	mov	r1, r0
   d431c:	4628      	mov	r0, r5
   d431e:	f003 fa08 	bl	d7732 <_ZN5Print7printlnEii>
  //Setup for Shinyei
  pinMode(Shinyei,INPUT);
  
  //Setup for humidity and temperature sensor
  int count2 = 0;
  while(!htu.begin() && count2 != 3){ //count for if htu not connected
   d4322:	e7e9      	b.n	d42f8 <setup+0x94>
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    return vwd()->exists(path);
   d4324:	4915      	ldr	r1, [pc, #84]	; (d437c <setup+0x118>)
   d4326:	4816      	ldr	r0, [pc, #88]	; (d4380 <setup+0x11c>)
   d4328:	f7ff ff45 	bl	d41b6 <_ZN7FatFile6existsEPKc>
	}

  sd.exists(sdfilename); // creates sd file

  //Setup for RTC
  rtc.begin();
   d432c:	4815      	ldr	r0, [pc, #84]	; (d4384 <setup+0x120>)
   d432e:	f002 fbd3 	bl	d6ad8 <_ZN10RTC_DS32315beginEv>
  if (rtc.lostPower()) {    // Note: comment this line (and end bracket) and change rtc.adjust below to change time manually
   d4332:	4814      	ldr	r0, [pc, #80]	; (d4384 <setup+0x120>)
   d4334:	f002 fbd7 	bl	d6ae6 <_ZN10RTC_DS32319lostPowerEv>
   d4338:	b170      	cbz	r0, d4358 <setup+0xf4>
   //rtc.adjust(DateTime(F(__DATE__), F(__TIME__))); //
     rtc.adjust(DateTime(2020, 1, 19, 22, 43, 0)); //manually change time here (YEAR, MONTH, DAY, HR, MIN, SEC)
   d433a:	2116      	movs	r1, #22
   d433c:	222b      	movs	r2, #43	; 0x2b
   d433e:	2300      	movs	r3, #0
   d4340:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d4344:	a805      	add	r0, sp, #20
   d4346:	2313      	movs	r3, #19
   d4348:	2201      	movs	r2, #1
   d434a:	f240 71e4 	movw	r1, #2020	; 0x7e4
   d434e:	f002 fb97 	bl	d6a80 <_ZN8DateTimeC1Ethhhhh>
   d4352:	a805      	add	r0, sp, #20
   d4354:	f002 fbce 	bl	d6af4 <_ZN10RTC_DS32316adjustERK8DateTime>
  } // this end bracket
}
   d4358:	b018      	add	sp, #96	; 0x60
   d435a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d435e:	bf00      	nop
   d4360:	2003d174 	.word	0x2003d174
   d4364:	2003d1d8 	.word	0x2003d1d8
   d4368:	000d9465 	.word	0x000d9465
   d436c:	000d946b 	.word	0x000d946b
   d4370:	2003e704 	.word	0x2003e704
   d4374:	2003d170 	.word	0x2003d170
   d4378:	2003dfac 	.word	0x2003dfac
   d437c:	2003d1a0 	.word	0x2003d1a0
   d4380:	2003d6f0 	.word	0x2003d6f0
   d4384:	2003d264 	.word	0x2003d264

000d4388 <_Z12writeHeader16SdFilePc>:
    if(count == 33){
      count = 1;
    }
  }
}
void writeHeader1(SdFile file, char fileName[]) {
   d4388:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d438a:	4a3a      	ldr	r2, [pc, #232]	; (d4474 <_Z12writeHeader16SdFilePc+0xec>)
   d438c:	4b3a      	ldr	r3, [pc, #232]	; (d4478 <_Z12writeHeader16SdFilePc+0xf0>)
   d438e:	9202      	str	r2, [sp, #8]
   d4390:	2201      	movs	r2, #1
   d4392:	460e      	mov	r6, r1
   d4394:	9300      	str	r3, [sp, #0]
   d4396:	f88d 200c 	strb.w	r2, [sp, #12]
   d439a:	2300      	movs	r3, #0
  sd.begin(chipSelect, SD_SCK_MHZ(50));
   d439c:	210e      	movs	r1, #14
    if(count == 33){
      count = 1;
    }
  }
}
void writeHeader1(SdFile file, char fileName[]) {
   d439e:	4604      	mov	r4, r0
  sd.begin(chipSelect, SD_SCK_MHZ(50));
   d43a0:	466a      	mov	r2, sp
   d43a2:	4836      	ldr	r0, [pc, #216]	; (d447c <_Z12writeHeader16SdFilePc+0xf4>)
   d43a4:	f88d 3004 	strb.w	r3, [sp, #4]
   d43a8:	f88d 300d 	strb.w	r3, [sp, #13]
   d43ac:	f7ff ff1a 	bl	d41e4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d43b0:	4631      	mov	r1, r6
   d43b2:	4833      	ldr	r0, [pc, #204]	; (d4480 <_Z12writeHeader16SdFilePc+0xf8>)
   d43b4:	f7ff feff 	bl	d41b6 <_ZN7FatFile6existsEPKc>
  if(!sd.exists(fileName)){
   d43b8:	2800      	cmp	r0, #0
   d43ba:	d158      	bne.n	d446e <_Z12writeHeader16SdFilePc+0xe6>
    file.open(fileName, O_WRONLY | O_CREAT);
   d43bc:	f104 0508 	add.w	r5, r4, #8
   d43c0:	f240 2201 	movw	r2, #513	; 0x201
   d43c4:	4631      	mov	r1, r6
   d43c6:	4628      	mov	r0, r5
   d43c8:	f7ff ff04 	bl	d41d4 <_ZN7FatFile4openEPKci>
    file.sync();
   d43cc:	4628      	mov	r0, r5
   d43ce:	f001 fcaf 	bl	d5d30 <_ZN7FatFile4syncEv>
    file.print("Time");
   d43d2:	492c      	ldr	r1, [pc, #176]	; (d4484 <_Z12writeHeader16SdFilePc+0xfc>)
   d43d4:	4620      	mov	r0, r4
   d43d6:	f003 f93c 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(',');
   d43da:	212c      	movs	r1, #44	; 0x2c
   d43dc:	4620      	mov	r0, r4
   d43de:	f003 f93c 	bl	d765a <_ZN5Print5printEc>
    file.print(",pm10_standard");
   d43e2:	4929      	ldr	r1, [pc, #164]	; (d4488 <_Z12writeHeader16SdFilePc+0x100>)
   d43e4:	4620      	mov	r0, r4
   d43e6:	f003 f934 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",pm25_standard");
   d43ea:	4928      	ldr	r1, [pc, #160]	; (d448c <_Z12writeHeader16SdFilePc+0x104>)
   d43ec:	4620      	mov	r0, r4
   d43ee:	f003 f930 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",pm100_standard");
   d43f2:	4927      	ldr	r1, [pc, #156]	; (d4490 <_Z12writeHeader16SdFilePc+0x108>)
   d43f4:	4620      	mov	r0, r4
   d43f6:	f003 f92c 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",pm10_env");
   d43fa:	4926      	ldr	r1, [pc, #152]	; (d4494 <_Z12writeHeader16SdFilePc+0x10c>)
   d43fc:	4620      	mov	r0, r4
   d43fe:	f003 f928 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",pm25_env");
   d4402:	4925      	ldr	r1, [pc, #148]	; (d4498 <_Z12writeHeader16SdFilePc+0x110>)
   d4404:	4620      	mov	r0, r4
   d4406:	f003 f924 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",pm100_env");
   d440a:	4924      	ldr	r1, [pc, #144]	; (d449c <_Z12writeHeader16SdFilePc+0x114>)
   d440c:	4620      	mov	r0, r4
   d440e:	f003 f920 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",P3um");
   d4412:	4923      	ldr	r1, [pc, #140]	; (d44a0 <_Z12writeHeader16SdFilePc+0x118>)
   d4414:	4620      	mov	r0, r4
   d4416:	f003 f91c 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",P5um");
   d441a:	4922      	ldr	r1, [pc, #136]	; (d44a4 <_Z12writeHeader16SdFilePc+0x11c>)
   d441c:	4620      	mov	r0, r4
   d441e:	f003 f918 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",P10um");
   d4422:	4921      	ldr	r1, [pc, #132]	; (d44a8 <_Z12writeHeader16SdFilePc+0x120>)
   d4424:	4620      	mov	r0, r4
   d4426:	f003 f914 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",P25um");
   d442a:	4920      	ldr	r1, [pc, #128]	; (d44ac <_Z12writeHeader16SdFilePc+0x124>)
   d442c:	4620      	mov	r0, r4
   d442e:	f003 f910 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",P50um");
   d4432:	491f      	ldr	r1, [pc, #124]	; (d44b0 <_Z12writeHeader16SdFilePc+0x128>)
   d4434:	4620      	mov	r0, r4
   d4436:	f003 f90c 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",P100um");
   d443a:	491e      	ldr	r1, [pc, #120]	; (d44b4 <_Z12writeHeader16SdFilePc+0x12c>)
   d443c:	4620      	mov	r0, r4
   d443e:	f003 f908 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",checksum");
   d4442:	491d      	ldr	r1, [pc, #116]	; (d44b8 <_Z12writeHeader16SdFilePc+0x130>)
   d4444:	4620      	mov	r0, r4
   d4446:	f003 f904 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",Shinyei");
   d444a:	491c      	ldr	r1, [pc, #112]	; (d44bc <_Z12writeHeader16SdFilePc+0x134>)
   d444c:	4620      	mov	r0, r4
   d444e:	f003 f900 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",Temperature");
   d4452:	491b      	ldr	r1, [pc, #108]	; (d44c0 <_Z12writeHeader16SdFilePc+0x138>)
   d4454:	4620      	mov	r0, r4
   d4456:	f003 f8fc 	bl	d7652 <_ZN5Print5printEPKc>
    file.print(",Humidity");
   d445a:	491a      	ldr	r1, [pc, #104]	; (d44c4 <_Z12writeHeader16SdFilePc+0x13c>)
   d445c:	4620      	mov	r0, r4
   d445e:	f003 f8f8 	bl	d7652 <_ZN5Print5printEPKc>
    file.println();
   d4462:	4620      	mov	r0, r4
   d4464:	f003 f8fc 	bl	d7660 <_ZN5Print7printlnEv>
    file.close();
   d4468:	4628      	mov	r0, r5
   d446a:	f001 fc97 	bl	d5d9c <_ZN7FatFile5closeEv>
  }
}
   d446e:	b004      	add	sp, #16
   d4470:	bd70      	pop	{r4, r5, r6, pc}
   d4472:	bf00      	nop
   d4474:	02faf080 	.word	0x02faf080
   d4478:	000d9404 	.word	0x000d9404
   d447c:	2003d2b4 	.word	0x2003d2b4
   d4480:	2003d6f0 	.word	0x2003d6f0
   d4484:	000d9474 	.word	0x000d9474
   d4488:	000d9479 	.word	0x000d9479
   d448c:	000d9488 	.word	0x000d9488
   d4490:	000d9497 	.word	0x000d9497
   d4494:	000d94a7 	.word	0x000d94a7
   d4498:	000d94b1 	.word	0x000d94b1
   d449c:	000d94bb 	.word	0x000d94bb
   d44a0:	000d94c6 	.word	0x000d94c6
   d44a4:	000d94cc 	.word	0x000d94cc
   d44a8:	000d94d2 	.word	0x000d94d2
   d44ac:	000d94d9 	.word	0x000d94d9
   d44b0:	000d94e0 	.word	0x000d94e0
   d44b4:	000d94e7 	.word	0x000d94e7
   d44b8:	000d94ef 	.word	0x000d94ef
   d44bc:	000d94f9 	.word	0x000d94f9
   d44c0:	000d9502 	.word	0x000d9502
   d44c4:	000d950f 	.word	0x000d950f

000d44c8 <_Z8logData16SdFilePc>:
void logData1(SdFile file, char fileName[]) {
   d44c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   d44cc:	4a9c      	ldr	r2, [pc, #624]	; (d4740 <_Z8logData16SdFilePc+0x278>)
   d44ce:	4b9d      	ldr	r3, [pc, #628]	; (d4744 <_Z8logData16SdFilePc+0x27c>)
   d44d0:	9202      	str	r2, [sp, #8]
   d44d2:	2201      	movs	r2, #1
   d44d4:	4604      	mov	r4, r0
   d44d6:	460d      	mov	r5, r1
   d44d8:	9300      	str	r3, [sp, #0]
   d44da:	f88d 200c 	strb.w	r2, [sp, #12]
   d44de:	2300      	movs	r3, #0
  //logging RTC data
  sd.begin(chipSelect, SD_SCK_MHZ(50));
   d44e0:	466a      	mov	r2, sp
   d44e2:	210e      	movs	r1, #14
   d44e4:	4898      	ldr	r0, [pc, #608]	; (d4748 <_Z8logData16SdFilePc+0x280>)
   d44e6:	f88d 3004 	strb.w	r3, [sp, #4]
   d44ea:	f88d 300d 	strb.w	r3, [sp, #13]
   d44ee:	f7ff fe79 	bl	d41e4 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
   d44f2:	4629      	mov	r1, r5
   d44f4:	4895      	ldr	r0, [pc, #596]	; (d474c <_Z8logData16SdFilePc+0x284>)
   d44f6:	f7ff fe5e 	bl	d41b6 <_ZN7FatFile6existsEPKc>
   d44fa:	f104 0608 	add.w	r6, r4, #8
  if(!sd.exists(fileName)){
   d44fe:	b910      	cbnz	r0, d4506 <_Z8logData16SdFilePc+0x3e>
    file.open(fileName, O_WRONLY | O_CREAT);
   d4500:	f240 2201 	movw	r2, #513	; 0x201
   d4504:	e000      	b.n	d4508 <_Z8logData16SdFilePc+0x40>
  }
  else{
    file.open(fileName, O_WRONLY | O_APPEND);
   d4506:	2209      	movs	r2, #9
   d4508:	4629      	mov	r1, r5
   d450a:	4630      	mov	r0, r6
   d450c:	4d90      	ldr	r5, [pc, #576]	; (d4750 <_Z8logData16SdFilePc+0x288>)
  file.print(':');
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging tempa and humidity data
  templ = (int)temp;
   d450e:	f8df a260 	ldr.w	sl, [pc, #608]	; d4770 <_Z8logData16SdFilePc+0x2a8>
  tempr = (temp-templ)*100;//rounded to 2 places
   d4512:	f8df 9260 	ldr.w	r9, [pc, #608]	; d4774 <_Z8logData16SdFilePc+0x2ac>
  humdl = (int)humd;
   d4516:	f8df 8260 	ldr.w	r8, [pc, #608]	; d4778 <_Z8logData16SdFilePc+0x2b0>
  humdr = (humd-humdl)*100;//rounded to 2 places
   d451a:	4f8e      	ldr	r7, [pc, #568]	; (d4754 <_Z8logData16SdFilePc+0x28c>)
  sd.begin(chipSelect, SD_SCK_MHZ(50));
  if(!sd.exists(fileName)){
    file.open(fileName, O_WRONLY | O_CREAT);
  }
  else{
    file.open(fileName, O_WRONLY | O_APPEND);
   d451c:	f7ff fe5a 	bl	d41d4 <_ZN7FatFile4openEPKci>
  }
  file.sync();
   d4520:	4630      	mov	r0, r6
   d4522:	f001 fc05 	bl	d5d30 <_ZN7FatFile4syncEv>
  file.print(now.year(), DEC);
   d4526:	7829      	ldrb	r1, [r5, #0]
   d4528:	220a      	movs	r2, #10
   d452a:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
   d452e:	4620      	mov	r0, r4
   d4530:	f003 f8fd 	bl	d772e <_ZN5Print5printEii>
  file.print('-');
   d4534:	212d      	movs	r1, #45	; 0x2d
   d4536:	4620      	mov	r0, r4
   d4538:	f003 f88f 	bl	d765a <_ZN5Print5printEc>
  file.print(now.month(), DEC);
   d453c:	220a      	movs	r2, #10
   d453e:	7869      	ldrb	r1, [r5, #1]
   d4540:	4620      	mov	r0, r4
   d4542:	f003 f8d0 	bl	d76e6 <_ZN5Print5printEhi>
  file.print('-');
   d4546:	212d      	movs	r1, #45	; 0x2d
   d4548:	4620      	mov	r0, r4
   d454a:	f003 f886 	bl	d765a <_ZN5Print5printEc>
  file.print(now.day(), DEC);
   d454e:	220a      	movs	r2, #10
   d4550:	78a9      	ldrb	r1, [r5, #2]
   d4552:	4620      	mov	r0, r4
   d4554:	f003 f8c7 	bl	d76e6 <_ZN5Print5printEhi>
  file.print(" ");
   d4558:	497f      	ldr	r1, [pc, #508]	; (d4758 <_Z8logData16SdFilePc+0x290>)
   d455a:	4620      	mov	r0, r4
   d455c:	f003 f879 	bl	d7652 <_ZN5Print5printEPKc>
  file.print(now.hour(), DEC);
   d4560:	220a      	movs	r2, #10
   d4562:	78e9      	ldrb	r1, [r5, #3]
   d4564:	4620      	mov	r0, r4
   d4566:	f003 f8be 	bl	d76e6 <_ZN5Print5printEhi>
  file.print(':');
   d456a:	213a      	movs	r1, #58	; 0x3a
   d456c:	4620      	mov	r0, r4
   d456e:	f003 f874 	bl	d765a <_ZN5Print5printEc>
  file.print(now.minute(), DEC);
   d4572:	220a      	movs	r2, #10
   d4574:	7929      	ldrb	r1, [r5, #4]
   d4576:	4620      	mov	r0, r4
   d4578:	f003 f8b5 	bl	d76e6 <_ZN5Print5printEhi>
  file.print(':');
   d457c:	213a      	movs	r1, #58	; 0x3a
   d457e:	4620      	mov	r0, r4
   d4580:	f003 f86b 	bl	d765a <_ZN5Print5printEc>
  file.print(now.second(), DEC);
   d4584:	220a      	movs	r2, #10
   d4586:	7969      	ldrb	r1, [r5, #5]
  tempr = (temp-templ)*100;//rounded to 2 places
  humdl = (int)humd;
  humdr = (humd-humdl)*100;//rounded to 2 places
  file.print(',');
  file.print(',');
  file.print(data.pm10_standard);
   d4588:	4d74      	ldr	r5, [pc, #464]	; (d475c <_Z8logData16SdFilePc+0x294>)
  file.print(" ");
  file.print(now.hour(), DEC);
  file.print(':');
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
   d458a:	4620      	mov	r0, r4
   d458c:	f003 f8ab 	bl	d76e6 <_ZN5Print5printEhi>
  //logging tempa and humidity data
  templ = (int)temp;
   d4590:	4b73      	ldr	r3, [pc, #460]	; (d4760 <_Z8logData16SdFilePc+0x298>)
  tempr = (temp-templ)*100;//rounded to 2 places
   d4592:	eddf 6a74 	vldr	s13, [pc, #464]	; d4764 <_Z8logData16SdFilePc+0x29c>
  file.print(':');
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging tempa and humidity data
  templ = (int)temp;
   d4596:	edd3 7a00 	vldr	s15, [r3]
  tempr = (temp-templ)*100;//rounded to 2 places
  humdl = (int)humd;
   d459a:	4b73      	ldr	r3, [pc, #460]	; (d4768 <_Z8logData16SdFilePc+0x2a0>)
  file.print(':');
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging tempa and humidity data
  templ = (int)temp;
   d459c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  tempr = (temp-templ)*100;//rounded to 2 places
  humdl = (int)humd;
  humdr = (humd-humdl)*100;//rounded to 2 places
  file.print(',');
   d45a0:	212c      	movs	r1, #44	; 0x2c
  file.print(':');
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging tempa and humidity data
  templ = (int)temp;
   d45a2:	ed8a 7a00 	vstr	s14, [sl]
  tempr = (temp-templ)*100;//rounded to 2 places
   d45a6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  humdl = (int)humd;
  humdr = (humd-humdl)*100;//rounded to 2 places
  file.print(',');
   d45aa:	4620      	mov	r0, r4
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging tempa and humidity data
  templ = (int)temp;
  tempr = (temp-templ)*100;//rounded to 2 places
   d45ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
  humdl = (int)humd;
   d45b0:	edd3 7a00 	vldr	s15, [r3]
  file.print(now.minute(), DEC);
  file.print(':');
  file.print(now.second(), DEC);
  //logging tempa and humidity data
  templ = (int)temp;
  tempr = (temp-templ)*100;//rounded to 2 places
   d45b4:	ee27 7a26 	vmul.f32	s14, s14, s13
   d45b8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
   d45bc:	ed89 7a00 	vstr	s14, [r9]
  humdl = (int)humd;
   d45c0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
   d45c4:	ed88 7a00 	vstr	s14, [r8]
  humdr = (humd-humdl)*100;//rounded to 2 places
   d45c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
   d45cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
   d45d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   d45d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d45d8:	edc7 7a00 	vstr	s15, [r7]
  file.print(',');
   d45dc:	f003 f83d 	bl	d765a <_ZN5Print5printEc>
  file.print(',');
   d45e0:	212c      	movs	r1, #44	; 0x2c
   d45e2:	4620      	mov	r0, r4
   d45e4:	f003 f839 	bl	d765a <_ZN5Print5printEc>
  file.print(data.pm10_standard);
   d45e8:	220a      	movs	r2, #10
   d45ea:	8869      	ldrh	r1, [r5, #2]
   d45ec:	4620      	mov	r0, r4
   d45ee:	f003 f89e 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d45f2:	212c      	movs	r1, #44	; 0x2c
   d45f4:	4620      	mov	r0, r4
   d45f6:	f003 f830 	bl	d765a <_ZN5Print5printEc>
  file.print(data.pm25_standard);
   d45fa:	220a      	movs	r2, #10
   d45fc:	88a9      	ldrh	r1, [r5, #4]
   d45fe:	4620      	mov	r0, r4
   d4600:	f003 f895 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d4604:	212c      	movs	r1, #44	; 0x2c
   d4606:	4620      	mov	r0, r4
   d4608:	f003 f827 	bl	d765a <_ZN5Print5printEc>
  file.print(data.pm100_standard);
   d460c:	220a      	movs	r2, #10
   d460e:	88e9      	ldrh	r1, [r5, #6]
   d4610:	4620      	mov	r0, r4
   d4612:	f003 f88c 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d4616:	212c      	movs	r1, #44	; 0x2c
   d4618:	4620      	mov	r0, r4
   d461a:	f003 f81e 	bl	d765a <_ZN5Print5printEc>
  file.print(data.pm10_env);
   d461e:	220a      	movs	r2, #10
   d4620:	8929      	ldrh	r1, [r5, #8]
   d4622:	4620      	mov	r0, r4
   d4624:	f003 f883 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d4628:	212c      	movs	r1, #44	; 0x2c
   d462a:	4620      	mov	r0, r4
   d462c:	f003 f815 	bl	d765a <_ZN5Print5printEc>
  file.print(data.pm25_env);
   d4630:	220a      	movs	r2, #10
   d4632:	8969      	ldrh	r1, [r5, #10]
   d4634:	4620      	mov	r0, r4
   d4636:	f003 f87a 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d463a:	212c      	movs	r1, #44	; 0x2c
   d463c:	4620      	mov	r0, r4
   d463e:	f003 f80c 	bl	d765a <_ZN5Print5printEc>
  file.print(data.pm100_env);
   d4642:	220a      	movs	r2, #10
   d4644:	89a9      	ldrh	r1, [r5, #12]
   d4646:	4620      	mov	r0, r4
   d4648:	f003 f871 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d464c:	212c      	movs	r1, #44	; 0x2c
   d464e:	4620      	mov	r0, r4
   d4650:	f003 f803 	bl	d765a <_ZN5Print5printEc>
  file.print(data.particles_03um);
   d4654:	220a      	movs	r2, #10
   d4656:	89e9      	ldrh	r1, [r5, #14]
   d4658:	4620      	mov	r0, r4
   d465a:	f003 f868 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d465e:	212c      	movs	r1, #44	; 0x2c
   d4660:	4620      	mov	r0, r4
   d4662:	f002 fffa 	bl	d765a <_ZN5Print5printEc>
  file.print(data.particles_05um);
   d4666:	220a      	movs	r2, #10
   d4668:	8a29      	ldrh	r1, [r5, #16]
   d466a:	4620      	mov	r0, r4
   d466c:	f003 f85f 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d4670:	212c      	movs	r1, #44	; 0x2c
   d4672:	4620      	mov	r0, r4
   d4674:	f002 fff1 	bl	d765a <_ZN5Print5printEc>
  file.print(data.particles_10um);
   d4678:	220a      	movs	r2, #10
   d467a:	8a69      	ldrh	r1, [r5, #18]
   d467c:	4620      	mov	r0, r4
   d467e:	f003 f856 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d4682:	212c      	movs	r1, #44	; 0x2c
   d4684:	4620      	mov	r0, r4
   d4686:	f002 ffe8 	bl	d765a <_ZN5Print5printEc>
  file.print(data.particles_25um);
   d468a:	220a      	movs	r2, #10
   d468c:	8aa9      	ldrh	r1, [r5, #20]
   d468e:	4620      	mov	r0, r4
   d4690:	f003 f84d 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d4694:	212c      	movs	r1, #44	; 0x2c
   d4696:	4620      	mov	r0, r4
   d4698:	f002 ffdf 	bl	d765a <_ZN5Print5printEc>
  file.print(data.particles_50um);
   d469c:	220a      	movs	r2, #10
   d469e:	8ae9      	ldrh	r1, [r5, #22]
   d46a0:	4620      	mov	r0, r4
   d46a2:	f003 f844 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d46a6:	212c      	movs	r1, #44	; 0x2c
   d46a8:	4620      	mov	r0, r4
   d46aa:	f002 ffd6 	bl	d765a <_ZN5Print5printEc>
  file.print(data.particles_100um);
   d46ae:	220a      	movs	r2, #10
   d46b0:	8b29      	ldrh	r1, [r5, #24]
   d46b2:	4620      	mov	r0, r4
   d46b4:	f003 f83b 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d46b8:	212c      	movs	r1, #44	; 0x2c
   d46ba:	4620      	mov	r0, r4
   d46bc:	f002 ffcd 	bl	d765a <_ZN5Print5printEc>
  file.print(data.checksum);
   d46c0:	220a      	movs	r2, #10
   d46c2:	8ba9      	ldrh	r1, [r5, #28]
   d46c4:	4620      	mov	r0, r4
   d46c6:	f003 f832 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d46ca:	212c      	movs	r1, #44	; 0x2c
   d46cc:	4620      	mov	r0, r4
   d46ce:	f002 ffc4 	bl	d765a <_ZN5Print5printEc>
  file.print(ratioint);
   d46d2:	4b26      	ldr	r3, [pc, #152]	; (d476c <_Z8logData16SdFilePc+0x2a4>)
   d46d4:	220a      	movs	r2, #10
   d46d6:	6819      	ldr	r1, [r3, #0]
   d46d8:	4620      	mov	r0, r4
   d46da:	f003 f828 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d46de:	212c      	movs	r1, #44	; 0x2c
   d46e0:	4620      	mov	r0, r4
   d46e2:	f002 ffba 	bl	d765a <_ZN5Print5printEc>
  file.print(templ);
   d46e6:	220a      	movs	r2, #10
   d46e8:	f8da 1000 	ldr.w	r1, [sl]
   d46ec:	4620      	mov	r0, r4
   d46ee:	f003 f81e 	bl	d772e <_ZN5Print5printEii>
  file.print('.');
   d46f2:	212e      	movs	r1, #46	; 0x2e
   d46f4:	4620      	mov	r0, r4
   d46f6:	f002 ffb0 	bl	d765a <_ZN5Print5printEc>
  file.print(tempr);
   d46fa:	220a      	movs	r2, #10
   d46fc:	f8d9 1000 	ldr.w	r1, [r9]
   d4700:	4620      	mov	r0, r4
   d4702:	f003 f814 	bl	d772e <_ZN5Print5printEii>
  file.print(',');
   d4706:	212c      	movs	r1, #44	; 0x2c
   d4708:	4620      	mov	r0, r4
   d470a:	f002 ffa6 	bl	d765a <_ZN5Print5printEc>
  file.print(humdl);
   d470e:	220a      	movs	r2, #10
   d4710:	f8d8 1000 	ldr.w	r1, [r8]
   d4714:	4620      	mov	r0, r4
   d4716:	f003 f80a 	bl	d772e <_ZN5Print5printEii>
  file.print('.');
   d471a:	212e      	movs	r1, #46	; 0x2e
   d471c:	4620      	mov	r0, r4
   d471e:	f002 ff9c 	bl	d765a <_ZN5Print5printEc>
  file.print(humdr);
   d4722:	220a      	movs	r2, #10
   d4724:	6839      	ldr	r1, [r7, #0]
   d4726:	4620      	mov	r0, r4
   d4728:	f003 f801 	bl	d772e <_ZN5Print5printEii>
  file.println();
   d472c:	4620      	mov	r0, r4
   d472e:	f002 ff97 	bl	d7660 <_ZN5Print7printlnEv>
  file.close();
   d4732:	4630      	mov	r0, r6
   d4734:	f001 fb32 	bl	d5d9c <_ZN7FatFile5closeEv>
   d4738:	b004      	add	sp, #16
   d473a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d473e:	bf00      	nop
   d4740:	02faf080 	.word	0x02faf080
   d4744:	000d9404 	.word	0x000d9404
   d4748:	2003d2b4 	.word	0x2003d2b4
   d474c:	2003d6f0 	.word	0x2003d6f0
   d4750:	2003d738 	.word	0x2003d738
   d4754:	2003db88 	.word	0x2003db88
   d4758:	000d9781 	.word	0x000d9781
   d475c:	2003df88 	.word	0x2003df88
   d4760:	2003e3bc 	.word	0x2003e3bc
   d4764:	42c80000 	.word	0x42c80000
   d4768:	2003df74 	.word	0x2003df74
   d476c:	2003dfd0 	.word	0x2003dfd0
   d4770:	2003df78 	.word	0x2003df78
   d4774:	2003dfb8 	.word	0x2003dfb8
   d4778:	2003dfa8 	.word	0x2003dfa8

000d477c <loop>:
  if (rtc.lostPower()) {    // Note: comment this line (and end bracket) and change rtc.adjust below to change time manually
   //rtc.adjust(DateTime(F(__DATE__), F(__TIME__))); //
     rtc.adjust(DateTime(2020, 1, 19, 22, 43, 0)); //manually change time here (YEAR, MONTH, DAY, HR, MIN, SEC)
  } // this end bracket
}
void loop(){
   d477c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4780:	ed2d 8b02 	vpush	{d8}
   d4784:	4c66      	ldr	r4, [pc, #408]	; (d4920 <loop+0x1a4>)
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4786:	2200      	movs	r2, #0
   d4788:	b0a2      	sub	sp, #136	; 0x88
   d478a:	4611      	mov	r1, r2
   d478c:	6860      	ldr	r0, [r4, #4]
   d478e:	f002 fce1 	bl	d7154 <network_ready>
  //check for wifi connection
  if(!WiFi.ready()){
   d4792:	4603      	mov	r3, r0
   d4794:	b948      	cbnz	r0, d47aa <loop+0x2e>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4796:	4601      	mov	r1, r0
   d4798:	4602      	mov	r2, r0
   d479a:	6860      	ldr	r0, [r4, #4]
   d479c:	f002 fcc2 	bl	d7124 <network_connect>
    WiFi.connect();
    Serial.println("Connecting...");
   d47a0:	f003 f98e 	bl	d7ac0 <_Z16_fetch_usbserialv>
   d47a4:	495f      	ldr	r1, [pc, #380]	; (d4924 <loop+0x1a8>)
   d47a6:	f002 ff67 	bl	d7678 <_ZN5Print7printlnEPKc>
  }

  //Plantower data collection and processing
  int txdata = Serial1.read();
   d47aa:	f003 f9f9 	bl	d7ba0 <_Z22__fetch_global_Serial1v>
   d47ae:	6803      	ldr	r3, [r0, #0]
   d47b0:	695b      	ldr	r3, [r3, #20]
   d47b2:	4798      	blx	r3
  if(txdata != -260){
   d47b4:	f510 7f82 	cmn.w	r0, #260	; 0x104
   d47b8:	f000 81e9 	beq.w	d4b8e <loop+0x412>
    if(count % 2 == 1){
   d47bc:	4d5a      	ldr	r5, [pc, #360]	; (d4928 <loop+0x1ac>)
   d47be:	4b5b      	ldr	r3, [pc, #364]	; (d492c <loop+0x1b0>)
   d47c0:	682a      	ldr	r2, [r5, #0]
   d47c2:	4013      	ands	r3, r2
   d47c4:	2b00      	cmp	r3, #0
   d47c6:	bfbe      	ittt	lt
   d47c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d47cc:	f063 0301 	ornlt	r3, r3, #1
   d47d0:	3301      	addlt	r3, #1
   d47d2:	2b01      	cmp	r3, #1
   d47d4:	4b56      	ldr	r3, [pc, #344]	; (d4930 <loop+0x1b4>)
   d47d6:	d10a      	bne.n	d47ee <loop+0x72>
      shiftedtxdata = txdata << 8;
   d47d8:	0201      	lsls	r1, r0, #8
      if(count == 1){
   d47da:	2a01      	cmp	r2, #1

  //Plantower data collection and processing
  int txdata = Serial1.read();
  if(txdata != -260){
    if(count % 2 == 1){
      shiftedtxdata = txdata << 8;
   d47dc:	6019      	str	r1, [r3, #0]
      if(count == 1){
   d47de:	f040 81cd 	bne.w	d4b7c <loop+0x400>
        if(txdata != 66){
   d47e2:	2842      	cmp	r0, #66	; 0x42
   d47e4:	f000 81ca 	beq.w	d4b7c <loop+0x400>
          count = 0;
   d47e8:	2300      	movs	r3, #0
   d47ea:	602b      	str	r3, [r5, #0]
   d47ec:	e1c6      	b.n	d4b7c <loop+0x400>
        }
      }
      count++;
    }
    else{
      int dataval = shiftedtxdata + txdata;
   d47ee:	681b      	ldr	r3, [r3, #0]
      switch(count){
   d47f0:	3a02      	subs	r2, #2
        }
      }
      count++;
    }
    else{
      int dataval = shiftedtxdata + txdata;
   d47f2:	4418      	add	r0, r3
      switch(count){
   d47f4:	2a1e      	cmp	r2, #30
   d47f6:	f200 81c1 	bhi.w	d4b7c <loop+0x400>
   d47fa:	e8df f012 	tbh	[pc, r2, lsl #1]
   d47fe:	001f      	.short	0x001f
   d4800:	001f01bf 	.word	0x001f01bf
   d4804:	002201bf 	.word	0x002201bf
   d4808:	002501bf 	.word	0x002501bf
   d480c:	002801bf 	.word	0x002801bf
   d4810:	002b01bf 	.word	0x002b01bf
   d4814:	002e01bf 	.word	0x002e01bf
   d4818:	003101bf 	.word	0x003101bf
   d481c:	003401bf 	.word	0x003401bf
   d4820:	003701bf 	.word	0x003701bf
   d4824:	003a01bf 	.word	0x003a01bf
   d4828:	003d01bf 	.word	0x003d01bf
   d482c:	004001bf 	.word	0x004001bf
   d4830:	004301bf 	.word	0x004301bf
   d4834:	01bf01bf 	.word	0x01bf01bf
   d4838:	004601bf 	.word	0x004601bf
        case 2 :
        case 4 :
          data.framelen = dataval;
   d483c:	4b3d      	ldr	r3, [pc, #244]	; (d4934 <loop+0x1b8>)
   d483e:	8018      	strh	r0, [r3, #0]
        break;
   d4840:	e19c      	b.n	d4b7c <loop+0x400>
        case 6 :
          data.pm10_standard = dataval;
   d4842:	4b3c      	ldr	r3, [pc, #240]	; (d4934 <loop+0x1b8>)
   d4844:	8058      	strh	r0, [r3, #2]
        break;
   d4846:	e199      	b.n	d4b7c <loop+0x400>
        case 8 :
          data.pm25_standard = dataval;
   d4848:	4b3a      	ldr	r3, [pc, #232]	; (d4934 <loop+0x1b8>)
   d484a:	8098      	strh	r0, [r3, #4]
        break;
   d484c:	e196      	b.n	d4b7c <loop+0x400>
        case 10 :
          data.pm100_standard = dataval;
   d484e:	4b39      	ldr	r3, [pc, #228]	; (d4934 <loop+0x1b8>)
   d4850:	80d8      	strh	r0, [r3, #6]
        break;
   d4852:	e193      	b.n	d4b7c <loop+0x400>
        case 12 :
          data.pm10_env = dataval;
   d4854:	4b37      	ldr	r3, [pc, #220]	; (d4934 <loop+0x1b8>)
   d4856:	8118      	strh	r0, [r3, #8]
        break;
   d4858:	e190      	b.n	d4b7c <loop+0x400>
        case 14 :
          data.pm25_env = dataval;
   d485a:	4b36      	ldr	r3, [pc, #216]	; (d4934 <loop+0x1b8>)
   d485c:	8158      	strh	r0, [r3, #10]
        break;
   d485e:	e18d      	b.n	d4b7c <loop+0x400>
        case 16 :
          data.pm100_env = dataval;
   d4860:	4b34      	ldr	r3, [pc, #208]	; (d4934 <loop+0x1b8>)
   d4862:	8198      	strh	r0, [r3, #12]
        break;
   d4864:	e18a      	b.n	d4b7c <loop+0x400>
        case 18 :
          data.particles_03um = dataval;
   d4866:	4b33      	ldr	r3, [pc, #204]	; (d4934 <loop+0x1b8>)
   d4868:	81d8      	strh	r0, [r3, #14]
        break;
   d486a:	e187      	b.n	d4b7c <loop+0x400>
        case 20 :
          data.particles_05um = dataval;
   d486c:	4b31      	ldr	r3, [pc, #196]	; (d4934 <loop+0x1b8>)
   d486e:	8218      	strh	r0, [r3, #16]
        break;
   d4870:	e184      	b.n	d4b7c <loop+0x400>
        case 22 :
          data.particles_10um = dataval;
   d4872:	4b30      	ldr	r3, [pc, #192]	; (d4934 <loop+0x1b8>)
   d4874:	8258      	strh	r0, [r3, #18]
        break;
   d4876:	e181      	b.n	d4b7c <loop+0x400>
        case 24 :
          data.particles_25um = dataval;
   d4878:	4b2e      	ldr	r3, [pc, #184]	; (d4934 <loop+0x1b8>)
   d487a:	8298      	strh	r0, [r3, #20]
        break;
   d487c:	e17e      	b.n	d4b7c <loop+0x400>
        case 26 :
          data.particles_50um = dataval;
   d487e:	4b2d      	ldr	r3, [pc, #180]	; (d4934 <loop+0x1b8>)
   d4880:	82d8      	strh	r0, [r3, #22]
        break;
   d4882:	e17b      	b.n	d4b7c <loop+0x400>
        case 28 :
          data.particles_100um = dataval;
   d4884:	4b2b      	ldr	r3, [pc, #172]	; (d4934 <loop+0x1b8>)
   d4886:	8318      	strh	r0, [r3, #24]
        break;
   d4888:	e178      	b.n	d4b7c <loop+0x400>
        case 32 :
          data.checksum = dataval;
   d488a:	4c2a      	ldr	r4, [pc, #168]	; (d4934 <loop+0x1b8>)
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
   d488c:	4e2a      	ldr	r6, [pc, #168]	; (d4938 <loop+0x1bc>)
        break;
        case 28 :
          data.particles_100um = dataval;
        break;
        case 32 :
          data.checksum = dataval;
   d488e:	83a0      	strh	r0, [r4, #28]
          //RTC data collection
          now = rtc.now();
   d4890:	a817      	add	r0, sp, #92	; 0x5c
   d4892:	f002 f99f 	bl	d6bd4 <_ZN10RTC_DS32313nowEv>
   d4896:	4b29      	ldr	r3, [pc, #164]	; (d493c <loop+0x1c0>)
   d4898:	9817      	ldr	r0, [sp, #92]	; 0x5c
   d489a:	6018      	str	r0, [r3, #0]
   d489c:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
          //Temp and humidity code
          humd = htu.readHumidity();
   d48a0:	4827      	ldr	r0, [pc, #156]	; (d4940 <loop+0x1c4>)
          data.particles_100um = dataval;
        break;
        case 32 :
          data.checksum = dataval;
          //RTC data collection
          now = rtc.now();
   d48a2:	809a      	strh	r2, [r3, #4]
          //Temp and humidity code
          humd = htu.readHumidity();
   d48a4:	f000 fa40 	bl	d4d28 <_ZN15Adafruit_Si702112readHumidityEv>
          temp = htu.readTemperature();
   d48a8:	4825      	ldr	r0, [pc, #148]	; (d4940 <loop+0x1c4>)
        case 32 :
          data.checksum = dataval;
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
   d48aa:	ed86 0a00 	vstr	s0, [r6]
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
   d48ae:	ed9f 8a25 	vldr	s16, [pc, #148]	; d4944 <loop+0x1c8>
          data.checksum = dataval;
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
   d48b2:	f000 fa7d 	bl	d4db0 <_ZN15Adafruit_Si702115readTemperatureEv>
          humd = round(100*humd)/100;
   d48b6:	edd6 7a00 	vldr	s15, [r6]
   d48ba:	ee67 7a88 	vmul.f32	s15, s15, s16
          data.checksum = dataval;
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
   d48be:	eef0 8a40 	vmov.f32	s17, s0
static inline
T constrain (T amt, U low, V high) { return ((amt)<(low)?(low):((amt)>(high)?(high):(amt))); }

template <typename T>
static inline
T round (T x) { return ((x)>=0?(long)((x)+0.5):(long)((x)-0.5)); }
   d48c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d48c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48ca:	ee17 0a90 	vmov	r0, s15
   d48ce:	db06      	blt.n	d48de <loop+0x162>
   d48d0:	f004 f98c 	bl	d8bec <__aeabi_f2d>
   d48d4:	2200      	movs	r2, #0
   d48d6:	4b1c      	ldr	r3, [pc, #112]	; (d4948 <loop+0x1cc>)
   d48d8:	f004 f82a 	bl	d8930 <__adddf3>
   d48dc:	e005      	b.n	d48ea <loop+0x16e>
   d48de:	f004 f985 	bl	d8bec <__aeabi_f2d>
   d48e2:	2200      	movs	r2, #0
   d48e4:	4b18      	ldr	r3, [pc, #96]	; (d4948 <loop+0x1cc>)
   d48e6:	f004 f821 	bl	d892c <__aeabi_dsub>
   d48ea:	f004 fbe5 	bl	d90b8 <__aeabi_d2iz>
   d48ee:	ee07 0a90 	vmov	s15, r0
   d48f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          humd = round(100*humd)/100;
          temp = round(100*temp)/100;
   d48f6:	ee28 0a88 	vmul.f32	s0, s17, s16
          //RTC data collection
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
   d48fa:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d48fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   d4902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4906:	ed86 7a00 	vstr	s14, [r6]
   d490a:	ee10 0a10 	vmov	r0, s0
   d490e:	db1d      	blt.n	d494c <loop+0x1d0>
   d4910:	f004 f96c 	bl	d8bec <__aeabi_f2d>
   d4914:	2200      	movs	r2, #0
   d4916:	4b0c      	ldr	r3, [pc, #48]	; (d4948 <loop+0x1cc>)
   d4918:	f004 f80a 	bl	d8930 <__adddf3>
   d491c:	e01c      	b.n	d4958 <loop+0x1dc>
   d491e:	bf00      	nop
   d4920:	2003e704 	.word	0x2003e704
   d4924:	000d9519 	.word	0x000d9519
   d4928:	2003d184 	.word	0x2003d184
   d492c:	80000001 	.word	0x80000001
   d4930:	2003d258 	.word	0x2003d258
   d4934:	2003df88 	.word	0x2003df88
   d4938:	2003df74 	.word	0x2003df74
   d493c:	2003d738 	.word	0x2003d738
   d4940:	2003dfac 	.word	0x2003dfac
   d4944:	42c80000 	.word	0x42c80000
   d4948:	3fe00000 	.word	0x3fe00000
   d494c:	f004 f94e 	bl	d8bec <__aeabi_f2d>
   d4950:	2200      	movs	r2, #0
   d4952:	4b91      	ldr	r3, [pc, #580]	; (d4b98 <loop+0x41c>)
   d4954:	f003 ffea 	bl	d892c <__aeabi_dsub>
   d4958:	f004 fbae 	bl	d90b8 <__aeabi_d2iz>
   d495c:	ee07 0a90 	vmov	s15, r0
   d4960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
          temp = round(100*temp)/100;
          //Print header
          if(header_done>0){
   d4964:	f8df 8298 	ldr.w	r8, [pc, #664]	; d4c00 <loop+0x484>
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
          temp = round(100*temp)/100;
   d4968:	4f8c      	ldr	r7, [pc, #560]	; (d4b9c <loop+0x420>)
          //Print header
          if(header_done>0){
   d496a:	f8d8 3000 	ldr.w	r3, [r8]
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
          temp = round(100*temp)/100;
   d496e:	ee87 7a88 	vdiv.f32	s14, s15, s16
          //Print header
          if(header_done>0){
   d4972:	2b00      	cmp	r3, #0
          now = rtc.now();
          //Temp and humidity code
          humd = htu.readHumidity();
          temp = htu.readTemperature();
          humd = round(100*humd)/100;
          temp = round(100*temp)/100;
   d4974:	ed87 7a00 	vstr	s14, [r7]
          //Print header
          if(header_done>0){
   d4978:	dc1d      	bgt.n	d49b6 <loop+0x23a>
//==============================================================================
/**
 * \class PrintFile
 * \brief FatFile with Print.
 */
class PrintFile : public FatFile, public Print {
   d497a:	f8df 9258 	ldr.w	r9, [pc, #600]	; d4bd4 <loop+0x458>
   d497e:	f109 0c08 	add.w	ip, r9, #8
   d4982:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4986:	f10d 0e64 	add.w	lr, sp, #100	; 0x64
   d498a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d498e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d4992:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d4996:	f8dc 3000 	ldr.w	r3, [ip]
   d499a:	f8ce 3000 	str.w	r3, [lr]
const unsigned char BIN = 2;

class String;
class __FlashStringHelper;

class Print
   d499e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d49a2:	9318      	str	r3, [sp, #96]	; 0x60
          }
          else{
            writeHeader1(sdfile1, sdfilename);
   d49a4:	497e      	ldr	r1, [pc, #504]	; (d4ba0 <loop+0x424>)
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
   d49a6:	4b7f      	ldr	r3, [pc, #508]	; (d4ba4 <loop+0x428>)
   d49a8:	9317      	str	r3, [sp, #92]	; 0x5c
   d49aa:	a817      	add	r0, sp, #92	; 0x5c
   d49ac:	f7ff fcec 	bl	d4388 <_Z12writeHeader16SdFilePc>
            header_done=1;  
   d49b0:	2301      	movs	r3, #1
   d49b2:	f8c8 3000 	str.w	r3, [r8]
          }
          //Shinyei Code
          duration1 = pulseIn(Shinyei, LOW);
   d49b6:	4b7c      	ldr	r3, [pc, #496]	; (d4ba8 <loop+0x42c>)
          lowpulseoccupancy1 = lowpulseoccupancy1+duration1;
   d49b8:	f8df 8248 	ldr.w	r8, [pc, #584]	; d4c04 <loop+0x488>
          else{
            writeHeader1(sdfile1, sdfilename);
            header_done=1;  
          }
          //Shinyei Code
          duration1 = pulseIn(Shinyei, LOW);
   d49bc:	8818      	ldrh	r0, [r3, #0]
          lowpulseoccupancy1 = lowpulseoccupancy1+duration1;
          if ((millis()-starttime) > sampletime_ms){
   d49be:	f8df 9248 	ldr.w	r9, [pc, #584]	; d4c08 <loop+0x48c>
          else{
            writeHeader1(sdfile1, sdfilename);
            header_done=1;  
          }
          //Shinyei Code
          duration1 = pulseIn(Shinyei, LOW);
   d49c2:	2100      	movs	r1, #0
   d49c4:	f003 fe1c 	bl	d8600 <pulseIn>
   d49c8:	4b78      	ldr	r3, [pc, #480]	; (d4bac <loop+0x430>)
   d49ca:	6018      	str	r0, [r3, #0]
          lowpulseoccupancy1 = lowpulseoccupancy1+duration1;
   d49cc:	f8d8 3000 	ldr.w	r3, [r8]
   d49d0:	4418      	add	r0, r3
   d49d2:	f8c8 0000 	str.w	r0, [r8]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d49d6:	f002 fa01 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
          if ((millis()-starttime) > sampletime_ms){
   d49da:	f8d9 3000 	ldr.w	r3, [r9]
   d49de:	1ac0      	subs	r0, r0, r3
   d49e0:	4b73      	ldr	r3, [pc, #460]	; (d4bb0 <loop+0x434>)
   d49e2:	681b      	ldr	r3, [r3, #0]
   d49e4:	4298      	cmp	r0, r3
   d49e6:	f240 80be 	bls.w	d4b66 <loop+0x3ea>
            ratio1 = (lowpulseoccupancy1/((millis()-starttime)*10.0));
   d49ea:	f8d8 0000 	ldr.w	r0, [r8]
   d49ee:	f8df a21c 	ldr.w	sl, [pc, #540]	; d4c0c <loop+0x490>
   d49f2:	f004 f8d9 	bl	d8ba8 <__aeabi_ui2d>
   d49f6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   d49fa:	f002 f9ef 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
   d49fe:	f8d9 3000 	ldr.w	r3, [r9]
   d4a02:	1ac0      	subs	r0, r0, r3
   d4a04:	f004 f8d0 	bl	d8ba8 <__aeabi_ui2d>
   d4a08:	2200      	movs	r2, #0
   d4a0a:	4b6a      	ldr	r3, [pc, #424]	; (d4bb4 <loop+0x438>)
   d4a0c:	f004 f942 	bl	d8c94 <__aeabi_dmul>
   d4a10:	4602      	mov	r2, r0
   d4a12:	460b      	mov	r3, r1
   d4a14:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   d4a18:	f004 fa66 	bl	d8ee8 <__aeabi_ddiv>
   d4a1c:	f004 fb74 	bl	d9108 <__aeabi_d2f>
            lowpulseoccupancy1 = 0;
   d4a20:	2300      	movs	r3, #0
   d4a22:	f8c8 3000 	str.w	r3, [r8]
          }
          //Shinyei Code
          duration1 = pulseIn(Shinyei, LOW);
          lowpulseoccupancy1 = lowpulseoccupancy1+duration1;
          if ((millis()-starttime) > sampletime_ms){
            ratio1 = (lowpulseoccupancy1/((millis()-starttime)*10.0));
   d4a26:	f8ca 0000 	str.w	r0, [sl]
            lowpulseoccupancy1 = 0;
            snprintf(pathdata, sizeof(pathdata), "/indata01.php?username=%s&password=%s&dbname=%s&tablename=%s&pm10_std=%d&pm25_std=%d&pm100_std=%d&pm10_env=%d&pm25_env=%d&pm100_env=%d&p3=%d&p5=%d&p10=%d&p25=%d&p50=%d&p100=%d&checksum=%d&Temperature=%f&Humidity=%f", username, password, dbname, tablename, data.pm10_standard, data.pm25_standard, data.pm100_standard, data.pm10_env, data.pm25_env, data.pm100_env, data.particles_03um, data.particles_05um, data.particles_10um, data.particles_25um, data.particles_50um, data.particles_100um, data.checksum, temp, humd);
   d4a2a:	6830      	ldr	r0, [r6, #0]
   d4a2c:	f004 f8de 	bl	d8bec <__aeabi_f2d>
   d4a30:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   d4a34:	6838      	ldr	r0, [r7, #0]
   d4a36:	f004 f8d9 	bl	d8bec <__aeabi_f2d>
   d4a3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   d4a3e:	8ba3      	ldrh	r3, [r4, #28]
   d4a40:	930f      	str	r3, [sp, #60]	; 0x3c
   d4a42:	8b23      	ldrh	r3, [r4, #24]
   d4a44:	930e      	str	r3, [sp, #56]	; 0x38
   d4a46:	8ae3      	ldrh	r3, [r4, #22]
   d4a48:	930d      	str	r3, [sp, #52]	; 0x34
   d4a4a:	8aa3      	ldrh	r3, [r4, #20]
   d4a4c:	930c      	str	r3, [sp, #48]	; 0x30
   d4a4e:	8a63      	ldrh	r3, [r4, #18]
   d4a50:	930b      	str	r3, [sp, #44]	; 0x2c
   d4a52:	8a23      	ldrh	r3, [r4, #16]
   d4a54:	930a      	str	r3, [sp, #40]	; 0x28
   d4a56:	89e3      	ldrh	r3, [r4, #14]
   d4a58:	9309      	str	r3, [sp, #36]	; 0x24
   d4a5a:	89a3      	ldrh	r3, [r4, #12]
   d4a5c:	9308      	str	r3, [sp, #32]
   d4a5e:	8963      	ldrh	r3, [r4, #10]
   d4a60:	9307      	str	r3, [sp, #28]
   d4a62:	8923      	ldrh	r3, [r4, #8]
   d4a64:	9306      	str	r3, [sp, #24]
   d4a66:	88e3      	ldrh	r3, [r4, #6]
   d4a68:	9305      	str	r3, [sp, #20]
   d4a6a:	88a3      	ldrh	r3, [r4, #4]
   d4a6c:	9304      	str	r3, [sp, #16]
   d4a6e:	8863      	ldrh	r3, [r4, #2]
   d4a70:	9303      	str	r3, [sp, #12]
   d4a72:	4b51      	ldr	r3, [pc, #324]	; (d4bb8 <loop+0x43c>)
   d4a74:	9302      	str	r3, [sp, #8]
   d4a76:	4b51      	ldr	r3, [pc, #324]	; (d4bbc <loop+0x440>)
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	4b51      	ldr	r3, [pc, #324]	; (d4bc0 <loop+0x444>)
   d4a7c:	4a51      	ldr	r2, [pc, #324]	; (d4bc4 <loop+0x448>)
   d4a7e:	9300      	str	r3, [sp, #0]
   d4a80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4a84:	4b50      	ldr	r3, [pc, #320]	; (d4bc8 <loop+0x44c>)
   d4a86:	4851      	ldr	r0, [pc, #324]	; (d4bcc <loop+0x450>)
   d4a88:	f002 fbcc 	bl	d7224 <snprintf>
            Serial.println(pathdata);
   d4a8c:	f003 f818 	bl	d7ac0 <_Z16_fetch_usbserialv>
   d4a90:	494e      	ldr	r1, [pc, #312]	; (d4bcc <loop+0x450>)
   d4a92:	f002 fdf1 	bl	d7678 <_ZN5Print7printlnEPKc>
            snprintf(jsondata, sizeof(jsondata), "{\"time\": \"%ld\", \"pm10\":\"%d\", \"pm25\":\"%d\", \"pm100\":\"%d\", \"pn03\":\"%d\", \"pn05\":\"%d\", \"pn10\":\"%d\", \"pn25\":\"%d\", \"pn50\":\"%d\", \"pn100\":\"%d\", \"Shinyei\":\"%f\", \"temp\":\"%f\", \"humidity\":\"%f\"}", now.unixtime(), data.pm10_standard, data.pm25_standard, data.pm100_standard, data.particles_03um, data.particles_05um, data.particles_10um, data.particles_25um, data.particles_50um, data.particles_100um, ratio1, temp, humd);
   d4a96:	484e      	ldr	r0, [pc, #312]	; (d4bd0 <loop+0x454>)
   d4a98:	f002 f806 	bl	d6aa8 <_ZNK8DateTime8unixtimeEv>
   d4a9c:	4680      	mov	r8, r0
   d4a9e:	6830      	ldr	r0, [r6, #0]
   d4aa0:	f004 f8a4 	bl	d8bec <__aeabi_f2d>
   d4aa4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
   d4aa8:	6838      	ldr	r0, [r7, #0]
   d4aaa:	4f4a      	ldr	r7, [pc, #296]	; (d4bd4 <loop+0x458>)
   d4aac:	f004 f89e 	bl	d8bec <__aeabi_f2d>
   d4ab0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d4ab4:	f8da 0000 	ldr.w	r0, [sl]
   d4ab8:	f004 f898 	bl	d8bec <__aeabi_f2d>
   d4abc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4ac0:	8b23      	ldrh	r3, [r4, #24]
   d4ac2:	9308      	str	r3, [sp, #32]
   d4ac4:	8ae3      	ldrh	r3, [r4, #22]
   d4ac6:	9307      	str	r3, [sp, #28]
   d4ac8:	8aa3      	ldrh	r3, [r4, #20]
   d4aca:	9306      	str	r3, [sp, #24]
   d4acc:	8a63      	ldrh	r3, [r4, #18]
   d4ace:	9305      	str	r3, [sp, #20]
   d4ad0:	8a23      	ldrh	r3, [r4, #16]
   d4ad2:	9304      	str	r3, [sp, #16]
   d4ad4:	89e3      	ldrh	r3, [r4, #14]
   d4ad6:	9303      	str	r3, [sp, #12]
   d4ad8:	88e3      	ldrh	r3, [r4, #6]
   d4ada:	9302      	str	r3, [sp, #8]
   d4adc:	88a3      	ldrh	r3, [r4, #4]
   d4ade:	9301      	str	r3, [sp, #4]
   d4ae0:	8863      	ldrh	r3, [r4, #2]
   d4ae2:	9300      	str	r3, [sp, #0]
   d4ae4:	4a3c      	ldr	r2, [pc, #240]	; (d4bd8 <loop+0x45c>)
   d4ae6:	483d      	ldr	r0, [pc, #244]	; (d4bdc <loop+0x460>)
   d4ae8:	4643      	mov	r3, r8
   d4aea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4aee:	f107 0608 	add.w	r6, r7, #8
   d4af2:	f002 fb97 	bl	d7224 <snprintf>
   d4af6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4af8:	ac19      	add	r4, sp, #100	; 0x64
   d4afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4afc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4afe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b00:	6833      	ldr	r3, [r6, #0]
   d4b02:	6023      	str	r3, [r4, #0]
   d4b04:	687b      	ldr	r3, [r7, #4]
   d4b06:	9318      	str	r3, [sp, #96]	; 0x60
            logData1(sdfile1, sdfilename); 
   d4b08:	4925      	ldr	r1, [pc, #148]	; (d4ba0 <loop+0x424>)
   d4b0a:	4b26      	ldr	r3, [pc, #152]	; (d4ba4 <loop+0x428>)
   d4b0c:	9317      	str	r3, [sp, #92]	; 0x5c
   d4b0e:	a817      	add	r0, sp, #92	; 0x5c
   d4b10:	f7ff fcda 	bl	d44c8 <_Z8logData16SdFilePc>

            request.ip = IPAddress(128, 153, 15, 208);
   d4b14:	23d0      	movs	r3, #208	; 0xd0
   d4b16:	9300      	str	r3, [sp, #0]
   d4b18:	2299      	movs	r2, #153	; 0x99
   d4b1a:	230f      	movs	r3, #15
   d4b1c:	2180      	movs	r1, #128	; 0x80
   d4b1e:	a817      	add	r0, sp, #92	; 0x5c

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d4b20:	ae18      	add	r6, sp, #96	; 0x60
   d4b22:	f002 ff65 	bl	d79f0 <_ZN9IPAddressC1Ehhhh>
   d4b26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4b28:	4f2d      	ldr	r7, [pc, #180]	; (d4be0 <loop+0x464>)
   d4b2a:	f107 0414 	add.w	r4, r7, #20
   d4b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4b30:	6833      	ldr	r3, [r6, #0]
   d4b32:	7023      	strb	r3, [r4, #0]
            request.port = portnum;
   d4b34:	4b2b      	ldr	r3, [pc, #172]	; (d4be4 <loop+0x468>)
            request.path = pathdata;
   d4b36:	4925      	ldr	r1, [pc, #148]	; (d4bcc <loop+0x450>)
            Serial.println(pathdata);
            snprintf(jsondata, sizeof(jsondata), "{\"time\": \"%ld\", \"pm10\":\"%d\", \"pm25\":\"%d\", \"pm100\":\"%d\", \"pn03\":\"%d\", \"pn05\":\"%d\", \"pn10\":\"%d\", \"pn25\":\"%d\", \"pn50\":\"%d\", \"pn100\":\"%d\", \"Shinyei\":\"%f\", \"temp\":\"%f\", \"humidity\":\"%f\"}", now.unixtime(), data.pm10_standard, data.pm25_standard, data.pm100_standard, data.particles_03um, data.particles_05um, data.particles_10um, data.particles_25um, data.particles_50um, data.particles_100um, ratio1, temp, humd);
            logData1(sdfile1, sdfilename); 

            request.ip = IPAddress(128, 153, 15, 208);
            request.port = portnum;
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	63bb      	str	r3, [r7, #56]	; 0x38
            request.path = pathdata;
   d4b3c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d4b40:	f002 fcf2 	bl	d7528 <_ZN6StringaSEPKc>
        request(aRequest, aResponse, (http_header_t*)NULL, HTTP_METHOD_DELETE);
    }

    void get(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
   d4b44:	4b28      	ldr	r3, [pc, #160]	; (d4be8 <loop+0x46c>)
   d4b46:	4a29      	ldr	r2, [pc, #164]	; (d4bec <loop+0x470>)
   d4b48:	9300      	str	r3, [sp, #0]
   d4b4a:	4639      	mov	r1, r7
   d4b4c:	4b28      	ldr	r3, [pc, #160]	; (d4bf0 <loop+0x474>)
   d4b4e:	4829      	ldr	r0, [pc, #164]	; (d4bf4 <loop+0x478>)
   d4b50:	f000 fabc 	bl	d50cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
            http.get(request, response, headers);
            Serial.println("Sending Data");
   d4b54:	f002 ffb4 	bl	d7ac0 <_Z16_fetch_usbserialv>
   d4b58:	4927      	ldr	r1, [pc, #156]	; (d4bf8 <loop+0x47c>)
   d4b5a:	f002 fd8d 	bl	d7678 <_ZN5Print7printlnEPKc>
   d4b5e:	f002 f93d 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
            
            starttime = millis();
   d4b62:	f8c9 0000 	str.w	r0, [r9]
          }
          Serial1.end();
   d4b66:	f003 f81b 	bl	d7ba0 <_Z22__fetch_global_Serial1v>
   d4b6a:	f003 f813 	bl	d7b94 <_ZN11USARTSerial3endEv>
          Serial1.begin(9600, SERIAL_8N1);
   d4b6e:	f003 f817 	bl	d7ba0 <_Z22__fetch_global_Serial1v>
   d4b72:	2200      	movs	r2, #0
   d4b74:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4b78:	f003 f808 	bl	d7b8c <_ZN11USARTSerial5beginEmm>
        break;
        default :
        break;
      }
      count++;
   d4b7c:	682b      	ldr	r3, [r5, #0]
   d4b7e:	3301      	adds	r3, #1
   d4b80:	602b      	str	r3, [r5, #0]
    }
    if(count == 33){
   d4b82:	682b      	ldr	r3, [r5, #0]
   d4b84:	2b21      	cmp	r3, #33	; 0x21
      count = 1;
   d4b86:	bf02      	ittt	eq
   d4b88:	4b1c      	ldreq	r3, [pc, #112]	; (d4bfc <loop+0x480>)
   d4b8a:	2201      	moveq	r2, #1
   d4b8c:	601a      	streq	r2, [r3, #0]
    }
  }
}
   d4b8e:	b022      	add	sp, #136	; 0x88
   d4b90:	ecbd 8b02 	vpop	{d8}
   d4b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4b98:	3fe00000 	.word	0x3fe00000
   d4b9c:	2003e3bc 	.word	0x2003e3bc
   d4ba0:	2003d1a0 	.word	0x2003d1a0
   d4ba4:	000d9410 	.word	0x000d9410
   d4ba8:	2003d170 	.word	0x2003d170
   d4bac:	2003df80 	.word	0x2003df80
   d4bb0:	2003d188 	.word	0x2003d188
   d4bb4:	40240000 	.word	0x40240000
   d4bb8:	2003d148 	.word	0x2003d148
   d4bbc:	2003d1b4 	.word	0x2003d1b4
   d4bc0:	2003d18c 	.word	0x2003d18c
   d4bc4:	000d9527 	.word	0x000d9527
   d4bc8:	2003d15c 	.word	0x2003d15c
   d4bcc:	2003dfd4 	.word	0x2003dfd4
   d4bd0:	2003d738 	.word	0x2003d738
   d4bd4:	2003db5c 	.word	0x2003db5c
   d4bd8:	000d95fe 	.word	0x000d95fe
   d4bdc:	2003db8c 	.word	0x2003db8c
   d4be0:	2003d268 	.word	0x2003d268
   d4be4:	2003d1e4 	.word	0x2003d1e4
   d4be8:	000d96b3 	.word	0x000d96b3
   d4bec:	2003dfbc 	.word	0x2003dfbc
   d4bf0:	2003d1c8 	.word	0x2003d1c8
   d4bf4:	2003d740 	.word	0x2003d740
   d4bf8:	000d96b7 	.word	0x000d96b7
   d4bfc:	2003d184 	.word	0x2003d184
   d4c00:	2003df84 	.word	0x2003df84
   d4c04:	2003df7c 	.word	0x2003df7c
   d4c08:	2003d25c 	.word	0x2003d25c
   d4c0c:	2003d260 	.word	0x2003d260

000d4c10 <_GLOBAL__sub_I_wifissid>:
  file.print(humdl);
  file.print('.');
  file.print(humdr);
  file.println();
  file.close();
   d4c10:	b570      	push	{r4, r5, r6, lr}
// char sensorType[] = "POTS006";
// char ch1[20] = "1001";
// char ch2[20] = "1002";
char token[200] = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0aW1lc3RhbXAiOjE1MzI0NTY0ODcsImRldmljZV9pZCI6IkRFVklDRTAwMSIsImFjY291bnRfaWQiOiJQT1RTREFNMDEifQ.2-uok5PvRILXwSINDMdo0vT-KM8hHcVJr-BDuOEx-GQ";
//Http variables
HttpClient http;
   d4c12:	4c30      	ldr	r4, [pc, #192]	; (d4cd4 <_GLOBAL__sub_I_wifissid+0xc4>)
   d4c14:	4d30      	ldr	r5, [pc, #192]	; (d4cd8 <_GLOBAL__sub_I_wifissid+0xc8>)
 * path	 request path
 * port     request port
 * body	 request body
 */
typedef struct
{
   d4c16:	4e31      	ldr	r6, [pc, #196]	; (d4cdc <_GLOBAL__sub_I_wifissid+0xcc>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4c18:	f002 f860 	bl	d6cdc <HAL_Pin_Map>
#include "HTU21D.h"
#include "HttpClient.h"
#include "Adafruit_Si7021.h"

//to be able to use without wifi basically the code will still run when wifi is down
SYSTEM_THREAD(ENABLED);
   d4c1c:	2100      	movs	r1, #0
   d4c1e:	2001      	movs	r0, #1
   d4c20:	f002 fa64 	bl	d70ec <system_thread_set_state>
// char sensorType[] = "POTS006";
// char ch1[20] = "1001";
// char ch2[20] = "1002";
char token[200] = "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0aW1lc3RhbXAiOjE1MzI0NTY0ODcsImRldmljZV9pZCI6IkRFVklDRTAwMSIsImFjY291bnRfaWQiOiJQT1RTREFNMDEifQ.2-uok5PvRILXwSINDMdo0vT-KM8hHcVJr-BDuOEx-GQ";
//Http variables
HttpClient http;
   d4c24:	4620      	mov	r0, r4
   d4c26:	f000 fa24 	bl	d5072 <_ZN10HttpClientC1Ev>
   d4c2a:	4620      	mov	r0, r4
   d4c2c:	4c2c      	ldr	r4, [pc, #176]	; (d4ce0 <_GLOBAL__sub_I_wifissid+0xd0>)
   d4c2e:	492d      	ldr	r1, [pc, #180]	; (d4ce4 <_GLOBAL__sub_I_wifissid+0xd4>)
   d4c30:	462a      	mov	r2, r5
   d4c32:	f003 fd29 	bl	d8688 <__aeabi_atexit>
   d4c36:	4631      	mov	r1, r6
   d4c38:	4620      	mov	r0, r4
   d4c3a:	f002 fc62 	bl	d7502 <_ZN6StringC1EPK19__FlashStringHelper>
   d4c3e:	f104 0010 	add.w	r0, r4, #16
   d4c42:	f002 fe91 	bl	d7968 <_ZN9IPAddressC1Ev>
   d4c46:	4631      	mov	r1, r6
   d4c48:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4c4c:	f002 fc59 	bl	d7502 <_ZN6StringC1EPK19__FlashStringHelper>
   d4c50:	4631      	mov	r1, r6
   d4c52:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d4c56:	f002 fc54 	bl	d7502 <_ZN6StringC1EPK19__FlashStringHelper>
http_header_t headers[] = {
    { "Accept" , "*/*"},
    { NULL, NULL } // NOTE: Always terminate headers will NULL
};
http_request_t request;
   d4c5a:	4620      	mov	r0, r4
 * HTTP Response struct.
 * status  response status code.
 * body	response body
 */
typedef struct
{
   d4c5c:	4c22      	ldr	r4, [pc, #136]	; (d4ce8 <_GLOBAL__sub_I_wifissid+0xd8>)
   d4c5e:	4923      	ldr	r1, [pc, #140]	; (d4cec <_GLOBAL__sub_I_wifissid+0xdc>)
   d4c60:	462a      	mov	r2, r5
   d4c62:	f003 fd11 	bl	d8688 <__aeabi_atexit>
   d4c66:	4631      	mov	r1, r6
   d4c68:	1d20      	adds	r0, r4, #4
   d4c6a:	f002 fc4a 	bl	d7502 <_ZN6StringC1EPK19__FlashStringHelper>
http_response_t response;
   d4c6e:	462a      	mov	r2, r5
   d4c70:	491f      	ldr	r1, [pc, #124]	; (d4cf0 <_GLOBAL__sub_I_wifissid+0xe0>)
   d4c72:	4620      	mov	r0, r4
   d4c74:	f003 fd08 	bl	d8688 <__aeabi_atexit>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4c78:	4b1e      	ldr	r3, [pc, #120]	; (d4cf4 <_GLOBAL__sub_I_wifissid+0xe4>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4c7a:	481f      	ldr	r0, [pc, #124]	; (d4cf8 <_GLOBAL__sub_I_wifissid+0xe8>)
//SD card
const uint8_t chipSelect = A5;
const uint32_t SAMPLE_INTERVAL_MS = 1000;
int header_done = 0;
SdFat sd;
SdFile sdfile1; 
   d4c7c:	491f      	ldr	r1, [pc, #124]	; (d4cfc <_GLOBAL__sub_I_wifissid+0xec>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4c7e:	2264      	movs	r2, #100	; 0x64
   d4c80:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
   d4c84:	4a1e      	ldr	r2, [pc, #120]	; (d4d00 <_GLOBAL__sub_I_wifissid+0xf0>)
   d4c86:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   d4c8a:	2201      	movs	r2, #1
   d4c8c:	2400      	movs	r4, #0
   d4c8e:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4c92:	4a1c      	ldr	r2, [pc, #112]	; (d4d04 <_GLOBAL__sub_I_wifissid+0xf4>)
   d4c94:	71dc      	strb	r4, [r3, #7]
   d4c96:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
   d4c9a:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
   d4c9e:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
   d4ca2:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   d4ca6:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
   d4caa:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
   d4cae:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
   d4cb2:	7204      	strb	r4, [r0, #8]
 public:
  SdFile() {}
   d4cb4:	4b14      	ldr	r3, [pc, #80]	; (d4d08 <_GLOBAL__sub_I_wifissid+0xf8>)
   d4cb6:	7244      	strb	r4, [r0, #9]
   d4cb8:	462a      	mov	r2, r5
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4cba:	6044      	str	r4, [r0, #4]
   d4cbc:	6003      	str	r3, [r0, #0]
   d4cbe:	f003 fce3 	bl	d8688 <__aeabi_atexit>
char sdfilename[20] = "argon18.csv";//always use .csv
//RTC
DateTime now;
   d4cc2:	4621      	mov	r1, r4
   d4cc4:	4811      	ldr	r0, [pc, #68]	; (d4d0c <_GLOBAL__sub_I_wifissid+0xfc>)
   d4cc6:	f001 fe8d 	bl	d69e4 <_ZN8DateTimeC1Em>
RTC_DS3231 rtc;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
//temp and humidity
Adafruit_Si7021 htu;
   d4cca:	4811      	ldr	r0, [pc, #68]	; (d4d10 <_GLOBAL__sub_I_wifissid+0x100>)
  file.print(humdl);
  file.print('.');
  file.print(humdr);
  file.println();
  file.close();
   d4ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
//RTC
DateTime now;
RTC_DS3231 rtc;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
//temp and humidity
Adafruit_Si7021 htu;
   d4cd0:	f000 b824 	b.w	d4d1c <_ZN15Adafruit_Si7021C1Ev>
   d4cd4:	2003d740 	.word	0x2003d740
   d4cd8:	2003d254 	.word	0x2003d254
   d4cdc:	000d9709 	.word	0x000d9709
   d4ce0:	2003d268 	.word	0x2003d268
   d4ce4:	000d4199 	.word	0x000d4199
   d4ce8:	2003dfbc 	.word	0x2003dfbc
   d4cec:	000d4147 	.word	0x000d4147
   d4cf0:	000d4139 	.word	0x000d4139
   d4cf4:	2003d2b4 	.word	0x2003d2b4
   d4cf8:	2003db5c 	.word	0x2003db5c
   d4cfc:	000d40b3 	.word	0x000d40b3
   d4d00:	000d9404 	.word	0x000d9404
   d4d04:	2003e714 	.word	0x2003e714
   d4d08:	000d9410 	.word	0x000d9410
   d4d0c:	2003d738 	.word	0x2003d738
   d4d10:	2003dfac 	.word	0x2003dfac

000d4d14 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4d14:	6803      	ldr	r3, [r0, #0]
   d4d16:	b2c9      	uxtb	r1, r1
   d4d18:	689b      	ldr	r3, [r3, #8]
   d4d1a:	4718      	bx	r3

000d4d1c <_ZN15Adafruit_Si7021C1Ev>:


/**************************************************************************/

Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
   d4d1c:	2240      	movs	r2, #64	; 0x40
   d4d1e:	7202      	strb	r2, [r0, #8]
  sernum_a = sernum_b = 0;
   d4d20:	2200      	movs	r2, #0
   d4d22:	6042      	str	r2, [r0, #4]
   d4d24:	6002      	str	r2, [r0, #0]
}
   d4d26:	4770      	bx	lr

000d4d28 <_ZN15Adafruit_Si702112readHumidityEv>:
  //Serial.println(sernum_b, HEX);

  return true;
}

float Adafruit_Si7021::readHumidity(void) {
   d4d28:	b510      	push	{r4, lr}
   d4d2a:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4d2c:	f003 fc8c 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4d30:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4d34:	f002 ffb3 	bl	d7c9e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASRH_NOHOLD_CMD);
   d4d38:	f003 fc86 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4d3c:	6803      	ldr	r3, [r0, #0]
   d4d3e:	21f5      	movs	r1, #245	; 0xf5
   d4d40:	689b      	ldr	r3, [r3, #8]
   d4d42:	4798      	blx	r3
  Wire.endTransmission(false);
   d4d44:	f003 fc80 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4d48:	2100      	movs	r1, #0
   d4d4a:	f002 ffab 	bl	d7ca4 <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d4d4e:	2019      	movs	r0, #25
   d4d50:	f002 fd46 	bl	d77e0 <delay>

  Wire.requestFrom(_i2caddr, 3);
   d4d54:	f003 fc78 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4d58:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4d5c:	2203      	movs	r2, #3
   d4d5e:	f002 ff95 	bl	d7c8c <_ZN7TwoWire11requestFromEii>
  uint16_t hum = Wire.read();
   d4d62:	f003 fc71 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4d66:	6803      	ldr	r3, [r0, #0]
   d4d68:	695b      	ldr	r3, [r3, #20]
   d4d6a:	4798      	blx	r3
   d4d6c:	b284      	uxth	r4, r0
  hum <<= 8;
  hum |= Wire.read();
   d4d6e:	f003 fc6b 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4d72:	6803      	ldr	r3, [r0, #0]
   d4d74:	695b      	ldr	r3, [r3, #20]
   d4d76:	4798      	blx	r3
   d4d78:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4d7c:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d4d7e:	f003 fc63 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4d82:	6803      	ldr	r3, [r0, #0]
   d4d84:	695b      	ldr	r3, [r3, #20]
   d4d86:	4798      	blx	r3

  float humidity = hum;
   d4d88:	b2a3      	uxth	r3, r4
   d4d8a:	ee07 3a90 	vmov	s15, r3
  humidity *= 125;
   d4d8e:	ed9f 7a06 	vldr	s14, [pc, #24]	; d4da8 <_ZN15Adafruit_Si702112readHumidityEv+0x80>
  uint16_t hum = Wire.read();
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
   d4d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
  humidity *= 125;
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d4d96:	eeb9 0a08 	vmov.f32	s0, #152	; 0xc0c00000 -6.0
  hum <<= 8;
  hum |= Wire.read();
  uint8_t chxsum = Wire.read();

  float humidity = hum;
  humidity *= 125;
   d4d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
  humidity /= 65536;
  humidity -= 6;

  return humidity;
}
   d4d9e:	ed9f 7a03 	vldr	s14, [pc, #12]	; d4dac <_ZN15Adafruit_Si702112readHumidityEv+0x84>
   d4da2:	eea7 0a87 	vfma.f32	s0, s15, s14
   d4da6:	bd10      	pop	{r4, pc}
   d4da8:	42fa0000 	.word	0x42fa0000
   d4dac:	37800000 	.word	0x37800000

000d4db0 <_ZN15Adafruit_Si702115readTemperatureEv>:

float Adafruit_Si7021::readTemperature(void) {
   d4db0:	b510      	push	{r4, lr}
   d4db2:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4db4:	f003 fc48 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4db8:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4dbc:	f002 ff6f 	bl	d7c9e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_MEASTEMP_NOHOLD_CMD);
   d4dc0:	f003 fc42 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4dc4:	6803      	ldr	r3, [r0, #0]
   d4dc6:	21f3      	movs	r1, #243	; 0xf3
   d4dc8:	689b      	ldr	r3, [r3, #8]
   d4dca:	4798      	blx	r3
  Wire.endTransmission(false);
   d4dcc:	f003 fc3c 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4dd0:	2100      	movs	r1, #0
   d4dd2:	f002 ff67 	bl	d7ca4 <_ZN7TwoWire15endTransmissionEh>
  delay(25);
   d4dd6:	2019      	movs	r0, #25
   d4dd8:	f002 fd02 	bl	d77e0 <delay>

  Wire.requestFrom(_i2caddr, 3);
   d4ddc:	f003 fc34 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4de0:	2203      	movs	r2, #3
   d4de2:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4de6:	f002 ff51 	bl	d7c8c <_ZN7TwoWire11requestFromEii>
  uint16_t temp = Wire.read();
   d4dea:	f003 fc2d 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4dee:	6803      	ldr	r3, [r0, #0]
   d4df0:	695b      	ldr	r3, [r3, #20]
   d4df2:	4798      	blx	r3
   d4df4:	b284      	uxth	r4, r0
  temp <<= 8;
  temp |= Wire.read();
   d4df6:	f003 fc27 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4dfa:	6803      	ldr	r3, [r0, #0]
   d4dfc:	695b      	ldr	r3, [r3, #20]
   d4dfe:	4798      	blx	r3
   d4e00:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4e04:	b204      	sxth	r4, r0
  uint8_t chxsum = Wire.read();
   d4e06:	f003 fc1f 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4e0a:	6803      	ldr	r3, [r0, #0]
   d4e0c:	695b      	ldr	r3, [r3, #20]
   d4e0e:	4798      	blx	r3

  float temperature = temp;
  temperature *= 175.72;
   d4e10:	b2a0      	uxth	r0, r4
   d4e12:	ee07 0a90 	vmov	s15, r0
   d4e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4e1a:	ee17 0a90 	vmov	r0, s15
   d4e1e:	f003 fee5 	bl	d8bec <__aeabi_f2d>
   d4e22:	a310      	add	r3, pc, #64	; (adr r3, d4e64 <_ZN15Adafruit_Si702115readTemperatureEv+0xb4>)
   d4e24:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e28:	f003 ff34 	bl	d8c94 <__aeabi_dmul>
   d4e2c:	f004 f96c 	bl	d9108 <__aeabi_d2f>
  temperature /= 65536;
  temperature -= 46.85;
   d4e30:	eddf 7a0b 	vldr	s15, [pc, #44]	; d4e60 <_ZN15Adafruit_Si702115readTemperatureEv+0xb0>
   d4e34:	ee07 0a10 	vmov	s14, r0
   d4e38:	ee67 7a27 	vmul.f32	s15, s14, s15
   d4e3c:	ee17 0a90 	vmov	r0, s15
   d4e40:	f003 fed4 	bl	d8bec <__aeabi_f2d>
   d4e44:	a304      	add	r3, pc, #16	; (adr r3, d4e58 <_ZN15Adafruit_Si702115readTemperatureEv+0xa8>)
   d4e46:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e4a:	f003 fd6f 	bl	d892c <__aeabi_dsub>

  return temperature;
   d4e4e:	f004 f95b 	bl	d9108 <__aeabi_d2f>
}
   d4e52:	ee00 0a10 	vmov	s0, r0
   d4e56:	bd10      	pop	{r4, pc}
   d4e58:	cccccccd 	.word	0xcccccccd
   d4e5c:	40476ccc 	.word	0x40476ccc
   d4e60:	37800000 	.word	0x37800000
   d4e64:	3d70a3d7 	.word	0x3d70a3d7
   d4e68:	4065f70a 	.word	0x4065f70a

000d4e6c <_ZN15Adafruit_Si70215resetEv>:

void Adafruit_Si7021::reset(void) {
   d4e6c:	b510      	push	{r4, lr}
   d4e6e:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4e70:	f003 fbea 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4e74:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4e78:	f002 ff11 	bl	d7c9e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_RESET_CMD);
   d4e7c:	f003 fbe4 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4e80:	6803      	ldr	r3, [r0, #0]
   d4e82:	21fe      	movs	r1, #254	; 0xfe
   d4e84:	689b      	ldr	r3, [r3, #8]
   d4e86:	4798      	blx	r3
  Wire.endTransmission();
   d4e88:	f003 fbde 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4e8c:	f002 ff0e 	bl	d7cac <_ZN7TwoWire15endTransmissionEv>
  delay(50);
   d4e90:	2032      	movs	r0, #50	; 0x32
}
   d4e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Adafruit_Si7021::reset(void) {
  Wire.beginTransmission(_i2caddr);
  Wire.write((uint8_t)SI7021_RESET_CMD);
  Wire.endTransmission();
  delay(50);
   d4e96:	f002 bca3 	b.w	d77e0 <delay>

000d4e9a <_ZN15Adafruit_Si702116readSerialNumberEv>:
}

void Adafruit_Si7021::readSerialNumber(void) {
   d4e9a:	b510      	push	{r4, lr}
   d4e9c:	4604      	mov	r4, r0
  Wire.beginTransmission(_i2caddr);
   d4e9e:	f003 fbd3 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4ea2:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4ea6:	f002 fefa 	bl	d7c9e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID1_CMD>>8);
   d4eaa:	f003 fbcd 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4eae:	2100      	movs	r1, #0
   d4eb0:	f7ff ff30 	bl	d4d14 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID1_CMD&0xFF);
   d4eb4:	f003 fbc8 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4eb8:	210f      	movs	r1, #15
   d4eba:	f7ff ff2b 	bl	d4d14 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d4ebe:	f003 fbc3 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4ec2:	f002 fef3 	bl	d7cac <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d4ec6:	f003 fbbf 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4eca:	2208      	movs	r2, #8
   d4ecc:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4ed0:	f002 fedc 	bl	d7c8c <_ZN7TwoWire11requestFromEii>
  sernum_a = Wire.read();
   d4ed4:	f003 fbb8 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4ed8:	6803      	ldr	r3, [r0, #0]
   d4eda:	695b      	ldr	r3, [r3, #20]
   d4edc:	4798      	blx	r3
   d4ede:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4ee0:	f003 fbb2 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4ee4:	6803      	ldr	r3, [r0, #0]
   d4ee6:	695b      	ldr	r3, [r3, #20]
   d4ee8:	4798      	blx	r3
  sernum_a <<= 8;
   d4eea:	6823      	ldr	r3, [r4, #0]
   d4eec:	021b      	lsls	r3, r3, #8
   d4eee:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4ef0:	f003 fbaa 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4ef4:	6803      	ldr	r3, [r0, #0]
   d4ef6:	695b      	ldr	r3, [r3, #20]
   d4ef8:	4798      	blx	r3
   d4efa:	6823      	ldr	r3, [r4, #0]
   d4efc:	4318      	orrs	r0, r3
   d4efe:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4f00:	f003 fba2 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f04:	6803      	ldr	r3, [r0, #0]
   d4f06:	695b      	ldr	r3, [r3, #20]
   d4f08:	4798      	blx	r3
  sernum_a <<= 8;
   d4f0a:	6823      	ldr	r3, [r4, #0]
   d4f0c:	021b      	lsls	r3, r3, #8
   d4f0e:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4f10:	f003 fb9a 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f14:	6803      	ldr	r3, [r0, #0]
   d4f16:	695b      	ldr	r3, [r3, #20]
   d4f18:	4798      	blx	r3
   d4f1a:	6823      	ldr	r3, [r4, #0]
   d4f1c:	4318      	orrs	r0, r3
   d4f1e:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4f20:	f003 fb92 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f24:	6803      	ldr	r3, [r0, #0]
   d4f26:	695b      	ldr	r3, [r3, #20]
   d4f28:	4798      	blx	r3
  sernum_a <<= 8;
   d4f2a:	6823      	ldr	r3, [r4, #0]
   d4f2c:	021b      	lsls	r3, r3, #8
   d4f2e:	6023      	str	r3, [r4, #0]
  sernum_a |= Wire.read();
   d4f30:	f003 fb8a 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f34:	6803      	ldr	r3, [r0, #0]
   d4f36:	695b      	ldr	r3, [r3, #20]
   d4f38:	4798      	blx	r3
   d4f3a:	6823      	ldr	r3, [r4, #0]
   d4f3c:	4318      	orrs	r0, r3
   d4f3e:	6020      	str	r0, [r4, #0]
  Wire.read();
   d4f40:	f003 fb82 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f44:	6803      	ldr	r3, [r0, #0]
   d4f46:	695b      	ldr	r3, [r3, #20]
   d4f48:	4798      	blx	r3

  Wire.beginTransmission(_i2caddr);
   d4f4a:	f003 fb7d 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f4e:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4f52:	f002 fea4 	bl	d7c9e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)SI7021_ID2_CMD>>8);
   d4f56:	f003 fb77 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f5a:	2100      	movs	r1, #0
   d4f5c:	f7ff feda 	bl	d4d14 <_ZN7TwoWire5writeEi>
  Wire.write((uint8_t)SI7021_ID2_CMD&0xFF);
   d4f60:	f003 fb72 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f64:	21c9      	movs	r1, #201	; 0xc9
   d4f66:	f7ff fed5 	bl	d4d14 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
   d4f6a:	f003 fb6d 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f6e:	f002 fe9d 	bl	d7cac <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(_i2caddr, 8);
   d4f72:	f003 fb69 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f76:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d4f7a:	2208      	movs	r2, #8
   d4f7c:	f002 fe86 	bl	d7c8c <_ZN7TwoWire11requestFromEii>
  sernum_b = Wire.read();
   d4f80:	f003 fb62 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f84:	6803      	ldr	r3, [r0, #0]
   d4f86:	695b      	ldr	r3, [r3, #20]
   d4f88:	4798      	blx	r3
   d4f8a:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4f8c:	f003 fb5c 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4f90:	6803      	ldr	r3, [r0, #0]
   d4f92:	695b      	ldr	r3, [r3, #20]
   d4f94:	4798      	blx	r3
  sernum_b <<= 8;
   d4f96:	6863      	ldr	r3, [r4, #4]
   d4f98:	021b      	lsls	r3, r3, #8
   d4f9a:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d4f9c:	f003 fb54 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4fa0:	6803      	ldr	r3, [r0, #0]
   d4fa2:	695b      	ldr	r3, [r3, #20]
   d4fa4:	4798      	blx	r3
   d4fa6:	6863      	ldr	r3, [r4, #4]
   d4fa8:	4318      	orrs	r0, r3
   d4faa:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4fac:	f003 fb4c 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4fb0:	6803      	ldr	r3, [r0, #0]
   d4fb2:	695b      	ldr	r3, [r3, #20]
   d4fb4:	4798      	blx	r3
  sernum_b <<= 8;
   d4fb6:	6863      	ldr	r3, [r4, #4]
   d4fb8:	021b      	lsls	r3, r3, #8
   d4fba:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d4fbc:	f003 fb44 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4fc0:	6803      	ldr	r3, [r0, #0]
   d4fc2:	695b      	ldr	r3, [r3, #20]
   d4fc4:	4798      	blx	r3
   d4fc6:	6863      	ldr	r3, [r4, #4]
   d4fc8:	4318      	orrs	r0, r3
   d4fca:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4fcc:	f003 fb3c 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4fd0:	6803      	ldr	r3, [r0, #0]
   d4fd2:	695b      	ldr	r3, [r3, #20]
   d4fd4:	4798      	blx	r3
  sernum_b <<= 8;
   d4fd6:	6863      	ldr	r3, [r4, #4]
   d4fd8:	021b      	lsls	r3, r3, #8
   d4fda:	6063      	str	r3, [r4, #4]
  sernum_b |= Wire.read();
   d4fdc:	f003 fb34 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4fe0:	6803      	ldr	r3, [r0, #0]
   d4fe2:	695b      	ldr	r3, [r3, #20]
   d4fe4:	4798      	blx	r3
   d4fe6:	6863      	ldr	r3, [r4, #4]
   d4fe8:	4318      	orrs	r0, r3
   d4fea:	6060      	str	r0, [r4, #4]
  Wire.read();
   d4fec:	f003 fb2c 	bl	d8648 <_Z19__fetch_global_Wirev>
   d4ff0:	6803      	ldr	r3, [r0, #0]
}
   d4ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
  sernum_b <<= 8;
  sernum_b |= Wire.read();
  Wire.read();
   d4ff6:	695b      	ldr	r3, [r3, #20]
   d4ff8:	4718      	bx	r3

000d4ffa <_ZN15Adafruit_Si702113readRegister8Eh>:
  Wire.endTransmission();

  //Serial.print("Wrote $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
}

uint8_t Adafruit_Si7021::readRegister8(uint8_t reg) {
   d4ffa:	b538      	push	{r3, r4, r5, lr}
   d4ffc:	4604      	mov	r4, r0
   d4ffe:	460d      	mov	r5, r1
  uint8_t value;
  Wire.beginTransmission(_i2caddr);
   d5000:	f003 fb22 	bl	d8648 <_Z19__fetch_global_Wirev>
   d5004:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d5008:	f002 fe49 	bl	d7c9e <_ZN7TwoWire17beginTransmissionEi>
  Wire.write((uint8_t)reg);
   d500c:	f003 fb1c 	bl	d8648 <_Z19__fetch_global_Wirev>
   d5010:	6803      	ldr	r3, [r0, #0]
   d5012:	4629      	mov	r1, r5
   d5014:	689b      	ldr	r3, [r3, #8]
   d5016:	4798      	blx	r3
  Wire.endTransmission(false);
   d5018:	f003 fb16 	bl	d8648 <_Z19__fetch_global_Wirev>
   d501c:	2100      	movs	r1, #0
   d501e:	f002 fe41 	bl	d7ca4 <_ZN7TwoWire15endTransmissionEh>

  Wire.requestFrom(_i2caddr, 1);
   d5022:	f003 fb11 	bl	d8648 <_Z19__fetch_global_Wirev>
   d5026:	2201      	movs	r2, #1
   d5028:	f994 1008 	ldrsb.w	r1, [r4, #8]
   d502c:	f002 fe2e 	bl	d7c8c <_ZN7TwoWire11requestFromEii>
  value = Wire.read();
   d5030:	f003 fb0a 	bl	d8648 <_Z19__fetch_global_Wirev>
   d5034:	6803      	ldr	r3, [r0, #0]
   d5036:	695b      	ldr	r3, [r3, #20]
   d5038:	4798      	blx	r3

  //Serial.print("Read $"); Serial.print(reg, HEX); Serial.print(": 0x"); Serial.println(value, HEX);
  return value;
}
   d503a:	b2c0      	uxtb	r0, r0
   d503c:	bd38      	pop	{r3, r4, r5, pc}

000d503e <_ZN15Adafruit_Si70215beginEv>:
Adafruit_Si7021::Adafruit_Si7021(void) {
  _i2caddr = SI7021_DEFAULT_ADDRESS;
  sernum_a = sernum_b = 0;
}

bool Adafruit_Si7021::begin(void) {
   d503e:	b510      	push	{r4, lr}
   d5040:	4604      	mov	r4, r0
  Wire.begin();
   d5042:	f003 fb01 	bl	d8648 <_Z19__fetch_global_Wirev>
   d5046:	f002 fe0f 	bl	d7c68 <_ZN7TwoWire5beginEv>

  reset();
   d504a:	4620      	mov	r0, r4
   d504c:	f7ff ff0e 	bl	d4e6c <_ZN15Adafruit_Si70215resetEv>
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d5050:	21e7      	movs	r1, #231	; 0xe7
   d5052:	4620      	mov	r0, r4
   d5054:	f7ff ffd1 	bl	d4ffa <_ZN15Adafruit_Si702113readRegister8Eh>
   d5058:	283a      	cmp	r0, #58	; 0x3a
   d505a:	d104      	bne.n	d5066 <_ZN15Adafruit_Si70215beginEv+0x28>

  readSerialNumber();
   d505c:	4620      	mov	r0, r4
   d505e:	f7ff ff1c 	bl	d4e9a <_ZN15Adafruit_Si702116readSerialNumberEv>

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
   d5062:	2001      	movs	r0, #1
   d5064:	bd10      	pop	{r4, pc}

bool Adafruit_Si7021::begin(void) {
  Wire.begin();

  reset();
  if (readRegister8(SI7021_READRHT_REG_CMD) != 0x3A) return false;
   d5066:	2000      	movs	r0, #0

  //Serial.println(sernum_a, HEX);
  //Serial.println(sernum_b, HEX);

  return true;
}
   d5068:	bd10      	pop	{r4, pc}

000d506a <_GLOBAL__sub_I__ZN15Adafruit_Si7021C2Ev>:
   d506a:	f001 be37 	b.w	d6cdc <HAL_Pin_Map>

000d506e <_GLOBAL__sub_I__ZN6HTU21DC2Ev>:
   d506e:	f001 be35 	b.w	d6cdc <HAL_Pin_Map>

000d5072 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d5072:	b510      	push	{r4, lr}
   d5074:	4604      	mov	r4, r0
   d5076:	f003 f975 	bl	d8364 <_ZN9TCPClientC1Ev>
{

}
   d507a:	4620      	mov	r0, r4
   d507c:	bd10      	pop	{r4, pc}
	...

000d5080 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d5080:	b538      	push	{r3, r4, r5, lr}
   d5082:	4604      	mov	r4, r0
   d5084:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d5086:	f002 fae4 	bl	d7652 <_ZN5Print5printEPKc>
    client.print(": ");
   d508a:	4905      	ldr	r1, [pc, #20]	; (d50a0 <_ZN10HttpClient10sendHeaderEPKcS1_+0x20>)
   d508c:	4620      	mov	r0, r4
   d508e:	f002 fae0 	bl	d7652 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d5092:	4629      	mov	r1, r5
   d5094:	4620      	mov	r0, r4
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d5096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d509a:	f002 baed 	b.w	d7678 <_ZN5Print7printlnEPKc>
   d509e:	bf00      	nop
   d50a0:	000d9785 	.word	0x000d9785

000d50a4 <_ZN10HttpClient10sendHeaderEPKci>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
   d50a4:	b538      	push	{r3, r4, r5, lr}
   d50a6:	4604      	mov	r4, r0
   d50a8:	4615      	mov	r5, r2
    client.print(aHeaderName);
   d50aa:	f002 fad2 	bl	d7652 <_ZN5Print5printEPKc>
    client.print(": ");
   d50ae:	4905      	ldr	r1, [pc, #20]	; (d50c4 <_ZN10HttpClient10sendHeaderEPKci+0x20>)
   d50b0:	4620      	mov	r0, r4
   d50b2:	f002 face 	bl	d7652 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d50b6:	4629      	mov	r1, r5
   d50b8:	4620      	mov	r0, r4
   d50ba:	220a      	movs	r2, #10
    #ifdef LOGGING
    Serial.print(aHeaderName);
    Serial.print(": ");
    Serial.println(aHeaderValue);
    #endif
}
   d50bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void HttpClient::sendHeader(const char* aHeaderName, const int aHeaderValue)
{
    client.print(aHeaderName);
    client.print(": ");
    client.println(aHeaderValue);
   d50c0:	f002 bb37 	b.w	d7732 <_ZN5Print7printlnEii>
   d50c4:	000d9785 	.word	0x000d9785

000d50c8 <_GLOBAL__sub_I__ZN10HttpClientC2Ev>:
   d50c8:	f001 be08 	b.w	d6cdc <HAL_Pin_Map>

000d50cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d50cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d50d0:	460d      	mov	r5, r1
   d50d2:	461e      	mov	r6, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d50d4:	f04f 33ff 	mov.w	r3, #4294967295
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d50d8:	b08f      	sub	sp, #60	; 0x3c
   d50da:	4604      	mov	r4, r0
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d50dc:	6013      	str	r3, [r2, #0]
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d50de:	2100      	movs	r1, #0
   d50e0:	4628      	mov	r0, r5
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d50e2:	4617      	mov	r7, r2
   d50e4:	f002 fa4c 	bl	d7580 <_ZNK6String6equalsEPKc>
   d50e8:	f8d5 8038 	ldr.w	r8, [r5, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d50ec:	b960      	cbnz	r0, d5108 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3c>
   d50ee:	6829      	ldr	r1, [r5, #0]
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d50f0:	f1b8 0f00 	cmp.w	r8, #0
   d50f4:	d002      	beq.n	d50fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x30>
   d50f6:	fa1f f288 	uxth.w	r2, r8
   d50fa:	e000      	b.n	d50fe <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32>
   d50fc:	2250      	movs	r2, #80	; 0x50
   d50fe:	2300      	movs	r3, #0
   d5100:	4620      	mov	r0, r4
   d5102:	f002 fed5 	bl	d7eb0 <_ZN9TCPClient7connectEPKctm>
   d5106:	e014      	b.n	d5132 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x66>
   d5108:	4b74      	ldr	r3, [pc, #464]	; (d52dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>)
   d510a:	9308      	str	r3, [sp, #32]
   d510c:	f105 0c14 	add.w	ip, r5, #20
   d5110:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5114:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
   d5118:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d511c:	f8dc 3000 	ldr.w	r3, [ip]
   d5120:	f88e 3000 	strb.w	r3, [lr]
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d5124:	fa1f f288 	uxth.w	r2, r8
   d5128:	2300      	movs	r3, #0
   d512a:	a908      	add	r1, sp, #32
   d512c:	4620      	mov	r0, r4
   d512e:	f002 ffe9 	bl	d8104 <_ZN9TCPClient7connectE9IPAddresstm>
   d5132:	3000      	adds	r0, #0
   d5134:	bf18      	it	ne
   d5136:	2001      	movne	r0, #1
    } else {
        Serial.println("HttpClient>\tConnection failed.");
    }
    #endif

    if (!connected) {
   d5138:	b918      	cbnz	r0, d5142 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x76>
        client.stop();
   d513a:	4620      	mov	r0, r4
   d513c:	f003 f85f 	bl	d81fe <_ZN9TCPClient4stopEv>
        // If TCP Client can't connect to host, exit here.
        return;
   d5140:	e0c8      	b.n	d52d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x208>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d5142:	9918      	ldr	r1, [sp, #96]	; 0x60
   d5144:	4620      	mov	r0, r4
   d5146:	f002 fa84 	bl	d7652 <_ZN5Print5printEPKc>
    client.print(" ");
   d514a:	4965      	ldr	r1, [pc, #404]	; (d52e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x214>)
   d514c:	4620      	mov	r0, r4
   d514e:	f002 fa80 	bl	d7652 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d5152:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   d5154:	4620      	mov	r0, r4
   d5156:	f002 fa7c 	bl	d7652 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d515a:	4962      	ldr	r1, [pc, #392]	; (d52e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x218>)
   d515c:	4620      	mov	r0, r4
   d515e:	f002 fa78 	bl	d7652 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
    Serial.print(" HTTP/1.0\r\n");
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d5162:	4961      	ldr	r1, [pc, #388]	; (d52e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x21c>)
   d5164:	4a61      	ldr	r2, [pc, #388]	; (d52ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x220>)
   d5166:	4620      	mov	r0, r4
   d5168:	f7ff ff8a 	bl	d5080 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d516c:	2100      	movs	r1, #0
   d516e:	4628      	mov	r0, r5
   d5170:	f002 fa06 	bl	d7580 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d5174:	b920      	cbnz	r0, d5180 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xb4>
        sendHeader("HOST", aRequest.hostname.c_str());
   d5176:	682a      	ldr	r2, [r5, #0]
   d5178:	495d      	ldr	r1, [pc, #372]	; (d52f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x224>)
   d517a:	4620      	mov	r0, r4
   d517c:	f7ff ff80 	bl	d5080 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d5180:	f105 083c 	add.w	r8, r5, #60	; 0x3c
   d5184:	2100      	movs	r1, #0
   d5186:	4640      	mov	r0, r8
   d5188:	f002 f9fa 	bl	d7580 <_ZNK6String6equalsEPKc>
   d518c:	b908      	cbnz	r0, d5192 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xc6>
        sendHeader("Content-Length", (aRequest.body).length());
   d518e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
   d5190:	e005      	b.n	d519e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xd2>
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d5192:	4958      	ldr	r1, [pc, #352]	; (d52f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x228>)
   d5194:	9818      	ldr	r0, [sp, #96]	; 0x60
   d5196:	f004 f863 	bl	d9260 <strcmp>
   d519a:	4602      	mov	r2, r0
   d519c:	b918      	cbnz	r0, d51a6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xda>
        sendHeader("Content-Length", 0);
   d519e:	4956      	ldr	r1, [pc, #344]	; (d52f8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x22c>)
   d51a0:	4620      	mov	r0, r4
   d51a2:	f7ff ff7f 	bl	d50a4 <_ZN10HttpClient10sendHeaderEPKci>
    }

    if (headers != NULL)
   d51a6:	b15e      	cbz	r6, d51c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
    {
        int i = 0;
        while (headers[i].header != NULL)
   d51a8:	6831      	ldr	r1, [r6, #0]
   d51aa:	b149      	cbz	r1, d51c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf4>
        {
            if (headers[i].value != NULL) {
   d51ac:	6872      	ldr	r2, [r6, #4]
                sendHeader(headers[i].header, headers[i].value);
   d51ae:	4620      	mov	r0, r4
    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
        {
            if (headers[i].value != NULL) {
   d51b0:	b112      	cbz	r2, d51b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xec>
                sendHeader(headers[i].header, headers[i].value);
   d51b2:	f7ff ff65 	bl	d5080 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d51b6:	e001      	b.n	d51bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xf0>
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
    client.println(aHeaderName);
   d51b8:	f002 fa5e 	bl	d7678 <_ZN5Print7printlnEPKc>
   d51bc:	3608      	adds	r6, #8
    }

    if (headers != NULL)
    {
        int i = 0;
        while (headers[i].header != NULL)
   d51be:	e7f3      	b.n	d51a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xdc>
            i++;
        }
    }

    // Empty line to finish headers
    client.println();
   d51c0:	4620      	mov	r0, r4
   d51c2:	f002 fa4d 	bl	d7660 <_ZN5Print7printlnEv>
    client.flush();
   d51c6:	4620      	mov	r0, r4
   d51c8:	f002 fe44 	bl	d7e54 <_ZN9TCPClient5flushEv>
   d51cc:	2100      	movs	r1, #0
   d51ce:	4640      	mov	r0, r8
   d51d0:	f002 f9d6 	bl	d7580 <_ZNK6String6equalsEPKc>

    //
    // Send HTTP Request Body
    //

    if (aRequest.body != NULL) {
   d51d4:	b918      	cbnz	r0, d51de <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x112>
        client.println(aRequest.body);
   d51d6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d51d8:	4620      	mov	r0, r4
   d51da:	f002 fa4d 	bl	d7678 <_ZN5Print7printlnEPKc>
    #ifdef LOGGING
    Serial.println("HttpClient>\tEnd of HTTP Request.");
    #endif

    // clear response buffer
    memset(&buffer[0], 0, sizeof(buffer));
   d51de:	f104 081c 	add.w	r8, r4, #28
   d51e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d51e6:	2100      	movs	r1, #0
   d51e8:	4640      	mov	r0, r8
   d51ea:	f004 f809 	bl	d9200 <memset>
   d51ee:	f001 fdf5 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
   d51f2:	4681      	mov	r9, r0
   d51f4:	f001 fdf2 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
    // timeout or an error.

    unsigned int bufferPosition = 0;
    unsigned long lastRead = millis();
    unsigned long firstRead = millis();
    bool error = false;
   d51f8:	2600      	movs	r6, #0
    // of terminating the connection there is a delay and another attempt
    // to read data.
    // The loop exits when the connection is closed, or if there is a
    // timeout or an error.

    unsigned int bufferPosition = 0;
   d51fa:	4635      	mov	r5, r6
        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
            delay(200);
        }
    } while (client.connected() && !timeout && !error);
   d51fc:	f241 3a88 	movw	sl, #5000	; 0x1388
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d5200:	4620      	mov	r0, r4
   d5202:	f003 f813 	bl	d822c <_ZN9TCPClient9availableEv>
   d5206:	b1d8      	cbz	r0, d5240 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x174>
            char c = client.read();
   d5208:	4620      	mov	r0, r4
   d520a:	f002 ff30 	bl	d806e <_ZN9TCPClient4readEv>
   d520e:	4683      	mov	fp, r0
   d5210:	f001 fde4 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>

                break;
            }

            // Check that received character fits in buffer before storing.
            if (bufferPosition < sizeof(buffer)-1) {
   d5214:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d5218:	429d      	cmp	r5, r3
   d521a:	4681      	mov	r9, r0
   d521c:	d803      	bhi.n	d5226 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15a>
                buffer[bufferPosition] = c;
   d521e:	1963      	adds	r3, r4, r5
   d5220:	f883 b01c 	strb.w	fp, [r3, #28]
   d5224:	e00a      	b.n	d523c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d5226:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d522a:	429d      	cmp	r5, r3
   d522c:	d106      	bne.n	d523c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x170>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d522e:	2300      	movs	r3, #0
   d5230:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d5234:	4620      	mov	r0, r4
   d5236:	f002 ffe2 	bl	d81fe <_ZN9TCPClient4stopEv>
                error = true;
   d523a:	2601      	movs	r6, #1

                #ifdef LOGGING
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
   d523c:	3501      	adds	r5, #1
            Serial.print(bytes);
            Serial.println(" bytes.");
        }
        #endif

        while (client.available()) {
   d523e:	e7df      	b.n	d5200 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
                #endif
            }
            bufferPosition++;
        }
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d5240:	1963      	adds	r3, r4, r5
   d5242:	7718      	strb	r0, [r3, #28]
   d5244:	f001 fdca 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
        }
        #endif

        // Check that there hasn't been more than 5s since last read.
        timeout = millis() - lastRead > TIMEOUT;
   d5248:	ebc9 0b00 	rsb	fp, r9, r0

        // Unless there has been an error or timeout wait 200ms to allow server
        // to respond or close connection.
        if (!error && !timeout) {
   d524c:	b926      	cbnz	r6, d5258 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
   d524e:	45d3      	cmp	fp, sl
   d5250:	d802      	bhi.n	d5258 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x18c>
            delay(200);
   d5252:	20c8      	movs	r0, #200	; 0xc8
   d5254:	f002 fac4 	bl	d77e0 <delay>
        }
    } while (client.connected() && !timeout && !error);
   d5258:	4620      	mov	r0, r4
   d525a:	f002 fdfc 	bl	d7e56 <_ZN9TCPClient9connectedEv>
   d525e:	b118      	cbz	r0, d5268 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
   d5260:	45d3      	cmp	fp, sl
   d5262:	d801      	bhi.n	d5268 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x19c>
   d5264:	2e00      	cmp	r6, #0
   d5266:	d0cb      	beq.n	d5200 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x134>
    }
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
    Serial.print(millis() - firstRead);
    Serial.println("ms).");
    #endif
    client.stop();
   d5268:	4620      	mov	r0, r4
   d526a:	f002 ffc8 	bl	d81fe <_ZN9TCPClient4stopEv>

    String raw_response(buffer);
   d526e:	4641      	mov	r1, r8
   d5270:	4668      	mov	r0, sp
   d5272:	f002 f946 	bl	d7502 <_ZN6StringC1EPK19__FlashStringHelper>

    // Not super elegant way of finding the status code, but it works.
    String statusCode = raw_response.substring(9,12);
   d5276:	230c      	movs	r3, #12
   d5278:	2209      	movs	r2, #9
   d527a:	4669      	mov	r1, sp
   d527c:	a804      	add	r0, sp, #16
   d527e:	f002 f9a3 	bl	d75c8 <_ZNK6String9substringEjj>
    #ifdef LOGGING
    Serial.print("HttpClient>\tStatus Code: ");
    Serial.println(statusCode);
    #endif

    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d5282:	491e      	ldr	r1, [pc, #120]	; (d52fc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x230>)
   d5284:	a808      	add	r0, sp, #32
   d5286:	f002 f93c 	bl	d7502 <_ZN6StringC1EPK19__FlashStringHelper>
   d528a:	a908      	add	r1, sp, #32
   d528c:	4668      	mov	r0, sp
   d528e:	f002 f998 	bl	d75c2 <_ZNK6String7indexOfERKS_>
   d5292:	4604      	mov	r4, r0
   d5294:	a808      	add	r0, sp, #32
   d5296:	f002 f8ed 	bl	d7474 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d529a:	1c63      	adds	r3, r4, #1
   d529c:	d014      	beq.n	d52c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fc>
        #endif

        return;
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
   d529e:	1d3d      	adds	r5, r7, #4
   d52a0:	4917      	ldr	r1, [pc, #92]	; (d5300 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x234>)
   d52a2:	4628      	mov	r0, r5
   d52a4:	f002 f940 	bl	d7528 <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d52a8:	1d22      	adds	r2, r4, #4
   d52aa:	4669      	mov	r1, sp
   d52ac:	a808      	add	r0, sp, #32
   d52ae:	f002 f9b3 	bl	d7618 <_ZNK6String9substringEj>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d52b2:	a908      	add	r1, sp, #32
   d52b4:	4628      	mov	r0, r5
   d52b6:	f002 f95f 	bl	d7578 <_ZN6String6concatERKS_>
   d52ba:	a808      	add	r0, sp, #32
   d52bc:	f002 f8da 	bl	d7474 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d52c0:	9804      	ldr	r0, [sp, #16]
   d52c2:	f003 ff71 	bl	d91a8 <atoi>
   d52c6:	6038      	str	r0, [r7, #0]
    if (bodyPos == -1) {
        #ifdef LOGGING
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
        #endif

        return;
   d52c8:	a804      	add	r0, sp, #16
   d52ca:	f002 f8d3 	bl	d7474 <_ZN6StringD1Ev>
   d52ce:	4668      	mov	r0, sp
   d52d0:	f002 f8d0 	bl	d7474 <_ZN6StringD1Ev>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d52d4:	b00f      	add	sp, #60	; 0x3c
   d52d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d52da:	bf00      	nop
   d52dc:	000d9870 	.word	0x000d9870
   d52e0:	000d9781 	.word	0x000d9781
   d52e4:	000d96cf 	.word	0x000d96cf
   d52e8:	000d96e1 	.word	0x000d96e1
   d52ec:	000d96db 	.word	0x000d96db
   d52f0:	000d96ec 	.word	0x000d96ec
   d52f4:	000d9700 	.word	0x000d9700
   d52f8:	000d96f1 	.word	0x000d96f1
   d52fc:	000d9705 	.word	0x000d9705
   d5300:	000d9709 	.word	0x000d9709

000d5304 <_GLOBAL__sub_I_MinimumSerial.cpp>:
   d5304:	f001 bcea 	b.w	d6cdc <HAL_Pin_Map>

000d5308 <_GLOBAL__sub_I__ZN7istream3getEv>:
   d5308:	f001 bce8 	b.w	d6cdc <HAL_Pin_Map>

000d530c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d530c:	b510      	push	{r4, lr}
   d530e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5310:	3024      	adds	r0, #36	; 0x24
   d5312:	f000 fe7b 	bl	d600c <_ZN8FatCache4syncEv>
   d5316:	b128      	cbz	r0, d5324 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5318:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d531c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5320:	f000 be74 	b.w	d600c <_ZN8FatCache4syncEv>
  }
   d5324:	bd10      	pop	{r4, pc}

000d5326 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
   d5326:	1e41      	subs	r1, r0, #1
   d5328:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
   d532c:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d532e:	0843      	lsrs	r3, r0, #1
   d5330:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
   d5334:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   d5338:	fa53 f080 	uxtab	r0, r3, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d533c:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d533e:	b2c0      	uxtb	r0, r0
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d5340:	d1f5      	bne.n	d532e <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
   d5342:	4770      	bx	lr

000d5344 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d5344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d5348:	7803      	ldrb	r3, [r0, #0]
   d534a:	2b20      	cmp	r3, #32
   d534c:	f100 0401 	add.w	r4, r0, #1
   d5350:	d101      	bne.n	d5356 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12>
   d5352:	4620      	mov	r0, r4
   d5354:	e7f8      	b.n	d5348 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5356:	4f70      	ldr	r7, [pc, #448]	; (d5518 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
   d5358:	6088      	str	r0, [r1, #8]
   d535a:	4605      	mov	r5, r0
   d535c:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
   d535e:	462e      	mov	r6, r5
   d5360:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
   d5364:	b30b      	cbz	r3, d53aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d5366:	2b2f      	cmp	r3, #47	; 0x2f
   d5368:	d101      	bne.n	d536e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2a>
   d536a:	1903      	adds	r3, r0, r4
   d536c:	e017      	b.n	d539e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d536e:	2b5c      	cmp	r3, #92	; 0x5c
   d5370:	d102      	bne.n	d5378 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x34>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d5372:	2000      	movs	r0, #0
   d5374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d5378:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
   d537c:	b2e4      	uxtb	r4, r4
   d537e:	2c1d      	cmp	r4, #29
   d5380:	d803      	bhi.n	d538a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x46>
   d5382:	fa27 f404 	lsr.w	r4, r7, r4
   d5386:	07e4      	lsls	r4, r4, #31
   d5388:	d4f3      	bmi.n	d5372 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d538a:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
   d538e:	2c3c      	cmp	r4, #60	; 0x3c
   d5390:	d0ef      	beq.n	d5372 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
   d5392:	3b20      	subs	r3, #32
   d5394:	2b5e      	cmp	r3, #94	; 0x5e
   d5396:	d9e1      	bls.n	d535c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18>
   d5398:	e7eb      	b.n	d5372 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d539a:	2d2f      	cmp	r5, #47	; 0x2f
   d539c:	d105      	bne.n	d53aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x66>
   d539e:	461e      	mov	r6, r3
   d53a0:	f813 5b01 	ldrb.w	r5, [r3], #1
   d53a4:	2d20      	cmp	r5, #32
   d53a6:	d1f8      	bne.n	d539a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x56>
   d53a8:	e7f9      	b.n	d539e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5a>
  *ptr = &path[end];
   d53aa:	6016      	str	r6, [r2, #0]
   d53ac:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
   d53ae:	4298      	cmp	r0, r3
   d53b0:	ebc0 0803 	rsb	r8, r0, r3
   d53b4:	d009      	beq.n	d53ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x86>
    c = path[len - 1];
   d53b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d53ba:	2a2e      	cmp	r2, #46	; 0x2e
   d53bc:	d0f7      	beq.n	d53ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
   d53be:	2a20      	cmp	r2, #32
   d53c0:	d0f5      	beq.n	d53ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6a>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
   d53c2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   d53c6:	dcd4      	bgt.n	d5372 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
   d53c8:	e001      	b.n	d53ce <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8a>
   d53ca:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
   d53ce:	f8c1 8004 	str.w	r8, [r1, #4]
   d53d2:	f101 030c 	add.w	r3, r1, #12
   d53d6:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   d53da:	2420      	movs	r4, #32
   d53dc:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   d53e0:	4293      	cmp	r3, r2
   d53e2:	d1fb      	bne.n	d53dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d53e4:	4603      	mov	r3, r0
   d53e6:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d53e8:	f813 4b01 	ldrb.w	r4, [r3], #1
   d53ec:	2c2e      	cmp	r4, #46	; 0x2e
   d53ee:	d0fa      	beq.n	d53e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
   d53f0:	2c20      	cmp	r4, #32
   d53f2:	d0f8      	beq.n	d53e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
  // Not 8.3 if leading dot or space.
  is83 = !si;
   d53f4:	fab2 f482 	clz	r4, r2
   d53f8:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d53fa:	f108 36ff 	add.w	r6, r8, #4294967295
   d53fe:	1c73      	adds	r3, r6, #1
   d5400:	d107      	bne.n	d5412 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   d5402:	2700      	movs	r7, #0
   d5404:	f04f 0e07 	mov.w	lr, #7
   d5408:	463d      	mov	r5, r7
   d540a:	46ba      	mov	sl, r7
   d540c:	f04f 0908 	mov.w	r9, #8
   d5410:	e009      	b.n	d5426 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe2>
   d5412:	5d83      	ldrb	r3, [r0, r6]
   d5414:	2b2e      	cmp	r3, #46	; 0x2e
   d5416:	d0f4      	beq.n	d5402 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
   d5418:	3e01      	subs	r6, #1
   d541a:	e7f0      	b.n	d53fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (; si < len; si++) {
    c = path[si];
   d541c:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
   d541e:	2b20      	cmp	r3, #32
   d5420:	d104      	bne.n	d542c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe8>
      is83 = false;
   d5422:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
   d5424:	3201      	adds	r2, #1
   d5426:	4542      	cmp	r2, r8
   d5428:	dbf8      	blt.n	d541c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd8>
   d542a:	e04b      	b.n	d54c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x180>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
   d542c:	2b2e      	cmp	r3, #46	; 0x2e
   d542e:	d102      	bne.n	d5436 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf2>
   d5430:	42b2      	cmp	r2, r6
   d5432:	d1f6      	bne.n	d5422 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d5434:	e003      	b.n	d543e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xfa>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
   d5436:	2b22      	cmp	r3, #34	; 0x22
   d5438:	d017      	beq.n	d546a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
   d543a:	2b7c      	cmp	r3, #124	; 0x7c
   d543c:	d015      	beq.n	d546a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d543e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d5442:	f1bc 0f05 	cmp.w	ip, #5
   d5446:	d801      	bhi.n	d544c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d5448:	2b2d      	cmp	r3, #45	; 0x2d
   d544a:	d10e      	bne.n	d546a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
   d544c:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d5450:	f1bc 0f05 	cmp.w	ip, #5
   d5454:	d909      	bls.n	d546a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
   d5456:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d545a:	f1bc 0f02 	cmp.w	ip, #2
   d545e:	d904      	bls.n	d546a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x126>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
   d5460:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d5464:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d5468:	d902      	bls.n	d5470 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12c>
   d546a:	42b2      	cmp	r2, r6
   d546c:	d10e      	bne.n	d548c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x148>
   d546e:	e049      	b.n	d5504 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d5470:	42b2      	cmp	r2, r6
   d5472:	d047      	beq.n	d5504 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1c0>
   d5474:	4575      	cmp	r5, lr
   d5476:	d821      	bhi.n	d54bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
   d5478:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d547c:	f1bc 0f19 	cmp.w	ip, #25
   d5480:	d808      	bhi.n	d5494 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x150>
        c += 'A' - 'a';
   d5482:	3b20      	subs	r3, #32
   d5484:	b2db      	uxtb	r3, r3
        lc |= bit;
   d5486:	ea49 0707 	orr.w	r7, r9, r7
   d548a:	e00a      	b.n	d54a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
   d548c:	4575      	cmp	r5, lr
   d548e:	d815      	bhi.n	d54bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
   d5490:	2400      	movs	r4, #0
      c = '_';
   d5492:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
   d5494:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d5498:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d549c:	bf98      	it	ls
   d549e:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
   d54a2:	f105 0c01 	add.w	ip, r5, #1
   d54a6:	fa5f fc8c 	uxtb.w	ip, ip
   d54aa:	440d      	add	r5, r1
      if (i < 7) {
   d54ac:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
   d54b0:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
   d54b2:	d801      	bhi.n	d54b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x174>
        fname->seqPos = i;
   d54b4:	f881 c00c 	strb.w	ip, [r1, #12]
   d54b8:	4665      	mov	r5, ip
   d54ba:	e7b3      	b.n	d5424 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d54bc:	f1be 0f0a 	cmp.w	lr, #10
   d54c0:	d117      	bne.n	d54f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ae>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
   d54c2:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   d54c4:	7b4b      	ldrb	r3, [r1, #13]
   d54c6:	2b20      	cmp	r3, #32
   d54c8:	f43f af53 	beq.w	d5372 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2e>
    return false;
  }

  if (is83) {
   d54cc:	b13c      	cbz	r4, d54de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x19a>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d54ce:	ea1a 0f07 	tst.w	sl, r7
   d54d2:	bf18      	it	ne
   d54d4:	2702      	movne	r7, #2
   d54d6:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   d54d8:	2001      	movs	r0, #1
   d54da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   d54de:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d54e0:	2001      	movs	r0, #1
   d54e2:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d54e4:	4419      	add	r1, r3
   d54e6:	237e      	movs	r3, #126	; 0x7e
   d54e8:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d54ea:	2331      	movs	r3, #49	; 0x31
   d54ec:	738b      	strb	r3, [r1, #14]
   d54ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
   d54f2:	42b2      	cmp	r2, r6
   d54f4:	dce5      	bgt.n	d54c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d54f6:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d54f8:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d54fc:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d54fe:	f04f 0910 	mov.w	r9, #16
   d5502:	e78e      	b.n	d5422 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
   d5504:	f1be 0f0a 	cmp.w	lr, #10
   d5508:	d0db      	beq.n	d54c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
   d550a:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
   d550c:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
   d5510:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d5512:	f04f 0910 	mov.w	r9, #16
   d5516:	e785      	b.n	d5424 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
   d5518:	31000101 	.word	0x31000101

000d551c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d551c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5520:	f891 900c 	ldrb.w	r9, [r1, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d5524:	4606      	mov	r6, r0
   d5526:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d5528:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d552a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d552c:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d5530:	6869      	ldr	r1, [r5, #4]
   d5532:	68aa      	ldr	r2, [r5, #8]
   d5534:	1863      	adds	r3, r4, r1
   d5536:	b29b      	uxth	r3, r3
   d5538:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
   d553a:	4291      	cmp	r1, r2
   d553c:	d006      	beq.n	d554c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
   d553e:	f812 0b01 	ldrb.w	r0, [r2], #1
   d5542:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d5546:	4043      	eors	r3, r0
   d5548:	b29b      	uxth	r3, r3
   d554a:	e7f6      	b.n	d553a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
   d554c:	f1b9 0f03 	cmp.w	r9, #3
   d5550:	bf28      	it	cs
   d5552:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5556:	f109 0204 	add.w	r2, r9, #4
   d555a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d555c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5560:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5562:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5564:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5566:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5568:	bf94      	ite	ls
   d556a:	3130      	addls	r1, #48	; 0x30
   d556c:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d556e:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d5570:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d5572:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d5576:	d3f1      	bcc.n	d555c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d5578:	eb05 0309 	add.w	r3, r5, r9
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
   d557c:	2100      	movs	r1, #0
   d557e:	735f      	strb	r7, [r3, #13]
   d5580:	4630      	mov	r0, r6
   d5582:	f000 fb1e 	bl	d5bc2 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
   d5586:	2101      	movs	r1, #1
   d5588:	4630      	mov	r0, r6
   d558a:	f000 fafd 	bl	d5b88 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d558e:	4601      	mov	r1, r0
   d5590:	b928      	cbnz	r0, d559e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d5592:	7870      	ldrb	r0, [r6, #1]
   d5594:	fab0 f080 	clz	r0, r0
   d5598:	0940      	lsrs	r0, r0, #5
   d559a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d559e:	7803      	ldrb	r3, [r0, #0]
   d55a0:	b14b      	cbz	r3, d55b6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d55a2:	7ac3      	ldrb	r3, [r0, #11]
   d55a4:	071b      	lsls	r3, r3, #28
   d55a6:	d4ee      	bmi.n	d5586 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d55a8:	220b      	movs	r2, #11
   d55aa:	4640      	mov	r0, r8
   d55ac:	f003 fe0e 	bl	d91cc <memcmp>
   d55b0:	2800      	cmp	r0, #0
   d55b2:	d1e8      	bne.n	d5586 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d55b4:	e002      	b.n	d55bc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
   d55b6:	2001      	movs	r0, #1
   d55b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d55bc:	3401      	adds	r4, #1
   d55be:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
   d55c0:	2c64      	cmp	r4, #100	; 0x64
   d55c2:	d1b5      	bne.n	d5530 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
   d55c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d55c8 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d55c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d55cc:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d55ce:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d55d0:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d55d2:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d55d6:	9005      	str	r0, [sp, #20]
   d55d8:	460e      	mov	r6, r1
   d55da:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d55dc:	d101      	bne.n	d55e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
   d55de:	2000      	movs	r0, #0
   d55e0:	e1a0      	b.n	d5924 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
   d55e2:	9b05      	ldr	r3, [sp, #20]
   d55e4:	781b      	ldrb	r3, [r3, #0]
   d55e6:	2b00      	cmp	r3, #0
   d55e8:	d1f9      	bne.n	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
   d55ea:	6853      	ldr	r3, [r2, #4]
   d55ec:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d55ee:	7813      	ldrb	r3, [r2, #0]
   d55f0:	079b      	lsls	r3, r3, #30
   d55f2:	f000 818d 	beq.w	d5910 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
   d55f6:	9b02      	ldr	r3, [sp, #8]
   d55f8:	270d      	movs	r7, #13
   d55fa:	330c      	adds	r3, #12
   d55fc:	fbb3 f7f7 	udiv	r7, r3, r7
   d5600:	3701      	adds	r7, #1
   d5602:	b2ff      	uxtb	r7, r7
   d5604:	2100      	movs	r1, #0
   d5606:	4630      	mov	r0, r6
   d5608:	f000 fadb 	bl	d5bc2 <_ZN7FatFile7seekSetEm>
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
   d560c:	f04f 0800 	mov.w	r8, #0
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5610:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
   d5614:	f8cd 800c 	str.w	r8, [sp, #12]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
   d5618:	4643      	mov	r3, r8
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
   d561a:	4644      	mov	r4, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
   d561c:	4645      	mov	r5, r8
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
   d561e:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5622:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d5624:	6972      	ldr	r2, [r6, #20]
   d5626:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d5628:	2101      	movs	r1, #1
   d562a:	4630      	mov	r0, r6
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d562c:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d5630:	f000 faaa 	bl	d5b88 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d5634:	9b07      	ldr	r3, [sp, #28]
   d5636:	b920      	cbnz	r0, d5642 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
   d5638:	7873      	ldrb	r3, [r6, #1]
   d563a:	2b00      	cmp	r3, #0
   d563c:	f000 8090 	beq.w	d5760 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
   d5640:	e7cd      	b.n	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d5642:	7802      	ldrb	r2, [r0, #0]
   d5644:	2ae5      	cmp	r2, #229	; 0xe5
   d5646:	d000      	beq.n	d564a <_ZN7FatFile4openEPS_P7fname_ti+0x82>
   d5648:	b942      	cbnz	r2, d565c <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
   d564a:	2c00      	cmp	r4, #0
   d564c:	bf08      	it	eq
   d564e:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
   d5650:	42bc      	cmp	r4, r7
        freeFound++;
   d5652:	bf3c      	itt	cc
   d5654:	3401      	addcc	r4, #1
   d5656:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
   d5658:	b922      	cbnz	r2, d5664 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
   d565a:	e081      	b.n	d5760 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
   d565c:	42bc      	cmp	r4, r7
   d565e:	bf38      	it	cc
   d5660:	2400      	movcc	r4, #0
   d5662:	e003      	b.n	d566c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d5664:	2ae5      	cmp	r2, #229	; 0xe5
   d5666:	d101      	bne.n	d566c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   d5668:	2500      	movs	r5, #0
   d566a:	e7db      	b.n	d5624 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d566c:	2a2e      	cmp	r2, #46	; 0x2e
   d566e:	d0fb      	beq.n	d5668 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5670:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
   d5672:	290f      	cmp	r1, #15
   d5674:	d152      	bne.n	d571c <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
   d5676:	b93d      	cbnz	r5, d5688 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d5678:	0651      	lsls	r1, r2, #25
   d567a:	d5d3      	bpl.n	d5624 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
   d567c:	7b43      	ldrb	r3, [r0, #13]
   d567e:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
   d5680:	f002 051f 	and.w	r5, r2, #31
   d5684:	462b      	mov	r3, r5
   d5686:	e007      	b.n	d5698 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d5688:	3b01      	subs	r3, #1
   d568a:	b2db      	uxtb	r3, r3
   d568c:	429a      	cmp	r2, r3
   d568e:	d1eb      	bne.n	d5668 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d5690:	7b42      	ldrb	r2, [r0, #13]
   d5692:	9903      	ldr	r1, [sp, #12]
   d5694:	4291      	cmp	r1, r2
   d5696:	d1e7      	bne.n	d5668 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
   d5698:	1e5a      	subs	r2, r3, #1
   d569a:	f04f 0c0d 	mov.w	ip, #13
   d569e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
   d56a2:	9a02      	ldr	r2, [sp, #8]
   d56a4:	4562      	cmp	r2, ip
   d56a6:	d9df      	bls.n	d5668 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d56a8:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   d56ac:	f1be 0f04 	cmp.w	lr, #4
   d56b0:	fa5f f28e 	uxtb.w	r2, lr
   d56b4:	d804      	bhi.n	d56c0 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
   d56b6:	eb00 024e 	add.w	r2, r0, lr, lsl #1
   d56ba:	f8b2 2001 	ldrh.w	r2, [r2, #1]
   d56be:	e00c      	b.n	d56da <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d56c0:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d56c2:	bf95      	itete	ls
   d56c4:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d56c8:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d56cc:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d56d0:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
   d56d4:	bf94      	ite	ls
   d56d6:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d56d8:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
   d56da:	9902      	ldr	r1, [sp, #8]
   d56dc:	4561      	cmp	r1, ip
   d56de:	d103      	bne.n	d56e8 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
   d56e0:	2a00      	cmp	r2, #0
   d56e2:	bf18      	it	ne
   d56e4:	2500      	movne	r5, #0
   d56e6:	e79d      	b.n	d5624 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d56e8:	2aff      	cmp	r2, #255	; 0xff
   d56ea:	d8bd      	bhi.n	d5668 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d56ec:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d56ee:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d56f2:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d56f4:	f8d9 1008 	ldr.w	r1, [r9, #8]
   d56f8:	f811 100c 	ldrb.w	r1, [r1, ip]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d56fc:	bf98      	it	ls
   d56fe:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5700:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d5704:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   d5708:	bf98      	it	ls
   d570a:	b2d2      	uxtbls	r2, r2
   d570c:	f1bc 0f19 	cmp.w	ip, #25
   d5710:	bf9c      	itt	ls
   d5712:	3120      	addls	r1, #32
   d5714:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5716:	4291      	cmp	r1, r2
   d5718:	d1a6      	bne.n	d5668 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
   d571a:	e0fb      	b.n	d5914 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d571c:	0709      	lsls	r1, r1, #28
   d571e:	d4a3      	bmi.n	d5668 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
   d5720:	b14d      	cbz	r5, d5736 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d5722:	2b01      	cmp	r3, #1
   d5724:	f47f af5b 	bne.w	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5728:	f7ff fdfd 	bl	d5326 <_ZN7FatFile11lfnChecksumEPh>
   d572c:	9b03      	ldr	r3, [sp, #12]
   d572e:	4283      	cmp	r3, r0
   d5730:	f47f af55 	bne.w	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5734:	e00f      	b.n	d5756 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d5736:	220b      	movs	r2, #11
   d5738:	9906      	ldr	r1, [sp, #24]
   d573a:	9307      	str	r3, [sp, #28]
   d573c:	f003 fd46 	bl	d91cc <memcmp>
   d5740:	9b07      	ldr	r3, [sp, #28]
   d5742:	2800      	cmp	r0, #0
   d5744:	f47f af6e 	bne.w	d5624 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d5748:	f899 2000 	ldrb.w	r2, [r9]
   d574c:	07d2      	lsls	r2, r2, #31
   d574e:	d502      	bpl.n	d5756 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
   d5750:	2201      	movs	r2, #1
   d5752:	9204      	str	r2, [sp, #16]
   d5754:	e766      	b.n	d5624 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
   d5756:	f41b 6f00 	tst.w	fp, #2048	; 0x800
   d575a:	f000 80d1 	beq.w	d5900 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
   d575e:	e73e      	b.n	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d5760:	f41b 7f00 	tst.w	fp, #512	; 0x200
   d5764:	f43f af3b 	beq.w	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
   d5768:	f00b 0303 	and.w	r3, fp, #3
   d576c:	3b01      	subs	r3, #1
   d576e:	2b01      	cmp	r3, #1
   d5770:	f63f af35 	bhi.w	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
   d5774:	2c00      	cmp	r4, #0
   d5776:	bf08      	it	eq
   d5778:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d577a:	42bc      	cmp	r4, r7
   d577c:	d302      	bcc.n	d5784 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
   d577e:	9b04      	ldr	r3, [sp, #16]
   d5780:	b9cb      	cbnz	r3, d57b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
   d5782:	e01f      	b.n	d57c4 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
   d5784:	2100      	movs	r1, #0
   d5786:	4630      	mov	r0, r6
   d5788:	f000 f9fe 	bl	d5b88 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d578c:	b910      	cbnz	r0, d5794 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
   d578e:	7873      	ldrb	r3, [r6, #1]
   d5790:	b15b      	cbz	r3, d57aa <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
   d5792:	e724      	b.n	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   d5794:	3401      	adds	r4, #1
   d5796:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   d5798:	e7ef      	b.n	d577a <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   d579a:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d579c:	791b      	ldrb	r3, [r3, #4]
   d579e:	2b01      	cmp	r3, #1
   d57a0:	d8ed      	bhi.n	d577e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
   d57a2:	3410      	adds	r4, #16
   d57a4:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
   d57a6:	42a7      	cmp	r7, r4
   d57a8:	d9e9      	bls.n	d577e <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
   d57aa:	4630      	mov	r0, r6
   d57ac:	f000 f8d2 	bl	d5954 <_ZN7FatFile13addDirClusterEv>
   d57b0:	2800      	cmp	r0, #0
   d57b2:	d1f2      	bne.n	d579a <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
   d57b4:	e713      	b.n	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
   d57b6:	4649      	mov	r1, r9
   d57b8:	4630      	mov	r0, r6
   d57ba:	f7ff feaf 	bl	d551c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d57be:	2800      	cmp	r0, #0
   d57c0:	f43f af0d 	beq.w	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d57c4:	ea4f 1148 	mov.w	r1, r8, lsl #5
   d57c8:	4630      	mov	r0, r6
   d57ca:	f000 f9fa 	bl	d5bc2 <_ZN7FatFile7seekSetEm>
   d57ce:	2800      	cmp	r0, #0
   d57d0:	f43f af05 	beq.w	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
   d57d4:	1e7d      	subs	r5, r7, #1
   d57d6:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d57d8:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d57da:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
   d57de:	f04f 080f 	mov.w	r8, #15
   d57e2:	e041      	b.n	d5868 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d57e4:	2100      	movs	r1, #0
   d57e6:	4630      	mov	r0, r6
   d57e8:	f000 f9ce 	bl	d5b88 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d57ec:	4607      	mov	r7, r0
   d57ee:	2800      	cmp	r0, #0
   d57f0:	f43f aef5 	beq.w	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
   d57f4:	68b2      	ldr	r2, [r6, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
   d57f6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d57fa:	42ac      	cmp	r4, r5
   d57fc:	f043 0301 	orr.w	r3, r3, #1
   d5800:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d5804:	bf0c      	ite	eq
   d5806:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
   d580a:	4622      	movne	r2, r4
   d580c:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d580e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   d5812:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d5816:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d581a:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d581c:	f7ff fd83 	bl	d5326 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5820:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
   d5822:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
   d5824:	f887 a01a 	strb.w	sl, [r7, #26]
   d5828:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d582c:	f002 021f 	and.w	r2, r2, #31
   d5830:	230d      	movs	r3, #13
   d5832:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
   d5834:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d5838:	435a      	muls	r2, r3
   d583a:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d583c:	9902      	ldr	r1, [sp, #8]
   d583e:	4291      	cmp	r1, r2
   d5840:	d915      	bls.n	d586e <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
   d5842:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
   d5846:	2b04      	cmp	r3, #4
   d5848:	fa5f fc83 	uxtb.w	ip, r3
   d584c:	f103 0001 	add.w	r0, r3, #1
   d5850:	d813      	bhi.n	d587a <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
   d5852:	eb07 0343 	add.w	r3, r7, r3, lsl #1
   d5856:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
   d585a:	280d      	cmp	r0, #13
   d585c:	f102 0201 	add.w	r2, r2, #1
   d5860:	4603      	mov	r3, r0
   d5862:	d1eb      	bne.n	d583c <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d5864:	3c01      	subs	r4, #1
   d5866:	b2e4      	uxtb	r4, r4
   d5868:	2c00      	cmp	r4, #0
   d586a:	d1bb      	bne.n	d57e4 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
   d586c:	e00e      	b.n	d588c <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d586e:	bf14      	ite	ne
   d5870:	f04f 31ff 	movne.w	r1, #4294967295
   d5874:	2100      	moveq	r1, #0
   d5876:	b289      	uxth	r1, r1
   d5878:	e7e5      	b.n	d5846 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d587a:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d587e:	bf94      	ite	ls
   d5880:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d5884:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
   d5888:	8099      	strh	r1, [r3, #4]
   d588a:	e7e6      	b.n	d585a <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d588c:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
   d588e:	4621      	mov	r1, r4
   d5890:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
   d5892:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
   d5896:	f000 f977 	bl	d5b88 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d589a:	4607      	mov	r7, r0
   d589c:	2800      	cmp	r0, #0
   d589e:	f43f ae9e 	beq.w	d55de <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
   d58a2:	2220      	movs	r2, #32
   d58a4:	4621      	mov	r1, r4
   d58a6:	f003 fcab 	bl	d9200 <memset>
  memcpy(dir->name, fname->sfn, 11);
   d58aa:	464b      	mov	r3, r9
   d58ac:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d58b0:	603a      	str	r2, [r7, #0]
   d58b2:	685a      	ldr	r2, [r3, #4]
   d58b4:	607a      	str	r2, [r7, #4]
   d58b6:	891a      	ldrh	r2, [r3, #8]
   d58b8:	813a      	strh	r2, [r7, #8]
   d58ba:	7a9b      	ldrb	r3, [r3, #10]
   d58bc:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d58be:	f899 3000 	ldrb.w	r3, [r9]
   d58c2:	f003 0318 	and.w	r3, r3, #24
   d58c6:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
   d58c8:	4b18      	ldr	r3, [pc, #96]	; (d592c <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
   d58ca:	681b      	ldr	r3, [r3, #0]
   d58cc:	b12b      	cbz	r3, d58da <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d58ce:	f107 010e 	add.w	r1, r7, #14
   d58d2:	f107 0010 	add.w	r0, r7, #16
   d58d6:	4798      	blx	r3
   d58d8:	e006      	b.n	d58e8 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
   d58da:	2321      	movs	r3, #33	; 0x21
   d58dc:	743b      	strb	r3, [r7, #16]
   d58de:	2328      	movs	r3, #40	; 0x28
   d58e0:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d58e2:	2308      	movs	r3, #8
   d58e4:	73bc      	strb	r4, [r7, #14]
   d58e6:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
   d58e8:	8a3b      	ldrh	r3, [r7, #16]
   d58ea:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
   d58ec:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
   d58ee:	89fb      	ldrh	r3, [r7, #14]
   d58f0:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
   d58f2:	68b2      	ldr	r2, [r6, #8]
   d58f4:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d58f8:	f043 0301 	orr.w	r3, r3, #1
   d58fc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d5900:	9500      	str	r5, [sp, #0]
   d5902:	465b      	mov	r3, fp
   d5904:	4652      	mov	r2, sl
   d5906:	4631      	mov	r1, r6
   d5908:	9805      	ldr	r0, [sp, #20]
   d590a:	f000 f9a3 	bl	d5c54 <_ZN7FatFile15openCachedEntryEPS_tih>
   d590e:	e009      	b.n	d5924 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d5910:	2701      	movs	r7, #1
   d5912:	e677      	b.n	d5604 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
   d5914:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
   d5918:	f1be 0f0d 	cmp.w	lr, #13
   d591c:	f43f ae82 	beq.w	d5624 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d5920:	46d4      	mov	ip, sl
   d5922:	e6c3      	b.n	d56ac <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
   d5924:	b009      	add	sp, #36	; 0x24
   d5926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d592a:	bf00      	nop
   d592c:	2003e3c4 	.word	0x2003e3c4

000d5930 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
   d5930:	f001 b9d4 	b.w	d6cdc <HAL_Pin_Map>

000d5934 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
   d5934:	f001 b9d2 	b.w	d6cdc <HAL_Pin_Map>

000d5938 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
   d5938:	f001 b9d0 	b.w	d6cdc <HAL_Pin_Map>

000d593c <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
   d593c:	f001 b9ce 	b.w	d6cdc <HAL_Pin_Map>

000d5940 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5940:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5942:	6901      	ldr	r1, [r0, #16]
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5944:	f043 0304 	orr.w	r3, r3, #4
   d5948:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d594a:	f100 0210 	add.w	r2, r0, #16
   d594e:	6880      	ldr	r0, [r0, #8]
   d5950:	f000 bc12 	b.w	d6178 <_ZN9FatVolume15allocateClusterEmPm>

000d5954 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5958:	7803      	ldrb	r3, [r0, #0]
   d595a:	f003 0320 	and.w	r3, r3, #32
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d595e:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5960:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d5964:	b10b      	cbz	r3, d596a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5966:	2600      	movs	r6, #0
   d5968:	e02e      	b.n	d59c8 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   d596a:	6942      	ldr	r2, [r0, #20]
   d596c:	4b18      	ldr	r3, [pc, #96]	; (d59d0 <_ZN7FatFile13addDirClusterEv+0x7c>)
   d596e:	429a      	cmp	r2, r3
   d5970:	d8f9      	bhi.n	d5966 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
   d5972:	f7ff ffe5 	bl	d5940 <_ZN7FatFile10addClusterEv>
   d5976:	4606      	mov	r6, r0
   d5978:	2800      	cmp	r0, #0
   d597a:	d0f4      	beq.n	d5966 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
   d597c:	6921      	ldr	r1, [r4, #16]
   d597e:	68a0      	ldr	r0, [r4, #8]
   d5980:	f000 fb8f 	bl	d60a2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5984:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5986:	68a0      	ldr	r0, [r4, #8]
   d5988:	2205      	movs	r2, #5
   d598a:	4639      	mov	r1, r7
   d598c:	3024      	adds	r0, #36	; 0x24
   d598e:	f000 fb64 	bl	d605a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
   d5992:	4680      	mov	r8, r0
   d5994:	2800      	cmp	r0, #0
   d5996:	d0e6      	beq.n	d5966 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
   d5998:	4629      	mov	r1, r5
   d599a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d599e:	f003 fc2f 	bl	d9200 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d59a2:	2501      	movs	r5, #1
   d59a4:	68a3      	ldr	r3, [r4, #8]
   d59a6:	791a      	ldrb	r2, [r3, #4]
   d59a8:	42aa      	cmp	r2, r5
   d59aa:	d909      	bls.n	d59c0 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d59ac:	4642      	mov	r2, r8
   d59ae:	19e9      	adds	r1, r5, r7
   d59b0:	6818      	ldr	r0, [r3, #0]
   d59b2:	f000 fecf 	bl	d6754 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d59b6:	2800      	cmp	r0, #0
   d59b8:	d0d5      	beq.n	d5966 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d59ba:	3501      	adds	r5, #1
   d59bc:	b2ed      	uxtb	r5, r5
   d59be:	e7f1      	b.n	d59a4 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d59c0:	6963      	ldr	r3, [r4, #20]
   d59c2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d59c6:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
   d59c8:	4630      	mov	r0, r6
   d59ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d59ce:	bf00      	nop
   d59d0:	001ffdff 	.word	0x001ffdff

000d59d4 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d59d4:	b510      	push	{r4, lr}
   d59d6:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d59d8:	6880      	ldr	r0, [r0, #8]
   d59da:	460a      	mov	r2, r1
   d59dc:	3024      	adds	r0, #36	; 0x24
   d59de:	69a1      	ldr	r1, [r4, #24]
   d59e0:	f000 fb3b 	bl	d605a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d59e4:	b120      	cbz	r0, d59f0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d59e6:	88a3      	ldrh	r3, [r4, #4]
   d59e8:	f003 030f 	and.w	r3, r3, #15
   d59ec:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d59f0:	bd10      	pop	{r4, pc}

000d59f2 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d59f2:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d59f4:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d59f6:	4605      	mov	r5, r0
   d59f8:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
   d59fa:	b984      	cbnz	r4, d5a1e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d59fc:	2224      	movs	r2, #36	; 0x24
   d59fe:	4621      	mov	r1, r4
   d5a00:	f003 fbfe 	bl	d9200 <memset>

  m_vol = vol;
   d5a04:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5a06:	79f3      	ldrb	r3, [r6, #7]
   d5a08:	2b10      	cmp	r3, #16
   d5a0a:	d003      	beq.n	d5a14 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5a0c:	2b20      	cmp	r3, #32
   d5a0e:	d106      	bne.n	d5a1e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5a10:	2340      	movs	r3, #64	; 0x40
   d5a12:	e000      	b.n	d5a16 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5a14:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5a16:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
   d5a18:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
   d5a1a:	70a8      	strb	r0, [r5, #2]
   d5a1c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
   d5a1e:	2000      	movs	r0, #0
   d5a20:	bd70      	pop	{r4, r5, r6, pc}

000d5a22 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5a22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a26:	7803      	ldrb	r3, [r0, #0]
   d5a28:	4604      	mov	r4, r0
   d5a2a:	4689      	mov	r9, r1
   d5a2c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5a2e:	b14b      	cbz	r3, d5a44 <_ZN7FatFile4readEPvj+0x22>
   d5a30:	7882      	ldrb	r2, [r0, #2]
   d5a32:	07d1      	lsls	r1, r2, #31
   d5a34:	d506      	bpl.n	d5a44 <_ZN7FatFile4readEPvj+0x22>
   d5a36:	e00c      	b.n	d5a52 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5a38:	465a      	mov	r2, fp
   d5a3a:	6921      	ldr	r1, [r4, #16]
   d5a3c:	f000 fb37 	bl	d60ae <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5a40:	2800      	cmp	r0, #0
   d5a42:	da3d      	bge.n	d5ac0 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5a44:	7863      	ldrb	r3, [r4, #1]
   d5a46:	f043 0302 	orr.w	r3, r3, #2
   d5a4a:	7063      	strb	r3, [r4, #1]
  return -1;
   d5a4c:	f04f 30ff 	mov.w	r0, #4294967295
   d5a50:	e097      	b.n	d5b82 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5a52:	071a      	lsls	r2, r3, #28
   d5a54:	d503      	bpl.n	d5a5e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5a56:	69e3      	ldr	r3, [r4, #28]
   d5a58:	6962      	ldr	r2, [r4, #20]
   d5a5a:	1a9b      	subs	r3, r3, r2
   d5a5c:	e007      	b.n	d5a6e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
   d5a5e:	069a      	lsls	r2, r3, #26
   d5a60:	d508      	bpl.n	d5a74 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5a62:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
   d5a64:	891a      	ldrh	r2, [r3, #8]
   d5a66:	6963      	ldr	r3, [r4, #20]
   d5a68:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
   d5a6c:	b29b      	uxth	r3, r3
   d5a6e:	429d      	cmp	r5, r3
   d5a70:	bf28      	it	cs
   d5a72:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5a74:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
   d5a76:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5a7a:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5a7e:	2e00      	cmp	r6, #0
   d5a80:	d035      	beq.n	d5aee <_ZN7FatFile4readEPvj+0xcc>
   d5a82:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5a84:	6963      	ldr	r3, [r4, #20]
   d5a86:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5a88:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
   d5a8c:	f3c3 0a08 	ubfx	sl, r3, #0, #9
   d5a90:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5a94:	d002      	beq.n	d5a9c <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5a96:	6a03      	ldr	r3, [r0, #32]
   d5a98:	4419      	add	r1, r3
   d5a9a:	e01d      	b.n	d5ad8 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5a9c:	f890 8005 	ldrb.w	r8, [r0, #5]
   d5aa0:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
   d5aa4:	f1ba 0f00 	cmp.w	sl, #0
   d5aa8:	d110      	bne.n	d5acc <_ZN7FatFile4readEPvj+0xaa>
   d5aaa:	f1b8 0f00 	cmp.w	r8, #0
   d5aae:	d10d      	bne.n	d5acc <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
   d5ab0:	2b00      	cmp	r3, #0
   d5ab2:	d1c1      	bne.n	d5a38 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5ab4:	0653      	lsls	r3, r2, #25
   d5ab6:	bf4c      	ite	mi
   d5ab8:	6a03      	ldrmi	r3, [r0, #32]
   d5aba:	6a23      	ldrpl	r3, [r4, #32]
   d5abc:	6123      	str	r3, [r4, #16]
   d5abe:	e005      	b.n	d5acc <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
   d5ac0:	d104      	bne.n	d5acc <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
   d5ac2:	7823      	ldrb	r3, [r4, #0]
   d5ac4:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5ac8:	d111      	bne.n	d5aee <_ZN7FatFile4readEPvj+0xcc>
   d5aca:	e7bb      	b.n	d5a44 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5acc:	6921      	ldr	r1, [r4, #16]
   d5ace:	68a0      	ldr	r0, [r4, #8]
   d5ad0:	f000 fae7 	bl	d60a2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5ad4:	eb08 0100 	add.w	r1, r8, r0
   d5ad8:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5ada:	f1ba 0f00 	cmp.w	sl, #0
   d5ade:	d135      	bne.n	d5b4c <_ZN7FatFile4readEPvj+0x12a>
   d5ae0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5ae4:	d332      	bcc.n	d5b4c <_ZN7FatFile4readEPvj+0x12a>
   d5ae6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5ae8:	4299      	cmp	r1, r3
   d5aea:	d102      	bne.n	d5af2 <_ZN7FatFile4readEPvj+0xd0>
   d5aec:	e02e      	b.n	d5b4c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   d5aee:	1ba8      	subs	r0, r5, r6
   d5af0:	e047      	b.n	d5b82 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5af2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5af6:	d31b      	bcc.n	d5b30 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
   d5af8:	7822      	ldrb	r2, [r4, #0]
   d5afa:	0697      	lsls	r7, r2, #26
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
   d5afc:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5b00:	d406      	bmi.n	d5b10 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
   d5b02:	7902      	ldrb	r2, [r0, #4]
   d5b04:	ebc8 0202 	rsb	r2, r8, r2
   d5b08:	b2d2      	uxtb	r2, r2
   d5b0a:	4592      	cmp	sl, r2
   d5b0c:	bf28      	it	cs
   d5b0e:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5b10:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
   d5b12:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5b16:	d207      	bcs.n	d5b28 <_ZN7FatFile4readEPvj+0x106>
   d5b18:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
   d5b1a:	4653      	mov	r3, sl
   d5b1c:	464a      	mov	r2, r9
   d5b1e:	6800      	ldr	r0, [r0, #0]
   d5b20:	f000 fdd6 	bl	d66d0 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5b24:	b960      	cbnz	r0, d5b40 <_ZN7FatFile4readEPvj+0x11e>
   d5b26:	e78d      	b.n	d5a44 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5b28:	4453      	add	r3, sl
   d5b2a:	4299      	cmp	r1, r3
   d5b2c:	d321      	bcc.n	d5b72 <_ZN7FatFile4readEPvj+0x150>
   d5b2e:	e7f3      	b.n	d5b18 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d5b30:	464a      	mov	r2, r9
   d5b32:	6800      	ldr	r0, [r0, #0]
   d5b34:	f000 fd84 	bl	d6640 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5b38:	2800      	cmp	r0, #0
   d5b3a:	d083      	beq.n	d5a44 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
   d5b3c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
   d5b40:	6963      	ldr	r3, [r4, #20]
   d5b42:	443b      	add	r3, r7
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
   d5b44:	44b9      	add	r9, r7
    m_curPosition += n;
   d5b46:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5b48:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   d5b4a:	e798      	b.n	d5a7e <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5b4c:	2200      	movs	r2, #0
   d5b4e:	3024      	adds	r0, #36	; 0x24
   d5b50:	f000 fa83 	bl	d605a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
   d5b54:	2800      	cmp	r0, #0
   d5b56:	f43f af75 	beq.w	d5a44 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
   d5b5a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
   d5b5e:	42b7      	cmp	r7, r6
   d5b60:	bf28      	it	cs
   d5b62:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
   d5b64:	eb00 010a 	add.w	r1, r0, sl
   d5b68:	463a      	mov	r2, r7
   d5b6a:	4648      	mov	r0, r9
   d5b6c:	f003 fb3d 	bl	d91ea <memcpy>
   d5b70:	e7e6      	b.n	d5b40 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5b72:	3024      	adds	r0, #36	; 0x24
   d5b74:	9101      	str	r1, [sp, #4]
   d5b76:	f000 fa49 	bl	d600c <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
   d5b7a:	9901      	ldr	r1, [sp, #4]
   d5b7c:	2800      	cmp	r0, #0
   d5b7e:	d1cb      	bne.n	d5b18 <_ZN7FatFile4readEPvj+0xf6>
   d5b80:	e760      	b.n	d5a44 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
   d5b82:	b003      	add	sp, #12
   d5b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5b88 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5b88:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5b8a:	6943      	ldr	r3, [r0, #20]
   d5b8c:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5b90:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
   d5b92:	b105      	cbz	r5, d5b96 <_ZN7FatFile12readDirCacheEb+0xe>
   d5b94:	b969      	cbnz	r1, d5bb2 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
   d5b96:	2201      	movs	r2, #1
   d5b98:	f10d 0107 	add.w	r1, sp, #7
   d5b9c:	4620      	mov	r0, r4
   d5b9e:	f7ff ff40 	bl	d5a22 <_ZN7FatFile4readEPvj>
   d5ba2:	b240      	sxtb	r0, r0
    if  (n != 1) {
   d5ba4:	2801      	cmp	r0, #1
   d5ba6:	d001      	beq.n	d5bac <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
   d5ba8:	2000      	movs	r0, #0
   d5baa:	e008      	b.n	d5bbe <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
   d5bac:	6963      	ldr	r3, [r4, #20]
   d5bae:	331f      	adds	r3, #31
   d5bb0:	e000      	b.n	d5bb4 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
   d5bb2:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5bb4:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
   d5bb6:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
   d5bb8:	3030      	adds	r0, #48	; 0x30
   d5bba:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
   d5bbe:	b003      	add	sp, #12
   d5bc0:	bd30      	pop	{r4, r5, pc}

000d5bc2 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5bc6:	460e      	mov	r6, r1
   d5bc8:	7801      	ldrb	r1, [r0, #0]
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   d5bca:	6907      	ldr	r7, [r0, #16]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   d5bcc:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
   d5bce:	2900      	cmp	r1, #0
   d5bd0:	d039      	beq.n	d5c46 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   d5bd2:	6945      	ldr	r5, [r0, #20]
   d5bd4:	42b5      	cmp	r5, r6
   d5bd6:	d03a      	beq.n	d5c4e <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
   d5bd8:	b90e      	cbnz	r6, d5bde <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
   d5bda:	6106      	str	r6, [r0, #16]
    goto done;
   d5bdc:	e031      	b.n	d5c42 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
   d5bde:	070b      	lsls	r3, r1, #28
   d5be0:	d503      	bpl.n	d5bea <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
   d5be2:	69c3      	ldr	r3, [r0, #28]
   d5be4:	429e      	cmp	r6, r3
   d5be6:	d82e      	bhi.n	d5c46 <_ZN7FatFile7seekSetEm+0x84>
   d5be8:	e007      	b.n	d5bfa <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
   d5bea:	0688      	lsls	r0, r1, #26
   d5bec:	d505      	bpl.n	d5bfa <_ZN7FatFile7seekSetEm+0x38>
   d5bee:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5bf0:	891b      	ldrh	r3, [r3, #8]
   d5bf2:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
   d5bf6:	d826      	bhi.n	d5c46 <_ZN7FatFile7seekSetEm+0x84>
   d5bf8:	e023      	b.n	d5c42 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5bfa:	f8d4 e008 	ldr.w	lr, [r4, #8]
   d5bfe:	f89e 3006 	ldrb.w	r3, [lr, #6]
   d5c02:	1e6a      	subs	r2, r5, #1
   d5c04:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5c08:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5c0a:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5c0c:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
   d5c0e:	429a      	cmp	r2, r3
   d5c10:	d800      	bhi.n	d5c14 <_ZN7FatFile7seekSetEm+0x52>
   d5c12:	b94d      	cbnz	r5, d5c28 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5c14:	064a      	lsls	r2, r1, #25
   d5c16:	bf4c      	ite	mi
   d5c18:	f8de 2020 	ldrmi.w	r2, [lr, #32]
   d5c1c:	6a22      	ldrpl	r2, [r4, #32]
   d5c1e:	6122      	str	r2, [r4, #16]
   d5c20:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5c22:	f104 0810 	add.w	r8, r4, #16
   d5c26:	e00a      	b.n	d5c3e <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
   d5c28:	1a9b      	subs	r3, r3, r2
   d5c2a:	e7f9      	b.n	d5c20 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5c2c:	4642      	mov	r2, r8
   d5c2e:	6921      	ldr	r1, [r4, #16]
   d5c30:	68a0      	ldr	r0, [r4, #8]
   d5c32:	f000 fa3c 	bl	d60ae <_ZN9FatVolume6fatGetEmPm>
   d5c36:	2800      	cmp	r0, #0
   d5c38:	f105 35ff 	add.w	r5, r5, #4294967295
   d5c3c:	dd03      	ble.n	d5c46 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
   d5c3e:	2d00      	cmp	r5, #0
   d5c40:	d1f4      	bne.n	d5c2c <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
   d5c42:	6166      	str	r6, [r4, #20]
   d5c44:	e003      	b.n	d5c4e <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
   d5c46:	6127      	str	r7, [r4, #16]
  return false;
   d5c48:	2000      	movs	r0, #0
   d5c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
   d5c4e:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
   d5c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5c54 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c56:	460f      	mov	r7, r1
   d5c58:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5c5a:	2100      	movs	r1, #0
   d5c5c:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
   d5c5e:	4604      	mov	r4, r0
   d5c60:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
   d5c62:	f003 facd 	bl	d9200 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
   d5c66:	68b8      	ldr	r0, [r7, #8]
   d5c68:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5c6a:	f005 020f 	and.w	r2, r5, #15
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
   d5c6e:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5c70:	f100 0130 	add.w	r1, r0, #48	; 0x30
   d5c74:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
   d5c76:	6a3b      	ldr	r3, [r7, #32]
   d5c78:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5c7a:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5c7c:	7acb      	ldrb	r3, [r1, #11]
   d5c7e:	071d      	lsls	r5, r3, #28
   d5c80:	d44c      	bmi.n	d5d1c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5c82:	1883      	adds	r3, r0, r2
   d5c84:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5c88:	f003 0317 	and.w	r3, r3, #23
   d5c8c:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5c8e:	7ac9      	ldrb	r1, [r1, #11]
   d5c90:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   d5c94:	bf04      	itt	eq
   d5c96:	f043 0308 	orreq.w	r3, r3, #8
   d5c9a:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
   d5c9c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5ca0:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
   d5ca2:	f006 0303 	and.w	r3, r6, #3
   d5ca6:	2b01      	cmp	r3, #1
   d5ca8:	d009      	beq.n	d5cbe <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
   d5caa:	2b02      	cmp	r3, #2
   d5cac:	d005      	beq.n	d5cba <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
   d5cae:	2b00      	cmp	r3, #0
   d5cb0:	d134      	bne.n	d5d1c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
   d5cb2:	0571      	lsls	r1, r6, #21
   d5cb4:	d432      	bmi.n	d5d1c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
   d5cb6:	2301      	movs	r3, #1
   d5cb8:	e002      	b.n	d5cc0 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
   d5cba:	2303      	movs	r3, #3
   d5cbc:	e000      	b.n	d5cc0 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
   d5cbe:	2302      	movs	r3, #2
   d5cc0:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
   d5cc2:	78a1      	ldrb	r1, [r4, #2]
   d5cc4:	078b      	lsls	r3, r1, #30
   d5cc6:	d503      	bpl.n	d5cd0 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
   d5cc8:	7823      	ldrb	r3, [r4, #0]
   d5cca:	f013 0f11 	tst.w	r3, #17
   d5cce:	d125      	bne.n	d5d1c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5cd0:	b24b      	sxtb	r3, r1
   d5cd2:	f416 5f00 	tst.w	r6, #8192	; 0x2000
   d5cd6:	f006 0108 	and.w	r1, r6, #8
   d5cda:	bf14      	ite	ne
   d5cdc:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
   d5ce0:	2700      	moveq	r7, #0
   d5ce2:	4319      	orrs	r1, r3
   d5ce4:	4339      	orrs	r1, r7
   d5ce6:	70a1      	strb	r1, [r4, #2]
   d5ce8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();
   d5cea:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5cec:	4402      	add	r2, r0
                 | dir->firstClusterLow;

  if (oflag & O_TRUNC) {
   d5cee:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
   d5cf0:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
   d5cf4:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a
   d5cf8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
   d5cfc:	d504      	bpl.n	d5d08 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5cfe:	b181      	cbz	r1, d5d22 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5d00:	f000 fa75 	bl	d61ee <_ZN9FatVolume9freeChainEm>
   d5d04:	b968      	cbnz	r0, d5d22 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
   d5d06:	e009      	b.n	d5d1c <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
   d5d08:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5d0a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   d5d0c:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5d0e:	0473      	lsls	r3, r6, #17
   d5d10:	d50c      	bpl.n	d5d2c <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
   d5d12:	69e1      	ldr	r1, [r4, #28]
   d5d14:	4620      	mov	r0, r4
   d5d16:	f7ff ff54 	bl	d5bc2 <_ZN7FatFile7seekSetEm>
   d5d1a:	b938      	cbnz	r0, d5d2c <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
   d5d1c:	2000      	movs	r0, #0
   d5d1e:	7020      	strb	r0, [r4, #0]
  return false;
   d5d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
   d5d22:	78a3      	ldrb	r3, [r4, #2]
   d5d24:	f043 0304 	orr.w	r3, r3, #4
   d5d28:	70a3      	strb	r3, [r4, #2]
   d5d2a:	e7f0      	b.n	d5d0e <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
   d5d2c:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
   d5d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d30 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5d30:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5d32:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5d34:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5d36:	b90b      	cbnz	r3, d5d3c <_ZN7FatFile4syncEv+0xc>
    return true;
   d5d38:	2001      	movs	r0, #1
   d5d3a:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5d3c:	7883      	ldrb	r3, [r0, #2]
   d5d3e:	075a      	lsls	r2, r3, #29
   d5d40:	d523      	bpl.n	d5d8a <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5d42:	2101      	movs	r1, #1
   d5d44:	f7ff fe46 	bl	d59d4 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5d48:	4605      	mov	r5, r0
   d5d4a:	b928      	cbnz	r0, d5d58 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
   d5d4c:	7863      	ldrb	r3, [r4, #1]
   d5d4e:	f043 0301 	orr.w	r3, r3, #1
   d5d52:	7063      	strb	r3, [r4, #1]
  return false;
   d5d54:	2000      	movs	r0, #0
   d5d56:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5d58:	7803      	ldrb	r3, [r0, #0]
   d5d5a:	2be5      	cmp	r3, #229	; 0xe5
   d5d5c:	d0f6      	beq.n	d5d4c <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
   d5d5e:	7823      	ldrb	r3, [r4, #0]
   d5d60:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5d62:	bf44      	itt	mi
   d5d64:	69e3      	ldrmi	r3, [r4, #28]
   d5d66:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5d68:	8c23      	ldrh	r3, [r4, #32]
   d5d6a:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5d6c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5d6e:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
   d5d70:	4b09      	ldr	r3, [pc, #36]	; (d5d98 <_ZN7FatFile4syncEv+0x68>)
   d5d72:	681b      	ldr	r3, [r3, #0]
   d5d74:	b12b      	cbz	r3, d5d82 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5d76:	f100 0116 	add.w	r1, r0, #22
   d5d7a:	3018      	adds	r0, #24
   d5d7c:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5d7e:	8b2b      	ldrh	r3, [r5, #24]
   d5d80:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5d82:	78a3      	ldrb	r3, [r4, #2]
   d5d84:	f023 0304 	bic.w	r3, r3, #4
   d5d88:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
   d5d8a:	68a0      	ldr	r0, [r4, #8]
   d5d8c:	f7ff fabe 	bl	d530c <_ZN9FatVolume9cacheSyncEv>
   d5d90:	2800      	cmp	r0, #0
   d5d92:	d0db      	beq.n	d5d4c <_ZN7FatFile4syncEv+0x1c>
   d5d94:	e7d0      	b.n	d5d38 <_ZN7FatFile4syncEv+0x8>
   d5d96:	bf00      	nop
   d5d98:	2003e3c4 	.word	0x2003e3c4

000d5d9c <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
   d5d9c:	b510      	push	{r4, lr}
   d5d9e:	4604      	mov	r4, r0
  bool rtn = sync();
   d5da0:	f7ff ffc6 	bl	d5d30 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5da4:	2300      	movs	r3, #0
   d5da6:	7023      	strb	r3, [r4, #0]
  return rtn;
}
   d5da8:	bd10      	pop	{r4, pc}

000d5daa <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5daa:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5dac:	b093      	sub	sp, #76	; 0x4c
   d5dae:	461f      	mov	r7, r3
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5db0:	2300      	movs	r3, #0
   d5db2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   d5db6:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5dba:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5dbc:	9201      	str	r2, [sp, #4]
   d5dbe:	4606      	mov	r6, r0
   d5dc0:	460c      	mov	r4, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5dc2:	b10b      	cbz	r3, d5dc8 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
   d5dc4:	2000      	movs	r0, #0
   d5dc6:	e03d      	b.n	d5e44 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
   d5dc8:	780b      	ldrb	r3, [r1, #0]
   d5dca:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5dce:	d0f9      	beq.n	d5dc4 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
   d5dd0:	7813      	ldrb	r3, [r2, #0]
   d5dd2:	2b2f      	cmp	r3, #47	; 0x2f
   d5dd4:	d112      	bne.n	d5dfc <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
   d5dd6:	9b01      	ldr	r3, [sp, #4]
   d5dd8:	781a      	ldrb	r2, [r3, #0]
   d5dda:	2a2f      	cmp	r2, #47	; 0x2f
   d5ddc:	d102      	bne.n	d5de4 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
   d5dde:	3301      	adds	r3, #1
   d5de0:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
   d5de2:	e7f8      	b.n	d5dd6 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
   d5de4:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
   d5de6:	b91a      	cbnz	r2, d5df0 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
   d5de8:	4630      	mov	r0, r6
   d5dea:	f7ff fe02 	bl	d59f2 <_ZN7FatFile8openRootEP9FatVolume>
   d5dee:	e029      	b.n	d5e44 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5df0:	a809      	add	r0, sp, #36	; 0x24
   d5df2:	f7ff fdfe 	bl	d59f2 <_ZN7FatFile8openRootEP9FatVolume>
   d5df6:	2800      	cmp	r0, #0
   d5df8:	d0e4      	beq.n	d5dc4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
   d5dfa:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
   d5dfc:	aa01      	add	r2, sp, #4
   d5dfe:	a903      	add	r1, sp, #12
   d5e00:	9801      	ldr	r0, [sp, #4]
   d5e02:	f7ff fa9f 	bl	d5344 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5e06:	2800      	cmp	r0, #0
   d5e08:	d0dc      	beq.n	d5dc4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
   d5e0a:	9b01      	ldr	r3, [sp, #4]
   d5e0c:	781b      	ldrb	r3, [r3, #0]
   d5e0e:	b19b      	cbz	r3, d5e38 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5e10:	2300      	movs	r3, #0
   d5e12:	aa03      	add	r2, sp, #12
   d5e14:	4621      	mov	r1, r4
   d5e16:	4630      	mov	r0, r6
   d5e18:	f7ff fbd6 	bl	d55c8 <_ZN7FatFile4openEPS_P7fname_ti>
   d5e1c:	2800      	cmp	r0, #0
   d5e1e:	d0d1      	beq.n	d5dc4 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
   d5e20:	4635      	mov	r5, r6
   d5e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e24:	ac09      	add	r4, sp, #36	; 0x24
   d5e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5e2c:	682b      	ldr	r3, [r5, #0]
   d5e2e:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
   d5e30:	4630      	mov	r0, r6
   d5e32:	f7ff ffb3 	bl	d5d9c <_ZN7FatFile5closeEv>
   d5e36:	e7e0      	b.n	d5dfa <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
   d5e38:	463b      	mov	r3, r7
   d5e3a:	aa03      	add	r2, sp, #12
   d5e3c:	4621      	mov	r1, r4
   d5e3e:	4630      	mov	r0, r6
   d5e40:	f7ff fbc2 	bl	d55c8 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
   d5e44:	b013      	add	sp, #76	; 0x4c
   d5e46:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5e48 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e4c:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e4e:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e50:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5e52:	4604      	mov	r4, r0
   d5e54:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5e56:	d508      	bpl.n	d5e6a <_ZN7FatFile5writeEPKvj+0x22>
   d5e58:	7883      	ldrb	r3, [r0, #2]
   d5e5a:	079a      	lsls	r2, r3, #30
   d5e5c:	d505      	bpl.n	d5e6a <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d5e5e:	071b      	lsls	r3, r3, #28
   d5e60:	d50b      	bpl.n	d5e7a <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
   d5e62:	69e1      	ldr	r1, [r4, #28]
   d5e64:	f7ff fead 	bl	d5bc2 <_ZN7FatFile7seekSetEm>
   d5e68:	b938      	cbnz	r0, d5e7a <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d5e6a:	7863      	ldrb	r3, [r4, #1]
   d5e6c:	f043 0301 	orr.w	r3, r3, #1
   d5e70:	7063      	strb	r3, [r4, #1]
  return -1;
   d5e72:	f04f 30ff 	mov.w	r0, #4294967295
   d5e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d5e7a:	6963      	ldr	r3, [r4, #20]
   d5e7c:	43db      	mvns	r3, r3
   d5e7e:	4598      	cmp	r8, r3
   d5e80:	d8f3      	bhi.n	d5e6a <_ZN7FatFile5writeEPKvj+0x22>
   d5e82:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5e84:	f04f 0a00 	mov.w	sl, #0
   d5e88:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5e8a:	2e00      	cmp	r6, #0
   d5e8c:	f000 8081 	beq.w	d5f92 <_ZN7FatFile5writeEPKvj+0x14a>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d5e90:	68a0      	ldr	r0, [r4, #8]
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5e92:	7942      	ldrb	r2, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5e94:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d5e98:	f3c3 0708 	ubfx	r7, r3, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d5e9c:	d11c      	bne.n	d5ed8 <_ZN7FatFile5writeEPKvj+0x90>
   d5e9e:	b9df      	cbnz	r7, d5ed8 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
   d5ea0:	6921      	ldr	r1, [r4, #16]
   d5ea2:	b171      	cbz	r1, d5ec2 <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5ea4:	f104 0210 	add.w	r2, r4, #16
   d5ea8:	f000 f901 	bl	d60ae <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d5eac:	2800      	cmp	r0, #0
   d5eae:	dbdc      	blt.n	d5e6a <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d5eb0:	f040 808e 	bne.w	d5fd0 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
   d5eb4:	4620      	mov	r0, r4
   d5eb6:	f7ff fd43 	bl	d5940 <_ZN7FatFile10addClusterEv>
   d5eba:	2800      	cmp	r0, #0
   d5ebc:	f040 8088 	bne.w	d5fd0 <_ZN7FatFile5writeEPKvj+0x188>
   d5ec0:	e7d3      	b.n	d5e6a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
   d5ec2:	6a23      	ldr	r3, [r4, #32]
   d5ec4:	b93b      	cbnz	r3, d5ed6 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
   d5ec6:	4620      	mov	r0, r4
   d5ec8:	f7ff fd3a 	bl	d5940 <_ZN7FatFile10addClusterEv>
   d5ecc:	2800      	cmp	r0, #0
   d5ece:	d0cc      	beq.n	d5e6a <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
   d5ed0:	6923      	ldr	r3, [r4, #16]
   d5ed2:	6223      	str	r3, [r4, #32]
   d5ed4:	e000      	b.n	d5ed8 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
   d5ed6:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5ed8:	6921      	ldr	r1, [r4, #16]
   d5eda:	68a0      	ldr	r0, [r4, #8]
   d5edc:	f000 f8e1 	bl	d60a2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5ee0:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d5ee2:	b917      	cbnz	r7, d5eea <_ZN7FatFile5writeEPKvj+0xa2>
   d5ee4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5ee8:	d221      	bcs.n	d5f2e <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d5eea:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
   d5eee:	42b5      	cmp	r5, r6
   d5ef0:	bf28      	it	cs
   d5ef2:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d5ef4:	b937      	cbnz	r7, d5f04 <_ZN7FatFile5writeEPKvj+0xbc>
   d5ef6:	6963      	ldr	r3, [r4, #20]
   d5ef8:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d5efa:	4293      	cmp	r3, r2
   d5efc:	bf34      	ite	cc
   d5efe:	2201      	movcc	r2, #1
   d5f00:	2205      	movcs	r2, #5
   d5f02:	e000      	b.n	d5f06 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d5f04:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5f06:	68a0      	ldr	r0, [r4, #8]
   d5f08:	3024      	adds	r0, #36	; 0x24
   d5f0a:	f000 f8a6 	bl	d605a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d5f0e:	2800      	cmp	r0, #0
   d5f10:	d0ab      	beq.n	d5e6a <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5f12:	4438      	add	r0, r7
   d5f14:	462a      	mov	r2, r5
   d5f16:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d5f18:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d5f1a:	f003 f966 	bl	d91ea <memcpy>
      if (512 == (n + blockOffset)) {
   d5f1e:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   d5f22:	d130      	bne.n	d5f86 <_ZN7FatFile5writeEPKvj+0x13e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
   d5f24:	68a0      	ldr	r0, [r4, #8]
   d5f26:	3024      	adds	r0, #36	; 0x24
   d5f28:	f000 f870 	bl	d600c <_ZN8FatCache4syncEv>
   d5f2c:	e017      	b.n	d5f5e <_ZN7FatFile5writeEPKvj+0x116>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
   d5f2e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5f32:	68a0      	ldr	r0, [r4, #8]
   d5f34:	d315      	bcc.n	d5f62 <_ZN7FatFile5writeEPKvj+0x11a>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
   d5f36:	7902      	ldrb	r2, [r0, #4]
   d5f38:	1b52      	subs	r2, r2, r5
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
   d5f3a:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
   d5f3c:	b2d2      	uxtb	r2, r2
   d5f3e:	4293      	cmp	r3, r2
   d5f40:	bf28      	it	cs
   d5f42:	4613      	movcs	r3, r2
   d5f44:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5f46:	4291      	cmp	r1, r2
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
        nb = maxBlocks;
      }
      n = 512*nb;
   d5f48:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5f4c:	d302      	bcc.n	d5f54 <_ZN7FatFile5writeEPKvj+0x10c>
   d5f4e:	441a      	add	r2, r3
   d5f50:	4291      	cmp	r1, r2
   d5f52:	d337      	bcc.n	d5fc4 <_ZN7FatFile5writeEPKvj+0x17c>
   d5f54:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
   d5f56:	464a      	mov	r2, r9
   d5f58:	6838      	ldr	r0, [r7, #0]
   d5f5a:	f000 fc6d 	bl	d6838 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d5f5e:	b990      	cbnz	r0, d5f86 <_ZN7FatFile5writeEPKvj+0x13e>
   d5f60:	e783      	b.n	d5e6a <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
   d5f62:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5f64:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5f66:	bf02      	ittt	eq
   d5f68:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5f6c:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5f70:	62c3      	streq	r3, [r0, #44]	; 0x2c
   d5f72:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d5f74:	464a      	mov	r2, r9
   d5f76:	6818      	ldr	r0, [r3, #0]
   d5f78:	f000 fbec 	bl	d6754 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
   d5f7c:	2800      	cmp	r0, #0
   d5f7e:	f43f af74 	beq.w	d5e6a <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
   d5f82:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d5f86:	6963      	ldr	r3, [r4, #20]
   d5f88:	442b      	add	r3, r5
   d5f8a:	6163      	str	r3, [r4, #20]
    src += n;
   d5f8c:	44a9      	add	r9, r5
    nToWrite -= n;
   d5f8e:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   d5f90:	e77a      	b.n	d5e88 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   d5f92:	69e2      	ldr	r2, [r4, #28]
   d5f94:	4293      	cmp	r3, r2
   d5f96:	d901      	bls.n	d5f9c <_ZN7FatFile5writeEPKvj+0x154>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
   d5f98:	61e3      	str	r3, [r4, #28]
   d5f9a:	e002      	b.n	d5fa2 <_ZN7FatFile5writeEPKvj+0x15a>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
   d5f9c:	4b0f      	ldr	r3, [pc, #60]	; (d5fdc <_ZN7FatFile5writeEPKvj+0x194>)
   d5f9e:	681b      	ldr	r3, [r3, #0]
   d5fa0:	b11b      	cbz	r3, d5faa <_ZN7FatFile5writeEPKvj+0x162>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
   d5fa2:	78a3      	ldrb	r3, [r4, #2]
   d5fa4:	f043 0304 	orr.w	r3, r3, #4
   d5fa8:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
   d5faa:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d5fae:	2b00      	cmp	r3, #0
   d5fb0:	db02      	blt.n	d5fb8 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
   d5fb2:	4640      	mov	r0, r8
   d5fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
   d5fb8:	4620      	mov	r0, r4
   d5fba:	f7ff feb9 	bl	d5d30 <_ZN7FatFile4syncEv>
   d5fbe:	2800      	cmp	r0, #0
   d5fc0:	d1f7      	bne.n	d5fb2 <_ZN7FatFile5writeEPKvj+0x16a>
   d5fc2:	e752      	b.n	d5e6a <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d5fc4:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d5fc8:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d5fcc:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5fce:	e7c1      	b.n	d5f54 <_ZN7FatFile5writeEPKvj+0x10c>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5fd0:	6921      	ldr	r1, [r4, #16]
   d5fd2:	68a0      	ldr	r0, [r4, #8]
   d5fd4:	f000 f865 	bl	d60a2 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5fd8:	4601      	mov	r1, r0
   d5fda:	e783      	b.n	d5ee4 <_ZN7FatFile5writeEPKvj+0x9c>
   d5fdc:	2003e3c4 	.word	0x2003e3c4

000d5fe0 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
   d5fe0:	f000 be7c 	b.w	d6cdc <HAL_Pin_Map>

000d5fe4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5fe4:	b570      	push	{r4, r5, r6, lr}
   d5fe6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5fe8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5fea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5fec:	b149      	cbz	r1, d6002 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5fee:	f003 f949 	bl	d9284 <strlen>
   d5ff2:	682b      	ldr	r3, [r5, #0]
   d5ff4:	4602      	mov	r2, r0
   d5ff6:	4621      	mov	r1, r4
   d5ff8:	4628      	mov	r0, r5
   d5ffa:	68db      	ldr	r3, [r3, #12]
    }
   d5ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6000:	4718      	bx	r3
    }
   d6002:	bd70      	pop	{r4, r5, r6, pc}

000d6004 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
   d6004:	f000 be6a 	b.w	d6cdc <HAL_Pin_Map>

000d6008 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
   d6008:	f000 be68 	b.w	d6cdc <HAL_Pin_Map>

000d600c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d600c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d600e:	7803      	ldrb	r3, [r0, #0]
   d6010:	07da      	lsls	r2, r3, #31
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6012:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d6014:	d51e      	bpl.n	d6054 <_ZN8FatCache4syncEv+0x48>
   d6016:	6843      	ldr	r3, [r0, #4]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
   d6018:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d601a:	f100 060c 	add.w	r6, r0, #12
   d601e:	4632      	mov	r2, r6
   d6020:	6818      	ldr	r0, [r3, #0]
   d6022:	f000 fb97 	bl	d6754 <_ZN9SdSpiCard10writeBlockEmPKh>
   d6026:	4605      	mov	r5, r0
   d6028:	b908      	cbnz	r0, d602e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d602a:	2500      	movs	r5, #0
   d602c:	e013      	b.n	d6056 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d602e:	7823      	ldrb	r3, [r4, #0]
   d6030:	079b      	lsls	r3, r3, #30
   d6032:	d404      	bmi.n	d603e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   d6034:	7823      	ldrb	r3, [r4, #0]
   d6036:	f023 0301 	bic.w	r3, r3, #1
   d603a:	7023      	strb	r3, [r4, #0]
   d603c:	e00b      	b.n	d6056 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d603e:	6863      	ldr	r3, [r4, #4]
   d6040:	68a0      	ldr	r0, [r4, #8]
   d6042:	6919      	ldr	r1, [r3, #16]
   d6044:	4632      	mov	r2, r6
   d6046:	4401      	add	r1, r0
   d6048:	6818      	ldr	r0, [r3, #0]
   d604a:	f000 fb83 	bl	d6754 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d604e:	2800      	cmp	r0, #0
   d6050:	d1f0      	bne.n	d6034 <_ZN8FatCache4syncEv+0x28>
   d6052:	e7ea      	b.n	d602a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
   d6054:	2501      	movs	r5, #1

fail:
  return false;
}
   d6056:	4628      	mov	r0, r5
   d6058:	bd70      	pop	{r4, r5, r6, pc}

000d605a <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d605a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d605c:	6883      	ldr	r3, [r0, #8]
   d605e:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6060:	4604      	mov	r4, r0
   d6062:	460e      	mov	r6, r1
   d6064:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d6066:	d014      	beq.n	d6092 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
   d6068:	f7ff ffd0 	bl	d600c <_ZN8FatCache4syncEv>
   d606c:	b908      	cbnz	r0, d6072 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
   d606e:	2000      	movs	r0, #0
   d6070:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
   d6072:	076b      	lsls	r3, r5, #29
   d6074:	d503      	bpl.n	d607e <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
   d6076:	2300      	movs	r3, #0
   d6078:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d607a:	60a6      	str	r6, [r4, #8]
   d607c:	e009      	b.n	d6092 <_ZN8FatCache4readEmh+0x38>
   d607e:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
   d6080:	f104 020c 	add.w	r2, r4, #12
   d6084:	4631      	mov	r1, r6
   d6086:	6818      	ldr	r0, [r3, #0]
   d6088:	f000 fada 	bl	d6640 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d608c:	2800      	cmp	r0, #0
   d608e:	d1f2      	bne.n	d6076 <_ZN8FatCache4readEmh+0x1c>
   d6090:	e7ed      	b.n	d606e <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
   d6092:	7823      	ldrb	r3, [r4, #0]
   d6094:	4620      	mov	r0, r4
   d6096:	f005 0503 	and.w	r5, r5, #3
   d609a:	431d      	orrs	r5, r3
   d609c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
   d60a0:	bd70      	pop	{r4, r5, r6, pc}

000d60a2 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d60a2:	7983      	ldrb	r3, [r0, #6]
   d60a4:	6940      	ldr	r0, [r0, #20]
   d60a6:	3902      	subs	r1, #2
   d60a8:	4099      	lsls	r1, r3
}
   d60aa:	4408      	add	r0, r1
   d60ac:	4770      	bx	lr

000d60ae <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60ae:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d60b0:	b570      	push	{r4, r5, r6, lr}
   d60b2:	4605      	mov	r5, r0
   d60b4:	460c      	mov	r4, r1
   d60b6:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60b8:	d802      	bhi.n	d60c0 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d60ba:	f04f 30ff 	mov.w	r0, #4294967295
   d60be:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d60c0:	69c3      	ldr	r3, [r0, #28]
   d60c2:	4299      	cmp	r1, r3
   d60c4:	d8f9      	bhi.n	d60ba <_ZN9FatVolume6fatGetEmPm+0xc>
   d60c6:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d60c8:	2b20      	cmp	r3, #32
   d60ca:	d110      	bne.n	d60ee <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
   d60cc:	6981      	ldr	r1, [r0, #24]
   d60ce:	2202      	movs	r2, #2
   d60d0:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d60d4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d60d8:	f7ff ffbf 	bl	d605a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d60dc:	2800      	cmp	r0, #0
   d60de:	d0ec      	beq.n	d60ba <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d60e0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d60e4:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d60e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
   d60ec:	e00f      	b.n	d610e <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
   d60ee:	2b10      	cmp	r3, #16
   d60f0:	d1e3      	bne.n	d60ba <_ZN9FatVolume6fatGetEmPm+0xc>
   d60f2:	6983      	ldr	r3, [r0, #24]
   d60f4:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d60f8:	2202      	movs	r2, #2
   d60fa:	4419      	add	r1, r3
   d60fc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6100:	f7ff ffab 	bl	d605a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d6104:	2800      	cmp	r0, #0
   d6106:	d0d8      	beq.n	d60ba <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
   d6108:	b2e4      	uxtb	r4, r4
   d610a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
   d610e:	69ea      	ldr	r2, [r5, #28]
   d6110:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
   d6112:	bf9a      	itte	ls
   d6114:	6033      	strls	r3, [r6, #0]
  return 1;
   d6116:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
   d6118:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
   d611a:	bd70      	pop	{r4, r5, r6, pc}

000d611c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d611c:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d611e:	b538      	push	{r3, r4, r5, lr}
   d6120:	460c      	mov	r4, r1
   d6122:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6124:	d801      	bhi.n	d612a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d6126:	2000      	movs	r0, #0
   d6128:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d612a:	69c3      	ldr	r3, [r0, #28]
   d612c:	4299      	cmp	r1, r3
   d612e:	d8fa      	bhi.n	d6126 <_ZN9FatVolume6fatPutEmm+0xa>
   d6130:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
   d6132:	2b20      	cmp	r3, #32
   d6134:	d10e      	bne.n	d6154 <_ZN9FatVolume6fatPutEmm+0x38>
   d6136:	6981      	ldr	r1, [r0, #24]
   d6138:	2203      	movs	r2, #3
   d613a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d613e:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6142:	f7ff ff8a 	bl	d605a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d6146:	2800      	cmp	r0, #0
   d6148:	d0ed      	beq.n	d6126 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
   d614a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d614e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
   d6152:	e00f      	b.n	d6174 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
   d6154:	2b10      	cmp	r3, #16
   d6156:	d1e6      	bne.n	d6126 <_ZN9FatVolume6fatPutEmm+0xa>
   d6158:	6983      	ldr	r3, [r0, #24]
   d615a:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d615e:	2203      	movs	r2, #3
   d6160:	4419      	add	r1, r3
   d6162:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6166:	f7ff ff78 	bl	d605a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
   d616a:	2800      	cmp	r0, #0
   d616c:	d0db      	beq.n	d6126 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
   d616e:	b2e4      	uxtb	r4, r4
   d6170:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
   d6174:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
   d6176:	bd38      	pop	{r3, r4, r5, pc}

000d6178 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d617c:	68c4      	ldr	r4, [r0, #12]
   d617e:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6180:	4605      	mov	r5, r0
   d6182:	460e      	mov	r6, r1
   d6184:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
   d6186:	d207      	bcs.n	d6198 <_ZN9FatVolume15allocateClusterEmPm+0x20>
   d6188:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
   d618a:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
   d618c:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
   d618e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d6190:	429c      	cmp	r4, r3
   d6192:	d903      	bls.n	d619c <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
   d6194:	b9cf      	cbnz	r7, d61ca <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
   d6196:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   d6198:	2701      	movs	r7, #1
   d619a:	e7f7      	b.n	d618c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
   d619c:	42a6      	cmp	r6, r4
   d619e:	d014      	beq.n	d61ca <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
   d61a0:	aa01      	add	r2, sp, #4
   d61a2:	4621      	mov	r1, r4
   d61a4:	4628      	mov	r0, r5
   d61a6:	f7ff ff82 	bl	d60ae <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d61aa:	2800      	cmp	r0, #0
   d61ac:	db0d      	blt.n	d61ca <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
   d61ae:	d0ed      	beq.n	d618c <_ZN9FatVolume15allocateClusterEmPm+0x14>
   d61b0:	9b01      	ldr	r3, [sp, #4]
   d61b2:	2b00      	cmp	r3, #0
   d61b4:	d1ea      	bne.n	d618c <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
   d61b6:	b107      	cbz	r7, d61ba <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
   d61b8:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d61ba:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d61be:	4621      	mov	r1, r4
   d61c0:	4628      	mov	r0, r5
   d61c2:	f7ff ffab 	bl	d611c <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
   d61c6:	4607      	mov	r7, r0
   d61c8:	b908      	cbnz	r0, d61ce <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
   d61ca:	2700      	movs	r7, #0
   d61cc:	e00b      	b.n	d61e6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
   d61ce:	b916      	cbnz	r6, d61d6 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
   d61d0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d61d4:	e007      	b.n	d61e6 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
   d61d6:	4622      	mov	r2, r4
   d61d8:	4631      	mov	r1, r6
   d61da:	4628      	mov	r0, r5
   d61dc:	f7ff ff9e 	bl	d611c <_ZN9FatVolume6fatPutEmm>
   d61e0:	2800      	cmp	r0, #0
   d61e2:	d1f5      	bne.n	d61d0 <_ZN9FatVolume15allocateClusterEmPm+0x58>
   d61e4:	e7f1      	b.n	d61ca <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
   d61e6:	4638      	mov	r0, r7
   d61e8:	b002      	add	sp, #8
   d61ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d61ee <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d61ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d61f0:	4605      	mov	r5, r0
   d61f2:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d61f4:	aa01      	add	r2, sp, #4
   d61f6:	4621      	mov	r1, r4
   d61f8:	4628      	mov	r0, r5
   d61fa:	f7ff ff58 	bl	d60ae <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d61fe:	1e06      	subs	r6, r0, #0
   d6200:	da01      	bge.n	d6206 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
   d6202:	2000      	movs	r0, #0
   d6204:	e00f      	b.n	d6226 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d6206:	2200      	movs	r2, #0
   d6208:	4621      	mov	r1, r4
   d620a:	4628      	mov	r0, r5
   d620c:	f7ff ff86 	bl	d611c <_ZN9FatVolume6fatPutEmm>
   d6210:	2800      	cmp	r0, #0
   d6212:	d0f6      	beq.n	d6202 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d6214:	68eb      	ldr	r3, [r5, #12]
   d6216:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
   d6218:	bf9c      	itt	ls
   d621a:	f104 34ff 	addls.w	r4, r4, #4294967295
   d621e:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
   d6220:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
   d6222:	2e00      	cmp	r6, #0
   d6224:	d1e6      	bne.n	d61f4 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d6226:	b002      	add	sp, #8
   d6228:	bd70      	pop	{r4, r5, r6, pc}

000d622a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d622a:	b570      	push	{r4, r5, r6, lr}
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d622c:	2301      	movs	r3, #1

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
   d622e:	4604      	mov	r4, r0
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6230:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d6232:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
   d6234:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
   d6238:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d623a:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d623c:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d623e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6242:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
   d6244:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
   d6248:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d624c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
   d6250:	b1a1      	cbz	r1, d627c <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
   d6252:	2904      	cmp	r1, #4
   d6254:	d85d      	bhi.n	d6312 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d6256:	4611      	mov	r1, r2
   d6258:	3024      	adds	r0, #36	; 0x24
   d625a:	f7ff fefe 	bl	d605a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
   d625e:	2800      	cmp	r0, #0
   d6260:	d057      	beq.n	d6312 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d6262:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6266:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d626a:	065b      	lsls	r3, r3, #25
   d626c:	d151      	bne.n	d6312 <_ZN9FatVolume4initEh+0xe8>
   d626e:	351b      	adds	r5, #27
   d6270:	eb00 1505 	add.w	r5, r0, r5, lsl #4
   d6274:	f8d5 5006 	ldr.w	r5, [r5, #6]
   d6278:	2d00      	cmp	r5, #0
   d627a:	d04a      	beq.n	d6312 <_ZN9FatVolume4initEh+0xe8>
   d627c:	2200      	movs	r2, #0
   d627e:	4629      	mov	r1, r5
   d6280:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6284:	f7ff fee9 	bl	d605a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
   d6288:	2800      	cmp	r0, #0
   d628a:	d042      	beq.n	d6312 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
   d628c:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d6290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d6294:	d13d      	bne.n	d6312 <_ZN9FatVolume4initEh+0xe8>
   d6296:	7c03      	ldrb	r3, [r0, #16]
   d6298:	2b02      	cmp	r3, #2
   d629a:	d13a      	bne.n	d6312 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
   d629c:	89c3      	ldrh	r3, [r0, #14]
   d629e:	2b00      	cmp	r3, #0
   d62a0:	d037      	beq.n	d6312 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d62a2:	7b41      	ldrb	r1, [r0, #13]
   d62a4:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d62a6:	1e4b      	subs	r3, r1, #1
   d62a8:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
   d62aa:	2300      	movs	r3, #0
   d62ac:	71a3      	strb	r3, [r4, #6]
   d62ae:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d62b0:	2301      	movs	r3, #1
   d62b2:	428b      	cmp	r3, r1
   d62b4:	d007      	beq.n	d62c6 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
   d62b6:	3e01      	subs	r6, #1
   d62b8:	d02b      	beq.n	d6312 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d62ba:	79a2      	ldrb	r2, [r4, #6]
   d62bc:	005b      	lsls	r3, r3, #1
   d62be:	3201      	adds	r2, #1
   d62c0:	b2db      	uxtb	r3, r3
   d62c2:	71a2      	strb	r2, [r4, #6]
   d62c4:	e7f5      	b.n	d62b2 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d62c6:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
   d62c8:	b902      	cbnz	r2, d62cc <_ZN9FatVolume4initEh+0xa2>
   d62ca:	6a42      	ldr	r2, [r0, #36]	; 0x24
   d62cc:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d62ce:	89c6      	ldrh	r6, [r0, #14]
   d62d0:	442e      	add	r6, r5
   d62d2:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d62d4:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   d62d8:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d62da:	eb06 0142 	add.w	r1, r6, r2, lsl #1
   d62de:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d62e0:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d62e4:	0152      	lsls	r2, r2, #5
   d62e6:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
   d62ea:	eb01 2262 	add.w	r2, r1, r2, asr #9
   d62ee:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
   d62f0:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
   d62f4:	b903      	cbnz	r3, d62f8 <_ZN9FatVolume4initEh+0xce>
   d62f6:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d62f8:	1aad      	subs	r5, r5, r2
   d62fa:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
   d62fc:	79a5      	ldrb	r5, [r4, #6]
   d62fe:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
   d6302:	1c6b      	adds	r3, r5, #1
   d6304:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
   d6306:	f640 73f4 	movw	r3, #4084	; 0xff4
   d630a:	429d      	cmp	r5, r3
   d630c:	d803      	bhi.n	d6316 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
   d630e:	230c      	movs	r3, #12
   d6310:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d6312:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
   d6314:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
   d6316:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d631a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
   d631c:	bf85      	ittet	hi
   d631e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d6320:	6223      	strhi	r3, [r4, #32]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
   d6322:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
    m_fatType = 32;
   d6324:	2320      	movhi	r3, #32
   d6326:	71e3      	strb	r3, [r4, #7]
  }
  return true;
   d6328:	2001      	movs	r0, #1

fail:
  return false;
}
   d632a:	bd70      	pop	{r4, r5, r6, pc}

000d632c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
   d632c:	f000 bcd6 	b.w	d6cdc <HAL_Pin_Map>

000d6330 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
   d6330:	f000 bcd4 	b.w	d6cdc <HAL_Pin_Map>

000d6334 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
   d6334:	f000 bcd2 	b.w	d6cdc <HAL_Pin_Map>

000d6338 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6338:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d633a:	4c0e      	ldr	r4, [pc, #56]	; (d6374 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d633c:	460e      	mov	r6, r1
   d633e:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6340:	f000 fd44 	bl	d6dcc <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6344:	6823      	ldr	r3, [r4, #0]
   d6346:	1ac0      	subs	r0, r0, r3
   d6348:	4b0b      	ldr	r3, [pc, #44]	; (d6378 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d634a:	4298      	cmp	r0, r3
   d634c:	d908      	bls.n	d6360 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d634e:	f000 fd45 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6352:	4b0a      	ldr	r3, [pc, #40]	; (d637c <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6354:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6356:	f000 ff3d 	bl	d71d4 <spark_process>
   d635a:	f000 fd37 	bl	d6dcc <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d635e:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6360:	f000 fd3c 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6364:	b280      	uxth	r0, r0
   d6366:	1b80      	subs	r0, r0, r6
}
   d6368:	42a8      	cmp	r0, r5
   d636a:	bfd4      	ite	le
   d636c:	2000      	movle	r0, #0
   d636e:	2001      	movgt	r0, #1
   d6370:	bd70      	pop	{r4, r5, r6, pc}
   d6372:	bf00      	nop
   d6374:	2003e3c8 	.word	0x2003e3c8
   d6378:	000186a0 	.word	0x000186a0
   d637c:	2003e734 	.word	0x2003e734

000d6380 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6380:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d6382:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6384:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d6386:	b94d      	cbnz	r5, d639c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6388:	6840      	ldr	r0, [r0, #4]
   d638a:	f000 fa7d 	bl	d6888 <_ZN14SdSpiAltDriver8activateEv>
   d638e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6390:	4629      	mov	r1, r5
   d6392:	7d18      	ldrb	r0, [r3, #20]
   d6394:	f002 f91b 	bl	d85ce <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6398:	2301      	movs	r3, #1
   d639a:	7223      	strb	r3, [r4, #8]
   d639c:	bd38      	pop	{r3, r4, r5, pc}

000d639e <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d639e:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d63a0:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d63a2:	4604      	mov	r4, r0
  if (m_spiActive) {
   d63a4:	b16b      	cbz	r3, d63c2 <_ZN9SdSpiCard7spiStopEv+0x24>
   d63a6:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
   d63a8:	2101      	movs	r1, #1
   d63aa:	7d18      	ldrb	r0, [r3, #20]
   d63ac:	f002 f90f 	bl	d85ce <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d63b0:	21ff      	movs	r1, #255	; 0xff
   d63b2:	6860      	ldr	r0, [r4, #4]
   d63b4:	f000 fa9a 	bl	d68ec <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
   d63b8:	6860      	ldr	r0, [r4, #4]
   d63ba:	f000 fa79 	bl	d68b0 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d63be:	2300      	movs	r3, #0
   d63c0:	7223      	strb	r3, [r4, #8]
   d63c2:	bd10      	pop	{r4, pc}

000d63c4 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d63c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63c6:	4604      	mov	r4, r0
   d63c8:	460d      	mov	r5, r1
   d63ca:	4616      	mov	r6, r2
   d63cc:	f000 fd06 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d63d0:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d63d2:	6860      	ldr	r0, [r4, #4]
   d63d4:	f000 fa6f 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
   d63d8:	28ff      	cmp	r0, #255	; 0xff
   d63da:	7260      	strb	r0, [r4, #9]
   d63dc:	d109      	bne.n	d63f2 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d63de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d63e2:	4639      	mov	r1, r7
   d63e4:	4620      	mov	r0, r4
   d63e6:	f7ff ffa7 	bl	d6338 <_ZN9SdSpiCard10isTimedOutEtt>
   d63ea:	2800      	cmp	r0, #0
   d63ec:	d0f1      	beq.n	d63d2 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d63ee:	2355      	movs	r3, #85	; 0x55
   d63f0:	e00b      	b.n	d640a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
   d63f2:	28fe      	cmp	r0, #254	; 0xfe
   d63f4:	d001      	beq.n	d63fa <_ZN9SdSpiCard8readDataEPhj+0x36>
   d63f6:	2350      	movs	r3, #80	; 0x50
   d63f8:	e007      	b.n	d640a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
   d63fa:	4632      	mov	r2, r6
   d63fc:	4629      	mov	r1, r5
   d63fe:	6860      	ldr	r0, [r4, #4]
   d6400:	f000 fa5e 	bl	d68c0 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
   d6404:	7260      	strb	r0, [r4, #9]
   d6406:	b130      	cbz	r0, d6416 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6408:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
   d640a:	4620      	mov	r0, r4
   d640c:	7023      	strb	r3, [r4, #0]
   d640e:	f7ff ffc6 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6412:	2000      	movs	r0, #0
}
   d6414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6416:	6860      	ldr	r0, [r4, #4]
   d6418:	f000 fa4d 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
   d641c:	6860      	ldr	r0, [r4, #4]
   d641e:	f000 fa4a 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
   d6422:	2001      	movs	r0, #1
   d6424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6426 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6426:	b570      	push	{r4, r5, r6, lr}
   d6428:	4604      	mov	r4, r0
   d642a:	460e      	mov	r6, r1
   d642c:	f000 fcd6 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
   d6430:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6432:	4632      	mov	r2, r6
   d6434:	4629      	mov	r1, r5
   d6436:	4620      	mov	r0, r4
   d6438:	f7ff ff7e 	bl	d6338 <_ZN9SdSpiCard10isTimedOutEtt>
   d643c:	b930      	cbnz	r0, d644c <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d643e:	6860      	ldr	r0, [r4, #4]
   d6440:	f000 fa39 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6444:	28ff      	cmp	r0, #255	; 0xff
   d6446:	d1f4      	bne.n	d6432 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6448:	2001      	movs	r0, #1
   d644a:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
   d644c:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d644e:	bd70      	pop	{r4, r5, r6, pc}

000d6450 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
   d6452:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6454:	9201      	str	r2, [sp, #4]
   d6456:	4604      	mov	r4, r0
   d6458:	460d      	mov	r5, r1
  // select card
  if (!m_spiActive) {
   d645a:	b90b      	cbnz	r3, d6460 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d645c:	f7ff ff90 	bl	d6380 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
   d6460:	b125      	cbz	r5, d646c <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
   d6462:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6466:	4620      	mov	r0, r4
   d6468:	f7ff ffdd 	bl	d6426 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d646c:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6470:	6860      	ldr	r0, [r4, #4]
   d6472:	f000 fa3b 	bl	d68ec <_ZN14SdSpiAltDriver4sendEh>
   d6476:	f10d 0607 	add.w	r6, sp, #7
   d647a:	f10d 0703 	add.w	r7, sp, #3
   d647e:	f816 1901 	ldrb.w	r1, [r6], #-1
   d6482:	6860      	ldr	r0, [r4, #4]
   d6484:	f000 fa32 	bl	d68ec <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
   d6488:	42be      	cmp	r6, r7
   d648a:	d1f8      	bne.n	d647e <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d648c:	2d00      	cmp	r5, #0
   d648e:	bf0c      	ite	eq
   d6490:	2195      	moveq	r1, #149	; 0x95
   d6492:	2187      	movne	r1, #135	; 0x87
   d6494:	6860      	ldr	r0, [r4, #4]
   d6496:	f000 fa29 	bl	d68ec <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d649a:	6860      	ldr	r0, [r4, #4]
   d649c:	f000 fa0b 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
   d64a0:	250b      	movs	r5, #11
   d64a2:	6860      	ldr	r0, [r4, #4]
   d64a4:	f000 fa07 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d64a8:	0603      	lsls	r3, r0, #24
   d64aa:	7260      	strb	r0, [r4, #9]
   d64ac:	d503      	bpl.n	d64b6 <_ZN9SdSpiCard11cardCommandEhm+0x66>
   d64ae:	3d01      	subs	r5, #1
   d64b0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d64b4:	d1f5      	bne.n	d64a2 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
   d64b6:	b003      	add	sp, #12
   d64b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d64ba <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d64ba:	b570      	push	{r4, r5, r6, lr}
   d64bc:	4604      	mov	r4, r0
   d64be:	460d      	mov	r5, r1
   d64c0:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d64c2:	2137      	movs	r1, #55	; 0x37
   d64c4:	2200      	movs	r2, #0
   d64c6:	f7ff ffc3 	bl	d6450 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d64ca:	4632      	mov	r2, r6
   d64cc:	4629      	mov	r1, r5
   d64ce:	4620      	mov	r0, r4
  }
   d64d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
   d64d4:	f7ff bfbc 	b.w	d6450 <_ZN9SdSpiCard11cardCommandEhm>

000d64d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d64d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d64dc:	2500      	movs	r5, #0
   d64de:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d64e0:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d64e2:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d64e4:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d64e6:	4604      	mov	r4, r0
   d64e8:	4690      	mov	r8, r2
   d64ea:	461e      	mov	r6, r3
   d64ec:	f000 fc76 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
   d64f0:	4641      	mov	r1, r8
   d64f2:	4607      	mov	r7, r0
   d64f4:	6860      	ldr	r0, [r4, #4]
   d64f6:	f000 f9cb 	bl	d6890 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d64fa:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
   d64fc:	4a4f      	ldr	r2, [pc, #316]	; (d663c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
   d64fe:	721d      	strb	r5, [r3, #8]
   d6500:	f04f 0801 	mov.w	r8, #1
   d6504:	60da      	str	r2, [r3, #12]
   d6506:	745d      	strb	r5, [r3, #17]
   d6508:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
   d650c:	4620      	mov	r0, r4
   d650e:	f7ff ff37 	bl	d6380 <_ZN9SdSpiCard8spiStartEv>
   d6512:	6863      	ldr	r3, [r4, #4]
   d6514:	4641      	mov	r1, r8
   d6516:	7d18      	ldrb	r0, [r3, #20]
   d6518:	f002 f859 	bl	d85ce <digitalWrite>
   d651c:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d651e:	21ff      	movs	r1, #255	; 0xff
   d6520:	6860      	ldr	r0, [r4, #4]
   d6522:	3d01      	subs	r5, #1
   d6524:	f000 f9e2 	bl	d68ec <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
   d6528:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d652c:	d1f7      	bne.n	d651e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
   d652e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
   d6530:	4629      	mov	r1, r5
   d6532:	7d18      	ldrb	r0, [r3, #20]
   d6534:	f002 f84b 	bl	d85ce <digitalWrite>
   d6538:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d653a:	2200      	movs	r2, #0
   d653c:	4611      	mov	r1, r2
   d653e:	4620      	mov	r0, r4
   d6540:	f7ff ff86 	bl	d6450 <_ZN9SdSpiCard11cardCommandEhm>
   d6544:	2801      	cmp	r0, #1
   d6546:	4680      	mov	r8, r0
   d6548:	d012      	beq.n	d6570 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
   d654a:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
   d654c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6550:	d101      	bne.n	d6556 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6552:	2320      	movs	r3, #32
   d6554:	e057      	b.n	d6606 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6556:	21fd      	movs	r1, #253	; 0xfd
   d6558:	6860      	ldr	r0, [r4, #4]
   d655a:	f000 f9c7 	bl	d68ec <_ZN14SdSpiAltDriver4sendEh>
   d655e:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6562:	6860      	ldr	r0, [r4, #4]
   d6564:	f000 f9a7 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
   d6568:	f1b8 0801 	subs.w	r8, r8, #1
   d656c:	d1f9      	bne.n	d6562 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
   d656e:	e7e4      	b.n	d653a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6570:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6574:	2108      	movs	r1, #8
   d6576:	4620      	mov	r0, r4
   d6578:	f7ff ff6a 	bl	d6450 <_ZN9SdSpiCard11cardCommandEhm>
   d657c:	2805      	cmp	r0, #5
   d657e:	d102      	bne.n	d6586 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6580:	f884 800a 	strb.w	r8, [r4, #10]
   d6584:	e00f      	b.n	d65a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
   d6586:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6588:	6860      	ldr	r0, [r4, #4]
   d658a:	f000 f994 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
   d658e:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6590:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d6594:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
   d6596:	d1f7      	bne.n	d6588 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
   d6598:	28aa      	cmp	r0, #170	; 0xaa
   d659a:	d102      	bne.n	d65a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d659c:	2302      	movs	r3, #2
   d659e:	72a3      	strb	r3, [r4, #10]
   d65a0:	e001      	b.n	d65a6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d65a2:	2325      	movs	r3, #37	; 0x25
   d65a4:	e02f      	b.n	d6606 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d65a6:	7aa3      	ldrb	r3, [r4, #10]
   d65a8:	2b02      	cmp	r3, #2
   d65aa:	bf0c      	ite	eq
   d65ac:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
   d65b0:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d65b2:	b2bf      	uxth	r7, r7
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d65b4:	462a      	mov	r2, r5
   d65b6:	2129      	movs	r1, #41	; 0x29
   d65b8:	4620      	mov	r0, r4
   d65ba:	f7ff ff7e 	bl	d64ba <_ZN9SdSpiCard8cardAcmdEhm>
   d65be:	4602      	mov	r2, r0
   d65c0:	b148      	cbz	r0, d65d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d65c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d65c6:	4639      	mov	r1, r7
   d65c8:	4620      	mov	r0, r4
   d65ca:	f7ff feb5 	bl	d6338 <_ZN9SdSpiCard10isTimedOutEtt>
   d65ce:	2800      	cmp	r0, #0
   d65d0:	d0f0      	beq.n	d65b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
   d65d2:	2343      	movs	r3, #67	; 0x43
   d65d4:	e017      	b.n	d6606 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
   d65d6:	7aa3      	ldrb	r3, [r4, #10]
   d65d8:	2b02      	cmp	r3, #2
   d65da:	d00e      	beq.n	d65fa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
   d65dc:	4620      	mov	r0, r4
   d65de:	f7ff fede 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d65e2:	6863      	ldr	r3, [r4, #4]
   d65e4:	68b0      	ldr	r0, [r6, #8]
   d65e6:	7934      	ldrb	r4, [r6, #4]
   d65e8:	7b31      	ldrb	r1, [r6, #12]
   d65ea:	7b72      	ldrb	r2, [r6, #13]
   d65ec:	745a      	strb	r2, [r3, #17]
   d65ee:	60d8      	str	r0, [r3, #12]
   d65f0:	721c      	strb	r4, [r3, #8]
   d65f2:	7419      	strb	r1, [r3, #16]
  return true;
   d65f4:	2001      	movs	r0, #1
   d65f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
   d65fa:	213a      	movs	r1, #58	; 0x3a
   d65fc:	4620      	mov	r0, r4
   d65fe:	f7ff ff27 	bl	d6450 <_ZN9SdSpiCard11cardCommandEhm>
   d6602:	b138      	cbz	r0, d6614 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
   d6604:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
   d6606:	4620      	mov	r0, r4
   d6608:	7023      	strb	r3, [r4, #0]
   d660a:	f7ff fec8 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d660e:	2000      	movs	r0, #0
}
   d6610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6614:	6860      	ldr	r0, [r4, #4]
   d6616:	f000 f94e 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
   d661a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d661e:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
   d6620:	bf04      	itt	eq
   d6622:	2303      	moveq	r3, #3
   d6624:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6626:	6860      	ldr	r0, [r4, #4]
   d6628:	f000 f945 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
   d662c:	6860      	ldr	r0, [r4, #4]
   d662e:	f000 f942 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
   d6632:	6860      	ldr	r0, [r4, #4]
   d6634:	f000 f93f 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
   d6638:	e7d0      	b.n	d65dc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
   d663a:	bf00      	nop
   d663c:	0003d090 	.word	0x0003d090

000d6640 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6640:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6642:	7a83      	ldrb	r3, [r0, #10]
   d6644:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6646:	bf18      	it	ne
   d6648:	0249      	lslne	r1, r1, #9
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d664a:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d664c:	460a      	mov	r2, r1
   d664e:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6650:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
   d6652:	f7ff fefd 	bl	d6450 <_ZN9SdSpiCard11cardCommandEhm>
   d6656:	b110      	cbz	r0, d665e <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6658:	2330      	movs	r3, #48	; 0x30
   d665a:	7023      	strb	r3, [r4, #0]
   d665c:	e00b      	b.n	d6676 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
   d665e:	4629      	mov	r1, r5
   d6660:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6664:	4620      	mov	r0, r4
   d6666:	f7ff fead 	bl	d63c4 <_ZN9SdSpiCard8readDataEPhj>
   d666a:	4605      	mov	r5, r0
   d666c:	b118      	cbz	r0, d6676 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
   d666e:	4620      	mov	r0, r4
   d6670:	f7ff fe95 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6674:	e003      	b.n	d667e <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
   d6676:	4620      	mov	r0, r4
   d6678:	f7ff fe91 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d667c:	2500      	movs	r5, #0
}
   d667e:	4628      	mov	r0, r5
   d6680:	bd38      	pop	{r3, r4, r5, pc}

000d6682 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6682:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
   d6684:	7a83      	ldrb	r3, [r0, #10]
   d6686:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6688:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d668a:	bf18      	it	ne
   d668c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
   d668e:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6690:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
   d6692:	f7ff fedd 	bl	d6450 <_ZN9SdSpiCard11cardCommandEhm>
   d6696:	b130      	cbz	r0, d66a6 <_ZN9SdSpiCard9readStartEm+0x24>
   d6698:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
   d669a:	4620      	mov	r0, r4
   d669c:	7023      	strb	r3, [r4, #0]
   d669e:	f7ff fe7e 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d66a2:	2000      	movs	r0, #0
   d66a4:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
   d66a6:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d66a8:	bd10      	pop	{r4, pc}

000d66aa <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d66aa:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d66ac:	2200      	movs	r2, #0
   d66ae:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
   d66b0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d66b2:	f7ff fecd 	bl	d6450 <_ZN9SdSpiCard11cardCommandEhm>
   d66b6:	b130      	cbz	r0, d66c6 <_ZN9SdSpiCard8readStopEv+0x1c>
   d66b8:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
   d66ba:	4620      	mov	r0, r4
   d66bc:	7023      	strb	r3, [r4, #0]
   d66be:	f7ff fe6e 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d66c2:	2000      	movs	r0, #0
   d66c4:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
   d66c6:	4620      	mov	r0, r4
   d66c8:	f7ff fe69 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d66cc:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d66ce:	bd10      	pop	{r4, pc}

000d66d0 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d66d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66d2:	4605      	mov	r5, r0
   d66d4:	4616      	mov	r6, r2
   d66d6:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d66d8:	f7ff ffd3 	bl	d6682 <_ZN9SdSpiCard9readStartEm>
   d66dc:	b198      	cbz	r0, d6706 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
   d66de:	2400      	movs	r4, #0
   d66e0:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d66e2:	429f      	cmp	r7, r3
   d66e4:	eb06 2144 	add.w	r1, r6, r4, lsl #9
   d66e8:	d908      	bls.n	d66fc <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
   d66ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   d66ee:	4628      	mov	r0, r5
   d66f0:	f7ff fe68 	bl	d63c4 <_ZN9SdSpiCard8readDataEPhj>
   d66f4:	3401      	adds	r4, #1
   d66f6:	2800      	cmp	r0, #0
   d66f8:	d1f2      	bne.n	d66e0 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
   d66fa:	e004      	b.n	d6706 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
   d66fc:	4628      	mov	r0, r5
}
   d66fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
   d6702:	f7ff bfd2 	b.w	d66aa <_ZN9SdSpiCard8readStopEv>
}
   d6706:	2000      	movs	r0, #0
   d6708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d670a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d670a:	b538      	push	{r3, r4, r5, lr}
   d670c:	4604      	mov	r4, r0
   d670e:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6710:	6840      	ldr	r0, [r0, #4]
   d6712:	f000 f8eb 	bl	d68ec <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   d6716:	f44f 7200 	mov.w	r2, #512	; 0x200
   d671a:	4629      	mov	r1, r5
   d671c:	6860      	ldr	r0, [r4, #4]
   d671e:	f000 f8e9 	bl	d68f4 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6722:	21ff      	movs	r1, #255	; 0xff
   d6724:	6860      	ldr	r0, [r4, #4]
   d6726:	f000 f8e1 	bl	d68ec <_ZN14SdSpiAltDriver4sendEh>
   d672a:	21ff      	movs	r1, #255	; 0xff
   d672c:	6860      	ldr	r0, [r4, #4]
   d672e:	f000 f8dd 	bl	d68ec <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d6732:	6860      	ldr	r0, [r4, #4]
   d6734:	f000 f8bf 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6738:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d673a:	f000 001f 	and.w	r0, r0, #31
   d673e:	2805      	cmp	r0, #5
   d6740:	d006      	beq.n	d6750 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d6742:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6744:	4620      	mov	r0, r4
   d6746:	7023      	strb	r3, [r4, #0]
   d6748:	f7ff fe29 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d674c:	2000      	movs	r0, #0
   d674e:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
   d6750:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d6752:	bd38      	pop	{r3, r4, r5, pc}

000d6754 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6754:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6756:	7a83      	ldrb	r3, [r0, #10]
   d6758:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d675a:	bf18      	it	ne
   d675c:	0249      	lslne	r1, r1, #9
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d675e:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6760:	460a      	mov	r2, r1
   d6762:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6764:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
   d6766:	f7ff fe73 	bl	d6450 <_ZN9SdSpiCard11cardCommandEhm>
   d676a:	4606      	mov	r6, r0
   d676c:	b108      	cbz	r0, d6772 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
   d676e:	2332      	movs	r3, #50	; 0x32
   d6770:	e01d      	b.n	d67ae <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
   d6772:	462a      	mov	r2, r5
   d6774:	21fe      	movs	r1, #254	; 0xfe
   d6776:	4620      	mov	r0, r4
   d6778:	f7ff ffc7 	bl	d670a <_ZN9SdSpiCard9writeDataEhPKh>
   d677c:	b1c0      	cbz	r0, d67b0 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d677e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6782:	4620      	mov	r0, r4
   d6784:	f7ff fe4f 	bl	d6426 <_ZN9SdSpiCard11waitNotBusyEt>
   d6788:	4605      	mov	r5, r0
   d678a:	b908      	cbnz	r0, d6790 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
   d678c:	235a      	movs	r3, #90	; 0x5a
   d678e:	e00e      	b.n	d67ae <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6790:	4632      	mov	r2, r6
   d6792:	210d      	movs	r1, #13
   d6794:	4620      	mov	r0, r4
   d6796:	f7ff fe5b 	bl	d6450 <_ZN9SdSpiCard11cardCommandEhm>
   d679a:	b938      	cbnz	r0, d67ac <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
   d679c:	6860      	ldr	r0, [r4, #4]
   d679e:	f000 f88a 	bl	d68b6 <_ZN14SdSpiAltDriver7receiveEv>
   d67a2:	b918      	cbnz	r0, d67ac <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
   d67a4:	4620      	mov	r0, r4
   d67a6:	f7ff fdfa 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return true;
   d67aa:	e005      	b.n	d67b8 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d67ac:	2329      	movs	r3, #41	; 0x29
   d67ae:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
   d67b0:	4620      	mov	r0, r4
   d67b2:	f7ff fdf4 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d67b6:	2500      	movs	r5, #0
}
   d67b8:	4628      	mov	r0, r5
   d67ba:	bd70      	pop	{r4, r5, r6, pc}

000d67bc <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d67bc:	b538      	push	{r3, r4, r5, lr}
   d67be:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67c0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
   d67c4:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d67c6:	f7ff fe2e 	bl	d6426 <_ZN9SdSpiCard11waitNotBusyEt>
   d67ca:	b910      	cbnz	r0, d67d2 <_ZN9SdSpiCard9writeDataEPKh+0x16>
   d67cc:	235b      	movs	r3, #91	; 0x5b
   d67ce:	7023      	strb	r3, [r4, #0]
   d67d0:	e005      	b.n	d67de <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d67d2:	462a      	mov	r2, r5
   d67d4:	21fc      	movs	r1, #252	; 0xfc
   d67d6:	4620      	mov	r0, r4
   d67d8:	f7ff ff97 	bl	d670a <_ZN9SdSpiCard9writeDataEhPKh>
   d67dc:	b918      	cbnz	r0, d67e6 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
   d67de:	4620      	mov	r0, r4
   d67e0:	f7ff fddd 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d67e4:	2000      	movs	r0, #0
}
   d67e6:	bd38      	pop	{r3, r4, r5, pc}

000d67e8 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d67e8:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d67ea:	7a83      	ldrb	r3, [r0, #10]
   d67ec:	2b03      	cmp	r3, #3
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d67ee:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
   d67f0:	bf18      	it	ne
   d67f2:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d67f4:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d67f6:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
   d67f8:	f7ff fe2a 	bl	d6450 <_ZN9SdSpiCard11cardCommandEhm>
   d67fc:	b130      	cbz	r0, d680c <_ZN9SdSpiCard10writeStartEm+0x24>
   d67fe:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6800:	4620      	mov	r0, r4
   d6802:	7023      	strb	r3, [r4, #0]
   d6804:	f7ff fdcb 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6808:	2000      	movs	r0, #0
   d680a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
   d680c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
   d680e:	bd10      	pop	{r4, pc}

000d6810 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6810:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6812:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6816:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6818:	f7ff fe05 	bl	d6426 <_ZN9SdSpiCard11waitNotBusyEt>
   d681c:	4605      	mov	r5, r0
   d681e:	b120      	cbz	r0, d682a <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   d6820:	21fd      	movs	r1, #253	; 0xfd
   d6822:	6860      	ldr	r0, [r4, #4]
   d6824:	f000 f862 	bl	d68ec <_ZN14SdSpiAltDriver4sendEh>
   d6828:	e001      	b.n	d682e <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
   d682a:	2356      	movs	r3, #86	; 0x56
   d682c:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
   d682e:	4620      	mov	r0, r4
   d6830:	f7ff fdb5 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d6834:	4628      	mov	r0, r5
   d6836:	bd38      	pop	{r3, r4, r5, pc}

000d6838 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d683a:	4605      	mov	r5, r0
   d683c:	4616      	mov	r6, r2
   d683e:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6840:	f7ff ffd2 	bl	d67e8 <_ZN9SdSpiCard10writeStartEm>
   d6844:	b170      	cbz	r0, d6864 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
   d6846:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6848:	42bc      	cmp	r4, r7
   d684a:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d684e:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6850:	d004      	beq.n	d685c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6852:	f7ff ffb3 	bl	d67bc <_ZN9SdSpiCard9writeDataEPKh>
   d6856:	b128      	cbz	r0, d6864 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
   d6858:	3401      	adds	r4, #1
   d685a:	e7f5      	b.n	d6848 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
   d685c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
   d6860:	f7ff bfd6 	b.w	d6810 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
   d6864:	4628      	mov	r0, r5
   d6866:	f7ff fd9a 	bl	d639e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
   d686a:	2000      	movs	r0, #0
   d686c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d686e <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
   d686e:	f000 ba35 	b.w	d6cdc <HAL_Pin_Map>

000d6872 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
   d6872:	f000 ba33 	b.w	d6cdc <HAL_Pin_Map>

000d6876 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
   d6876:	f000 ba31 	b.w	d6cdc <HAL_Pin_Map>
	...

000d687c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d687c:	4b01      	ldr	r3, [pc, #4]	; (d6884 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d687e:	2201      	movs	r2, #1
   d6880:	701a      	strb	r2, [r3, #0]
   d6882:	4770      	bx	lr
   d6884:	2003e3cc 	.word	0x2003e3cc

000d6888 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d6888:	1d01      	adds	r1, r0, #4
   d688a:	6800      	ldr	r0, [r0, #0]
   d688c:	f000 bd5a 	b.w	d7344 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

000d6890 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d6890:	b510      	push	{r4, lr}
   d6892:	4604      	mov	r4, r0
  m_csPin = csPin;
   d6894:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d6896:	6800      	ldr	r0, [r0, #0]
   d6898:	f000 fd36 	bl	d7308 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d689c:	7d20      	ldrb	r0, [r4, #20]
   d689e:	2101      	movs	r1, #1
   d68a0:	f001 fe84 	bl	d85ac <pinMode>
  digitalWrite(m_csPin, HIGH);
   d68a4:	7d20      	ldrb	r0, [r4, #20]
   d68a6:	2101      	movs	r1, #1
}
   d68a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
   d68ac:	f001 be8f 	b.w	d85ce <digitalWrite>

000d68b0 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d68b0:	6800      	ldr	r0, [r0, #0]
   d68b2:	f000 bd2e 	b.w	d7312 <_ZN8SPIClass14endTransactionEv>

000d68b6 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d68b6:	21ff      	movs	r1, #255	; 0xff
   d68b8:	6800      	ldr	r0, [r0, #0]
   d68ba:	f000 bdb3 	b.w	d7424 <_ZN8SPIClass8transferEh>
	...

000d68c0 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d68c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d68c2:	4b08      	ldr	r3, [pc, #32]	; (d68e4 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d68c4:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d68c6:	2500      	movs	r5, #0
   d68c8:	4c07      	ldr	r4, [pc, #28]	; (d68e8 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d68ca:	6800      	ldr	r0, [r0, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
   d68cc:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d68ce:	4613      	mov	r3, r2
   d68d0:	460a      	mov	r2, r1
   d68d2:	4629      	mov	r1, r5
   d68d4:	f000 fdac 	bl	d7430 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d68d8:	7823      	ldrb	r3, [r4, #0]
   d68da:	2b00      	cmp	r3, #0
   d68dc:	d0fc      	beq.n	d68d8 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d68de:	2000      	movs	r0, #0
   d68e0:	b003      	add	sp, #12
   d68e2:	bd30      	pop	{r4, r5, pc}
   d68e4:	000d687d 	.word	0x000d687d
   d68e8:	2003e3cc 	.word	0x2003e3cc

000d68ec <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d68ec:	6800      	ldr	r0, [r0, #0]
   d68ee:	f000 bd99 	b.w	d7424 <_ZN8SPIClass8transferEh>
	...

000d68f4 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d68f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d68f6:	4b07      	ldr	r3, [pc, #28]	; (d6914 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d68f8:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d68fa:	2500      	movs	r5, #0
   d68fc:	4c06      	ldr	r4, [pc, #24]	; (d6918 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d68fe:	6800      	ldr	r0, [r0, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
   d6900:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
   d6902:	4613      	mov	r3, r2
   d6904:	462a      	mov	r2, r5
   d6906:	f000 fd93 	bl	d7430 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
   d690a:	7823      	ldrb	r3, [r4, #0]
   d690c:	2b00      	cmp	r3, #0
   d690e:	d0fc      	beq.n	d690a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d6910:	b003      	add	sp, #12
   d6912:	bd30      	pop	{r4, r5, pc}
   d6914:	000d687d 	.word	0x000d687d
   d6918:	2003e3cc 	.word	0x2003e3cc

000d691c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
   d691c:	f000 b9de 	b.w	d6cdc <HAL_Pin_Map>

000d6920 <_ZL9date2daysthh>:

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
   d6920:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
// utility code, some of this could be exposed in the DateTime API if needed

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
   d6924:	b530      	push	{r4, r5, lr}
    if (y >= 2000)
        y -= 2000;
   d6926:	bf28      	it	cs
   d6928:	f5a0 60fa 	subcs.w	r0, r0, #2000	; 0x7d0
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
        days += pgm_read_byte(daysInMonth + i - 1);
   d692c:	4d10      	ldr	r5, [pc, #64]	; (d6970 <_ZL9date2daysthh+0x50>)
const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
   d692e:	bf28      	it	cs
   d6930:	b280      	uxthcs	r0, r0
    uint16_t days = d;
   d6932:	b292      	uxth	r2, r2
   d6934:	2300      	movs	r3, #0
   d6936:	3301      	adds	r3, #1
    for (uint8_t i = 1; i < m; ++i)
   d6938:	b2dc      	uxtb	r4, r3
   d693a:	42a1      	cmp	r1, r4
   d693c:	d905      	bls.n	d694a <_ZL9date2daysthh+0x2a>
        days += pgm_read_byte(daysInMonth + i - 1);
   d693e:	18ec      	adds	r4, r5, r3
   d6940:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   d6944:	4422      	add	r2, r4
   d6946:	b292      	uxth	r2, r2
// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
    for (uint8_t i = 1; i < m; ++i)
   d6948:	e7f5      	b.n	d6936 <_ZL9date2daysthh+0x16>
        days += pgm_read_byte(daysInMonth + i - 1);
    if (m > 2 && y % 4 == 0)
   d694a:	2902      	cmp	r1, #2
   d694c:	d903      	bls.n	d6956 <_ZL9date2daysthh+0x36>
   d694e:	0783      	lsls	r3, r0, #30
        ++days;
   d6950:	bf04      	itt	eq
   d6952:	3201      	addeq	r2, #1
   d6954:	b292      	uxtheq	r2, r2
    return days + 365 * y + (y + 3) / 4 - 1;
   d6956:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
   d695a:	1cc1      	adds	r1, r0, #3
   d695c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   d6960:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d6964:	1e43      	subs	r3, r0, #1
   d6966:	eb03 00a1 	add.w	r0, r3, r1, asr #2
   d696a:	4410      	add	r0, r2
}
   d696c:	b280      	uxth	r0, r0
   d696e:	bd30      	pop	{r4, r5, pc}
   d6970:	000d970a 	.word	0x000d970a

000d6974 <_ZL18write_i2c_registerhhh.constprop.7>:

  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
   d6974:	b538      	push	{r3, r4, r5, lr}
   d6976:	460c      	mov	r4, r1
   d6978:	4605      	mov	r5, r0
  Wire.beginTransmission(addr);
   d697a:	f001 fe65 	bl	d8648 <_Z19__fetch_global_Wirev>
   d697e:	2168      	movs	r1, #104	; 0x68
   d6980:	f001 f989 	bl	d7c96 <_ZN7TwoWire17beginTransmissionEh>
  Wire._I2C_WRITE((byte)reg);
   d6984:	f001 fe60 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6988:	6803      	ldr	r3, [r0, #0]
   d698a:	4629      	mov	r1, r5
   d698c:	689b      	ldr	r3, [r3, #8]
   d698e:	4798      	blx	r3
  Wire._I2C_WRITE((byte)val);
   d6990:	f001 fe5a 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6994:	6803      	ldr	r3, [r0, #0]
   d6996:	4621      	mov	r1, r4
   d6998:	689b      	ldr	r3, [r3, #8]
   d699a:	4798      	blx	r3
  Wire.endTransmission();
   d699c:	f001 fe54 	bl	d8648 <_Z19__fetch_global_Wirev>
}
   d69a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
  Wire._I2C_WRITE((byte)val);
  Wire.endTransmission();
   d69a4:	f001 b982 	b.w	d7cac <_ZN7TwoWire15endTransmissionEv>

000d69a8 <_ZL17read_i2c_registerhh.constprop.8>:
 #define _I2C_WRITE send
 #define _I2C_READ  receive
#endif


static uint8_t read_i2c_register(uint8_t addr, uint8_t reg) {
   d69a8:	b510      	push	{r4, lr}
   d69aa:	4604      	mov	r4, r0
  Wire.beginTransmission(addr);
   d69ac:	f001 fe4c 	bl	d8648 <_Z19__fetch_global_Wirev>
   d69b0:	2168      	movs	r1, #104	; 0x68
   d69b2:	f001 f970 	bl	d7c96 <_ZN7TwoWire17beginTransmissionEh>
  Wire._I2C_WRITE((byte)reg);
   d69b6:	f001 fe47 	bl	d8648 <_Z19__fetch_global_Wirev>
   d69ba:	6803      	ldr	r3, [r0, #0]
   d69bc:	4621      	mov	r1, r4
   d69be:	689b      	ldr	r3, [r3, #8]
   d69c0:	4798      	blx	r3
  Wire.endTransmission();
   d69c2:	f001 fe41 	bl	d8648 <_Z19__fetch_global_Wirev>
   d69c6:	f001 f971 	bl	d7cac <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(addr, (byte)1);
   d69ca:	f001 fe3d 	bl	d8648 <_Z19__fetch_global_Wirev>
   d69ce:	2201      	movs	r2, #1
   d69d0:	2168      	movs	r1, #104	; 0x68
   d69d2:	f001 f958 	bl	d7c86 <_ZN7TwoWire11requestFromEhh>
  return Wire._I2C_READ();
   d69d6:	f001 fe37 	bl	d8648 <_Z19__fetch_global_Wirev>
   d69da:	6803      	ldr	r3, [r0, #0]
   d69dc:	695b      	ldr	r3, [r3, #20]
   d69de:	4798      	blx	r3
}
   d69e0:	b2c0      	uxtb	r0, r0
   d69e2:	bd10      	pop	{r4, pc}

000d69e4 <_ZN8DateTimeC1Em>:
////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970
   d69e4:	4b23      	ldr	r3, [pc, #140]	; (d6a74 <_ZN8DateTimeC1Em+0x90>)

    ss = t % 60;
   d69e6:	223c      	movs	r2, #60	; 0x3c
////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970
   d69e8:	440b      	add	r3, r1

////////////////////////////////////////////////////////////////////////////////
// DateTime implementation - ignores time zones and DST changes
// NOTE: also ignores leap seconds, see http://en.wikipedia.org/wiki/Leap_second

DateTime::DateTime (uint32_t t) {
   d69ea:	b530      	push	{r4, r5, lr}
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970

    ss = t % 60;
   d69ec:	fbb3 f4f2 	udiv	r4, r3, r2
   d69f0:	fb02 3114 	mls	r1, r2, r4, r3
   d69f4:	7141      	strb	r1, [r0, #5]
    t /= 60;
    mm = t % 60;
   d69f6:	fbb4 f1f2 	udiv	r1, r4, r2
   d69fa:	fb02 4211 	mls	r2, r2, r1, r4
    t /= 60;
    hh = t % 24;
   d69fe:	2418      	movs	r4, #24
DateTime::DateTime (uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000;    // bring to 2000 timestamp from 1970

    ss = t % 60;
    t /= 60;
    mm = t % 60;
   d6a00:	7102      	strb	r2, [r0, #4]
    t /= 60;
    hh = t % 24;
   d6a02:	f44f 6261 	mov.w	r2, #3600	; 0xe10
   d6a06:	fbb3 f2f2 	udiv	r2, r3, r2
   d6a0a:	fbb2 f1f4 	udiv	r1, r2, r4
   d6a0e:	fb04 2211 	mls	r2, r4, r1, r2
   d6a12:	70c2      	strb	r2, [r0, #3]
    uint16_t days = t / 24;
   d6a14:	4a18      	ldr	r2, [pc, #96]	; (d6a78 <_ZN8DateTimeC1Em+0x94>)
   d6a16:	fbb3 f3f2 	udiv	r3, r3, r2
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   d6a1a:	2200      	movs	r2, #0
    ss = t % 60;
    t /= 60;
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
   d6a1c:	b29b      	uxth	r3, r3
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   d6a1e:	7002      	strb	r2, [r0, #0]
        leap = yOff % 4 == 0;
   d6a20:	7801      	ldrb	r1, [r0, #0]
   d6a22:	f011 0403 	ands.w	r4, r1, #3
   d6a26:	bf0c      	ite	eq
   d6a28:	2201      	moveq	r2, #1
   d6a2a:	2200      	movne	r2, #0
        if (days < 365 + leap)
   d6a2c:	f502 75b6 	add.w	r5, r2, #364	; 0x16c
   d6a30:	429d      	cmp	r5, r3
   d6a32:	da07      	bge.n	d6a44 <_ZN8DateTimeC1Em+0x60>
            break;
        days -= 365 + leap;
   d6a34:	f5c2 427e 	rsb	r2, r2, #65024	; 0xfe00
   d6a38:	3293      	adds	r2, #147	; 0x93
   d6a3a:	4413      	add	r3, r2
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   d6a3c:	3101      	adds	r1, #1
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
   d6a3e:	b29b      	uxth	r3, r3
    mm = t % 60;
    t /= 60;
    hh = t % 24;
    uint16_t days = t / 24;
    uint8_t leap;
    for (yOff = 0; ; ++yOff) {
   d6a40:	7001      	strb	r1, [r0, #0]
   d6a42:	e7ed      	b.n	d6a20 <_ZN8DateTimeC1Em+0x3c>
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   d6a44:	2201      	movs	r2, #1
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   d6a46:	4d0d      	ldr	r5, [pc, #52]	; (d6a7c <_ZN8DateTimeC1Em+0x98>)
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   d6a48:	7042      	strb	r2, [r0, #1]
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
   d6a4a:	7841      	ldrb	r1, [r0, #1]
   d6a4c:	186a      	adds	r2, r5, r1
   d6a4e:	f812 2c01 	ldrb.w	r2, [r2, #-1]
        if (leap && m == 2)
   d6a52:	b91c      	cbnz	r4, d6a5c <_ZN8DateTimeC1Em+0x78>
   d6a54:	2902      	cmp	r1, #2
            ++daysPerMonth;
   d6a56:	bf04      	itt	eq
   d6a58:	3201      	addeq	r2, #1
   d6a5a:	b2d2      	uxtbeq	r2, r2
        if (days < daysPerMonth)
   d6a5c:	b292      	uxth	r2, r2
   d6a5e:	4293      	cmp	r3, r2
   d6a60:	d304      	bcc.n	d6a6c <_ZN8DateTimeC1Em+0x88>
            break;
        days -= daysPerMonth;
   d6a62:	1a9b      	subs	r3, r3, r2
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   d6a64:	3101      	adds	r1, #1
        uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
        if (leap && m == 2)
            ++daysPerMonth;
        if (days < daysPerMonth)
            break;
        days -= daysPerMonth;
   d6a66:	b29b      	uxth	r3, r3
        leap = yOff % 4 == 0;
        if (days < 365 + leap)
            break;
        days -= 365 + leap;
    }
    for (m = 1; ; ++m) {
   d6a68:	7041      	strb	r1, [r0, #1]
   d6a6a:	e7ee      	b.n	d6a4a <_ZN8DateTimeC1Em+0x66>
            ++daysPerMonth;
        if (days < daysPerMonth)
            break;
        days -= daysPerMonth;
    }
    d = days + 1;
   d6a6c:	3301      	adds	r3, #1
   d6a6e:	7083      	strb	r3, [r0, #2]
}
   d6a70:	bd30      	pop	{r4, r5, pc}
   d6a72:	bf00      	nop
   d6a74:	c792bc80 	.word	0xc792bc80
   d6a78:	00015180 	.word	0x00015180
   d6a7c:	000d970a 	.word	0x000d970a

000d6a80 <_ZN8DateTimeC1Ethhhhh>:

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
   d6a80:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
        year -= 2000;
    yOff = year;
    m = month;
    d = day;
   d6a84:	7083      	strb	r3, [r0, #2]
    hh = hour;
   d6a86:	f89d 3000 	ldrb.w	r3, [sp]
   d6a8a:	70c3      	strb	r3, [r0, #3]
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
   d6a8c:	bf28      	it	cs
   d6a8e:	f5a1 61fa 	subcs.w	r1, r1, #2000	; 0x7d0
    yOff = year;
    m = month;
    d = day;
    hh = hour;
    mm = min;
   d6a92:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d6a96:	7103      	strb	r3, [r0, #4]
    d = days + 1;
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
   d6a98:	bf28      	it	cs
   d6a9a:	b289      	uxthcs	r1, r1
    yOff = year;
    m = month;
    d = day;
    hh = hour;
    mm = min;
    ss = sec;
   d6a9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   d6aa0:	7001      	strb	r1, [r0, #0]
    m = month;
   d6aa2:	7042      	strb	r2, [r0, #1]
    d = day;
    hh = hour;
    mm = min;
    ss = sec;
   d6aa4:	7143      	strb	r3, [r0, #5]
}
   d6aa6:	4770      	bx	lr

000d6aa8 <_ZNK8DateTime8unixtimeEv>:
uint8_t DateTime::dayOfTheWeek() const {    
    uint16_t day = date2days(yOff, m, d);
    return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
}

uint32_t DateTime::unixtime(void) const {
   d6aa8:	b510      	push	{r4, lr}
   d6aaa:	4604      	mov	r4, r0
  uint32_t t;
  uint16_t days = date2days(yOff, m, d);
   d6aac:	7882      	ldrb	r2, [r0, #2]
   d6aae:	7841      	ldrb	r1, [r0, #1]
   d6ab0:	7800      	ldrb	r0, [r0, #0]
   d6ab2:	f7ff ff35 	bl	d6920 <_ZL9date2daysthh>
  t = time2long(days, hh, mm, ss);
   d6ab6:	78e2      	ldrb	r2, [r4, #3]
   d6ab8:	2318      	movs	r3, #24
   d6aba:	fb03 2000 	mla	r0, r3, r0, r2
   d6abe:	7923      	ldrb	r3, [r4, #4]
   d6ac0:	223c      	movs	r2, #60	; 0x3c
   d6ac2:	fb02 3000 	mla	r0, r2, r0, r3
   d6ac6:	7963      	ldrb	r3, [r4, #5]
   d6ac8:	fb02 3300 	mla	r3, r2, r0, r3
  t += SECONDS_FROM_1970_TO_2000;  // seconds from 1970 to 2000

  return t;
}
   d6acc:	4801      	ldr	r0, [pc, #4]	; (d6ad4 <_ZNK8DateTime8unixtimeEv+0x2c>)
   d6ace:	4418      	add	r0, r3
   d6ad0:	bd10      	pop	{r4, pc}
   d6ad2:	bf00      	nop
   d6ad4:	386d4380 	.word	0x386d4380

000d6ad8 <_ZN10RTC_DS32315beginEv>:


////////////////////////////////////////////////////////////////////////////////
// RTC_DS3231 implementation

boolean RTC_DS3231::begin(void) {
   d6ad8:	b508      	push	{r3, lr}
  Wire.begin();
   d6ada:	f001 fdb5 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6ade:	f001 f8c3 	bl	d7c68 <_ZN7TwoWire5beginEv>
  return true;
}
   d6ae2:	2001      	movs	r0, #1
   d6ae4:	bd08      	pop	{r3, pc}

000d6ae6 <_ZN10RTC_DS32319lostPowerEv>:

bool RTC_DS3231::lostPower(void) {
   d6ae6:	b508      	push	{r3, lr}
  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
   d6ae8:	200f      	movs	r0, #15
   d6aea:	f7ff ff5d 	bl	d69a8 <_ZL17read_i2c_registerhh.constprop.8>
}
   d6aee:	f3c0 10c0 	ubfx	r0, r0, #7, #1
   d6af2:	bd08      	pop	{r3, pc}

000d6af4 <_ZN10RTC_DS32316adjustERK8DateTime>:

void RTC_DS3231::adjust(const DateTime& dt) {
   d6af4:	b538      	push	{r3, r4, r5, lr}
   d6af6:	4605      	mov	r5, r0
  Wire.beginTransmission(DS3231_ADDRESS);
   d6af8:	f001 fda6 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6afc:	2168      	movs	r1, #104	; 0x68
   d6afe:	f001 f8ce 	bl	d7c9e <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0); // start at location 0
   d6b02:	f001 fda1 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6b06:	6803      	ldr	r3, [r0, #0]
   d6b08:	2100      	movs	r1, #0
   d6b0a:	689b      	ldr	r3, [r3, #8]
   d6b0c:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.second()));
   d6b0e:	f001 fd9b 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6b12:	796b      	ldrb	r3, [r5, #5]
   d6b14:	240a      	movs	r4, #10
   d6b16:	fbb3 f1f4 	udiv	r1, r3, r4
   d6b1a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d6b1e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   d6b22:	6803      	ldr	r3, [r0, #0]
   d6b24:	b2c9      	uxtb	r1, r1
   d6b26:	689b      	ldr	r3, [r3, #8]
   d6b28:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
   d6b2a:	f001 fd8d 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6b2e:	792b      	ldrb	r3, [r5, #4]
   d6b30:	fbb3 f1f4 	udiv	r1, r3, r4
   d6b34:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d6b38:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   d6b3c:	6803      	ldr	r3, [r0, #0]
   d6b3e:	b2c9      	uxtb	r1, r1
   d6b40:	689b      	ldr	r3, [r3, #8]
   d6b42:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
   d6b44:	f001 fd80 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6b48:	78eb      	ldrb	r3, [r5, #3]
   d6b4a:	fbb3 f1f4 	udiv	r1, r3, r4
   d6b4e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d6b52:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   d6b56:	6803      	ldr	r3, [r0, #0]
   d6b58:	b2c9      	uxtb	r1, r1
   d6b5a:	689b      	ldr	r3, [r3, #8]
   d6b5c:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(0));
   d6b5e:	f001 fd73 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6b62:	6803      	ldr	r3, [r0, #0]
   d6b64:	2100      	movs	r1, #0
   d6b66:	689b      	ldr	r3, [r3, #8]
   d6b68:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.day()));
   d6b6a:	f001 fd6d 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6b6e:	78ab      	ldrb	r3, [r5, #2]
   d6b70:	fbb3 f1f4 	udiv	r1, r3, r4
   d6b74:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d6b78:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   d6b7c:	6803      	ldr	r3, [r0, #0]
   d6b7e:	b2c9      	uxtb	r1, r1
   d6b80:	689b      	ldr	r3, [r3, #8]
   d6b82:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.month()));
   d6b84:	f001 fd60 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6b88:	786b      	ldrb	r3, [r5, #1]
   d6b8a:	fbb3 f1f4 	udiv	r1, r3, r4
   d6b8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   d6b92:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   d6b96:	6803      	ldr	r3, [r0, #0]
   d6b98:	b2c9      	uxtb	r1, r1
   d6b9a:	689b      	ldr	r3, [r3, #8]
   d6b9c:	4798      	blx	r3
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
   d6b9e:	f001 fd53 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6ba2:	7829      	ldrb	r1, [r5, #0]
   d6ba4:	6803      	ldr	r3, [r0, #0]
   d6ba6:	fbb1 f4f4 	udiv	r4, r1, r4
   d6baa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   d6bae:	eb01 0144 	add.w	r1, r1, r4, lsl #1
   d6bb2:	689b      	ldr	r3, [r3, #8]
   d6bb4:	b2c9      	uxtb	r1, r1
   d6bb6:	4798      	blx	r3
  Wire.endTransmission();
   d6bb8:	f001 fd46 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6bbc:	f001 f876 	bl	d7cac <_ZN7TwoWire15endTransmissionEv>

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
   d6bc0:	200f      	movs	r0, #15
   d6bc2:	f7ff fef1 	bl	d69a8 <_ZL17read_i2c_registerhh.constprop.8>
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
   d6bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
   d6bca:	f000 017f 	and.w	r1, r0, #127	; 0x7f
   d6bce:	200f      	movs	r0, #15
   d6bd0:	f7ff bed0 	b.w	d6974 <_ZL18write_i2c_registerhhh.constprop.7>

000d6bd4 <_ZN10RTC_DS32313nowEv>:
}

DateTime RTC_DS3231::now() {
   d6bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d6bd8:	4604      	mov	r4, r0
  Wire.beginTransmission(DS3231_ADDRESS);
   d6bda:	f001 fd35 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6bde:	2168      	movs	r1, #104	; 0x68
   d6be0:	f001 f85d 	bl	d7c9e <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)0);	
   d6be4:	f001 fd30 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6be8:	6803      	ldr	r3, [r0, #0]
   d6bea:	2100      	movs	r1, #0
   d6bec:	689b      	ldr	r3, [r3, #8]
   d6bee:	4798      	blx	r3
  Wire.endTransmission();
   d6bf0:	f001 fd2a 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6bf4:	f001 f85a 	bl	d7cac <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(DS3231_ADDRESS, 7);
   d6bf8:	f001 fd26 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6bfc:	2207      	movs	r2, #7
   d6bfe:	2168      	movs	r1, #104	; 0x68
   d6c00:	f001 f844 	bl	d7c8c <_ZN7TwoWire11requestFromEii>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   d6c04:	f001 fd20 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6c08:	6803      	ldr	r3, [r0, #0]
   d6c0a:	695b      	ldr	r3, [r3, #20]
   d6c0c:	4798      	blx	r3
   d6c0e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d6c12:	1105      	asrs	r5, r0, #4
   d6c14:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
   d6c18:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   d6c1c:	b2c5      	uxtb	r5, r0
  Wire._I2C_WRITE((byte)0);	
  Wire.endTransmission();

  Wire.requestFrom(DS3231_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   d6c1e:	f001 fd13 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6c22:	6803      	ldr	r3, [r0, #0]
   d6c24:	695b      	ldr	r3, [r3, #20]
   d6c26:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d6c28:	f3c0 1603 	ubfx	r6, r0, #4, #4
   d6c2c:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   d6c30:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   d6c34:	b2c6      	uxtb	r6, r0
  Wire.endTransmission();

  Wire.requestFrom(DS3231_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   d6c36:	f001 fd07 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6c3a:	6803      	ldr	r3, [r0, #0]
   d6c3c:	695b      	ldr	r3, [r3, #20]
   d6c3e:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d6c40:	f3c0 1703 	ubfx	r7, r0, #4, #4
   d6c44:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   d6c48:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   d6c4c:	b2c7      	uxtb	r7, r0

  Wire.requestFrom(DS3231_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
   d6c4e:	f001 fcfb 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6c52:	6803      	ldr	r3, [r0, #0]
   d6c54:	695b      	ldr	r3, [r3, #20]
   d6c56:	4798      	blx	r3
  uint8_t d = bcd2bin(Wire._I2C_READ());
   d6c58:	f001 fcf6 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6c5c:	6803      	ldr	r3, [r0, #0]
   d6c5e:	695b      	ldr	r3, [r3, #20]
   d6c60:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d6c62:	f3c0 1803 	ubfx	r8, r0, #4, #4
   d6c66:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   d6c6a:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   d6c6e:	fa5f f880 	uxtb.w	r8, r0
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
   d6c72:	f001 fce9 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6c76:	6803      	ldr	r3, [r0, #0]
   d6c78:	695b      	ldr	r3, [r3, #20]
   d6c7a:	4798      	blx	r3
}

////////////////////////////////////////////////////////////////////////////////
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d6c7c:	f3c0 1903 	ubfx	r9, r0, #4, #4
   d6c80:	eba9 0989 	sub.w	r9, r9, r9, lsl #2
   d6c84:	eb00 0049 	add.w	r0, r0, r9, lsl #1
   d6c88:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(Wire._I2C_READ());
  uint8_t hh = bcd2bin(Wire._I2C_READ());
  Wire._I2C_READ();
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   d6c8c:	f001 fcdc 	bl	d8648 <_Z19__fetch_global_Wirev>
   d6c90:	6803      	ldr	r3, [r0, #0]
   d6c92:	695b      	ldr	r3, [r3, #20]
   d6c94:	4798      	blx	r3
}

DateTime::DateTime (uint16_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t min, uint8_t sec) {
    if (year >= 2000)
        year -= 2000;
    yOff = year;
   d6c96:	f3c0 1303 	ubfx	r3, r0, #4, #4
   d6c9a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d6c9e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   d6ca2:	7020      	strb	r0, [r4, #0]
    m = month;
   d6ca4:	f884 9001 	strb.w	r9, [r4, #1]
    d = day;
   d6ca8:	f884 8002 	strb.w	r8, [r4, #2]
    hh = hour;
   d6cac:	70e7      	strb	r7, [r4, #3]
    mm = min;
   d6cae:	7126      	strb	r6, [r4, #4]
    ss = sec;
   d6cb0:	7165      	strb	r5, [r4, #5]
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
  
  return DateTime (y, m, d, hh, mm, ss);
}
   d6cb2:	4620      	mov	r0, r4
   d6cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d6cb8 <_GLOBAL__sub_I__ZN8DateTimeC2Em>:
   d6cb8:	f000 b810 	b.w	d6cdc <HAL_Pin_Map>

000d6cbc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6cbc:	b508      	push	{r3, lr}
   d6cbe:	4b02      	ldr	r3, [pc, #8]	; (d6cc8 <netdb_freeaddrinfo+0xc>)
   d6cc0:	681b      	ldr	r3, [r3, #0]
   d6cc2:	689b      	ldr	r3, [r3, #8]
   d6cc4:	9301      	str	r3, [sp, #4]
   d6cc6:	bd08      	pop	{r3, pc}
   d6cc8:	00030268 	.word	0x00030268

000d6ccc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6ccc:	b508      	push	{r3, lr}
   d6cce:	4b02      	ldr	r3, [pc, #8]	; (d6cd8 <netdb_getaddrinfo+0xc>)
   d6cd0:	681b      	ldr	r3, [r3, #0]
   d6cd2:	68db      	ldr	r3, [r3, #12]
   d6cd4:	9301      	str	r3, [sp, #4]
   d6cd6:	bd08      	pop	{r3, pc}
   d6cd8:	00030268 	.word	0x00030268

000d6cdc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d6cdc:	b508      	push	{r3, lr}
   d6cde:	4b02      	ldr	r3, [pc, #8]	; (d6ce8 <HAL_Pin_Map+0xc>)
   d6ce0:	681b      	ldr	r3, [r3, #0]
   d6ce2:	681b      	ldr	r3, [r3, #0]
   d6ce4:	9301      	str	r3, [sp, #4]
   d6ce6:	bd08      	pop	{r3, pc}
   d6ce8:	0003022c 	.word	0x0003022c

000d6cec <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6cec:	b508      	push	{r3, lr}
   d6cee:	4b02      	ldr	r3, [pc, #8]	; (d6cf8 <HAL_Pin_Mode+0xc>)
   d6cf0:	681b      	ldr	r3, [r3, #0]
   d6cf2:	689b      	ldr	r3, [r3, #8]
   d6cf4:	9301      	str	r3, [sp, #4]
   d6cf6:	bd08      	pop	{r3, pc}
   d6cf8:	0003022c 	.word	0x0003022c

000d6cfc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6cfc:	b508      	push	{r3, lr}
   d6cfe:	4b02      	ldr	r3, [pc, #8]	; (d6d08 <HAL_Get_Pin_Mode+0xc>)
   d6d00:	681b      	ldr	r3, [r3, #0]
   d6d02:	68db      	ldr	r3, [r3, #12]
   d6d04:	9301      	str	r3, [sp, #4]
   d6d06:	bd08      	pop	{r3, pc}
   d6d08:	0003022c 	.word	0x0003022c

000d6d0c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6d0c:	b508      	push	{r3, lr}
   d6d0e:	4b02      	ldr	r3, [pc, #8]	; (d6d18 <HAL_GPIO_Write+0xc>)
   d6d10:	681b      	ldr	r3, [r3, #0]
   d6d12:	691b      	ldr	r3, [r3, #16]
   d6d14:	9301      	str	r3, [sp, #4]
   d6d16:	bd08      	pop	{r3, pc}
   d6d18:	0003022c 	.word	0x0003022c

000d6d1c <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
   d6d1c:	b508      	push	{r3, lr}
   d6d1e:	4b02      	ldr	r3, [pc, #8]	; (d6d28 <HAL_Pulse_In+0xc>)
   d6d20:	681b      	ldr	r3, [r3, #0]
   d6d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6d24:	9301      	str	r3, [sp, #4]
   d6d26:	bd08      	pop	{r3, pc}
   d6d28:	0003022c 	.word	0x0003022c

000d6d2c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d6d2c:	b508      	push	{r3, lr}
   d6d2e:	4b02      	ldr	r3, [pc, #8]	; (d6d38 <HAL_SPI_Begin+0xc>)
   d6d30:	681b      	ldr	r3, [r3, #0]
   d6d32:	681b      	ldr	r3, [r3, #0]
   d6d34:	9301      	str	r3, [sp, #4]
   d6d36:	bd08      	pop	{r3, pc}
   d6d38:	00030230 	.word	0x00030230

000d6d3c <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d6d3c:	b508      	push	{r3, lr}
   d6d3e:	4b02      	ldr	r3, [pc, #8]	; (d6d48 <HAL_SPI_Send_Receive_Data+0xc>)
   d6d40:	681b      	ldr	r3, [r3, #0]
   d6d42:	695b      	ldr	r3, [r3, #20]
   d6d44:	9301      	str	r3, [sp, #4]
   d6d46:	bd08      	pop	{r3, pc}
   d6d48:	00030230 	.word	0x00030230

000d6d4c <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d6d4c:	b508      	push	{r3, lr}
   d6d4e:	4b02      	ldr	r3, [pc, #8]	; (d6d58 <HAL_SPI_Init+0xc>)
   d6d50:	681b      	ldr	r3, [r3, #0]
   d6d52:	69db      	ldr	r3, [r3, #28]
   d6d54:	9301      	str	r3, [sp, #4]
   d6d56:	bd08      	pop	{r3, pc}
   d6d58:	00030230 	.word	0x00030230

000d6d5c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d6d5c:	b508      	push	{r3, lr}
   d6d5e:	4b02      	ldr	r3, [pc, #8]	; (d6d68 <HAL_SPI_Is_Enabled+0xc>)
   d6d60:	681b      	ldr	r3, [r3, #0]
   d6d62:	6a1b      	ldr	r3, [r3, #32]
   d6d64:	9301      	str	r3, [sp, #4]
   d6d66:	bd08      	pop	{r3, pc}
   d6d68:	00030230 	.word	0x00030230

000d6d6c <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d6d6c:	b508      	push	{r3, lr}
   d6d6e:	4b02      	ldr	r3, [pc, #8]	; (d6d78 <HAL_SPI_Info+0xc>)
   d6d70:	681b      	ldr	r3, [r3, #0]
   d6d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6d74:	9301      	str	r3, [sp, #4]
   d6d76:	bd08      	pop	{r3, pc}
   d6d78:	00030230 	.word	0x00030230

000d6d7c <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
   d6d7c:	b508      	push	{r3, lr}
   d6d7e:	4b02      	ldr	r3, [pc, #8]	; (d6d88 <HAL_SPI_DMA_Transfer+0xc>)
   d6d80:	681b      	ldr	r3, [r3, #0]
   d6d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6d84:	9301      	str	r3, [sp, #4]
   d6d86:	bd08      	pop	{r3, pc}
   d6d88:	00030230 	.word	0x00030230

000d6d8c <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
   d6d8c:	b508      	push	{r3, lr}
   d6d8e:	4b02      	ldr	r3, [pc, #8]	; (d6d98 <HAL_SPI_DMA_Transfer_Status+0xc>)
   d6d90:	681b      	ldr	r3, [r3, #0]
   d6d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6d94:	9301      	str	r3, [sp, #4]
   d6d96:	bd08      	pop	{r3, pc}
   d6d98:	00030230 	.word	0x00030230

000d6d9c <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6d9c:	b508      	push	{r3, lr}
   d6d9e:	4b02      	ldr	r3, [pc, #8]	; (d6da8 <HAL_SPI_Set_Settings+0xc>)
   d6da0:	681b      	ldr	r3, [r3, #0]
   d6da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6da4:	9301      	str	r3, [sp, #4]
   d6da6:	bd08      	pop	{r3, pc}
   d6da8:	00030230 	.word	0x00030230

000d6dac <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6dac:	b508      	push	{r3, lr}
   d6dae:	4b02      	ldr	r3, [pc, #8]	; (d6db8 <if_index_to_name+0xc>)
   d6db0:	681b      	ldr	r3, [r3, #0]
   d6db2:	695b      	ldr	r3, [r3, #20]
   d6db4:	9301      	str	r3, [sp, #4]
   d6db6:	bd08      	pop	{r3, pc}
   d6db8:	0003026c 	.word	0x0003026c

000d6dbc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6dbc:	b508      	push	{r3, lr}
   d6dbe:	4b02      	ldr	r3, [pc, #8]	; (d6dc8 <HAL_RNG_GetRandomNumber+0xc>)
   d6dc0:	681b      	ldr	r3, [r3, #0]
   d6dc2:	685b      	ldr	r3, [r3, #4]
   d6dc4:	9301      	str	r3, [sp, #4]
   d6dc6:	bd08      	pop	{r3, pc}
   d6dc8:	00030218 	.word	0x00030218

000d6dcc <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d6dcc:	b508      	push	{r3, lr}
   d6dce:	4b02      	ldr	r3, [pc, #8]	; (d6dd8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d6dd0:	681b      	ldr	r3, [r3, #0]
   d6dd2:	691b      	ldr	r3, [r3, #16]
   d6dd4:	9301      	str	r3, [sp, #4]
   d6dd6:	bd08      	pop	{r3, pc}
   d6dd8:	00030218 	.word	0x00030218

000d6ddc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6ddc:	b508      	push	{r3, lr}
   d6dde:	4b02      	ldr	r3, [pc, #8]	; (d6de8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6de0:	681b      	ldr	r3, [r3, #0]
   d6de2:	695b      	ldr	r3, [r3, #20]
   d6de4:	9301      	str	r3, [sp, #4]
   d6de6:	bd08      	pop	{r3, pc}
   d6de8:	00030218 	.word	0x00030218

000d6dec <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6dec:	b508      	push	{r3, lr}
   d6dee:	4b02      	ldr	r3, [pc, #8]	; (d6df8 <os_thread_is_current+0xc>)
   d6df0:	681b      	ldr	r3, [r3, #0]
   d6df2:	689b      	ldr	r3, [r3, #8]
   d6df4:	9301      	str	r3, [sp, #4]
   d6df6:	bd08      	pop	{r3, pc}
   d6df8:	00030248 	.word	0x00030248

000d6dfc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6dfc:	b508      	push	{r3, lr}
   d6dfe:	4b02      	ldr	r3, [pc, #8]	; (d6e08 <os_thread_join+0xc>)
   d6e00:	681b      	ldr	r3, [r3, #0]
   d6e02:	691b      	ldr	r3, [r3, #16]
   d6e04:	9301      	str	r3, [sp, #4]
   d6e06:	bd08      	pop	{r3, pc}
   d6e08:	00030248 	.word	0x00030248

000d6e0c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6e0c:	b508      	push	{r3, lr}
   d6e0e:	4b02      	ldr	r3, [pc, #8]	; (d6e18 <os_thread_cleanup+0xc>)
   d6e10:	681b      	ldr	r3, [r3, #0]
   d6e12:	695b      	ldr	r3, [r3, #20]
   d6e14:	9301      	str	r3, [sp, #4]
   d6e16:	bd08      	pop	{r3, pc}
   d6e18:	00030248 	.word	0x00030248

000d6e1c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6e1c:	b508      	push	{r3, lr}
   d6e1e:	4b02      	ldr	r3, [pc, #8]	; (d6e28 <os_mutex_create+0xc>)
   d6e20:	681b      	ldr	r3, [r3, #0]
   d6e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e24:	9301      	str	r3, [sp, #4]
   d6e26:	bd08      	pop	{r3, pc}
   d6e28:	00030248 	.word	0x00030248

000d6e2c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6e2c:	b508      	push	{r3, lr}
   d6e2e:	4b02      	ldr	r3, [pc, #8]	; (d6e38 <os_mutex_lock+0xc>)
   d6e30:	681b      	ldr	r3, [r3, #0]
   d6e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6e34:	9301      	str	r3, [sp, #4]
   d6e36:	bd08      	pop	{r3, pc}
   d6e38:	00030248 	.word	0x00030248

000d6e3c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6e3c:	b508      	push	{r3, lr}
   d6e3e:	4b02      	ldr	r3, [pc, #8]	; (d6e48 <os_mutex_unlock+0xc>)
   d6e40:	681b      	ldr	r3, [r3, #0]
   d6e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6e44:	9301      	str	r3, [sp, #4]
   d6e46:	bd08      	pop	{r3, pc}
   d6e48:	00030248 	.word	0x00030248

000d6e4c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6e4c:	b508      	push	{r3, lr}
   d6e4e:	4b02      	ldr	r3, [pc, #8]	; (d6e58 <os_mutex_recursive_create+0xc>)
   d6e50:	681b      	ldr	r3, [r3, #0]
   d6e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6e54:	9301      	str	r3, [sp, #4]
   d6e56:	bd08      	pop	{r3, pc}
   d6e58:	00030248 	.word	0x00030248

000d6e5c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6e5c:	b508      	push	{r3, lr}
   d6e5e:	4b02      	ldr	r3, [pc, #8]	; (d6e68 <inet_inet_ntop+0xc>)
   d6e60:	681b      	ldr	r3, [r3, #0]
   d6e62:	695b      	ldr	r3, [r3, #20]
   d6e64:	9301      	str	r3, [sp, #4]
   d6e66:	bd08      	pop	{r3, pc}
   d6e68:	00030264 	.word	0x00030264

000d6e6c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6e6c:	b508      	push	{r3, lr}
   d6e6e:	4b02      	ldr	r3, [pc, #8]	; (d6e78 <inet_htonl+0xc>)
   d6e70:	681b      	ldr	r3, [r3, #0]
   d6e72:	6a1b      	ldr	r3, [r3, #32]
   d6e74:	9301      	str	r3, [sp, #4]
   d6e76:	bd08      	pop	{r3, pc}
   d6e78:	00030264 	.word	0x00030264

000d6e7c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6e7c:	b508      	push	{r3, lr}
   d6e7e:	4b02      	ldr	r3, [pc, #8]	; (d6e88 <inet_htons+0xc>)
   d6e80:	681b      	ldr	r3, [r3, #0]
   d6e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6e84:	9301      	str	r3, [sp, #4]
   d6e86:	bd08      	pop	{r3, pc}
   d6e88:	00030264 	.word	0x00030264

000d6e8c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d6e8c:	b508      	push	{r3, lr}
   d6e8e:	4b02      	ldr	r3, [pc, #8]	; (d6e98 <HAL_USART_Init+0xc>)
   d6e90:	681b      	ldr	r3, [r3, #0]
   d6e92:	681b      	ldr	r3, [r3, #0]
   d6e94:	9301      	str	r3, [sp, #4]
   d6e96:	bd08      	pop	{r3, pc}
   d6e98:	0003023c 	.word	0x0003023c

000d6e9c <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d6e9c:	b508      	push	{r3, lr}
   d6e9e:	4b02      	ldr	r3, [pc, #8]	; (d6ea8 <HAL_USART_End+0xc>)
   d6ea0:	681b      	ldr	r3, [r3, #0]
   d6ea2:	689b      	ldr	r3, [r3, #8]
   d6ea4:	9301      	str	r3, [sp, #4]
   d6ea6:	bd08      	pop	{r3, pc}
   d6ea8:	0003023c 	.word	0x0003023c

000d6eac <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d6eac:	b508      	push	{r3, lr}
   d6eae:	4b02      	ldr	r3, [pc, #8]	; (d6eb8 <HAL_USART_Write_Data+0xc>)
   d6eb0:	681b      	ldr	r3, [r3, #0]
   d6eb2:	68db      	ldr	r3, [r3, #12]
   d6eb4:	9301      	str	r3, [sp, #4]
   d6eb6:	bd08      	pop	{r3, pc}
   d6eb8:	0003023c 	.word	0x0003023c

000d6ebc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d6ebc:	b508      	push	{r3, lr}
   d6ebe:	4b02      	ldr	r3, [pc, #8]	; (d6ec8 <HAL_USART_Available_Data+0xc>)
   d6ec0:	681b      	ldr	r3, [r3, #0]
   d6ec2:	691b      	ldr	r3, [r3, #16]
   d6ec4:	9301      	str	r3, [sp, #4]
   d6ec6:	bd08      	pop	{r3, pc}
   d6ec8:	0003023c 	.word	0x0003023c

000d6ecc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d6ecc:	b508      	push	{r3, lr}
   d6ece:	4b02      	ldr	r3, [pc, #8]	; (d6ed8 <HAL_USART_Read_Data+0xc>)
   d6ed0:	681b      	ldr	r3, [r3, #0]
   d6ed2:	695b      	ldr	r3, [r3, #20]
   d6ed4:	9301      	str	r3, [sp, #4]
   d6ed6:	bd08      	pop	{r3, pc}
   d6ed8:	0003023c 	.word	0x0003023c

000d6edc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d6edc:	b508      	push	{r3, lr}
   d6ede:	4b02      	ldr	r3, [pc, #8]	; (d6ee8 <HAL_USART_Peek_Data+0xc>)
   d6ee0:	681b      	ldr	r3, [r3, #0]
   d6ee2:	699b      	ldr	r3, [r3, #24]
   d6ee4:	9301      	str	r3, [sp, #4]
   d6ee6:	bd08      	pop	{r3, pc}
   d6ee8:	0003023c 	.word	0x0003023c

000d6eec <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6eec:	b508      	push	{r3, lr}
   d6eee:	4b02      	ldr	r3, [pc, #8]	; (d6ef8 <HAL_USART_Flush_Data+0xc>)
   d6ef0:	681b      	ldr	r3, [r3, #0]
   d6ef2:	69db      	ldr	r3, [r3, #28]
   d6ef4:	9301      	str	r3, [sp, #4]
   d6ef6:	bd08      	pop	{r3, pc}
   d6ef8:	0003023c 	.word	0x0003023c

000d6efc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d6efc:	b508      	push	{r3, lr}
   d6efe:	4b02      	ldr	r3, [pc, #8]	; (d6f08 <HAL_USART_Is_Enabled+0xc>)
   d6f00:	681b      	ldr	r3, [r3, #0]
   d6f02:	6a1b      	ldr	r3, [r3, #32]
   d6f04:	9301      	str	r3, [sp, #4]
   d6f06:	bd08      	pop	{r3, pc}
   d6f08:	0003023c 	.word	0x0003023c

000d6f0c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6f0c:	b508      	push	{r3, lr}
   d6f0e:	4b02      	ldr	r3, [pc, #8]	; (d6f18 <HAL_USART_Available_Data_For_Write+0xc>)
   d6f10:	681b      	ldr	r3, [r3, #0]
   d6f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f14:	9301      	str	r3, [sp, #4]
   d6f16:	bd08      	pop	{r3, pc}
   d6f18:	0003023c 	.word	0x0003023c

000d6f1c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d6f1c:	b508      	push	{r3, lr}
   d6f1e:	4b02      	ldr	r3, [pc, #8]	; (d6f28 <HAL_USART_BeginConfig+0xc>)
   d6f20:	681b      	ldr	r3, [r3, #0]
   d6f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f24:	9301      	str	r3, [sp, #4]
   d6f26:	bd08      	pop	{r3, pc}
   d6f28:	0003023c 	.word	0x0003023c

000d6f2c <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d6f2c:	b508      	push	{r3, lr}
   d6f2e:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <HAL_I2C_Begin+0xc>)
   d6f30:	681b      	ldr	r3, [r3, #0]
   d6f32:	68db      	ldr	r3, [r3, #12]
   d6f34:	9301      	str	r3, [sp, #4]
   d6f36:	bd08      	pop	{r3, pc}
   d6f38:	00030228 	.word	0x00030228

000d6f3c <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <HAL_I2C_Request_Data+0xc>)
   d6f40:	681b      	ldr	r3, [r3, #0]
   d6f42:	695b      	ldr	r3, [r3, #20]
   d6f44:	9301      	str	r3, [sp, #4]
   d6f46:	bd08      	pop	{r3, pc}
   d6f48:	00030228 	.word	0x00030228

000d6f4c <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
   d6f4c:	b508      	push	{r3, lr}
   d6f4e:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <HAL_I2C_Begin_Transmission+0xc>)
   d6f50:	681b      	ldr	r3, [r3, #0]
   d6f52:	699b      	ldr	r3, [r3, #24]
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	bd08      	pop	{r3, pc}
   d6f58:	00030228 	.word	0x00030228

000d6f5c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d6f5c:	b508      	push	{r3, lr}
   d6f5e:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <HAL_I2C_End_Transmission+0xc>)
   d6f60:	681b      	ldr	r3, [r3, #0]
   d6f62:	69db      	ldr	r3, [r3, #28]
   d6f64:	9301      	str	r3, [sp, #4]
   d6f66:	bd08      	pop	{r3, pc}
   d6f68:	00030228 	.word	0x00030228

000d6f6c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b02      	ldr	r3, [pc, #8]	; (d6f78 <HAL_I2C_Write_Data+0xc>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	6a1b      	ldr	r3, [r3, #32]
   d6f74:	9301      	str	r3, [sp, #4]
   d6f76:	bd08      	pop	{r3, pc}
   d6f78:	00030228 	.word	0x00030228

000d6f7c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d6f7c:	b508      	push	{r3, lr}
   d6f7e:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <HAL_I2C_Available_Data+0xc>)
   d6f80:	681b      	ldr	r3, [r3, #0]
   d6f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	00030228 	.word	0x00030228

000d6f8c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d6f8c:	b508      	push	{r3, lr}
   d6f8e:	4b02      	ldr	r3, [pc, #8]	; (d6f98 <HAL_I2C_Read_Data+0xc>)
   d6f90:	681b      	ldr	r3, [r3, #0]
   d6f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f94:	9301      	str	r3, [sp, #4]
   d6f96:	bd08      	pop	{r3, pc}
   d6f98:	00030228 	.word	0x00030228

000d6f9c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d6f9c:	b508      	push	{r3, lr}
   d6f9e:	4b02      	ldr	r3, [pc, #8]	; (d6fa8 <HAL_I2C_Peek_Data+0xc>)
   d6fa0:	681b      	ldr	r3, [r3, #0]
   d6fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6fa4:	9301      	str	r3, [sp, #4]
   d6fa6:	bd08      	pop	{r3, pc}
   d6fa8:	00030228 	.word	0x00030228

000d6fac <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d6fac:	b508      	push	{r3, lr}
   d6fae:	4b02      	ldr	r3, [pc, #8]	; (d6fb8 <HAL_I2C_Flush_Data+0xc>)
   d6fb0:	681b      	ldr	r3, [r3, #0]
   d6fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6fb4:	9301      	str	r3, [sp, #4]
   d6fb6:	bd08      	pop	{r3, pc}
   d6fb8:	00030228 	.word	0x00030228

000d6fbc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d6fbc:	b508      	push	{r3, lr}
   d6fbe:	4b02      	ldr	r3, [pc, #8]	; (d6fc8 <HAL_I2C_Is_Enabled+0xc>)
   d6fc0:	681b      	ldr	r3, [r3, #0]
   d6fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6fc4:	9301      	str	r3, [sp, #4]
   d6fc6:	bd08      	pop	{r3, pc}
   d6fc8:	00030228 	.word	0x00030228

000d6fcc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d6fcc:	b508      	push	{r3, lr}
   d6fce:	4b02      	ldr	r3, [pc, #8]	; (d6fd8 <HAL_I2C_Init+0xc>)
   d6fd0:	681b      	ldr	r3, [r3, #0]
   d6fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6fd4:	9301      	str	r3, [sp, #4]
   d6fd6:	bd08      	pop	{r3, pc}
   d6fd8:	00030228 	.word	0x00030228

000d6fdc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6fdc:	b508      	push	{r3, lr}
   d6fde:	4b02      	ldr	r3, [pc, #8]	; (d6fe8 <sock_setsockopt+0xc>)
   d6fe0:	681b      	ldr	r3, [r3, #0]
   d6fe2:	699b      	ldr	r3, [r3, #24]
   d6fe4:	9301      	str	r3, [sp, #4]
   d6fe6:	bd08      	pop	{r3, pc}
   d6fe8:	00030238 	.word	0x00030238

000d6fec <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6fec:	b508      	push	{r3, lr}
   d6fee:	4b02      	ldr	r3, [pc, #8]	; (d6ff8 <sock_close+0xc>)
   d6ff0:	681b      	ldr	r3, [r3, #0]
   d6ff2:	69db      	ldr	r3, [r3, #28]
   d6ff4:	9301      	str	r3, [sp, #4]
   d6ff6:	bd08      	pop	{r3, pc}
   d6ff8:	00030238 	.word	0x00030238

000d6ffc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6ffc:	b508      	push	{r3, lr}
   d6ffe:	4b02      	ldr	r3, [pc, #8]	; (d7008 <sock_connect+0xc>)
   d7000:	681b      	ldr	r3, [r3, #0]
   d7002:	6a1b      	ldr	r3, [r3, #32]
   d7004:	9301      	str	r3, [sp, #4]
   d7006:	bd08      	pop	{r3, pc}
   d7008:	00030238 	.word	0x00030238

000d700c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d700c:	b508      	push	{r3, lr}
   d700e:	4b02      	ldr	r3, [pc, #8]	; (d7018 <sock_recv+0xc>)
   d7010:	681b      	ldr	r3, [r3, #0]
   d7012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d7014:	9301      	str	r3, [sp, #4]
   d7016:	bd08      	pop	{r3, pc}
   d7018:	00030238 	.word	0x00030238

000d701c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d701c:	b508      	push	{r3, lr}
   d701e:	4b02      	ldr	r3, [pc, #8]	; (d7028 <sock_send+0xc>)
   d7020:	681b      	ldr	r3, [r3, #0]
   d7022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7024:	9301      	str	r3, [sp, #4]
   d7026:	bd08      	pop	{r3, pc}
   d7028:	00030238 	.word	0x00030238

000d702c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d702c:	b508      	push	{r3, lr}
   d702e:	4b02      	ldr	r3, [pc, #8]	; (d7038 <sock_socket+0xc>)
   d7030:	681b      	ldr	r3, [r3, #0]
   d7032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d7034:	9301      	str	r3, [sp, #4]
   d7036:	bd08      	pop	{r3, pc}
   d7038:	00030238 	.word	0x00030238

000d703c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d703c:	b508      	push	{r3, lr}
   d703e:	4b02      	ldr	r3, [pc, #8]	; (d7048 <HAL_USB_USART_Init+0xc>)
   d7040:	681b      	ldr	r3, [r3, #0]
   d7042:	681b      	ldr	r3, [r3, #0]
   d7044:	9301      	str	r3, [sp, #4]
   d7046:	bd08      	pop	{r3, pc}
   d7048:	0003024c 	.word	0x0003024c

000d704c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d704c:	b508      	push	{r3, lr}
   d704e:	4b02      	ldr	r3, [pc, #8]	; (d7058 <HAL_USB_USART_Begin+0xc>)
   d7050:	681b      	ldr	r3, [r3, #0]
   d7052:	685b      	ldr	r3, [r3, #4]
   d7054:	9301      	str	r3, [sp, #4]
   d7056:	bd08      	pop	{r3, pc}
   d7058:	0003024c 	.word	0x0003024c

000d705c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d705c:	b508      	push	{r3, lr}
   d705e:	4b02      	ldr	r3, [pc, #8]	; (d7068 <HAL_USB_USART_Available_Data+0xc>)
   d7060:	681b      	ldr	r3, [r3, #0]
   d7062:	691b      	ldr	r3, [r3, #16]
   d7064:	9301      	str	r3, [sp, #4]
   d7066:	bd08      	pop	{r3, pc}
   d7068:	0003024c 	.word	0x0003024c

000d706c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d706c:	b508      	push	{r3, lr}
   d706e:	4b02      	ldr	r3, [pc, #8]	; (d7078 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7070:	681b      	ldr	r3, [r3, #0]
   d7072:	695b      	ldr	r3, [r3, #20]
   d7074:	9301      	str	r3, [sp, #4]
   d7076:	bd08      	pop	{r3, pc}
   d7078:	0003024c 	.word	0x0003024c

000d707c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d707c:	b508      	push	{r3, lr}
   d707e:	4b02      	ldr	r3, [pc, #8]	; (d7088 <HAL_USB_USART_Receive_Data+0xc>)
   d7080:	681b      	ldr	r3, [r3, #0]
   d7082:	699b      	ldr	r3, [r3, #24]
   d7084:	9301      	str	r3, [sp, #4]
   d7086:	bd08      	pop	{r3, pc}
   d7088:	0003024c 	.word	0x0003024c

000d708c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d708c:	b508      	push	{r3, lr}
   d708e:	4b02      	ldr	r3, [pc, #8]	; (d7098 <HAL_USB_USART_Send_Data+0xc>)
   d7090:	681b      	ldr	r3, [r3, #0]
   d7092:	69db      	ldr	r3, [r3, #28]
   d7094:	9301      	str	r3, [sp, #4]
   d7096:	bd08      	pop	{r3, pc}
   d7098:	0003024c 	.word	0x0003024c

000d709c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d709c:	b508      	push	{r3, lr}
   d709e:	4b02      	ldr	r3, [pc, #8]	; (d70a8 <HAL_USB_USART_Flush_Data+0xc>)
   d70a0:	681b      	ldr	r3, [r3, #0]
   d70a2:	6a1b      	ldr	r3, [r3, #32]
   d70a4:	9301      	str	r3, [sp, #4]
   d70a6:	bd08      	pop	{r3, pc}
   d70a8:	0003024c 	.word	0x0003024c

000d70ac <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d70ac:	b508      	push	{r3, lr}
   d70ae:	4b02      	ldr	r3, [pc, #8]	; (d70b8 <HAL_USB_USART_Is_Enabled+0xc>)
   d70b0:	681b      	ldr	r3, [r3, #0]
   d70b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d70b4:	9301      	str	r3, [sp, #4]
   d70b6:	bd08      	pop	{r3, pc}
   d70b8:	0003024c 	.word	0x0003024c

000d70bc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d70bc:	b508      	push	{r3, lr}
   d70be:	4b02      	ldr	r3, [pc, #8]	; (d70c8 <log_message+0xc>)
   d70c0:	681b      	ldr	r3, [r3, #0]
   d70c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d70c4:	9301      	str	r3, [sp, #4]
   d70c6:	bd08      	pop	{r3, pc}
   d70c8:	00030260 	.word	0x00030260

000d70cc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d70cc:	b508      	push	{r3, lr}
   d70ce:	4b02      	ldr	r3, [pc, #8]	; (d70d8 <set_system_mode+0xc>)
   d70d0:	681b      	ldr	r3, [r3, #0]
   d70d2:	685b      	ldr	r3, [r3, #4]
   d70d4:	9301      	str	r3, [sp, #4]
   d70d6:	bd08      	pop	{r3, pc}
   d70d8:	00030220 	.word	0x00030220

000d70dc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d70dc:	b508      	push	{r3, lr}
   d70de:	4b02      	ldr	r3, [pc, #8]	; (d70e8 <system_delay_ms+0xc>)
   d70e0:	681b      	ldr	r3, [r3, #0]
   d70e2:	695b      	ldr	r3, [r3, #20]
   d70e4:	9301      	str	r3, [sp, #4]
   d70e6:	bd08      	pop	{r3, pc}
   d70e8:	00030220 	.word	0x00030220

000d70ec <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d70ec:	b508      	push	{r3, lr}
   d70ee:	4b02      	ldr	r3, [pc, #8]	; (d70f8 <system_thread_set_state+0xc>)
   d70f0:	681b      	ldr	r3, [r3, #0]
   d70f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d70f4:	9301      	str	r3, [sp, #4]
   d70f6:	bd08      	pop	{r3, pc}
   d70f8:	00030220 	.word	0x00030220

000d70fc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d70fc:	b508      	push	{r3, lr}
   d70fe:	4b03      	ldr	r3, [pc, #12]	; (d710c <system_ctrl_set_app_request_handler+0x10>)
   d7100:	681b      	ldr	r3, [r3, #0]
   d7102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7106:	9301      	str	r3, [sp, #4]
   d7108:	bd08      	pop	{r3, pc}
   d710a:	0000      	.short	0x0000
   d710c:	00030220 	.word	0x00030220

000d7110 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7110:	b508      	push	{r3, lr}
   d7112:	4b03      	ldr	r3, [pc, #12]	; (d7120 <system_ctrl_set_result+0x10>)
   d7114:	681b      	ldr	r3, [r3, #0]
   d7116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d711a:	9301      	str	r3, [sp, #4]
   d711c:	bd08      	pop	{r3, pc}
   d711e:	0000      	.short	0x0000
   d7120:	00030220 	.word	0x00030220

000d7124 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7124:	b508      	push	{r3, lr}
   d7126:	4b02      	ldr	r3, [pc, #8]	; (d7130 <network_connect+0xc>)
   d7128:	681b      	ldr	r3, [r3, #0]
   d712a:	685b      	ldr	r3, [r3, #4]
   d712c:	9301      	str	r3, [sp, #4]
   d712e:	bd08      	pop	{r3, pc}
   d7130:	00030240 	.word	0x00030240

000d7134 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7134:	b508      	push	{r3, lr}
   d7136:	4b02      	ldr	r3, [pc, #8]	; (d7140 <network_connecting+0xc>)
   d7138:	681b      	ldr	r3, [r3, #0]
   d713a:	689b      	ldr	r3, [r3, #8]
   d713c:	9301      	str	r3, [sp, #4]
   d713e:	bd08      	pop	{r3, pc}
   d7140:	00030240 	.word	0x00030240

000d7144 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7144:	b508      	push	{r3, lr}
   d7146:	4b02      	ldr	r3, [pc, #8]	; (d7150 <network_disconnect+0xc>)
   d7148:	681b      	ldr	r3, [r3, #0]
   d714a:	68db      	ldr	r3, [r3, #12]
   d714c:	9301      	str	r3, [sp, #4]
   d714e:	bd08      	pop	{r3, pc}
   d7150:	00030240 	.word	0x00030240

000d7154 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7154:	b508      	push	{r3, lr}
   d7156:	4b02      	ldr	r3, [pc, #8]	; (d7160 <network_ready+0xc>)
   d7158:	681b      	ldr	r3, [r3, #0]
   d715a:	691b      	ldr	r3, [r3, #16]
   d715c:	9301      	str	r3, [sp, #4]
   d715e:	bd08      	pop	{r3, pc}
   d7160:	00030240 	.word	0x00030240

000d7164 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7164:	b508      	push	{r3, lr}
   d7166:	4b02      	ldr	r3, [pc, #8]	; (d7170 <network_on+0xc>)
   d7168:	681b      	ldr	r3, [r3, #0]
   d716a:	695b      	ldr	r3, [r3, #20]
   d716c:	9301      	str	r3, [sp, #4]
   d716e:	bd08      	pop	{r3, pc}
   d7170:	00030240 	.word	0x00030240

000d7174 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7174:	b508      	push	{r3, lr}
   d7176:	4b02      	ldr	r3, [pc, #8]	; (d7180 <network_off+0xc>)
   d7178:	681b      	ldr	r3, [r3, #0]
   d717a:	699b      	ldr	r3, [r3, #24]
   d717c:	9301      	str	r3, [sp, #4]
   d717e:	bd08      	pop	{r3, pc}
   d7180:	00030240 	.word	0x00030240

000d7184 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7184:	b508      	push	{r3, lr}
   d7186:	4b02      	ldr	r3, [pc, #8]	; (d7190 <network_listen+0xc>)
   d7188:	681b      	ldr	r3, [r3, #0]
   d718a:	69db      	ldr	r3, [r3, #28]
   d718c:	9301      	str	r3, [sp, #4]
   d718e:	bd08      	pop	{r3, pc}
   d7190:	00030240 	.word	0x00030240

000d7194 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d7194:	b508      	push	{r3, lr}
   d7196:	4b02      	ldr	r3, [pc, #8]	; (d71a0 <network_listening+0xc>)
   d7198:	681b      	ldr	r3, [r3, #0]
   d719a:	6a1b      	ldr	r3, [r3, #32]
   d719c:	9301      	str	r3, [sp, #4]
   d719e:	bd08      	pop	{r3, pc}
   d71a0:	00030240 	.word	0x00030240

000d71a4 <network_set_credentials>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
   d71a4:	b508      	push	{r3, lr}
   d71a6:	4b02      	ldr	r3, [pc, #8]	; (d71b0 <network_set_credentials+0xc>)
   d71a8:	681b      	ldr	r3, [r3, #0]
   d71aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d71ac:	9301      	str	r3, [sp, #4]
   d71ae:	bd08      	pop	{r3, pc}
   d71b0:	00030240 	.word	0x00030240

000d71b4 <network_set_listen_timeout>:
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d71b4:	b508      	push	{r3, lr}
   d71b6:	4b02      	ldr	r3, [pc, #8]	; (d71c0 <network_set_listen_timeout+0xc>)
   d71b8:	681b      	ldr	r3, [r3, #0]
   d71ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d71bc:	9301      	str	r3, [sp, #4]
   d71be:	bd08      	pop	{r3, pc}
   d71c0:	00030240 	.word	0x00030240

000d71c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d71c4:	b508      	push	{r3, lr}
   d71c6:	4b02      	ldr	r3, [pc, #8]	; (d71d0 <network_get_listen_timeout+0xc>)
   d71c8:	681b      	ldr	r3, [r3, #0]
   d71ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d71cc:	9301      	str	r3, [sp, #4]
   d71ce:	bd08      	pop	{r3, pc}
   d71d0:	00030240 	.word	0x00030240

000d71d4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d71d4:	b508      	push	{r3, lr}
   d71d6:	4b02      	ldr	r3, [pc, #8]	; (d71e0 <spark_process+0xc>)
   d71d8:	681b      	ldr	r3, [r3, #0]
   d71da:	689b      	ldr	r3, [r3, #8]
   d71dc:	9301      	str	r3, [sp, #4]
   d71de:	bd08      	pop	{r3, pc}
   d71e0:	00030244 	.word	0x00030244

000d71e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d71e4:	b508      	push	{r3, lr}
   d71e6:	4b02      	ldr	r3, [pc, #8]	; (d71f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d71e8:	681b      	ldr	r3, [r3, #0]
   d71ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d71ec:	9301      	str	r3, [sp, #4]
   d71ee:	bd08      	pop	{r3, pc}
   d71f0:	00030244 	.word	0x00030244

000d71f4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d71f4:	b508      	push	{r3, lr}
   d71f6:	4b02      	ldr	r3, [pc, #8]	; (d7200 <malloc+0xc>)
   d71f8:	681b      	ldr	r3, [r3, #0]
   d71fa:	681b      	ldr	r3, [r3, #0]
   d71fc:	9301      	str	r3, [sp, #4]
   d71fe:	bd08      	pop	{r3, pc}
   d7200:	0003021c 	.word	0x0003021c

000d7204 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7204:	b508      	push	{r3, lr}
   d7206:	4b02      	ldr	r3, [pc, #8]	; (d7210 <free+0xc>)
   d7208:	681b      	ldr	r3, [r3, #0]
   d720a:	685b      	ldr	r3, [r3, #4]
   d720c:	9301      	str	r3, [sp, #4]
   d720e:	bd08      	pop	{r3, pc}
   d7210:	0003021c 	.word	0x0003021c

000d7214 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7214:	b508      	push	{r3, lr}
   d7216:	4b02      	ldr	r3, [pc, #8]	; (d7220 <realloc+0xc>)
   d7218:	681b      	ldr	r3, [r3, #0]
   d721a:	689b      	ldr	r3, [r3, #8]
   d721c:	9301      	str	r3, [sp, #4]
   d721e:	bd08      	pop	{r3, pc}
   d7220:	0003021c 	.word	0x0003021c

000d7224 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7224:	b508      	push	{r3, lr}
   d7226:	4b02      	ldr	r3, [pc, #8]	; (d7230 <snprintf+0xc>)
   d7228:	681b      	ldr	r3, [r3, #0]
   d722a:	69db      	ldr	r3, [r3, #28]
   d722c:	9301      	str	r3, [sp, #4]
   d722e:	bd08      	pop	{r3, pc}
   d7230:	0003021c 	.word	0x0003021c

000d7234 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d7234:	b508      	push	{r3, lr}
   d7236:	4b02      	ldr	r3, [pc, #8]	; (d7240 <vsnprintf+0xc>)
   d7238:	681b      	ldr	r3, [r3, #0]
   d723a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d723c:	9301      	str	r3, [sp, #4]
   d723e:	bd08      	pop	{r3, pc}
   d7240:	0003021c 	.word	0x0003021c

000d7244 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7244:	b508      	push	{r3, lr}
   d7246:	4b02      	ldr	r3, [pc, #8]	; (d7250 <__errno+0xc>)
   d7248:	681b      	ldr	r3, [r3, #0]
   d724a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d724c:	9301      	str	r3, [sp, #4]
   d724e:	bd08      	pop	{r3, pc}
   d7250:	0003021c 	.word	0x0003021c

000d7254 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7254:	2200      	movs	r2, #0
   d7256:	4611      	mov	r1, r2
   d7258:	6840      	ldr	r0, [r0, #4]
   d725a:	f7ff bf9b 	b.w	d7194 <network_listening>

000d725e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d725e:	2200      	movs	r2, #0
   d7260:	4611      	mov	r1, r2
   d7262:	6840      	ldr	r0, [r0, #4]
   d7264:	f7ff bfae 	b.w	d71c4 <network_get_listen_timeout>

000d7268 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7268:	2200      	movs	r2, #0
   d726a:	6840      	ldr	r0, [r0, #4]
   d726c:	f7ff bfa2 	b.w	d71b4 <network_set_listen_timeout>

000d7270 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7270:	2200      	movs	r2, #0
   d7272:	f081 0101 	eor.w	r1, r1, #1
   d7276:	6840      	ldr	r0, [r0, #4]
   d7278:	f7ff bf84 	b.w	d7184 <network_listen>

000d727c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d727c:	2300      	movs	r3, #0
   d727e:	461a      	mov	r2, r3
   d7280:	4619      	mov	r1, r3
   d7282:	6840      	ldr	r0, [r0, #4]
   d7284:	f7ff bf76 	b.w	d7174 <network_off>

000d7288 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7288:	2300      	movs	r3, #0
   d728a:	461a      	mov	r2, r3
   d728c:	4619      	mov	r1, r3
   d728e:	6840      	ldr	r0, [r0, #4]
   d7290:	f7ff bf68 	b.w	d7164 <network_on>

000d7294 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7294:	2200      	movs	r2, #0
   d7296:	4611      	mov	r1, r2
   d7298:	6840      	ldr	r0, [r0, #4]
   d729a:	f7ff bf5b 	b.w	d7154 <network_ready>

000d729e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d729e:	2200      	movs	r2, #0
   d72a0:	4611      	mov	r1, r2
   d72a2:	6840      	ldr	r0, [r0, #4]
   d72a4:	f7ff bf46 	b.w	d7134 <network_connecting>

000d72a8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d72a8:	2200      	movs	r2, #0
   d72aa:	2102      	movs	r1, #2
   d72ac:	6840      	ldr	r0, [r0, #4]
   d72ae:	f7ff bf49 	b.w	d7144 <network_disconnect>

000d72b2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d72b2:	2300      	movs	r3, #0
   d72b4:	461a      	mov	r2, r3
   d72b6:	6840      	ldr	r0, [r0, #4]
   d72b8:	f7ff bf34 	b.w	d7124 <network_connect>

000d72bc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d72bc:	4b02      	ldr	r3, [pc, #8]	; (d72c8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d72be:	2203      	movs	r2, #3
   d72c0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d72c2:	4a02      	ldr	r2, [pc, #8]	; (d72cc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d72c4:	601a      	str	r2, [r3, #0]
   d72c6:	4770      	bx	lr
   d72c8:	2003e3d0 	.word	0x2003e3d0
   d72cc:	000d9720 	.word	0x000d9720

000d72d0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d72d0:	4770      	bx	lr

000d72d2 <_ZN8SPIClassD0Ev>:
   d72d2:	b510      	push	{r4, lr}
   d72d4:	4604      	mov	r4, r0
   d72d6:	f7fc fee0 	bl	d409a <_ZdlPv>
   d72da:	4620      	mov	r0, r4
   d72dc:	bd10      	pop	{r4, pc}
	...

000d72e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d72e0:	b570      	push	{r4, r5, r6, lr}
   d72e2:	4b08      	ldr	r3, [pc, #32]	; (d7304 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d72e4:	6003      	str	r3, [r0, #0]
   d72e6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d72e8:	2500      	movs	r5, #0
   d72ea:	460e      	mov	r6, r1
   d72ec:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d72f0:	f7ff fd94 	bl	d6e1c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d72f4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d72f6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d72f8:	f7ff fd28 	bl	d6d4c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d72fc:	60a5      	str	r5, [r4, #8]
}
   d72fe:	4620      	mov	r0, r4
   d7300:	bd70      	pop	{r4, r5, r6, pc}
   d7302:	bf00      	nop
   d7304:	000d9754 	.word	0x000d9754

000d7308 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d7308:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d730c:	7900      	ldrb	r0, [r0, #4]
   d730e:	f7ff bd0d 	b.w	d6d2c <HAL_SPI_Begin>

000d7312 <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
   d7312:	68c0      	ldr	r0, [r0, #12]
   d7314:	f7ff bd92 	b.w	d6e3c <os_mutex_unlock>

000d7318 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d7318:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
   d731a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
   d731c:	6018      	str	r0, [r3, #0]
   d731e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
   d7320:	6818      	ldr	r0, [r3, #0]
   d7322:	4288      	cmp	r0, r1
   d7324:	b2e5      	uxtb	r5, r4
   d7326:	d906      	bls.n	d7336 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7328:	3401      	adds	r4, #1
   d732a:	2c08      	cmp	r4, #8
   d732c:	d002      	beq.n	d7334 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
   d732e:	0840      	lsrs	r0, r0, #1
   d7330:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
   d7332:	e7f5      	b.n	d7320 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7334:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d7336:	4b02      	ldr	r3, [pc, #8]	; (d7340 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7338:	5d5b      	ldrb	r3, [r3, r5]
   d733a:	7013      	strb	r3, [r2, #0]
   d733c:	bd30      	pop	{r4, r5, pc}
   d733e:	bf00      	nop
   d7340:	000d975c 	.word	0x000d975c

000d7344 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d7344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7348:	4680      	mov	r8, r0
   d734a:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
   d734c:	68c0      	ldr	r0, [r0, #12]
   d734e:	460f      	mov	r7, r1
   d7350:	f7ff fd6c 	bl	d6e2c <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
   d7354:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
   d7358:	2214      	movs	r2, #20
   d735a:	2100      	movs	r1, #0
   d735c:	a809      	add	r0, sp, #36	; 0x24
   d735e:	f001 ff4f 	bl	d9200 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
   d7362:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
   d7364:	4620      	mov	r0, r4
   d7366:	2200      	movs	r2, #0
   d7368:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
   d736a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
   d736e:	f7ff fcfd 	bl	d6d6c <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
   d7372:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d7376:	b14c      	cbz	r4, d738c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
   d7378:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d737c:	b92d      	cbnz	r5, d738a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d737e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   d7380:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7384:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d7388:	e003      	b.n	d7392 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d738a:	2400      	movs	r4, #0
   d738c:	46a1      	mov	r9, r4
   d738e:	4626      	mov	r6, r4
   d7390:	2501      	movs	r5, #1
   d7392:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d7394:	b10d      	cbz	r5, d739a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
   d7396:	2b00      	cmp	r3, #0
   d7398:	d140      	bne.n	d741c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
   d739a:	429d      	cmp	r5, r3
   d739c:	d10b      	bne.n	d73b6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
   d739e:	68ba      	ldr	r2, [r7, #8]
   d73a0:	42b2      	cmp	r2, r6
   d73a2:	d108      	bne.n	d73b6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d73a4:	f88d 9020 	strb.w	r9, [sp, #32]
   d73a8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d73ac:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d73b0:	89ba      	ldrh	r2, [r7, #12]
   d73b2:	4291      	cmp	r1, r2
   d73b4:	d032      	beq.n	d741c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
   d73b6:	bb23      	cbnz	r3, d7402 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
   d73b8:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
   d73bc:	f10d 020f 	add.w	r2, sp, #15
   d73c0:	ab04      	add	r3, sp, #16
   d73c2:	68b9      	ldr	r1, [r7, #8]
   d73c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   d73c6:	f7ff ffa7 	bl	d7318 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d73ca:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d73cc:	b105      	cbz	r5, d73d0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
   d73ce:	bb13      	cbnz	r3, d7416 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d73d0:	42ab      	cmp	r3, r5
   d73d2:	d009      	beq.n	d73e8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
   d73d4:	2100      	movs	r1, #0
   d73d6:	7b3b      	ldrb	r3, [r7, #12]
   d73d8:	9101      	str	r1, [sp, #4]
   d73da:	7b7c      	ldrb	r4, [r7, #13]
   d73dc:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d73e0:	f898 0004 	ldrb.w	r0, [r8, #4]
   d73e4:	9400      	str	r4, [sp, #0]
   d73e6:	e013      	b.n	d7410 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
   d73e8:	68bb      	ldr	r3, [r7, #8]
   d73ea:	42b3      	cmp	r3, r6
   d73ec:	d3f2      	bcc.n	d73d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d73ee:	f88d 9020 	strb.w	r9, [sp, #32]
   d73f2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d73f6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d73fa:	89bb      	ldrh	r3, [r7, #12]
   d73fc:	429a      	cmp	r2, r3
   d73fe:	d1e9      	bne.n	d73d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
   d7400:	e009      	b.n	d7416 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
   d7402:	2300      	movs	r3, #0
   d7404:	f898 0004 	ldrb.w	r0, [r8, #4]
   d7408:	9301      	str	r3, [sp, #4]
   d740a:	9300      	str	r3, [sp, #0]
   d740c:	461a      	mov	r2, r3
   d740e:	2101      	movs	r1, #1
   d7410:	f7ff fcc4 	bl	d6d9c <HAL_SPI_Set_Settings>
   d7414:	e002      	b.n	d741c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
   d7416:	9b04      	ldr	r3, [sp, #16]
   d7418:	42b3      	cmp	r3, r6
   d741a:	d1db      	bne.n	d73d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
   d741c:	2000      	movs	r0, #0
   d741e:	b00f      	add	sp, #60	; 0x3c
   d7420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7424 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7424:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
   d7426:	7900      	ldrb	r0, [r0, #4]
   d7428:	f7ff fc88 	bl	d6d3c <HAL_SPI_Send_Receive_Data>
}
   d742c:	b2c0      	uxtb	r0, r0
   d742e:	bd08      	pop	{r3, pc}

000d7430 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7430:	b530      	push	{r4, r5, lr}
   d7432:	b087      	sub	sp, #28
   d7434:	4604      	mov	r4, r0
   d7436:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7438:	7900      	ldrb	r0, [r0, #4]
   d743a:	9500      	str	r5, [sp, #0]
   d743c:	f7ff fc9e 	bl	d6d7c <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
   d7440:	b93d      	cbnz	r5, d7452 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
   d7442:	a902      	add	r1, sp, #8
   d7444:	7920      	ldrb	r0, [r4, #4]
   d7446:	f7ff fca1 	bl	d6d8c <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
   d744a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d744e:	07db      	lsls	r3, r3, #31
   d7450:	d4f7      	bmi.n	d7442 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
   d7452:	b007      	add	sp, #28
   d7454:	bd30      	pop	{r4, r5, pc}

000d7456 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d7456:	7900      	ldrb	r0, [r0, #4]
   d7458:	f7ff bc80 	b.w	d6d5c <HAL_SPI_Is_Enabled>

000d745c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d745c:	4b04      	ldr	r3, [pc, #16]	; (d7470 <_GLOBAL__sub_I_System+0x14>)
   d745e:	2000      	movs	r0, #0
   d7460:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7464:	7018      	strb	r0, [r3, #0]
   d7466:	8058      	strh	r0, [r3, #2]
   d7468:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d746a:	f7ff be2f 	b.w	d70cc <set_system_mode>
   d746e:	bf00      	nop
   d7470:	2003e3d8 	.word	0x2003e3d8

000d7474 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7474:	b510      	push	{r4, lr}
   d7476:	4604      	mov	r4, r0
{
	free(buffer);
   d7478:	6800      	ldr	r0, [r0, #0]
   d747a:	f7ff fec3 	bl	d7204 <free>
}
   d747e:	4620      	mov	r0, r4
   d7480:	bd10      	pop	{r4, pc}

000d7482 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7482:	b510      	push	{r4, lr}
   d7484:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7486:	6800      	ldr	r0, [r0, #0]
   d7488:	b108      	cbz	r0, d748e <_ZN6String10invalidateEv+0xc>
   d748a:	f7ff febb 	bl	d7204 <free>
	buffer = NULL;
   d748e:	2300      	movs	r3, #0
   d7490:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d7492:	60a3      	str	r3, [r4, #8]
   d7494:	6063      	str	r3, [r4, #4]
   d7496:	bd10      	pop	{r4, pc}

000d7498 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7498:	b538      	push	{r3, r4, r5, lr}
   d749a:	4604      	mov	r4, r0
   d749c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d749e:	6800      	ldr	r0, [r0, #0]
   d74a0:	3101      	adds	r1, #1
   d74a2:	f7ff feb7 	bl	d7214 <realloc>
	if (newbuffer) {
   d74a6:	b110      	cbz	r0, d74ae <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d74a8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d74ac:	2001      	movs	r0, #1
	}
	return 0;
}
   d74ae:	bd38      	pop	{r3, r4, r5, pc}

000d74b0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d74b0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d74b2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d74b4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d74b6:	b113      	cbz	r3, d74be <_ZN6String7reserveEj+0xe>
   d74b8:	6843      	ldr	r3, [r0, #4]
   d74ba:	428b      	cmp	r3, r1
   d74bc:	d207      	bcs.n	d74ce <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d74be:	4620      	mov	r0, r4
   d74c0:	f7ff ffea 	bl	d7498 <_ZN6String12changeBufferEj>
   d74c4:	b120      	cbz	r0, d74d0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d74c6:	68a3      	ldr	r3, [r4, #8]
   d74c8:	b90b      	cbnz	r3, d74ce <_ZN6String7reserveEj+0x1e>
   d74ca:	6822      	ldr	r2, [r4, #0]
   d74cc:	7013      	strb	r3, [r2, #0]
   d74ce:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d74d0:	bd10      	pop	{r4, pc}

000d74d2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d74d2:	b570      	push	{r4, r5, r6, lr}
   d74d4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d74d6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d74d8:	4604      	mov	r4, r0
   d74da:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d74dc:	f7ff ffe8 	bl	d74b0 <_ZN6String7reserveEj>
   d74e0:	b918      	cbnz	r0, d74ea <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d74e2:	4620      	mov	r0, r4
   d74e4:	f7ff ffcd 	bl	d7482 <_ZN6String10invalidateEv>
		return *this;
   d74e8:	e009      	b.n	d74fe <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d74ea:	462a      	mov	r2, r5
   d74ec:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d74ee:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d74f0:	6820      	ldr	r0, [r4, #0]
   d74f2:	f001 fe7a 	bl	d91ea <memcpy>
	buffer[len] = 0;
   d74f6:	6822      	ldr	r2, [r4, #0]
   d74f8:	68a3      	ldr	r3, [r4, #8]
   d74fa:	2100      	movs	r1, #0
   d74fc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d74fe:	4620      	mov	r0, r4
   d7500:	bd70      	pop	{r4, r5, r6, pc}

000d7502 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7502:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7504:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7506:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7508:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d750a:	6043      	str	r3, [r0, #4]
	len = 0;
   d750c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d750e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d7510:	460d      	mov	r5, r1
   d7512:	b139      	cbz	r1, d7524 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d7514:	4608      	mov	r0, r1
   d7516:	f001 feb5 	bl	d9284 <strlen>
   d751a:	4629      	mov	r1, r5
   d751c:	4602      	mov	r2, r0
   d751e:	4620      	mov	r0, r4
   d7520:	f7ff ffd7 	bl	d74d2 <_ZN6String4copyEPKcj>
}
   d7524:	4620      	mov	r0, r4
   d7526:	bd38      	pop	{r3, r4, r5, pc}

000d7528 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7528:	b538      	push	{r3, r4, r5, lr}
   d752a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d752c:	460c      	mov	r4, r1
   d752e:	b141      	cbz	r1, d7542 <_ZN6StringaSEPKc+0x1a>
   d7530:	4608      	mov	r0, r1
   d7532:	f001 fea7 	bl	d9284 <strlen>
   d7536:	4621      	mov	r1, r4
   d7538:	4602      	mov	r2, r0
   d753a:	4628      	mov	r0, r5
   d753c:	f7ff ffc9 	bl	d74d2 <_ZN6String4copyEPKcj>
   d7540:	e001      	b.n	d7546 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d7542:	f7ff ff9e 	bl	d7482 <_ZN6String10invalidateEv>

	return *this;
}
   d7546:	4628      	mov	r0, r5
   d7548:	bd38      	pop	{r3, r4, r5, pc}

000d754a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d754a:	b570      	push	{r4, r5, r6, lr}
   d754c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d754e:	460e      	mov	r6, r1
   d7550:	b909      	cbnz	r1, d7556 <_ZN6String6concatEPKcj+0xc>
   d7552:	2000      	movs	r0, #0
   d7554:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7556:	b16a      	cbz	r2, d7574 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d7558:	6883      	ldr	r3, [r0, #8]
   d755a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d755c:	4629      	mov	r1, r5
   d755e:	f7ff ffa7 	bl	d74b0 <_ZN6String7reserveEj>
   d7562:	2800      	cmp	r0, #0
   d7564:	d0f5      	beq.n	d7552 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7566:	6820      	ldr	r0, [r4, #0]
   d7568:	68a3      	ldr	r3, [r4, #8]
   d756a:	4631      	mov	r1, r6
   d756c:	4418      	add	r0, r3
   d756e:	f001 fe81 	bl	d9274 <strcpy>
	len = newlen;
   d7572:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d7574:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7576:	bd70      	pop	{r4, r5, r6, pc}

000d7578 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
   d7578:	688a      	ldr	r2, [r1, #8]
   d757a:	6809      	ldr	r1, [r1, #0]
   d757c:	f7ff bfe5 	b.w	d754a <_ZN6String6concatEPKcj>

000d7580 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7580:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7582:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7584:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7586:	b912      	cbnz	r2, d758e <_ZNK6String6equalsEPKc+0xe>
   d7588:	b919      	cbnz	r1, d7592 <_ZNK6String6equalsEPKc+0x12>
   d758a:	2001      	movs	r0, #1
   d758c:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d758e:	b911      	cbnz	r1, d7596 <_ZNK6String6equalsEPKc+0x16>
   d7590:	6803      	ldr	r3, [r0, #0]
   d7592:	7818      	ldrb	r0, [r3, #0]
   d7594:	e002      	b.n	d759c <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
   d7596:	6800      	ldr	r0, [r0, #0]
   d7598:	f001 fe62 	bl	d9260 <strcmp>
   d759c:	fab0 f080 	clz	r0, r0
   d75a0:	0940      	lsrs	r0, r0, #5
}
   d75a2:	bd08      	pop	{r3, pc}

000d75a4 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d75a4:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d75a6:	6883      	ldr	r3, [r0, #8]
   d75a8:	4293      	cmp	r3, r2
   d75aa:	d907      	bls.n	d75bc <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d75ac:	6804      	ldr	r4, [r0, #0]
   d75ae:	6809      	ldr	r1, [r1, #0]
   d75b0:	18a0      	adds	r0, r4, r2
   d75b2:	f001 fe6f 	bl	d9294 <strstr>
	if (found == NULL) return -1;
   d75b6:	b108      	cbz	r0, d75bc <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d75b8:	1b00      	subs	r0, r0, r4
   d75ba:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
   d75bc:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
   d75c0:	bd10      	pop	{r4, pc}

000d75c2 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
   d75c2:	2200      	movs	r2, #0
   d75c4:	f7ff bfee 	b.w	d75a4 <_ZNK6String7indexOfERKS_j>

000d75c8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d75c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (left > right) {
   d75cc:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d75ce:	460e      	mov	r6, r1
   d75d0:	461c      	mov	r4, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d75d2:	4910      	ldr	r1, [pc, #64]	; (d7614 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d75d4:	bf88      	it	hi
   d75d6:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d75d8:	4615      	mov	r5, r2
   d75da:	4607      	mov	r7, r0
	if (left > right) {
   d75dc:	bf84      	itt	hi
   d75de:	4625      	movhi	r5, r4
   d75e0:	461c      	movhi	r4, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d75e2:	f7ff ff8e 	bl	d7502 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d75e6:	68b1      	ldr	r1, [r6, #8]
   d75e8:	428d      	cmp	r5, r1
   d75ea:	d80f      	bhi.n	d760c <_ZNK6String9substringEjj+0x44>
   d75ec:	428c      	cmp	r4, r1
   d75ee:	bf28      	it	cs
   d75f0:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d75f2:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
   d75f4:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
   d75f6:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
   d75fa:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
   d75fc:	6831      	ldr	r1, [r6, #0]
   d75fe:	4638      	mov	r0, r7
   d7600:	4429      	add	r1, r5
   d7602:	f7ff ff91 	bl	d7528 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
   d7606:	6833      	ldr	r3, [r6, #0]
   d7608:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
   d760c:	4638      	mov	r0, r7
   d760e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7612:	bf00      	nop
   d7614:	000d9709 	.word	0x000d9709

000d7618 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
   d7618:	b510      	push	{r4, lr}
   d761a:	4604      	mov	r4, r0
	return substring(left, len);
   d761c:	688b      	ldr	r3, [r1, #8]
   d761e:	f7ff ffd3 	bl	d75c8 <_ZNK6String9substringEjj>
}
   d7622:	4620      	mov	r0, r4
   d7624:	bd10      	pop	{r4, pc}

000d7626 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7628:	4606      	mov	r6, r0
   d762a:	460d      	mov	r5, r1
   d762c:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d762e:	2400      	movs	r4, #0
  while (size--) {
   d7630:	42bd      	cmp	r5, r7
   d7632:	d00c      	beq.n	d764e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7634:	6833      	ldr	r3, [r6, #0]
   d7636:	f815 1b01 	ldrb.w	r1, [r5], #1
   d763a:	689b      	ldr	r3, [r3, #8]
   d763c:	4630      	mov	r0, r6
   d763e:	4798      	blx	r3
     if (chunk>=0)
   d7640:	2800      	cmp	r0, #0
   d7642:	db01      	blt.n	d7648 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7644:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d7646:	e7f3      	b.n	d7630 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7648:	2c00      	cmp	r4, #0
   d764a:	bf08      	it	eq
   d764c:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d764e:	4620      	mov	r0, r4
   d7650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7652 <_ZN5Print5printEPKc>:
   d7652:	b508      	push	{r3, lr}
   d7654:	f7fe fcc6 	bl	d5fe4 <_ZN5Print5writeEPKc>
   d7658:	bd08      	pop	{r3, pc}

000d765a <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d765a:	6803      	ldr	r3, [r0, #0]
   d765c:	689b      	ldr	r3, [r3, #8]
   d765e:	4718      	bx	r3

000d7660 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7660:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7662:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7664:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7666:	f7ff fff8 	bl	d765a <_ZN5Print5printEc>
  n += print('\n');
   d766a:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d766c:	4604      	mov	r4, r0
  n += print('\n');
   d766e:	4628      	mov	r0, r5
   d7670:	f7ff fff3 	bl	d765a <_ZN5Print5printEc>
  return n;
}
   d7674:	4420      	add	r0, r4
   d7676:	bd38      	pop	{r3, r4, r5, pc}

000d7678 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7678:	b538      	push	{r3, r4, r5, lr}
   d767a:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d767c:	f7fe fcb2 	bl	d5fe4 <_ZN5Print5writeEPKc>
   d7680:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
   d7682:	4628      	mov	r0, r5
   d7684:	f7ff ffec 	bl	d7660 <_ZN5Print7printlnEv>
  return n;
}
   d7688:	4420      	add	r0, r4
   d768a:	bd38      	pop	{r3, r4, r5, pc}

000d768c <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d768c:	b530      	push	{r4, r5, lr}
   d768e:	b08b      	sub	sp, #44	; 0x2c
   d7690:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7692:	2100      	movs	r1, #0
   d7694:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7698:	2a01      	cmp	r2, #1
   d769a:	bf98      	it	ls
   d769c:	220a      	movls	r2, #10
   d769e:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d76a2:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d76a6:	fb05 3312 	mls	r3, r5, r2, r3
   d76aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d76ae:	2b09      	cmp	r3, #9
   d76b0:	bf94      	ite	ls
   d76b2:	3330      	addls	r3, #48	; 0x30
   d76b4:	3337      	addhi	r3, #55	; 0x37
   d76b6:	b2db      	uxtb	r3, r3
   d76b8:	4621      	mov	r1, r4
   d76ba:	f804 3901 	strb.w	r3, [r4], #-1
   d76be:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d76c0:	2d00      	cmp	r5, #0
   d76c2:	d1ee      	bne.n	d76a2 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d76c4:	f7fe fc8e 	bl	d5fe4 <_ZN5Print5writeEPKc>
}
   d76c8:	b00b      	add	sp, #44	; 0x2c
   d76ca:	bd30      	pop	{r4, r5, pc}

000d76cc <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d76cc:	b410      	push	{r4}
  if (base == 0) return write(n);
   d76ce:	b92a      	cbnz	r2, d76dc <_ZN5Print5printEmi+0x10>
   d76d0:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d76d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d76d6:	689b      	ldr	r3, [r3, #8]
   d76d8:	b2c9      	uxtb	r1, r1
   d76da:	4718      	bx	r3
  else return printNumber(n, base);
   d76dc:	b2d2      	uxtb	r2, r2
}
   d76de:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d76e2:	f7ff bfd3 	b.w	d768c <_ZN5Print11printNumberEmh>

000d76e6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d76e6:	f7ff bff1 	b.w	d76cc <_ZN5Print5printEmi>

000d76ea <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   d76ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d76ee:	4607      	mov	r7, r0
   d76f0:	460e      	mov	r6, r1
  if (base == 0) {
   d76f2:	4615      	mov	r5, r2
   d76f4:	b92a      	cbnz	r2, d7702 <_ZN5Print5printEli+0x18>
    return write(n);
   d76f6:	6803      	ldr	r3, [r0, #0]
   d76f8:	b2c9      	uxtb	r1, r1
   d76fa:	689b      	ldr	r3, [r3, #8]
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d76fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
   d7700:	4718      	bx	r3
  } else if (base == 10) {
   d7702:	2a0a      	cmp	r2, #10
   d7704:	d102      	bne.n	d770c <_ZN5Print5printEli+0x22>
    if (n < 0) {
   d7706:	2900      	cmp	r1, #0
   d7708:	da01      	bge.n	d770e <_ZN5Print5printEli+0x24>
   d770a:	e004      	b.n	d7716 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d770c:	b2d2      	uxtb	r2, r2
  }
}
   d770e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   d7712:	f7ff bfbb 	b.w	d768c <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d7716:	212d      	movs	r1, #45	; 0x2d
   d7718:	f7ff ff9f 	bl	d765a <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   d771c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   d771e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
   d7720:	4271      	negs	r1, r6
   d7722:	4638      	mov	r0, r7
   d7724:	f7ff ffb2 	bl	d768c <_ZN5Print11printNumberEmh>
   d7728:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
   d772a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d772e <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d772e:	f7ff bfdc 	b.w	d76ea <_ZN5Print5printEli>

000d7732 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   d7732:	b538      	push	{r3, r4, r5, lr}
   d7734:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   d7736:	f7ff ffd8 	bl	d76ea <_ZN5Print5printEli>
   d773a:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
   d773c:	4628      	mov	r0, r5
   d773e:	f7ff ff8f 	bl	d7660 <_ZN5Print7printlnEv>
  return n;
}
   d7742:	4420      	add	r0, r4
   d7744:	bd38      	pop	{r3, r4, r5, pc}

000d7746 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7746:	b40c      	push	{r2, r3}
   d7748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d774c:	b087      	sub	sp, #28
   d774e:	af00      	add	r7, sp, #0
   d7750:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7754:	4605      	mov	r5, r0
   d7756:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d775a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d775c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d775e:	4623      	mov	r3, r4
   d7760:	464a      	mov	r2, r9
   d7762:	2114      	movs	r1, #20
   d7764:	1d38      	adds	r0, r7, #4
   d7766:	f7ff fd65 	bl	d7234 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d776a:	2813      	cmp	r0, #19
   d776c:	d805      	bhi.n	d777a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d776e:	1d39      	adds	r1, r7, #4
   d7770:	4628      	mov	r0, r5
   d7772:	f7fe fc37 	bl	d5fe4 <_ZN5Print5writeEPKc>
   d7776:	4604      	mov	r4, r0
   d7778:	e013      	b.n	d77a2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d777a:	f100 0308 	add.w	r3, r0, #8
   d777e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7782:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7784:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7788:	1c41      	adds	r1, r0, #1
   d778a:	4623      	mov	r3, r4
   d778c:	464a      	mov	r2, r9
   d778e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7790:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7792:	f7ff fd4f 	bl	d7234 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7796:	4669      	mov	r1, sp
   d7798:	4628      	mov	r0, r5
   d779a:	f7fe fc23 	bl	d5fe4 <_ZN5Print5writeEPKc>
   d779e:	4604      	mov	r4, r0
   d77a0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d77a2:	b11e      	cbz	r6, d77ac <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d77a4:	4628      	mov	r0, r5
   d77a6:	f7ff ff5b 	bl	d7660 <_ZN5Print7printlnEv>
   d77aa:	4404      	add	r4, r0
    return n;
}
   d77ac:	4620      	mov	r0, r4
   d77ae:	371c      	adds	r7, #28
   d77b0:	46bd      	mov	sp, r7
   d77b2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d77b6:	b002      	add	sp, #8
   d77b8:	4770      	bx	lr
	...

000d77bc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d77bc:	4b01      	ldr	r3, [pc, #4]	; (d77c4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d77be:	4a02      	ldr	r2, [pc, #8]	; (d77c8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d77c0:	601a      	str	r2, [r3, #0]
   d77c2:	4770      	bx	lr
   d77c4:	2003e3e0 	.word	0x2003e3e0
   d77c8:	000d9814 	.word	0x000d9814

000d77cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d77cc:	4b02      	ldr	r3, [pc, #8]	; (d77d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d77ce:	681a      	ldr	r2, [r3, #0]
   d77d0:	4b02      	ldr	r3, [pc, #8]	; (d77dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d77d2:	601a      	str	r2, [r3, #0]
   d77d4:	4770      	bx	lr
   d77d6:	bf00      	nop
   d77d8:	2003d1e8 	.word	0x2003d1e8
   d77dc:	2003e3e4 	.word	0x2003e3e4

000d77e0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d77e0:	2100      	movs	r1, #0
   d77e2:	f7ff bc7b 	b.w	d70dc <system_delay_ms>

000d77e6 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d77e6:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d77e8:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d77ea:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d77ec:	b113      	cbz	r3, d77f4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d77ee:	2203      	movs	r2, #3
   d77f0:	4601      	mov	r1, r0
   d77f2:	4798      	blx	r3
    }
   d77f4:	4620      	mov	r0, r4
   d77f6:	bd10      	pop	{r4, pc}

000d77f8 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d77f8:	b510      	push	{r4, lr}
   d77fa:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d77fc:	f7ff fff3 	bl	d77e6 <_ZNSt14_Function_baseD1Ev>
   d7800:	4620      	mov	r0, r4
   d7802:	bd10      	pop	{r4, pc}

000d7804 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7804:	4803      	ldr	r0, [pc, #12]	; (d7814 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7806:	4a04      	ldr	r2, [pc, #16]	; (d7818 <_GLOBAL__sub_I_RGB+0x14>)
   d7808:	4904      	ldr	r1, [pc, #16]	; (d781c <_GLOBAL__sub_I_RGB+0x18>)
   d780a:	2300      	movs	r3, #0
   d780c:	6083      	str	r3, [r0, #8]
   d780e:	f000 bf3b 	b.w	d8688 <__aeabi_atexit>
   d7812:	bf00      	nop
   d7814:	2003e3e8 	.word	0x2003e3e8
   d7818:	2003d254 	.word	0x2003d254
   d781c:	000d77f9 	.word	0x000d77f9

000d7820 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7820:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7822:	4b0c      	ldr	r3, [pc, #48]	; (d7854 <serialEventRun+0x34>)
   d7824:	b133      	cbz	r3, d7834 <serialEventRun+0x14>
   d7826:	f000 f94b 	bl	d7ac0 <_Z16_fetch_usbserialv>
   d782a:	6803      	ldr	r3, [r0, #0]
   d782c:	691b      	ldr	r3, [r3, #16]
   d782e:	4798      	blx	r3
   d7830:	2800      	cmp	r0, #0
   d7832:	dc09      	bgt.n	d7848 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7834:	4b08      	ldr	r3, [pc, #32]	; (d7858 <serialEventRun+0x38>)
   d7836:	b163      	cbz	r3, d7852 <serialEventRun+0x32>
   d7838:	f000 f9b2 	bl	d7ba0 <_Z22__fetch_global_Serial1v>
   d783c:	6803      	ldr	r3, [r0, #0]
   d783e:	691b      	ldr	r3, [r3, #16]
   d7840:	4798      	blx	r3
   d7842:	2800      	cmp	r0, #0
   d7844:	dc03      	bgt.n	d784e <serialEventRun+0x2e>
   d7846:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7848:	f3af 8000 	nop.w
   d784c:	e7f2      	b.n	d7834 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d784e:	f3af 8000 	nop.w
   d7852:	bd08      	pop	{r3, pc}
	...

000d785c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d785c:	b508      	push	{r3, lr}
	serialEventRun();
   d785e:	f7ff ffdf 	bl	d7820 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7862:	f7ff fabb 	bl	d6ddc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7866:	4b01      	ldr	r3, [pc, #4]	; (d786c <_post_loop+0x10>)
   d7868:	6018      	str	r0, [r3, #0]
   d786a:	bd08      	pop	{r3, pc}
   d786c:	2003e734 	.word	0x2003e734

000d7870 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7870:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7872:	2300      	movs	r3, #0
   d7874:	9300      	str	r3, [sp, #0]
   d7876:	461a      	mov	r2, r3
   d7878:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d787c:	f7ff fc48 	bl	d7110 <system_ctrl_set_result>
}
   d7880:	b003      	add	sp, #12
   d7882:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7888 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7888:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d788a:	8843      	ldrh	r3, [r0, #2]
   d788c:	2b0a      	cmp	r3, #10
   d788e:	d008      	beq.n	d78a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7890:	2b50      	cmp	r3, #80	; 0x50
   d7892:	d109      	bne.n	d78a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7894:	4b09      	ldr	r3, [pc, #36]	; (d78bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7896:	681b      	ldr	r3, [r3, #0]
   d7898:	b13b      	cbz	r3, d78aa <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d789a:	b003      	add	sp, #12
   d789c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d78a0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d78a2:	f7ff ffe5 	bl	d7870 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d78a6:	e006      	b.n	d78b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d78a8:	2300      	movs	r3, #0
   d78aa:	9300      	str	r3, [sp, #0]
   d78ac:	461a      	mov	r2, r3
   d78ae:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d78b2:	f7ff fc2d 	bl	d7110 <system_ctrl_set_result>
        break;
    }
}
   d78b6:	b003      	add	sp, #12
   d78b8:	f85d fb04 	ldr.w	pc, [sp], #4
   d78bc:	2003e3f8 	.word	0x2003e3f8

000d78c0 <module_user_init_hook>:

void module_user_init_hook()
{
   d78c0:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d78c2:	f7ff fa7b 	bl	d6dbc <HAL_RNG_GetRandomNumber>
   d78c6:	4604      	mov	r4, r0
    srand(seed);
   d78c8:	f001 fca2 	bl	d9210 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d78cc:	4b07      	ldr	r3, [pc, #28]	; (d78ec <module_user_init_hook+0x2c>)
   d78ce:	b113      	cbz	r3, d78d6 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d78d0:	4620      	mov	r0, r4
   d78d2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d78d6:	2100      	movs	r1, #0
   d78d8:	4804      	ldr	r0, [pc, #16]	; (d78ec <module_user_init_hook+0x2c>)
   d78da:	f7ff fc83 	bl	d71e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d78de:	2100      	movs	r1, #0
   d78e0:	4803      	ldr	r0, [pc, #12]	; (d78f0 <module_user_init_hook+0x30>)
}
   d78e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d78e6:	f7ff bc09 	b.w	d70fc <system_ctrl_set_app_request_handler>
   d78ea:	bf00      	nop
   d78ec:	00000000 	.word	0x00000000
   d78f0:	000d7889 	.word	0x000d7889

000d78f4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d78f4:	4770      	bx	lr

000d78f6 <_ZN9IPAddressD0Ev>:
   d78f6:	b510      	push	{r4, lr}
   d78f8:	4604      	mov	r4, r0
   d78fa:	f7fc fbce 	bl	d409a <_ZdlPv>
   d78fe:	4620      	mov	r0, r4
   d7900:	bd10      	pop	{r4, pc}

000d7902 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7902:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7904:	7d03      	ldrb	r3, [r0, #20]
   d7906:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7908:	b08d      	sub	sp, #52	; 0x34
   d790a:	460e      	mov	r6, r1
   d790c:	f100 0704 	add.w	r7, r0, #4
   d7910:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7914:	d002      	beq.n	d791c <_ZNK9IPAddress7printToER5Print+0x1a>
   d7916:	f100 0508 	add.w	r5, r0, #8
   d791a:	e018      	b.n	d794e <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d791c:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d791e:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7920:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7924:	232f      	movs	r3, #47	; 0x2f
   d7926:	462a      	mov	r2, r5
   d7928:	200a      	movs	r0, #10
   d792a:	f7ff fa97 	bl	d6e5c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d792e:	4628      	mov	r0, r5
   d7930:	f001 fca8 	bl	d9284 <strlen>
   d7934:	6833      	ldr	r3, [r6, #0]
   d7936:	4602      	mov	r2, r0
   d7938:	68db      	ldr	r3, [r3, #12]
   d793a:	4629      	mov	r1, r5
   d793c:	4630      	mov	r0, r6
   d793e:	4798      	blx	r3
   d7940:	e00f      	b.n	d7962 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7942:	b124      	cbz	r4, d794e <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7944:	212e      	movs	r1, #46	; 0x2e
   d7946:	4630      	mov	r0, r6
   d7948:	f7ff fe87 	bl	d765a <_ZN5Print5printEc>
   d794c:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d794e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7952:	220a      	movs	r2, #10
   d7954:	4630      	mov	r0, r6
   d7956:	f7ff fec6 	bl	d76e6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d795a:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d795c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d795e:	d1f0      	bne.n	d7942 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7960:	4620      	mov	r0, r4
    }
    return n;
}
   d7962:	b00d      	add	sp, #52	; 0x34
   d7964:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7968 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7968:	b510      	push	{r4, lr}
   d796a:	4b05      	ldr	r3, [pc, #20]	; (d7980 <_ZN9IPAddressC1Ev+0x18>)
   d796c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d796e:	2211      	movs	r2, #17
   d7970:	f840 3b04 	str.w	r3, [r0], #4
   d7974:	2100      	movs	r1, #0
   d7976:	f001 fc43 	bl	d9200 <memset>
{
    clear();
}
   d797a:	4620      	mov	r0, r4
   d797c:	bd10      	pop	{r4, pc}
   d797e:	bf00      	nop
   d7980:	000d9870 	.word	0x000d9870

000d7984 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7984:	4603      	mov	r3, r0
   d7986:	4a07      	ldr	r2, [pc, #28]	; (d79a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7988:	b510      	push	{r4, lr}
   d798a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d798e:	f101 0210 	add.w	r2, r1, #16
   d7992:	f851 4b04 	ldr.w	r4, [r1], #4
   d7996:	f843 4b04 	str.w	r4, [r3], #4
   d799a:	4291      	cmp	r1, r2
   d799c:	d1f9      	bne.n	d7992 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d799e:	780a      	ldrb	r2, [r1, #0]
   d79a0:	701a      	strb	r2, [r3, #0]
}
   d79a2:	bd10      	pop	{r4, pc}
   d79a4:	000d9870 	.word	0x000d9870

000d79a8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d79a8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d79aa:	2b04      	cmp	r3, #4
   d79ac:	d101      	bne.n	d79b2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d79ae:	6840      	ldr	r0, [r0, #4]
   d79b0:	e008      	b.n	d79c4 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d79b2:	2b06      	cmp	r3, #6
   d79b4:	d10a      	bne.n	d79cc <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d79b6:	6843      	ldr	r3, [r0, #4]
   d79b8:	b153      	cbz	r3, d79d0 <_ZNK9IPAddresscvbEv+0x28>
   d79ba:	6883      	ldr	r3, [r0, #8]
   d79bc:	b143      	cbz	r3, d79d0 <_ZNK9IPAddresscvbEv+0x28>
   d79be:	68c3      	ldr	r3, [r0, #12]
   d79c0:	b133      	cbz	r3, d79d0 <_ZNK9IPAddresscvbEv+0x28>
   d79c2:	6900      	ldr	r0, [r0, #16]
   d79c4:	3000      	adds	r0, #0
   d79c6:	bf18      	it	ne
   d79c8:	2001      	movne	r0, #1
   d79ca:	4770      	bx	lr
   d79cc:	2000      	movs	r0, #0
   d79ce:	4770      	bx	lr
   d79d0:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d79d2:	4770      	bx	lr

000d79d4 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d79d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d79d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d79da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d79de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d79e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d79e6:	2304      	movs	r3, #4
   d79e8:	6041      	str	r1, [r0, #4]
   d79ea:	7503      	strb	r3, [r0, #20]
   d79ec:	bd10      	pop	{r4, pc}
	...

000d79f0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   d79f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d79f2:	4d04      	ldr	r5, [pc, #16]	; (d7a04 <_ZN9IPAddressC1Ehhhh+0x14>)
   d79f4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
   d79f6:	f89d 5018 	ldrb.w	r5, [sp, #24]
   d79fa:	9500      	str	r5, [sp, #0]
   d79fc:	f7ff ffea 	bl	d79d4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7a00:	b003      	add	sp, #12
   d7a02:	bd30      	pop	{r4, r5, pc}
   d7a04:	000d9870 	.word	0x000d9870

000d7a08 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7a0a:	780d      	ldrb	r5, [r1, #0]
   d7a0c:	788b      	ldrb	r3, [r1, #2]
   d7a0e:	784a      	ldrb	r2, [r1, #1]
   d7a10:	78c9      	ldrb	r1, [r1, #3]
   d7a12:	9100      	str	r1, [sp, #0]
   d7a14:	4629      	mov	r1, r5
   d7a16:	f7ff ffdd 	bl	d79d4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7a1a:	b003      	add	sp, #12
   d7a1c:	bd30      	pop	{r4, r5, pc}

000d7a1e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7a1e:	7441      	strb	r1, [r0, #17]
   d7a20:	4770      	bx	lr

000d7a22 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7a22:	4770      	bx	lr

000d7a24 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d7a24:	2100      	movs	r1, #0
   d7a26:	7c00      	ldrb	r0, [r0, #16]
   d7a28:	f7ff bb28 	b.w	d707c <HAL_USB_USART_Receive_Data>

000d7a2c <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d7a2c:	2101      	movs	r1, #1
   d7a2e:	7c00      	ldrb	r0, [r0, #16]
   d7a30:	f7ff bb24 	b.w	d707c <HAL_USB_USART_Receive_Data>

000d7a34 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d7a34:	7c00      	ldrb	r0, [r0, #16]
   d7a36:	f7ff bb19 	b.w	d706c <HAL_USB_USART_Available_Data_For_Write>

000d7a3a <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d7a3a:	7c00      	ldrb	r0, [r0, #16]
   d7a3c:	f7ff bb0e 	b.w	d705c <HAL_USB_USART_Available_Data>

000d7a40 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d7a40:	b538      	push	{r3, r4, r5, lr}
   d7a42:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7a44:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d7a46:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7a48:	f7ff fb10 	bl	d706c <HAL_USB_USART_Available_Data_For_Write>
   d7a4c:	2800      	cmp	r0, #0
   d7a4e:	dc01      	bgt.n	d7a54 <_ZN9USBSerial5writeEh+0x14>
   d7a50:	7c60      	ldrb	r0, [r4, #17]
   d7a52:	b120      	cbz	r0, d7a5e <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d7a54:	4629      	mov	r1, r5
   d7a56:	7c20      	ldrb	r0, [r4, #16]
   d7a58:	f7ff fb18 	bl	d708c <HAL_USB_USART_Send_Data>
    return 1;
   d7a5c:	2001      	movs	r0, #1
  }
  return 0;
}
   d7a5e:	bd38      	pop	{r3, r4, r5, pc}

000d7a60 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7a60:	7c00      	ldrb	r0, [r0, #16]
   d7a62:	f7ff bb1b 	b.w	d709c <HAL_USB_USART_Flush_Data>

000d7a66 <_ZN9USBSerialD0Ev>:
   d7a66:	b510      	push	{r4, lr}
   d7a68:	4604      	mov	r4, r0
   d7a6a:	f7fc fb16 	bl	d409a <_ZdlPv>
   d7a6e:	4620      	mov	r0, r4
   d7a70:	bd10      	pop	{r4, pc}
	...

000d7a74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a74:	b510      	push	{r4, lr}
   d7a76:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7a78:	2300      	movs	r3, #0
   d7a7a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7a7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7a80:	60a3      	str	r3, [r4, #8]
   d7a82:	4b05      	ldr	r3, [pc, #20]	; (d7a98 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7a84:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7a86:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a88:	4608      	mov	r0, r1
{
  _serial = serial;
   d7a8a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7a8c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7a8e:	4611      	mov	r1, r2
   d7a90:	f7ff fad4 	bl	d703c <HAL_USB_USART_Init>
}
   d7a94:	4620      	mov	r0, r4
   d7a96:	bd10      	pop	{r4, pc}
   d7a98:	000d9884 	.word	0x000d9884

000d7a9c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7a9c:	2200      	movs	r2, #0
   d7a9e:	7c00      	ldrb	r0, [r0, #16]
   d7aa0:	f7ff bad4 	b.w	d704c <HAL_USB_USART_Begin>

000d7aa4 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
   d7aa4:	7c00      	ldrb	r0, [r0, #16]
   d7aa6:	f7ff bb01 	b.w	d70ac <HAL_USB_USART_Is_Enabled>

000d7aaa <_ZN9USBSerialcvbEv>:
{
	return HAL_USB_USART_Receive_Data(_serial, true);
}

USBSerial::operator bool() {
  return isEnabled();
   d7aaa:	f7ff bffb 	b.w	d7aa4 <_ZN9USBSerial9isEnabledEv>

000d7aae <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7aae:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7ab0:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7ab2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7ab4:	2100      	movs	r1, #0
   d7ab6:	f001 fba3 	bl	d9200 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7aba:	4620      	mov	r0, r4
   d7abc:	bd10      	pop	{r4, pc}
	...

000d7ac0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7ac0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7ac2:	4d0e      	ldr	r5, [pc, #56]	; (d7afc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7ac4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7ac6:	a801      	add	r0, sp, #4
   d7ac8:	f7ff fff1 	bl	d7aae <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7acc:	6829      	ldr	r1, [r5, #0]
   d7ace:	f011 0401 	ands.w	r4, r1, #1
   d7ad2:	d110      	bne.n	d7af6 <_Z16_fetch_usbserialv+0x36>
   d7ad4:	4628      	mov	r0, r5
   d7ad6:	f7fc fae4 	bl	d40a2 <__cxa_guard_acquire>
   d7ada:	b160      	cbz	r0, d7af6 <_Z16_fetch_usbserialv+0x36>
   d7adc:	aa01      	add	r2, sp, #4
   d7ade:	4621      	mov	r1, r4
   d7ae0:	4807      	ldr	r0, [pc, #28]	; (d7b00 <_Z16_fetch_usbserialv+0x40>)
   d7ae2:	f7ff ffc7 	bl	d7a74 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7ae6:	4628      	mov	r0, r5
   d7ae8:	f7fc fae0 	bl	d40ac <__cxa_guard_release>
   d7aec:	4a05      	ldr	r2, [pc, #20]	; (d7b04 <_Z16_fetch_usbserialv+0x44>)
   d7aee:	4906      	ldr	r1, [pc, #24]	; (d7b08 <_Z16_fetch_usbserialv+0x48>)
   d7af0:	4803      	ldr	r0, [pc, #12]	; (d7b00 <_Z16_fetch_usbserialv+0x40>)
   d7af2:	f000 fdc9 	bl	d8688 <__aeabi_atexit>
	return _usbserial;
}
   d7af6:	4802      	ldr	r0, [pc, #8]	; (d7b00 <_Z16_fetch_usbserialv+0x40>)
   d7af8:	b007      	add	sp, #28
   d7afa:	bd30      	pop	{r4, r5, pc}
   d7afc:	2003e3fc 	.word	0x2003e3fc
   d7b00:	2003e400 	.word	0x2003e400
   d7b04:	2003d254 	.word	0x2003d254
   d7b08:	000d7a23 	.word	0x000d7a23

000d7b0c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7b0c:	4770      	bx	lr

000d7b0e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b0e:	7441      	strb	r1, [r0, #17]
   d7b10:	4770      	bx	lr

000d7b12 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d7b12:	7c00      	ldrb	r0, [r0, #16]
   d7b14:	f7ff b9fa 	b.w	d6f0c <HAL_USART_Available_Data_For_Write>

000d7b18 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d7b18:	7c00      	ldrb	r0, [r0, #16]
   d7b1a:	f7ff b9cf 	b.w	d6ebc <HAL_USART_Available_Data>

000d7b1e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d7b1e:	7c00      	ldrb	r0, [r0, #16]
   d7b20:	f7ff b9dc 	b.w	d6edc <HAL_USART_Peek_Data>

000d7b24 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d7b24:	7c00      	ldrb	r0, [r0, #16]
   d7b26:	f7ff b9d1 	b.w	d6ecc <HAL_USART_Read_Data>

000d7b2a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7b2a:	7c00      	ldrb	r0, [r0, #16]
   d7b2c:	f7ff b9de 	b.w	d6eec <HAL_USART_Flush_Data>

000d7b30 <_ZN11USARTSerialD0Ev>:
   d7b30:	b510      	push	{r4, lr}
   d7b32:	4604      	mov	r4, r0
   d7b34:	f7fc fab1 	bl	d409a <_ZdlPv>
   d7b38:	4620      	mov	r0, r4
   d7b3a:	bd10      	pop	{r4, pc}

000d7b3c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7b3c:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b3e:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7b40:	4604      	mov	r4, r0
   d7b42:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b44:	b925      	cbnz	r5, d7b50 <_ZN11USARTSerial5writeEh+0x14>
   d7b46:	7c00      	ldrb	r0, [r0, #16]
   d7b48:	f7ff f9e0 	bl	d6f0c <HAL_USART_Available_Data_For_Write>
   d7b4c:	2800      	cmp	r0, #0
   d7b4e:	dd05      	ble.n	d7b5c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7b50:	4631      	mov	r1, r6
   d7b52:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7b54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7b58:	f7ff b9a8 	b.w	d6eac <HAL_USART_Write_Data>
  }
  return 0;
}
   d7b5c:	4628      	mov	r0, r5
   d7b5e:	bd70      	pop	{r4, r5, r6, pc}

000d7b60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7b60:	b510      	push	{r4, lr}
   d7b62:	4604      	mov	r4, r0
   d7b64:	4608      	mov	r0, r1
   d7b66:	4611      	mov	r1, r2
   d7b68:	2200      	movs	r2, #0
   d7b6a:	6062      	str	r2, [r4, #4]
   d7b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7b70:	60a2      	str	r2, [r4, #8]
   d7b72:	4a05      	ldr	r2, [pc, #20]	; (d7b88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7b74:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7b76:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7b78:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7b7a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7b7c:	461a      	mov	r2, r3
   d7b7e:	f7ff f985 	bl	d6e8c <HAL_USART_Init>
}
   d7b82:	4620      	mov	r0, r4
   d7b84:	bd10      	pop	{r4, pc}
   d7b86:	bf00      	nop
   d7b88:	000d98b4 	.word	0x000d98b4

000d7b8c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7b8c:	2300      	movs	r3, #0
   d7b8e:	7c00      	ldrb	r0, [r0, #16]
   d7b90:	f7ff b9c4 	b.w	d6f1c <HAL_USART_BeginConfig>

000d7b94 <_ZN11USARTSerial3endEv>:
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d7b94:	7c00      	ldrb	r0, [r0, #16]
   d7b96:	f7ff b981 	b.w	d6e9c <HAL_USART_End>

000d7b9a <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7b9a:	7c00      	ldrb	r0, [r0, #16]
   d7b9c:	f7ff b9ae 	b.w	d6efc <HAL_USART_Is_Enabled>

000d7ba0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7ba0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7ba2:	4d0c      	ldr	r5, [pc, #48]	; (d7bd4 <_Z22__fetch_global_Serial1v+0x34>)
   d7ba4:	6829      	ldr	r1, [r5, #0]
   d7ba6:	f011 0401 	ands.w	r4, r1, #1
   d7baa:	d111      	bne.n	d7bd0 <_Z22__fetch_global_Serial1v+0x30>
   d7bac:	4628      	mov	r0, r5
   d7bae:	f7fc fa78 	bl	d40a2 <__cxa_guard_acquire>
   d7bb2:	b168      	cbz	r0, d7bd0 <_Z22__fetch_global_Serial1v+0x30>
   d7bb4:	4a08      	ldr	r2, [pc, #32]	; (d7bd8 <_Z22__fetch_global_Serial1v+0x38>)
   d7bb6:	4b09      	ldr	r3, [pc, #36]	; (d7bdc <_Z22__fetch_global_Serial1v+0x3c>)
   d7bb8:	4809      	ldr	r0, [pc, #36]	; (d7be0 <_Z22__fetch_global_Serial1v+0x40>)
   d7bba:	4621      	mov	r1, r4
   d7bbc:	f7ff ffd0 	bl	d7b60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7bc0:	4628      	mov	r0, r5
   d7bc2:	f7fc fa73 	bl	d40ac <__cxa_guard_release>
   d7bc6:	4a07      	ldr	r2, [pc, #28]	; (d7be4 <_Z22__fetch_global_Serial1v+0x44>)
   d7bc8:	4907      	ldr	r1, [pc, #28]	; (d7be8 <_Z22__fetch_global_Serial1v+0x48>)
   d7bca:	4805      	ldr	r0, [pc, #20]	; (d7be0 <_Z22__fetch_global_Serial1v+0x40>)
   d7bcc:	f000 fd5c 	bl	d8688 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7bd0:	4803      	ldr	r0, [pc, #12]	; (d7be0 <_Z22__fetch_global_Serial1v+0x40>)
   d7bd2:	bd38      	pop	{r3, r4, r5, pc}
   d7bd4:	2003e4ac 	.word	0x2003e4ac
   d7bd8:	2003e4b0 	.word	0x2003e4b0
   d7bdc:	2003e428 	.word	0x2003e428
   d7be0:	2003e414 	.word	0x2003e414
   d7be4:	2003d254 	.word	0x2003d254
   d7be8:	000d7b0d 	.word	0x000d7b0d

000d7bec <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d7bec:	4770      	bx	lr

000d7bee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7bf0:	4606      	mov	r6, r0
   d7bf2:	4615      	mov	r5, r2
   d7bf4:	460c      	mov	r4, r1
   d7bf6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7bf8:	42bc      	cmp	r4, r7
   d7bfa:	d006      	beq.n	d7c0a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7bfc:	6833      	ldr	r3, [r6, #0]
   d7bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7c02:	689b      	ldr	r3, [r3, #8]
   d7c04:	4630      	mov	r0, r6
   d7c06:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7c08:	e7f6      	b.n	d7bf8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7c0a:	4628      	mov	r0, r5
   d7c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c0e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7c0e:	2200      	movs	r2, #0
   d7c10:	7c00      	ldrb	r0, [r0, #16]
   d7c12:	f7ff b9ab 	b.w	d6f6c <HAL_I2C_Write_Data>

000d7c16 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7c16:	2100      	movs	r1, #0
   d7c18:	7c00      	ldrb	r0, [r0, #16]
   d7c1a:	f7ff b9af 	b.w	d6f7c <HAL_I2C_Available_Data>

000d7c1e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7c1e:	2100      	movs	r1, #0
   d7c20:	7c00      	ldrb	r0, [r0, #16]
   d7c22:	f7ff b9b3 	b.w	d6f8c <HAL_I2C_Read_Data>

000d7c26 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7c26:	2100      	movs	r1, #0
   d7c28:	7c00      	ldrb	r0, [r0, #16]
   d7c2a:	f7ff b9b7 	b.w	d6f9c <HAL_I2C_Peek_Data>

000d7c2e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7c2e:	2100      	movs	r1, #0
   d7c30:	7c00      	ldrb	r0, [r0, #16]
   d7c32:	f7ff b9bb 	b.w	d6fac <HAL_I2C_Flush_Data>

000d7c36 <_ZN7TwoWireD0Ev>:
   d7c36:	b510      	push	{r4, lr}
   d7c38:	4604      	mov	r4, r0
   d7c3a:	f7fc fa2e 	bl	d409a <_ZdlPv>
   d7c3e:	4620      	mov	r0, r4
   d7c40:	bd10      	pop	{r4, pc}
	...

000d7c44 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7c44:	b510      	push	{r4, lr}
   d7c46:	4604      	mov	r4, r0
   d7c48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7c4c:	4608      	mov	r0, r1
   d7c4e:	60a3      	str	r3, [r4, #8]
   d7c50:	2100      	movs	r1, #0
   d7c52:	4b04      	ldr	r3, [pc, #16]	; (d7c64 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d7c54:	7420      	strb	r0, [r4, #16]
   d7c56:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d7c58:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d7c5a:	f7ff f9b7 	bl	d6fcc <HAL_I2C_Init>

}
   d7c5e:	4620      	mov	r0, r4
   d7c60:	bd10      	pop	{r4, pc}
   d7c62:	bf00      	nop
   d7c64:	000d98e4 	.word	0x000d98e4

000d7c68 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7c68:	2300      	movs	r3, #0
   d7c6a:	461a      	mov	r2, r3
   d7c6c:	4619      	mov	r1, r3
   d7c6e:	7c00      	ldrb	r0, [r0, #16]
   d7c70:	f7ff b95c 	b.w	d6f2c <HAL_I2C_Begin>

000d7c74 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
   d7c74:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
   d7c76:	2400      	movs	r4, #0
   d7c78:	7c00      	ldrb	r0, [r0, #16]
   d7c7a:	9400      	str	r4, [sp, #0]
   d7c7c:	f7ff f95e 	bl	d6f3c <HAL_I2C_Request_Data>
  return result;
}
   d7c80:	b2c0      	uxtb	r0, r0
   d7c82:	b002      	add	sp, #8
   d7c84:	bd10      	pop	{r4, pc}

000d7c86 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d7c86:	2301      	movs	r3, #1
   d7c88:	f7ff bff4 	b.w	d7c74 <_ZN7TwoWire11requestFromEhhh>

000d7c8c <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
   d7c8c:	2301      	movs	r3, #1
   d7c8e:	b2d2      	uxtb	r2, r2
   d7c90:	b2c9      	uxtb	r1, r1
   d7c92:	f7ff bfef 	b.w	d7c74 <_ZN7TwoWire11requestFromEhhh>

000d7c96 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d7c96:	2200      	movs	r2, #0
   d7c98:	7c00      	ldrb	r0, [r0, #16]
   d7c9a:	f7ff b957 	b.w	d6f4c <HAL_I2C_Begin_Transmission>

000d7c9e <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d7c9e:	b2c9      	uxtb	r1, r1
   d7ca0:	f7ff bff9 	b.w	d7c96 <_ZN7TwoWire17beginTransmissionEh>

000d7ca4 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d7ca4:	2200      	movs	r2, #0
   d7ca6:	7c00      	ldrb	r0, [r0, #16]
   d7ca8:	f7ff b958 	b.w	d6f5c <HAL_I2C_End_Transmission>

000d7cac <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d7cac:	2101      	movs	r1, #1
   d7cae:	f7ff bff9 	b.w	d7ca4 <_ZN7TwoWire15endTransmissionEh>

000d7cb2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7cb2:	2100      	movs	r1, #0
   d7cb4:	7c00      	ldrb	r0, [r0, #16]
   d7cb6:	f7ff b981 	b.w	d6fbc <HAL_I2C_Is_Enabled>

000d7cba <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7cba:	2200      	movs	r2, #0
   d7cbc:	4611      	mov	r1, r2
   d7cbe:	6840      	ldr	r0, [r0, #4]
   d7cc0:	f7ff ba68 	b.w	d7194 <network_listening>

000d7cc4 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7cc4:	2200      	movs	r2, #0
   d7cc6:	4611      	mov	r1, r2
   d7cc8:	6840      	ldr	r0, [r0, #4]
   d7cca:	f7ff ba7b 	b.w	d71c4 <network_get_listen_timeout>

000d7cce <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7cce:	2200      	movs	r2, #0
   d7cd0:	6840      	ldr	r0, [r0, #4]
   d7cd2:	f7ff ba6f 	b.w	d71b4 <network_set_listen_timeout>

000d7cd6 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7cd6:	2200      	movs	r2, #0
   d7cd8:	f081 0101 	eor.w	r1, r1, #1
   d7cdc:	6840      	ldr	r0, [r0, #4]
   d7cde:	f7ff ba51 	b.w	d7184 <network_listen>

000d7ce2 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d7ce2:	2300      	movs	r3, #0
   d7ce4:	461a      	mov	r2, r3
   d7ce6:	4619      	mov	r1, r3
   d7ce8:	6840      	ldr	r0, [r0, #4]
   d7cea:	f7ff ba43 	b.w	d7174 <network_off>

000d7cee <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7cee:	2300      	movs	r3, #0
   d7cf0:	461a      	mov	r2, r3
   d7cf2:	4619      	mov	r1, r3
   d7cf4:	6840      	ldr	r0, [r0, #4]
   d7cf6:	f7ff ba35 	b.w	d7164 <network_on>

000d7cfa <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7cfa:	2200      	movs	r2, #0
   d7cfc:	4611      	mov	r1, r2
   d7cfe:	6840      	ldr	r0, [r0, #4]
   d7d00:	f7ff ba28 	b.w	d7154 <network_ready>

000d7d04 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7d04:	2200      	movs	r2, #0
   d7d06:	4611      	mov	r1, r2
   d7d08:	6840      	ldr	r0, [r0, #4]
   d7d0a:	f7ff ba13 	b.w	d7134 <network_connecting>

000d7d0e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7d0e:	2200      	movs	r2, #0
   d7d10:	2102      	movs	r1, #2
   d7d12:	6840      	ldr	r0, [r0, #4]
   d7d14:	f7ff ba16 	b.w	d7144 <network_disconnect>

000d7d18 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7d18:	2300      	movs	r3, #0
   d7d1a:	461a      	mov	r2, r3
   d7d1c:	6840      	ldr	r0, [r0, #4]
   d7d1e:	f7ff ba01 	b.w	d7124 <network_connect>

000d7d22 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7d22:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d24:	4605      	mov	r5, r0
   d7d26:	b178      	cbz	r0, d7d48 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d28:	6804      	ldr	r4, [r0, #0]
   d7d2a:	b144      	cbz	r4, d7d3e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    ~_Function_base()
    {
      if (_M_manager)
   d7d2c:	68a3      	ldr	r3, [r4, #8]
   d7d2e:	b11b      	cbz	r3, d7d38 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7d30:	2203      	movs	r2, #3
   d7d32:	4621      	mov	r1, r4
   d7d34:	4620      	mov	r0, r4
   d7d36:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d38:	4620      	mov	r0, r4
   d7d3a:	f7fc f9ae 	bl	d409a <_ZdlPv>
   d7d3e:	4628      	mov	r0, r5
      }
   d7d40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d44:	f7fc b9a9 	b.w	d409a <_ZdlPv>
   d7d48:	bd38      	pop	{r3, r4, r5, pc}

000d7d4a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d7d4a:	b110      	cbz	r0, d7d52 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d7d4c:	6803      	ldr	r3, [r0, #0]
   d7d4e:	685b      	ldr	r3, [r3, #4]
   d7d50:	4718      	bx	r3
   d7d52:	4770      	bx	lr

000d7d54 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7d54:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7d56:	6803      	ldr	r3, [r0, #0]
   d7d58:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7d5a:	b1bb      	cbz	r3, d7d8c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7d5c:	6858      	ldr	r0, [r3, #4]
   d7d5e:	f7ff f845 	bl	d6dec <os_thread_is_current>
   d7d62:	b978      	cbnz	r0, d7d84 <_ZN6ThreadD1Ev+0x30>
   d7d64:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7d66:	7c5a      	ldrb	r2, [r3, #17]
   d7d68:	b912      	cbnz	r2, d7d70 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7d6a:	6858      	ldr	r0, [r3, #4]
   d7d6c:	f7ff f846 	bl	d6dfc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7d70:	6823      	ldr	r3, [r4, #0]
   d7d72:	6858      	ldr	r0, [r3, #4]
   d7d74:	f7ff f84a 	bl	d6e0c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7d78:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7d7a:	2300      	movs	r3, #0
   d7d7c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7d7e:	b128      	cbz	r0, d7d8c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7d80:	f7ff ffcf 	bl	d7d22 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d84:	6820      	ldr	r0, [r4, #0]
   d7d86:	b108      	cbz	r0, d7d8c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7d88:	f7ff ffcb 	bl	d7d22 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d7d8c:	4620      	mov	r0, r4
   d7d8e:	bd10      	pop	{r4, pc}

000d7d90 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7d90:	b538      	push	{r3, r4, r5, lr}
   d7d92:	4b0b      	ldr	r3, [pc, #44]	; (d7dc0 <_ZN5spark9MeshClassD1Ev+0x30>)
   d7d94:	6003      	str	r3, [r0, #0]
   d7d96:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d98:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d7d9c:	b108      	cbz	r0, d7da2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7d9e:	f7fc f97e 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7da2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d7da6:	b12d      	cbz	r5, d7db4 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7da8:	4628      	mov	r0, r5
   d7daa:	f7ff ffd3 	bl	d7d54 <_ZN6ThreadD1Ev>
   d7dae:	4628      	mov	r0, r5
   d7db0:	f7fc f973 	bl	d409a <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7db4:	68a0      	ldr	r0, [r4, #8]
   d7db6:	b108      	cbz	r0, d7dbc <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d7db8:	f7ff ffc7 	bl	d7d4a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d7dbc:	4620      	mov	r0, r4
   d7dbe:	bd38      	pop	{r3, r4, r5, pc}
   d7dc0:	000d990c 	.word	0x000d990c

000d7dc4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7dc4:	b538      	push	{r3, r4, r5, lr}
   d7dc6:	4c0d      	ldr	r4, [pc, #52]	; (d7dfc <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d7dc8:	4b0d      	ldr	r3, [pc, #52]	; (d7e00 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d7dca:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7dcc:	2500      	movs	r5, #0
   d7dce:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7dd0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7dd4:	6063      	str	r3, [r4, #4]
   d7dd6:	60a5      	str	r5, [r4, #8]
   d7dd8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7ddc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7de0:	f7ff f834 	bl	d6e4c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7de4:	4b07      	ldr	r3, [pc, #28]	; (d7e04 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d7de6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d7dea:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7dec:	4620      	mov	r0, r4
   d7dee:	4a06      	ldr	r2, [pc, #24]	; (d7e08 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d7df0:	4906      	ldr	r1, [pc, #24]	; (d7e0c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d7df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7df6:	f000 bc47 	b.w	d8688 <__aeabi_atexit>
   d7dfa:	bf00      	nop
   d7dfc:	2003e534 	.word	0x2003e534
   d7e00:	000d99f4 	.word	0x000d99f4
   d7e04:	000d990c 	.word	0x000d990c
   d7e08:	2003d254 	.word	0x2003d254
   d7e0c:	000d7d91 	.word	0x000d7d91

000d7e10 <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d7e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7e12:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7e14:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d7e16:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7e1a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7e1c:	2201      	movs	r2, #1
   d7e1e:	f04f 33ff 	mov.w	r3, #4294967295
   d7e22:	4621      	mov	r1, r4
   d7e24:	47a8      	blx	r5
}
   d7e26:	b003      	add	sp, #12
   d7e28:	bd30      	pop	{r4, r5, pc}

000d7e2a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7e2a:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7e2c:	6803      	ldr	r3, [r0, #0]
   d7e2e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7e30:	f04f 33ff 	mov.w	r3, #4294967295
   d7e34:	46a4      	mov	ip, r4
}
   d7e36:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7e3a:	4760      	bx	ip

000d7e3c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7e3e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d7e40:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7e42:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7e46:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7e48:	4621      	mov	r1, r4
   d7e4a:	4613      	mov	r3, r2
   d7e4c:	2201      	movs	r2, #1
   d7e4e:	47a8      	blx	r5
}
   d7e50:	b003      	add	sp, #12
   d7e52:	bd30      	pop	{r4, r5, pc}

000d7e54 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7e54:	4770      	bx	lr

000d7e56 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7e56:	b538      	push	{r3, r4, r5, lr}
   d7e58:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7e5a:	681a      	ldr	r2, [r3, #0]
   d7e5c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7e5e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d7e60:	da05      	bge.n	d7e6e <_ZN9TCPClient9connectedEv+0x18>
   d7e62:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7e66:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7e6a:	429a      	cmp	r2, r3
   d7e6c:	d001      	beq.n	d7e72 <_ZN9TCPClient9connectedEv+0x1c>
   d7e6e:	2501      	movs	r5, #1
   d7e70:	e00b      	b.n	d7e8a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d7e72:	6803      	ldr	r3, [r0, #0]
   d7e74:	691b      	ldr	r3, [r3, #16]
   d7e76:	4798      	blx	r3
   d7e78:	2800      	cmp	r0, #0
   d7e7a:	bf14      	ite	ne
   d7e7c:	2501      	movne	r5, #1
   d7e7e:	2500      	moveq	r5, #0
        if (!rv) {
   d7e80:	d103      	bne.n	d7e8a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d7e82:	6823      	ldr	r3, [r4, #0]
   d7e84:	4620      	mov	r0, r4
   d7e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7e88:	4798      	blx	r3
        }
    }
    return rv;
}
   d7e8a:	4628      	mov	r0, r5
   d7e8c:	bd38      	pop	{r3, r4, r5, pc}

000d7e8e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7e8e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d7e90:	6818      	ldr	r0, [r3, #0]
}
   d7e92:	43c0      	mvns	r0, r0
   d7e94:	0fc0      	lsrs	r0, r0, #31
   d7e96:	4770      	bx	lr

000d7e98 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7e98:	4770      	bx	lr

000d7e9a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7e9a:	2000      	movs	r0, #0
   d7e9c:	4770      	bx	lr

000d7e9e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7e9e:	b510      	push	{r4, lr}
   d7ea0:	4604      	mov	r4, r0
   d7ea2:	f7fc f8fa 	bl	d409a <_ZdlPv>
   d7ea6:	4620      	mov	r0, r4
   d7ea8:	bd10      	pop	{r4, pc}

000d7eaa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7eaa:	f7fc b8f6 	b.w	d409a <_ZdlPv>
	...

000d7eb0 <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7eb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7eb4:	4698      	mov	r8, r3
    stop();
   d7eb6:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7eb8:	b093      	sub	sp, #76	; 0x4c
    stop();
   d7eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7ebc:	460c      	mov	r4, r1
   d7ebe:	4606      	mov	r6, r0
   d7ec0:	4617      	mov	r7, r2
    stop();
   d7ec2:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d7ec4:	ab12      	add	r3, sp, #72	; 0x48
   d7ec6:	2500      	movs	r5, #0
   d7ec8:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d7ecc:	462a      	mov	r2, r5
   d7ece:	4629      	mov	r1, r5
   d7ed0:	4620      	mov	r0, r4
   d7ed2:	f7fe fefb 	bl	d6ccc <netdb_getaddrinfo>
   d7ed6:	2800      	cmp	r0, #0
   d7ed8:	db3a      	blt.n	d7f50 <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d7eda:	9b00      	ldr	r3, [sp, #0]
   d7edc:	2b00      	cmp	r3, #0
   d7ede:	d039      	beq.n	d7f54 <_ZN9TCPClient7connectEPKctm+0xa4>
   d7ee0:	695b      	ldr	r3, [r3, #20]
   d7ee2:	2b00      	cmp	r3, #0
   d7ee4:	d036      	beq.n	d7f54 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d7ee6:	a806      	add	r0, sp, #24
   d7ee8:	f7ff fd3e 	bl	d7968 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7eec:	9b00      	ldr	r3, [sp, #0]
   d7eee:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d7ef0:	7863      	ldrb	r3, [r4, #1]
   d7ef2:	2b02      	cmp	r3, #2
   d7ef4:	d101      	bne.n	d7efa <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7ef6:	1d21      	adds	r1, r4, #4
   d7ef8:	e013      	b.n	d7f22 <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7efa:	2b0a      	cmp	r3, #10
   d7efc:	d114      	bne.n	d7f28 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7efe:	2211      	movs	r2, #17
   d7f00:	4629      	mov	r1, r5
   d7f02:	a801      	add	r0, sp, #4
   d7f04:	f001 f97c 	bl	d9200 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7f08:	68a3      	ldr	r3, [r4, #8]
   d7f0a:	bb33      	cbnz	r3, d7f5a <_ZN9TCPClient7connectEPKctm+0xaa>
   d7f0c:	68e3      	ldr	r3, [r4, #12]
   d7f0e:	bb23      	cbnz	r3, d7f5a <_ZN9TCPClient7connectEPKctm+0xaa>
   d7f10:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7f14:	6925      	ldr	r5, [r4, #16]
   d7f16:	f7fe ffa9 	bl	d6e6c <inet_htonl>
   d7f1a:	4285      	cmp	r5, r0
   d7f1c:	d11d      	bne.n	d7f5a <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7f1e:	f104 0114 	add.w	r1, r4, #20
   d7f22:	a806      	add	r0, sp, #24
   d7f24:	f7ff fd70 	bl	d7a08 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7f28:	a806      	add	r0, sp, #24
   d7f2a:	f7ff fd3d 	bl	d79a8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7f2e:	b188      	cbz	r0, d7f54 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d7f30:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7f32:	ad07      	add	r5, sp, #28
   d7f34:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7f38:	4b18      	ldr	r3, [pc, #96]	; (d7f9c <_ZN9TCPClient7connectEPKctm+0xec>)
   d7f3a:	930c      	str	r3, [sp, #48]	; 0x30
   d7f3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f3e:	ac0d      	add	r4, sp, #52	; 0x34
   d7f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f42:	682b      	ldr	r3, [r5, #0]
   d7f44:	7023      	strb	r3, [r4, #0]
   d7f46:	463a      	mov	r2, r7
   d7f48:	4643      	mov	r3, r8
   d7f4a:	a90c      	add	r1, sp, #48	; 0x30
   d7f4c:	4630      	mov	r0, r6
   d7f4e:	47c8      	blx	r9
   d7f50:	4604      	mov	r4, r0
   d7f52:	e01c      	b.n	d7f8e <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d7f54:	f04f 34ff 	mov.w	r4, #4294967295
   d7f58:	e019      	b.n	d7f8e <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7f5a:	f104 0308 	add.w	r3, r4, #8
   d7f5e:	ad01      	add	r5, sp, #4
   d7f60:	3418      	adds	r4, #24
   d7f62:	6818      	ldr	r0, [r3, #0]
   d7f64:	6859      	ldr	r1, [r3, #4]
   d7f66:	462a      	mov	r2, r5
   d7f68:	c203      	stmia	r2!, {r0, r1}
   d7f6a:	3308      	adds	r3, #8
   d7f6c:	42a3      	cmp	r3, r4
   d7f6e:	4615      	mov	r5, r2
   d7f70:	d1f7      	bne.n	d7f62 <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d7f72:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7f74:	a901      	add	r1, sp, #4
   d7f76:	a80c      	add	r0, sp, #48	; 0x30
   d7f78:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7f7a:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7f7e:	f7ff fd01 	bl	d7984 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7f82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f84:	ac07      	add	r4, sp, #28
   d7f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f88:	682b      	ldr	r3, [r5, #0]
   d7f8a:	7023      	strb	r3, [r4, #0]
   d7f8c:	e7cc      	b.n	d7f28 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d7f8e:	9800      	ldr	r0, [sp, #0]
   d7f90:	f7fe fe94 	bl	d6cbc <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d7f94:	4620      	mov	r0, r4
   d7f96:	b013      	add	sp, #76	; 0x4c
   d7f98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7f9c:	000d9870 	.word	0x000d9870

000d7fa0 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7fa0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7fa2:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7fa4:	2200      	movs	r2, #0
   d7fa6:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7fa8:	9202      	str	r2, [sp, #8]
   d7faa:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7fac:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7fae:	4604      	mov	r4, r0
   d7fb0:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7fb2:	d008      	beq.n	d7fc6 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7fb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7fb8:	fbb3 f1f2 	udiv	r1, r3, r2
   d7fbc:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7fbe:	fb02 3111 	mls	r1, r2, r1, r3
   d7fc2:	434a      	muls	r2, r1
   d7fc4:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7fc6:	6960      	ldr	r0, [r4, #20]
   d7fc8:	2308      	movs	r3, #8
   d7fca:	9300      	str	r3, [sp, #0]
   d7fcc:	f241 0205 	movw	r2, #4101	; 0x1005
   d7fd0:	446b      	add	r3, sp
   d7fd2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7fd6:	6800      	ldr	r0, [r0, #0]
   d7fd8:	f7ff f800 	bl	d6fdc <sock_setsockopt>
    if (ret < 0) {
   d7fdc:	2800      	cmp	r0, #0
   d7fde:	db08      	blt.n	d7ff2 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d7fe0:	6960      	ldr	r0, [r4, #20]
   d7fe2:	2300      	movs	r3, #0
   d7fe4:	4632      	mov	r2, r6
   d7fe6:	4629      	mov	r1, r5
   d7fe8:	6800      	ldr	r0, [r0, #0]
   d7fea:	f7ff f817 	bl	d701c <sock_send>
    if (ret < 0) {
   d7fee:	2800      	cmp	r0, #0
   d7ff0:	da04      	bge.n	d7ffc <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d7ff2:	f7ff f927 	bl	d7244 <__errno>
   d7ff6:	6803      	ldr	r3, [r0, #0]
   d7ff8:	6063      	str	r3, [r4, #4]
   d7ffa:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d7ffc:	b004      	add	sp, #16
   d7ffe:	bd70      	pop	{r4, r5, r6, pc}

000d8000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8000:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8002:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8004:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d8006:	689b      	ldr	r3, [r3, #8]
   d8008:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d800a:	68a3      	ldr	r3, [r4, #8]
   d800c:	3b01      	subs	r3, #1
   d800e:	60a3      	str	r3, [r4, #8]
   d8010:	b92b      	cbnz	r3, d801e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d8012:	6823      	ldr	r3, [r4, #0]
   d8014:	4620      	mov	r0, r4
   d8016:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d801c:	4718      	bx	r3
   d801e:	bd10      	pop	{r4, pc}

000d8020 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d8020:	b570      	push	{r4, r5, r6, lr}
   d8022:	4604      	mov	r4, r0
   d8024:	694d      	ldr	r5, [r1, #20]
   d8026:	4b05      	ldr	r3, [pc, #20]	; (d803c <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8028:	f844 3b04 	str.w	r3, [r4], #4
   d802c:	358c      	adds	r5, #140	; 0x8c
   d802e:	4606      	mov	r6, r0
   d8030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8034:	682b      	ldr	r3, [r5, #0]
   d8036:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8038:	4630      	mov	r0, r6
   d803a:	bd70      	pop	{r4, r5, r6, pc}
   d803c:	000d9870 	.word	0x000d9870

000d8040 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8040:	b510      	push	{r4, lr}
   d8042:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8044:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8048:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d804c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d804e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8050:	d005      	beq.n	d805e <_ZN9TCPClient4peekEv+0x1e>
   d8052:	6962      	ldr	r2, [r4, #20]
   d8054:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8058:	4413      	add	r3, r2
   d805a:	7918      	ldrb	r0, [r3, #4]
   d805c:	bd10      	pop	{r4, pc}
   d805e:	6803      	ldr	r3, [r0, #0]
   d8060:	691b      	ldr	r3, [r3, #16]
   d8062:	4798      	blx	r3
   d8064:	2800      	cmp	r0, #0
   d8066:	d1f4      	bne.n	d8052 <_ZN9TCPClient4peekEv+0x12>
   d8068:	f04f 30ff 	mov.w	r0, #4294967295
}
   d806c:	bd10      	pop	{r4, pc}

000d806e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d806e:	b510      	push	{r4, lr}
   d8070:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8072:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8076:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d807a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d807c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d807e:	d008      	beq.n	d8092 <_ZN9TCPClient4readEv+0x24>
   d8080:	6962      	ldr	r2, [r4, #20]
   d8082:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8086:	1c59      	adds	r1, r3, #1
   d8088:	4413      	add	r3, r2
   d808a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d808e:	7918      	ldrb	r0, [r3, #4]
   d8090:	bd10      	pop	{r4, pc}
   d8092:	6803      	ldr	r3, [r0, #0]
   d8094:	691b      	ldr	r3, [r3, #16]
   d8096:	4798      	blx	r3
   d8098:	2800      	cmp	r0, #0
   d809a:	d1f1      	bne.n	d8080 <_ZN9TCPClient4readEv+0x12>
   d809c:	f04f 30ff 	mov.w	r0, #4294967295
}
   d80a0:	bd10      	pop	{r4, pc}

000d80a2 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d80a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d80a4:	6943      	ldr	r3, [r0, #20]
   d80a6:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d80a8:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d80ac:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d80b0:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d80b2:	4605      	mov	r5, r0
   d80b4:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d80b6:	d106      	bne.n	d80c6 <_ZN9TCPClient4readEPhj+0x24>
   d80b8:	6803      	ldr	r3, [r0, #0]
   d80ba:	691b      	ldr	r3, [r3, #16]
   d80bc:	4798      	blx	r3
   d80be:	b910      	cbnz	r0, d80c6 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d80c0:	f04f 34ff 	mov.w	r4, #4294967295
   d80c4:	e014      	b.n	d80f0 <_ZN9TCPClient4readEPhj+0x4e>
   d80c6:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d80c8:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d80cc:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d80d0:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d80d2:	42bc      	cmp	r4, r7
   d80d4:	bf28      	it	cs
   d80d6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d80d8:	4419      	add	r1, r3
   d80da:	4622      	mov	r2, r4
   d80dc:	3104      	adds	r1, #4
   d80de:	4630      	mov	r0, r6
   d80e0:	f001 f883 	bl	d91ea <memcpy>
   d80e4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d80e6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d80ea:	4423      	add	r3, r4
   d80ec:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d80f0:	4620      	mov	r0, r4
   d80f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d80f4 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d80f4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d80f6:	2300      	movs	r3, #0
   d80f8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d80fc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d80fe:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d8102:	4770      	bx	lr

000d8104 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8108:	4698      	mov	r8, r3
    stop();
   d810a:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d810c:	460d      	mov	r5, r1
   d810e:	b08a      	sub	sp, #40	; 0x28
    stop();
   d8110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8112:	4606      	mov	r6, r0
   d8114:	4617      	mov	r7, r2
    stop();
   d8116:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d8118:	7d2b      	ldrb	r3, [r5, #20]
   d811a:	6974      	ldr	r4, [r6, #20]
   d811c:	2b04      	cmp	r3, #4
   d811e:	bf0c      	ite	eq
   d8120:	2002      	moveq	r0, #2
   d8122:	200a      	movne	r0, #10
   d8124:	2206      	movs	r2, #6
   d8126:	2101      	movs	r1, #1
   d8128:	f7fe ff80 	bl	d702c <sock_socket>
   d812c:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d812e:	6973      	ldr	r3, [r6, #20]
   d8130:	681c      	ldr	r4, [r3, #0]
   d8132:	2c00      	cmp	r4, #0
   d8134:	db5b      	blt.n	d81ee <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d8136:	4630      	mov	r0, r6
   d8138:	f7ff ffdc 	bl	d80f4 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d813c:	f1b8 0f00 	cmp.w	r8, #0
   d8140:	d017      	beq.n	d8172 <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d8142:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d8144:	a903      	add	r1, sp, #12
   d8146:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d814a:	9303      	str	r3, [sp, #12]
   d814c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d8150:	f7fe fe2c 	bl	d6dac <if_index_to_name>
   d8154:	2800      	cmp	r0, #0
   d8156:	db49      	blt.n	d81ec <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d8158:	6970      	ldr	r0, [r6, #20]
   d815a:	2306      	movs	r3, #6
   d815c:	9300      	str	r3, [sp, #0]
   d815e:	f241 020b 	movw	r2, #4107	; 0x100b
   d8162:	ab03      	add	r3, sp, #12
   d8164:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8168:	6800      	ldr	r0, [r0, #0]
   d816a:	f7fe ff37 	bl	d6fdc <sock_setsockopt>
   d816e:	2800      	cmp	r0, #0
   d8170:	db3c      	blt.n	d81ec <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d8172:	241c      	movs	r4, #28
   d8174:	4622      	mov	r2, r4
   d8176:	2100      	movs	r1, #0
   d8178:	a803      	add	r0, sp, #12
   d817a:	f001 f841 	bl	d9200 <memset>
    if (ip.version() == 4) {
   d817e:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d8180:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d8184:	2b04      	cmp	r3, #4
   d8186:	d10c      	bne.n	d81a2 <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d8188:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d818a:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d818c:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d8190:	f7fe fe74 	bl	d6e7c <inet_htons>
   d8194:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d8198:	6868      	ldr	r0, [r5, #4]
   d819a:	f7fe fe67 	bl	d6e6c <inet_htonl>
   d819e:	9004      	str	r0, [sp, #16]
   d81a0:	e013      	b.n	d81ca <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d81a2:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d81a4:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d81a6:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d81aa:	f7fe fe67 	bl	d6e7c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d81ae:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d81b0:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d81b4:	1d2b      	adds	r3, r5, #4
   d81b6:	f105 0714 	add.w	r7, r5, #20
   d81ba:	6818      	ldr	r0, [r3, #0]
   d81bc:	6859      	ldr	r1, [r3, #4]
   d81be:	4622      	mov	r2, r4
   d81c0:	c203      	stmia	r2!, {r0, r1}
   d81c2:	3308      	adds	r3, #8
   d81c4:	42bb      	cmp	r3, r7
   d81c6:	4614      	mov	r4, r2
   d81c8:	d1f7      	bne.n	d81ba <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d81ca:	6973      	ldr	r3, [r6, #20]
   d81cc:	221c      	movs	r2, #28
   d81ce:	a903      	add	r1, sp, #12
   d81d0:	6818      	ldr	r0, [r3, #0]
   d81d2:	f7fe ff13 	bl	d6ffc <sock_connect>
   d81d6:	2800      	cmp	r0, #0
   d81d8:	db08      	blt.n	d81ec <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d81da:	1d2c      	adds	r4, r5, #4
   d81dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d81de:	6976      	ldr	r6, [r6, #20]
   d81e0:	368c      	adds	r6, #140	; 0x8c
   d81e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d81e4:	6823      	ldr	r3, [r4, #0]
   d81e6:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d81e8:	2401      	movs	r4, #1
   d81ea:	e004      	b.n	d81f6 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d81ec:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d81ee:	6833      	ldr	r3, [r6, #0]
   d81f0:	4630      	mov	r0, r6
   d81f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d81f4:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d81f6:	4620      	mov	r0, r4
   d81f8:	b00a      	add	sp, #40	; 0x28
   d81fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d81fe <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d81fe:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d8200:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d8202:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8204:	6818      	ldr	r0, [r3, #0]
   d8206:	2800      	cmp	r0, #0
   d8208:	db01      	blt.n	d820e <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d820a:	f7fe feef 	bl	d6fec <sock_close>
   d820e:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d8210:	f04f 32ff 	mov.w	r2, #4294967295
   d8214:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8216:	6960      	ldr	r0, [r4, #20]
   d8218:	2211      	movs	r2, #17
   d821a:	2100      	movs	r1, #0
   d821c:	308c      	adds	r0, #140	; 0x8c
   d821e:	f000 ffef 	bl	d9200 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d8222:	4620      	mov	r0, r4
}
   d8224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d8228:	f7ff bf64 	b.w	d80f4 <_ZN9TCPClient12flush_bufferEv>

000d822c <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d822c:	b530      	push	{r4, r5, lr}
   d822e:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8230:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8234:	b08b      	sub	sp, #44	; 0x2c
   d8236:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8238:	b11b      	cbz	r3, d8242 <_ZN9TCPClient9availableEv+0x16>
   d823a:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d823e:	429a      	cmp	r2, r3
   d8240:	d040      	beq.n	d82c4 <_ZN9TCPClient9availableEv+0x98>
   d8242:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d8244:	6818      	ldr	r0, [r3, #0]
   d8246:	2800      	cmp	r0, #0
   d8248:	db3f      	blt.n	d82ca <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d824a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d824e:	2d7f      	cmp	r5, #127	; 0x7f
   d8250:	d83b      	bhi.n	d82ca <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d8252:	1d19      	adds	r1, r3, #4
   d8254:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8258:	2308      	movs	r3, #8
   d825a:	4429      	add	r1, r5
   d825c:	f7fe fed6 	bl	d700c <sock_recv>
            if (ret > 0) {
   d8260:	2800      	cmp	r0, #0
   d8262:	dd0c      	ble.n	d827e <_ZN9TCPClient9availableEv+0x52>
   d8264:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8266:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d826a:	b90a      	cbnz	r2, d8270 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d826c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8270:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d8272:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8276:	4418      	add	r0, r3
   d8278:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d827c:	e025      	b.n	d82ca <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d827e:	f7fe ffe1 	bl	d7244 <__errno>
   d8282:	6803      	ldr	r3, [r0, #0]
   d8284:	2b0b      	cmp	r3, #11
   d8286:	d020      	beq.n	d82ca <_ZN9TCPClient9availableEv+0x9e>
   d8288:	f7fe ffdc 	bl	d7244 <__errno>
   d828c:	6803      	ldr	r3, [r0, #0]
   d828e:	2b0b      	cmp	r3, #11
   d8290:	d01b      	beq.n	d82ca <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d8292:	2320      	movs	r3, #32
   d8294:	2500      	movs	r5, #0
   d8296:	9302      	str	r3, [sp, #8]
   d8298:	9503      	str	r5, [sp, #12]
   d829a:	f7fe ffd3 	bl	d7244 <__errno>
   d829e:	6803      	ldr	r3, [r0, #0]
   d82a0:	9301      	str	r3, [sp, #4]
   d82a2:	4b0e      	ldr	r3, [pc, #56]	; (d82dc <_ZN9TCPClient9availableEv+0xb0>)
   d82a4:	9300      	str	r3, [sp, #0]
   d82a6:	aa02      	add	r2, sp, #8
   d82a8:	462b      	mov	r3, r5
   d82aa:	490d      	ldr	r1, [pc, #52]	; (d82e0 <_ZN9TCPClient9availableEv+0xb4>)
   d82ac:	2032      	movs	r0, #50	; 0x32
   d82ae:	f7fe ff05 	bl	d70bc <log_message>
                    sock_close(d_->sock);
   d82b2:	6963      	ldr	r3, [r4, #20]
   d82b4:	6818      	ldr	r0, [r3, #0]
   d82b6:	f7fe fe99 	bl	d6fec <sock_close>
   d82ba:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d82bc:	f04f 32ff 	mov.w	r2, #4294967295
   d82c0:	601a      	str	r2, [r3, #0]
   d82c2:	e002      	b.n	d82ca <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d82c4:	f7ff ff16 	bl	d80f4 <_ZN9TCPClient12flush_bufferEv>
   d82c8:	e7bb      	b.n	d8242 <_ZN9TCPClient9availableEv+0x16>
   d82ca:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d82cc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d82d0:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d82d4:	1a18      	subs	r0, r3, r0
}
   d82d6:	b00b      	add	sp, #44	; 0x2c
   d82d8:	bd30      	pop	{r4, r5, pc}
   d82da:	bf00      	nop
   d82dc:	000d99a7 	.word	0x000d99a7
   d82e0:	000d99a0 	.word	0x000d99a0

000d82e4 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d82e4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d82e6:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d82e8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d82ea:	6001      	str	r1, [r0, #0]
   d82ec:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d82f0:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d82f4:	3088      	adds	r0, #136	; 0x88
   d82f6:	f7ff fb37 	bl	d7968 <_ZN9IPAddressC1Ev>
}
   d82fa:	4620      	mov	r0, r4
   d82fc:	bd10      	pop	{r4, pc}
	...

000d8300 <_ZN9TCPClientC1Ei>:
   d8300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8304:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8306:	2300      	movs	r3, #0
   d8308:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d830a:	4a14      	ldr	r2, [pc, #80]	; (d835c <_ZN9TCPClientC1Ei+0x5c>)
   d830c:	6043      	str	r3, [r0, #4]
   d830e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8310:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8312:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8314:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8316:	20a0      	movs	r0, #160	; 0xa0
   d8318:	460e      	mov	r6, r1
   d831a:	f7fb febc 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d831e:	4605      	mov	r5, r0
   d8320:	b110      	cbz	r0, d8328 <_ZN9TCPClientC1Ei+0x28>
   d8322:	4631      	mov	r1, r6
   d8324:	f7ff ffde 	bl	d82e4 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8328:	2014      	movs	r0, #20
   d832a:	f7fb feb4 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d832e:	4603      	mov	r3, r0
   d8330:	b128      	cbz	r0, d833e <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8332:	2201      	movs	r2, #1
   d8334:	6042      	str	r2, [r0, #4]
   d8336:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8338:	4a09      	ldr	r2, [pc, #36]	; (d8360 <_ZN9TCPClientC1Ei+0x60>)
   d833a:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d833c:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d833e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8340:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8342:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d8344:	b128      	cbz	r0, d8352 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8346:	6843      	ldr	r3, [r0, #4]
   d8348:	3b01      	subs	r3, #1
   d834a:	6043      	str	r3, [r0, #4]
   d834c:	b90b      	cbnz	r3, d8352 <_ZN9TCPClientC1Ei+0x52>
   d834e:	f7ff fe57 	bl	d8000 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d8352:	4620      	mov	r0, r4
   d8354:	f7ff fece 	bl	d80f4 <_ZN9TCPClient12flush_bufferEv>
}
   d8358:	4620      	mov	r0, r4
   d835a:	bd70      	pop	{r4, r5, r6, pc}
   d835c:	000d995c 	.word	0x000d995c
   d8360:	000d9940 	.word	0x000d9940

000d8364 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8364:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8366:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d836a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d836c:	f7ff ffc8 	bl	d8300 <_ZN9TCPClientC1Ei>
}
   d8370:	4620      	mov	r0, r4
   d8372:	bd10      	pop	{r4, pc}

000d8374 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8374:	b510      	push	{r4, lr}
   d8376:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8378:	6800      	ldr	r0, [r0, #0]
   d837a:	2800      	cmp	r0, #0
   d837c:	db01      	blt.n	d8382 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d837e:	f7fe fe35 	bl	d6fec <sock_close>
    }
}
   d8382:	4620      	mov	r0, r4
   d8384:	bd10      	pop	{r4, pc}

000d8386 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8386:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8388:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d838a:	4620      	mov	r0, r4
   d838c:	f7ff fff2 	bl	d8374 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8390:	b124      	cbz	r4, d839c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8392:	4620      	mov	r0, r4
   d8394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8398:	f7fb be7f 	b.w	d409a <_ZdlPv>
   d839c:	bd10      	pop	{r4, pc}

000d839e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d839e:	2200      	movs	r2, #0
   d83a0:	4611      	mov	r1, r2
   d83a2:	6840      	ldr	r0, [r0, #4]
   d83a4:	f7fe bed6 	b.w	d7154 <network_ready>

000d83a8 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d83a8:	2200      	movs	r2, #0
   d83aa:	4611      	mov	r1, r2
   d83ac:	6840      	ldr	r0, [r0, #4]
   d83ae:	f7fe bef1 	b.w	d7194 <network_listening>

000d83b2 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d83b2:	2200      	movs	r2, #0
   d83b4:	4611      	mov	r1, r2
   d83b6:	6840      	ldr	r0, [r0, #4]
   d83b8:	f7fe bf04 	b.w	d71c4 <network_get_listen_timeout>

000d83bc <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d83bc:	2200      	movs	r2, #0
   d83be:	6840      	ldr	r0, [r0, #4]
   d83c0:	f7fe bef8 	b.w	d71b4 <network_set_listen_timeout>

000d83c4 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d83c4:	2200      	movs	r2, #0
   d83c6:	f081 0101 	eor.w	r1, r1, #1
   d83ca:	6840      	ldr	r0, [r0, #4]
   d83cc:	f7fe beda 	b.w	d7184 <network_listen>

000d83d0 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d83d0:	2300      	movs	r3, #0
   d83d2:	461a      	mov	r2, r3
   d83d4:	4619      	mov	r1, r3
   d83d6:	6840      	ldr	r0, [r0, #4]
   d83d8:	f7fe becc 	b.w	d7174 <network_off>

000d83dc <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d83dc:	2300      	movs	r3, #0
   d83de:	461a      	mov	r2, r3
   d83e0:	4619      	mov	r1, r3
   d83e2:	6840      	ldr	r0, [r0, #4]
   d83e4:	f7fe bebe 	b.w	d7164 <network_on>

000d83e8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d83e8:	2200      	movs	r2, #0
   d83ea:	4611      	mov	r1, r2
   d83ec:	6840      	ldr	r0, [r0, #4]
   d83ee:	f7fe bea1 	b.w	d7134 <network_connecting>

000d83f2 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d83f2:	2200      	movs	r2, #0
   d83f4:	2102      	movs	r1, #2
   d83f6:	6840      	ldr	r0, [r0, #4]
   d83f8:	f7fe bea4 	b.w	d7144 <network_disconnect>

000d83fc <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d83fc:	2300      	movs	r3, #0
   d83fe:	461a      	mov	r2, r3
   d8400:	6840      	ldr	r0, [r0, #4]
   d8402:	f7fe be8f 	b.w	d7124 <network_connect>
	...

000d8408 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8408:	4b02      	ldr	r3, [pc, #8]	; (d8414 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d840a:	2204      	movs	r2, #4
   d840c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d840e:	4a02      	ldr	r2, [pc, #8]	; (d8418 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8410:	601a      	str	r2, [r3, #0]
   d8412:	4770      	bx	lr
   d8414:	2003e704 	.word	0x2003e704
   d8418:	000d99c0 	.word	0x000d99c0

000d841c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d841c:	2300      	movs	r3, #0
   d841e:	461a      	mov	r2, r3
   d8420:	6840      	ldr	r0, [r0, #4]
   d8422:	f7fe be7f 	b.w	d7124 <network_connect>

000d8426 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8426:	2200      	movs	r2, #0
   d8428:	2102      	movs	r1, #2
   d842a:	6840      	ldr	r0, [r0, #4]
   d842c:	f7fe be8a 	b.w	d7144 <network_disconnect>

000d8430 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8430:	2200      	movs	r2, #0
   d8432:	4611      	mov	r1, r2
   d8434:	6840      	ldr	r0, [r0, #4]
   d8436:	f7fe be7d 	b.w	d7134 <network_connecting>

000d843a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d843a:	2200      	movs	r2, #0
   d843c:	4611      	mov	r1, r2
   d843e:	6840      	ldr	r0, [r0, #4]
   d8440:	f7fe be88 	b.w	d7154 <network_ready>

000d8444 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8444:	2300      	movs	r3, #0
   d8446:	461a      	mov	r2, r3
   d8448:	4619      	mov	r1, r3
   d844a:	6840      	ldr	r0, [r0, #4]
   d844c:	f7fe be8a 	b.w	d7164 <network_on>

000d8450 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8450:	2300      	movs	r3, #0
   d8452:	461a      	mov	r2, r3
   d8454:	4619      	mov	r1, r3
   d8456:	6840      	ldr	r0, [r0, #4]
   d8458:	f7fe be8c 	b.w	d7174 <network_off>

000d845c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d845c:	2200      	movs	r2, #0
   d845e:	f081 0101 	eor.w	r1, r1, #1
   d8462:	6840      	ldr	r0, [r0, #4]
   d8464:	f7fe be8e 	b.w	d7184 <network_listen>

000d8468 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8468:	2200      	movs	r2, #0
   d846a:	6840      	ldr	r0, [r0, #4]
   d846c:	f7fe bea2 	b.w	d71b4 <network_set_listen_timeout>

000d8470 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8470:	2200      	movs	r2, #0
   d8472:	4611      	mov	r1, r2
   d8474:	6840      	ldr	r0, [r0, #4]
   d8476:	f7fe bea5 	b.w	d71c4 <network_get_listen_timeout>

000d847a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d847a:	2200      	movs	r2, #0
   d847c:	4611      	mov	r1, r2
   d847e:	6840      	ldr	r0, [r0, #4]
   d8480:	f7fe be88 	b.w	d7194 <network_listening>

000d8484 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8484:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8488:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d848a:	b095      	sub	sp, #84	; 0x54
   d848c:	4616      	mov	r6, r2
   d848e:	460d      	mov	r5, r1
   d8490:	4607      	mov	r7, r0
    IPAddress addr;
   d8492:	f7ff fa69 	bl	d7968 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8496:	4621      	mov	r1, r4
   d8498:	2220      	movs	r2, #32
   d849a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d849c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d849e:	f000 feaf 	bl	d9200 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d84a2:	2340      	movs	r3, #64	; 0x40
   d84a4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d84a6:	4621      	mov	r1, r4
   d84a8:	466b      	mov	r3, sp
   d84aa:	aa0c      	add	r2, sp, #48	; 0x30
   d84ac:	4630      	mov	r0, r6
   d84ae:	f7fe fc0d 	bl	d6ccc <netdb_getaddrinfo>
    if (!r) {
   d84b2:	4604      	mov	r4, r0
   d84b4:	2800      	cmp	r0, #0
   d84b6:	d144      	bne.n	d8542 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d84b8:	4602      	mov	r2, r0
   d84ba:	2101      	movs	r1, #1
   d84bc:	6868      	ldr	r0, [r5, #4]
   d84be:	f7fe fe49 	bl	d7154 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d84c2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d84c4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d84c6:	4622      	mov	r2, r4
   d84c8:	6868      	ldr	r0, [r5, #4]
   d84ca:	f7fe fe43 	bl	d7154 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d84ce:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d84d0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d84d2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d84d4:	2e00      	cmp	r6, #0
   d84d6:	d034      	beq.n	d8542 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d84d8:	2900      	cmp	r1, #0
   d84da:	d132      	bne.n	d8542 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d84dc:	6873      	ldr	r3, [r6, #4]
   d84de:	2b02      	cmp	r3, #2
   d84e0:	d002      	beq.n	d84e8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d84e2:	2b0a      	cmp	r3, #10
   d84e4:	d009      	beq.n	d84fa <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d84e6:	e02a      	b.n	d853e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d84e8:	f1b8 0f00 	cmp.w	r8, #0
   d84ec:	d027      	beq.n	d853e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d84ee:	6971      	ldr	r1, [r6, #20]
   d84f0:	4638      	mov	r0, r7
   d84f2:	3104      	adds	r1, #4
   d84f4:	f7ff fa88 	bl	d7a08 <_ZN9IPAddressaSEPKh>
   d84f8:	e020      	b.n	d853c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d84fa:	f1b9 0f00 	cmp.w	r9, #0
   d84fe:	d01e      	beq.n	d853e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8500:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8502:	2211      	movs	r2, #17
   d8504:	a801      	add	r0, sp, #4
   d8506:	f000 fe7b 	bl	d9200 <memset>
                    a.v = 6;
   d850a:	2306      	movs	r3, #6
   d850c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8510:	ad01      	add	r5, sp, #4
   d8512:	f104 0308 	add.w	r3, r4, #8
   d8516:	3418      	adds	r4, #24
   d8518:	6818      	ldr	r0, [r3, #0]
   d851a:	6859      	ldr	r1, [r3, #4]
   d851c:	462a      	mov	r2, r5
   d851e:	c203      	stmia	r2!, {r0, r1}
   d8520:	3308      	adds	r3, #8
   d8522:	42a3      	cmp	r3, r4
   d8524:	4615      	mov	r5, r2
   d8526:	d1f7      	bne.n	d8518 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8528:	a901      	add	r1, sp, #4
   d852a:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d852c:	ad07      	add	r5, sp, #28
   d852e:	f7ff fa29 	bl	d7984 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8534:	1d3c      	adds	r4, r7, #4
   d8536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8538:	682b      	ldr	r3, [r5, #0]
   d853a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d853c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d853e:	69f6      	ldr	r6, [r6, #28]
   d8540:	e7c8      	b.n	d84d4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8542:	9800      	ldr	r0, [sp, #0]
   d8544:	f7fe fbba 	bl	d6cbc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8548:	4638      	mov	r0, r7
   d854a:	b015      	add	sp, #84	; 0x54
   d854c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8550 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8550:	4b02      	ldr	r3, [pc, #8]	; (d855c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8552:	4a03      	ldr	r2, [pc, #12]	; (d8560 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8554:	601a      	str	r2, [r3, #0]
   d8556:	2200      	movs	r2, #0
   d8558:	605a      	str	r2, [r3, #4]
   d855a:	4770      	bx	lr
   d855c:	2003e70c 	.word	0x2003e70c
   d8560:	000d99f4 	.word	0x000d99f4

000d8564 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8564:	b510      	push	{r4, lr}
   d8566:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8568:	480f      	ldr	r0, [pc, #60]	; (d85a8 <pinAvailable+0x44>)
   d856a:	f7fe ff74 	bl	d7456 <_ZN8SPIClass9isEnabledEv>
   d856e:	b128      	cbz	r0, d857c <pinAvailable+0x18>
   d8570:	f1a4 030b 	sub.w	r3, r4, #11
   d8574:	2b02      	cmp	r3, #2
   d8576:	d801      	bhi.n	d857c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d8578:	2000      	movs	r0, #0
   d857a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d857c:	f000 f864 	bl	d8648 <_Z19__fetch_global_Wirev>
   d8580:	f7ff fb97 	bl	d7cb2 <_ZN7TwoWire9isEnabledEv>
   d8584:	b108      	cbz	r0, d858a <pinAvailable+0x26>
   d8586:	2c01      	cmp	r4, #1
   d8588:	d9f6      	bls.n	d8578 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d858a:	f7ff fb09 	bl	d7ba0 <_Z22__fetch_global_Serial1v>
   d858e:	f7ff fb04 	bl	d7b9a <_ZN11USARTSerial9isEnabledEv>
   d8592:	b118      	cbz	r0, d859c <pinAvailable+0x38>
   d8594:	f1a4 0309 	sub.w	r3, r4, #9
   d8598:	2b01      	cmp	r3, #1
   d859a:	d9ed      	bls.n	d8578 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d859c:	2c23      	cmp	r4, #35	; 0x23
   d859e:	bf8c      	ite	hi
   d85a0:	2000      	movhi	r0, #0
   d85a2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d85a4:	bd10      	pop	{r4, pc}
   d85a6:	bf00      	nop
   d85a8:	2003e714 	.word	0x2003e714

000d85ac <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d85ac:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d85ae:	b538      	push	{r3, r4, r5, lr}
   d85b0:	4604      	mov	r4, r0
   d85b2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d85b4:	d80a      	bhi.n	d85cc <pinMode+0x20>
   d85b6:	29ff      	cmp	r1, #255	; 0xff
   d85b8:	d008      	beq.n	d85cc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d85ba:	f7ff ffd3 	bl	d8564 <pinAvailable>
   d85be:	b128      	cbz	r0, d85cc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d85c0:	4629      	mov	r1, r5
   d85c2:	4620      	mov	r0, r4
}
   d85c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d85c8:	f7fe bb90 	b.w	d6cec <HAL_Pin_Mode>
   d85cc:	bd38      	pop	{r3, r4, r5, pc}

000d85ce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d85ce:	b538      	push	{r3, r4, r5, lr}
   d85d0:	4604      	mov	r4, r0
   d85d2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d85d4:	f7fe fb92 	bl	d6cfc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d85d8:	28ff      	cmp	r0, #255	; 0xff
   d85da:	d010      	beq.n	d85fe <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d85dc:	2806      	cmp	r0, #6
   d85de:	d804      	bhi.n	d85ea <digitalWrite+0x1c>
   d85e0:	234d      	movs	r3, #77	; 0x4d
   d85e2:	fa23 f000 	lsr.w	r0, r3, r0
   d85e6:	07c3      	lsls	r3, r0, #31
   d85e8:	d409      	bmi.n	d85fe <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d85ea:	4620      	mov	r0, r4
   d85ec:	f7ff ffba 	bl	d8564 <pinAvailable>
   d85f0:	b128      	cbz	r0, d85fe <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d85f2:	4629      	mov	r1, r5
   d85f4:	4620      	mov	r0, r4
}
   d85f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d85fa:	f7fe bb87 	b.w	d6d0c <HAL_GPIO_Write>
   d85fe:	bd38      	pop	{r3, r4, r5, pc}

000d8600 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
   d8600:	f7fe bb8c 	b.w	d6d1c <HAL_Pulse_In>

000d8604 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8604:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8606:	4c0c      	ldr	r4, [pc, #48]	; (d8638 <_GLOBAL__sub_I_SPI+0x34>)
   d8608:	4e0c      	ldr	r6, [pc, #48]	; (d863c <_GLOBAL__sub_I_SPI+0x38>)
   d860a:	4d0d      	ldr	r5, [pc, #52]	; (d8640 <_GLOBAL__sub_I_SPI+0x3c>)
   d860c:	2100      	movs	r1, #0
   d860e:	4620      	mov	r0, r4
   d8610:	f7fe fe66 	bl	d72e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8614:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8616:	4c0b      	ldr	r4, [pc, #44]	; (d8644 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8618:	4632      	mov	r2, r6
   d861a:	4629      	mov	r1, r5
   d861c:	f000 f834 	bl	d8688 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8620:	2101      	movs	r1, #1
   d8622:	4620      	mov	r0, r4
   d8624:	f7fe fe5c 	bl	d72e0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8628:	4632      	mov	r2, r6
   d862a:	4629      	mov	r1, r5
   d862c:	4620      	mov	r0, r4
   d862e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8632:	f000 b829 	b.w	d8688 <__aeabi_atexit>
   d8636:	bf00      	nop
   d8638:	2003e714 	.word	0x2003e714
   d863c:	2003d254 	.word	0x2003d254
   d8640:	000d72d1 	.word	0x000d72d1
   d8644:	2003e724 	.word	0x2003e724

000d8648 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d8648:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d864a:	4d0b      	ldr	r5, [pc, #44]	; (d8678 <_Z19__fetch_global_Wirev+0x30>)
   d864c:	6829      	ldr	r1, [r5, #0]
   d864e:	f011 0401 	ands.w	r4, r1, #1
   d8652:	d10f      	bne.n	d8674 <_Z19__fetch_global_Wirev+0x2c>
   d8654:	4628      	mov	r0, r5
   d8656:	f7fb fd24 	bl	d40a2 <__cxa_guard_acquire>
   d865a:	b158      	cbz	r0, d8674 <_Z19__fetch_global_Wirev+0x2c>
   d865c:	4621      	mov	r1, r4
   d865e:	4807      	ldr	r0, [pc, #28]	; (d867c <_Z19__fetch_global_Wirev+0x34>)
   d8660:	f7ff faf0 	bl	d7c44 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d8664:	4628      	mov	r0, r5
   d8666:	f7fb fd21 	bl	d40ac <__cxa_guard_release>
   d866a:	4a05      	ldr	r2, [pc, #20]	; (d8680 <_Z19__fetch_global_Wirev+0x38>)
   d866c:	4905      	ldr	r1, [pc, #20]	; (d8684 <_Z19__fetch_global_Wirev+0x3c>)
   d866e:	4803      	ldr	r0, [pc, #12]	; (d867c <_Z19__fetch_global_Wirev+0x34>)
   d8670:	f000 f80a 	bl	d8688 <__aeabi_atexit>
	return wire;
}
   d8674:	4801      	ldr	r0, [pc, #4]	; (d867c <_Z19__fetch_global_Wirev+0x34>)
   d8676:	bd38      	pop	{r3, r4, r5, pc}
   d8678:	2003e738 	.word	0x2003e738
   d867c:	2003e73c 	.word	0x2003e73c
   d8680:	2003d254 	.word	0x2003d254
   d8684:	000d7bed 	.word	0x000d7bed

000d8688 <__aeabi_atexit>:
   d8688:	460b      	mov	r3, r1
   d868a:	4601      	mov	r1, r0
   d868c:	4618      	mov	r0, r3
   d868e:	f000 bd8f 	b.w	d91b0 <__cxa_atexit>
	...

000d8694 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8694:	4b18      	ldr	r3, [pc, #96]	; (d86f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8696:	681a      	ldr	r2, [r3, #0]
   d8698:	07d1      	lsls	r1, r2, #31
   d869a:	bf5c      	itt	pl
   d869c:	2201      	movpl	r2, #1
   d869e:	601a      	strpl	r2, [r3, #0]
   d86a0:	4b16      	ldr	r3, [pc, #88]	; (d86fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d86a2:	681a      	ldr	r2, [r3, #0]
   d86a4:	07d2      	lsls	r2, r2, #31
   d86a6:	bf5c      	itt	pl
   d86a8:	2201      	movpl	r2, #1
   d86aa:	601a      	strpl	r2, [r3, #0]
   d86ac:	4b14      	ldr	r3, [pc, #80]	; (d8700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d86ae:	681a      	ldr	r2, [r3, #0]
   d86b0:	07d0      	lsls	r0, r2, #31
   d86b2:	bf5c      	itt	pl
   d86b4:	2201      	movpl	r2, #1
   d86b6:	601a      	strpl	r2, [r3, #0]
   d86b8:	4b12      	ldr	r3, [pc, #72]	; (d8704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d86ba:	681a      	ldr	r2, [r3, #0]
   d86bc:	07d1      	lsls	r1, r2, #31
   d86be:	bf5c      	itt	pl
   d86c0:	2201      	movpl	r2, #1
   d86c2:	601a      	strpl	r2, [r3, #0]
   d86c4:	4b10      	ldr	r3, [pc, #64]	; (d8708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d86c6:	681a      	ldr	r2, [r3, #0]
   d86c8:	07d2      	lsls	r2, r2, #31
   d86ca:	bf5c      	itt	pl
   d86cc:	2201      	movpl	r2, #1
   d86ce:	601a      	strpl	r2, [r3, #0]
   d86d0:	4b0e      	ldr	r3, [pc, #56]	; (d870c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d86d2:	681a      	ldr	r2, [r3, #0]
   d86d4:	07d0      	lsls	r0, r2, #31
   d86d6:	bf5c      	itt	pl
   d86d8:	2201      	movpl	r2, #1
   d86da:	601a      	strpl	r2, [r3, #0]
   d86dc:	4b0c      	ldr	r3, [pc, #48]	; (d8710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d86de:	681a      	ldr	r2, [r3, #0]
   d86e0:	07d1      	lsls	r1, r2, #31
   d86e2:	bf5c      	itt	pl
   d86e4:	2201      	movpl	r2, #1
   d86e6:	601a      	strpl	r2, [r3, #0]
   d86e8:	4b0a      	ldr	r3, [pc, #40]	; (d8714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d86ea:	681a      	ldr	r2, [r3, #0]
   d86ec:	07d2      	lsls	r2, r2, #31
   d86ee:	bf5c      	itt	pl
   d86f0:	2201      	movpl	r2, #1
   d86f2:	601a      	strpl	r2, [r3, #0]
   d86f4:	4770      	bx	lr
   d86f6:	bf00      	nop
   d86f8:	2003e76c 	.word	0x2003e76c
   d86fc:	2003e768 	.word	0x2003e768
   d8700:	2003e764 	.word	0x2003e764
   d8704:	2003e760 	.word	0x2003e760
   d8708:	2003e75c 	.word	0x2003e75c
   d870c:	2003e758 	.word	0x2003e758
   d8710:	2003e754 	.word	0x2003e754
   d8714:	2003e750 	.word	0x2003e750

000d8718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8718:	4b24      	ldr	r3, [pc, #144]	; (d87ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d871a:	681a      	ldr	r2, [r3, #0]
   d871c:	07d0      	lsls	r0, r2, #31
   d871e:	bf5c      	itt	pl
   d8720:	2201      	movpl	r2, #1
   d8722:	601a      	strpl	r2, [r3, #0]
   d8724:	4b22      	ldr	r3, [pc, #136]	; (d87b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8726:	681a      	ldr	r2, [r3, #0]
   d8728:	07d1      	lsls	r1, r2, #31
   d872a:	bf5c      	itt	pl
   d872c:	2201      	movpl	r2, #1
   d872e:	601a      	strpl	r2, [r3, #0]
   d8730:	4b20      	ldr	r3, [pc, #128]	; (d87b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8732:	681a      	ldr	r2, [r3, #0]
   d8734:	07d2      	lsls	r2, r2, #31
   d8736:	bf5c      	itt	pl
   d8738:	2201      	movpl	r2, #1
   d873a:	601a      	strpl	r2, [r3, #0]
   d873c:	4b1e      	ldr	r3, [pc, #120]	; (d87b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d873e:	681a      	ldr	r2, [r3, #0]
   d8740:	07d0      	lsls	r0, r2, #31
   d8742:	bf5c      	itt	pl
   d8744:	2201      	movpl	r2, #1
   d8746:	601a      	strpl	r2, [r3, #0]
   d8748:	4b1c      	ldr	r3, [pc, #112]	; (d87bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d874a:	681a      	ldr	r2, [r3, #0]
   d874c:	07d1      	lsls	r1, r2, #31
   d874e:	bf5c      	itt	pl
   d8750:	2201      	movpl	r2, #1
   d8752:	601a      	strpl	r2, [r3, #0]
   d8754:	4b1a      	ldr	r3, [pc, #104]	; (d87c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8756:	681a      	ldr	r2, [r3, #0]
   d8758:	07d2      	lsls	r2, r2, #31
   d875a:	bf5c      	itt	pl
   d875c:	2201      	movpl	r2, #1
   d875e:	601a      	strpl	r2, [r3, #0]
   d8760:	4b18      	ldr	r3, [pc, #96]	; (d87c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8762:	681a      	ldr	r2, [r3, #0]
   d8764:	07d0      	lsls	r0, r2, #31
   d8766:	bf5c      	itt	pl
   d8768:	2201      	movpl	r2, #1
   d876a:	601a      	strpl	r2, [r3, #0]
   d876c:	4b16      	ldr	r3, [pc, #88]	; (d87c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d876e:	681a      	ldr	r2, [r3, #0]
   d8770:	07d1      	lsls	r1, r2, #31
   d8772:	bf5c      	itt	pl
   d8774:	2201      	movpl	r2, #1
   d8776:	601a      	strpl	r2, [r3, #0]
   d8778:	4b14      	ldr	r3, [pc, #80]	; (d87cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d877a:	681a      	ldr	r2, [r3, #0]
   d877c:	07d2      	lsls	r2, r2, #31
   d877e:	bf5c      	itt	pl
   d8780:	2201      	movpl	r2, #1
   d8782:	601a      	strpl	r2, [r3, #0]
   d8784:	4b12      	ldr	r3, [pc, #72]	; (d87d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8786:	681a      	ldr	r2, [r3, #0]
   d8788:	07d0      	lsls	r0, r2, #31
   d878a:	bf5c      	itt	pl
   d878c:	2201      	movpl	r2, #1
   d878e:	601a      	strpl	r2, [r3, #0]
   d8790:	4b10      	ldr	r3, [pc, #64]	; (d87d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8792:	681a      	ldr	r2, [r3, #0]
   d8794:	07d1      	lsls	r1, r2, #31
   d8796:	bf5c      	itt	pl
   d8798:	2201      	movpl	r2, #1
   d879a:	601a      	strpl	r2, [r3, #0]
   d879c:	4b0e      	ldr	r3, [pc, #56]	; (d87d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d879e:	681a      	ldr	r2, [r3, #0]
   d87a0:	07d2      	lsls	r2, r2, #31
   d87a2:	bf5c      	itt	pl
   d87a4:	2201      	movpl	r2, #1
   d87a6:	601a      	strpl	r2, [r3, #0]
   d87a8:	4770      	bx	lr
   d87aa:	bf00      	nop
   d87ac:	2003e79c 	.word	0x2003e79c
   d87b0:	2003e798 	.word	0x2003e798
   d87b4:	2003e794 	.word	0x2003e794
   d87b8:	2003e790 	.word	0x2003e790
   d87bc:	2003e78c 	.word	0x2003e78c
   d87c0:	2003e788 	.word	0x2003e788
   d87c4:	2003e784 	.word	0x2003e784
   d87c8:	2003e780 	.word	0x2003e780
   d87cc:	2003e77c 	.word	0x2003e77c
   d87d0:	2003e778 	.word	0x2003e778
   d87d4:	2003e774 	.word	0x2003e774
   d87d8:	2003e770 	.word	0x2003e770

000d87dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d87dc:	4b24      	ldr	r3, [pc, #144]	; (d8870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d87de:	681a      	ldr	r2, [r3, #0]
   d87e0:	07d0      	lsls	r0, r2, #31
   d87e2:	bf5c      	itt	pl
   d87e4:	2201      	movpl	r2, #1
   d87e6:	601a      	strpl	r2, [r3, #0]
   d87e8:	4b22      	ldr	r3, [pc, #136]	; (d8874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d87ea:	681a      	ldr	r2, [r3, #0]
   d87ec:	07d1      	lsls	r1, r2, #31
   d87ee:	bf5c      	itt	pl
   d87f0:	2201      	movpl	r2, #1
   d87f2:	601a      	strpl	r2, [r3, #0]
   d87f4:	4b20      	ldr	r3, [pc, #128]	; (d8878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d87f6:	681a      	ldr	r2, [r3, #0]
   d87f8:	07d2      	lsls	r2, r2, #31
   d87fa:	bf5c      	itt	pl
   d87fc:	2201      	movpl	r2, #1
   d87fe:	601a      	strpl	r2, [r3, #0]
   d8800:	4b1e      	ldr	r3, [pc, #120]	; (d887c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8802:	681a      	ldr	r2, [r3, #0]
   d8804:	07d0      	lsls	r0, r2, #31
   d8806:	bf5c      	itt	pl
   d8808:	2201      	movpl	r2, #1
   d880a:	601a      	strpl	r2, [r3, #0]
   d880c:	4b1c      	ldr	r3, [pc, #112]	; (d8880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d880e:	681a      	ldr	r2, [r3, #0]
   d8810:	07d1      	lsls	r1, r2, #31
   d8812:	bf5c      	itt	pl
   d8814:	2201      	movpl	r2, #1
   d8816:	601a      	strpl	r2, [r3, #0]
   d8818:	4b1a      	ldr	r3, [pc, #104]	; (d8884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d881a:	681a      	ldr	r2, [r3, #0]
   d881c:	07d2      	lsls	r2, r2, #31
   d881e:	bf5c      	itt	pl
   d8820:	2201      	movpl	r2, #1
   d8822:	601a      	strpl	r2, [r3, #0]
   d8824:	4b18      	ldr	r3, [pc, #96]	; (d8888 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8826:	681a      	ldr	r2, [r3, #0]
   d8828:	07d0      	lsls	r0, r2, #31
   d882a:	bf5c      	itt	pl
   d882c:	2201      	movpl	r2, #1
   d882e:	601a      	strpl	r2, [r3, #0]
   d8830:	4b16      	ldr	r3, [pc, #88]	; (d888c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8832:	681a      	ldr	r2, [r3, #0]
   d8834:	07d1      	lsls	r1, r2, #31
   d8836:	bf5c      	itt	pl
   d8838:	2201      	movpl	r2, #1
   d883a:	601a      	strpl	r2, [r3, #0]
   d883c:	4b14      	ldr	r3, [pc, #80]	; (d8890 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d883e:	681a      	ldr	r2, [r3, #0]
   d8840:	07d2      	lsls	r2, r2, #31
   d8842:	bf5c      	itt	pl
   d8844:	2201      	movpl	r2, #1
   d8846:	601a      	strpl	r2, [r3, #0]
   d8848:	4b12      	ldr	r3, [pc, #72]	; (d8894 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d884a:	681a      	ldr	r2, [r3, #0]
   d884c:	07d0      	lsls	r0, r2, #31
   d884e:	bf5c      	itt	pl
   d8850:	2201      	movpl	r2, #1
   d8852:	601a      	strpl	r2, [r3, #0]
   d8854:	4b10      	ldr	r3, [pc, #64]	; (d8898 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8856:	681a      	ldr	r2, [r3, #0]
   d8858:	07d1      	lsls	r1, r2, #31
   d885a:	bf5c      	itt	pl
   d885c:	2201      	movpl	r2, #1
   d885e:	601a      	strpl	r2, [r3, #0]
   d8860:	4b0e      	ldr	r3, [pc, #56]	; (d889c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8862:	681a      	ldr	r2, [r3, #0]
   d8864:	07d2      	lsls	r2, r2, #31
   d8866:	bf5c      	itt	pl
   d8868:	2201      	movpl	r2, #1
   d886a:	601a      	strpl	r2, [r3, #0]
   d886c:	4770      	bx	lr
   d886e:	bf00      	nop
   d8870:	2003e7cc 	.word	0x2003e7cc
   d8874:	2003e7c8 	.word	0x2003e7c8
   d8878:	2003e7c4 	.word	0x2003e7c4
   d887c:	2003e7c0 	.word	0x2003e7c0
   d8880:	2003e7bc 	.word	0x2003e7bc
   d8884:	2003e7b8 	.word	0x2003e7b8
   d8888:	2003e7b4 	.word	0x2003e7b4
   d888c:	2003e7b0 	.word	0x2003e7b0
   d8890:	2003e7ac 	.word	0x2003e7ac
   d8894:	2003e7a8 	.word	0x2003e7a8
   d8898:	2003e7a4 	.word	0x2003e7a4
   d889c:	2003e7a0 	.word	0x2003e7a0

000d88a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d88a0:	4b18      	ldr	r3, [pc, #96]	; (d8904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d88a2:	681a      	ldr	r2, [r3, #0]
   d88a4:	07d1      	lsls	r1, r2, #31
   d88a6:	bf5c      	itt	pl
   d88a8:	2201      	movpl	r2, #1
   d88aa:	601a      	strpl	r2, [r3, #0]
   d88ac:	4b16      	ldr	r3, [pc, #88]	; (d8908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d88ae:	681a      	ldr	r2, [r3, #0]
   d88b0:	07d2      	lsls	r2, r2, #31
   d88b2:	bf5c      	itt	pl
   d88b4:	2201      	movpl	r2, #1
   d88b6:	601a      	strpl	r2, [r3, #0]
   d88b8:	4b14      	ldr	r3, [pc, #80]	; (d890c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d88ba:	681a      	ldr	r2, [r3, #0]
   d88bc:	07d0      	lsls	r0, r2, #31
   d88be:	bf5c      	itt	pl
   d88c0:	2201      	movpl	r2, #1
   d88c2:	601a      	strpl	r2, [r3, #0]
   d88c4:	4b12      	ldr	r3, [pc, #72]	; (d8910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d88c6:	681a      	ldr	r2, [r3, #0]
   d88c8:	07d1      	lsls	r1, r2, #31
   d88ca:	bf5c      	itt	pl
   d88cc:	2201      	movpl	r2, #1
   d88ce:	601a      	strpl	r2, [r3, #0]
   d88d0:	4b10      	ldr	r3, [pc, #64]	; (d8914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d88d2:	681a      	ldr	r2, [r3, #0]
   d88d4:	07d2      	lsls	r2, r2, #31
   d88d6:	bf5c      	itt	pl
   d88d8:	2201      	movpl	r2, #1
   d88da:	601a      	strpl	r2, [r3, #0]
   d88dc:	4b0e      	ldr	r3, [pc, #56]	; (d8918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d88de:	681a      	ldr	r2, [r3, #0]
   d88e0:	07d0      	lsls	r0, r2, #31
   d88e2:	bf5c      	itt	pl
   d88e4:	2201      	movpl	r2, #1
   d88e6:	601a      	strpl	r2, [r3, #0]
   d88e8:	4b0c      	ldr	r3, [pc, #48]	; (d891c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d88ea:	681a      	ldr	r2, [r3, #0]
   d88ec:	07d1      	lsls	r1, r2, #31
   d88ee:	bf5c      	itt	pl
   d88f0:	2201      	movpl	r2, #1
   d88f2:	601a      	strpl	r2, [r3, #0]
   d88f4:	4b0a      	ldr	r3, [pc, #40]	; (d8920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d88f6:	681a      	ldr	r2, [r3, #0]
   d88f8:	07d2      	lsls	r2, r2, #31
   d88fa:	bf5c      	itt	pl
   d88fc:	2201      	movpl	r2, #1
   d88fe:	601a      	strpl	r2, [r3, #0]
   d8900:	4770      	bx	lr
   d8902:	bf00      	nop
   d8904:	2003e7ec 	.word	0x2003e7ec
   d8908:	2003e7e8 	.word	0x2003e7e8
   d890c:	2003e7e4 	.word	0x2003e7e4
   d8910:	2003e7e0 	.word	0x2003e7e0
   d8914:	2003e7dc 	.word	0x2003e7dc
   d8918:	2003e7d8 	.word	0x2003e7d8
   d891c:	2003e7d4 	.word	0x2003e7d4
   d8920:	2003e7d0 	.word	0x2003e7d0

000d8924 <__aeabi_drsub>:
   d8924:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8928:	e002      	b.n	d8930 <__adddf3>
   d892a:	bf00      	nop

000d892c <__aeabi_dsub>:
   d892c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8930 <__adddf3>:
   d8930:	b530      	push	{r4, r5, lr}
   d8932:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8936:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d893a:	ea94 0f05 	teq	r4, r5
   d893e:	bf08      	it	eq
   d8940:	ea90 0f02 	teqeq	r0, r2
   d8944:	bf1f      	itttt	ne
   d8946:	ea54 0c00 	orrsne.w	ip, r4, r0
   d894a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d894e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8952:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8956:	f000 80e2 	beq.w	d8b1e <__adddf3+0x1ee>
   d895a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d895e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8962:	bfb8      	it	lt
   d8964:	426d      	neglt	r5, r5
   d8966:	dd0c      	ble.n	d8982 <__adddf3+0x52>
   d8968:	442c      	add	r4, r5
   d896a:	ea80 0202 	eor.w	r2, r0, r2
   d896e:	ea81 0303 	eor.w	r3, r1, r3
   d8972:	ea82 0000 	eor.w	r0, r2, r0
   d8976:	ea83 0101 	eor.w	r1, r3, r1
   d897a:	ea80 0202 	eor.w	r2, r0, r2
   d897e:	ea81 0303 	eor.w	r3, r1, r3
   d8982:	2d36      	cmp	r5, #54	; 0x36
   d8984:	bf88      	it	hi
   d8986:	bd30      	pophi	{r4, r5, pc}
   d8988:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d898c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8990:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8994:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8998:	d002      	beq.n	d89a0 <__adddf3+0x70>
   d899a:	4240      	negs	r0, r0
   d899c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d89a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d89a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d89a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d89ac:	d002      	beq.n	d89b4 <__adddf3+0x84>
   d89ae:	4252      	negs	r2, r2
   d89b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d89b4:	ea94 0f05 	teq	r4, r5
   d89b8:	f000 80a7 	beq.w	d8b0a <__adddf3+0x1da>
   d89bc:	f1a4 0401 	sub.w	r4, r4, #1
   d89c0:	f1d5 0e20 	rsbs	lr, r5, #32
   d89c4:	db0d      	blt.n	d89e2 <__adddf3+0xb2>
   d89c6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d89ca:	fa22 f205 	lsr.w	r2, r2, r5
   d89ce:	1880      	adds	r0, r0, r2
   d89d0:	f141 0100 	adc.w	r1, r1, #0
   d89d4:	fa03 f20e 	lsl.w	r2, r3, lr
   d89d8:	1880      	adds	r0, r0, r2
   d89da:	fa43 f305 	asr.w	r3, r3, r5
   d89de:	4159      	adcs	r1, r3
   d89e0:	e00e      	b.n	d8a00 <__adddf3+0xd0>
   d89e2:	f1a5 0520 	sub.w	r5, r5, #32
   d89e6:	f10e 0e20 	add.w	lr, lr, #32
   d89ea:	2a01      	cmp	r2, #1
   d89ec:	fa03 fc0e 	lsl.w	ip, r3, lr
   d89f0:	bf28      	it	cs
   d89f2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d89f6:	fa43 f305 	asr.w	r3, r3, r5
   d89fa:	18c0      	adds	r0, r0, r3
   d89fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8a00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a04:	d507      	bpl.n	d8a16 <__adddf3+0xe6>
   d8a06:	f04f 0e00 	mov.w	lr, #0
   d8a0a:	f1dc 0c00 	rsbs	ip, ip, #0
   d8a0e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8a12:	eb6e 0101 	sbc.w	r1, lr, r1
   d8a16:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8a1a:	d31b      	bcc.n	d8a54 <__adddf3+0x124>
   d8a1c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8a20:	d30c      	bcc.n	d8a3c <__adddf3+0x10c>
   d8a22:	0849      	lsrs	r1, r1, #1
   d8a24:	ea5f 0030 	movs.w	r0, r0, rrx
   d8a28:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8a2c:	f104 0401 	add.w	r4, r4, #1
   d8a30:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8a34:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8a38:	f080 809a 	bcs.w	d8b70 <__adddf3+0x240>
   d8a3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8a40:	bf08      	it	eq
   d8a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8a46:	f150 0000 	adcs.w	r0, r0, #0
   d8a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a4e:	ea41 0105 	orr.w	r1, r1, r5
   d8a52:	bd30      	pop	{r4, r5, pc}
   d8a54:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8a58:	4140      	adcs	r0, r0
   d8a5a:	eb41 0101 	adc.w	r1, r1, r1
   d8a5e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a62:	f1a4 0401 	sub.w	r4, r4, #1
   d8a66:	d1e9      	bne.n	d8a3c <__adddf3+0x10c>
   d8a68:	f091 0f00 	teq	r1, #0
   d8a6c:	bf04      	itt	eq
   d8a6e:	4601      	moveq	r1, r0
   d8a70:	2000      	moveq	r0, #0
   d8a72:	fab1 f381 	clz	r3, r1
   d8a76:	bf08      	it	eq
   d8a78:	3320      	addeq	r3, #32
   d8a7a:	f1a3 030b 	sub.w	r3, r3, #11
   d8a7e:	f1b3 0220 	subs.w	r2, r3, #32
   d8a82:	da0c      	bge.n	d8a9e <__adddf3+0x16e>
   d8a84:	320c      	adds	r2, #12
   d8a86:	dd08      	ble.n	d8a9a <__adddf3+0x16a>
   d8a88:	f102 0c14 	add.w	ip, r2, #20
   d8a8c:	f1c2 020c 	rsb	r2, r2, #12
   d8a90:	fa01 f00c 	lsl.w	r0, r1, ip
   d8a94:	fa21 f102 	lsr.w	r1, r1, r2
   d8a98:	e00c      	b.n	d8ab4 <__adddf3+0x184>
   d8a9a:	f102 0214 	add.w	r2, r2, #20
   d8a9e:	bfd8      	it	le
   d8aa0:	f1c2 0c20 	rsble	ip, r2, #32
   d8aa4:	fa01 f102 	lsl.w	r1, r1, r2
   d8aa8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8aac:	bfdc      	itt	le
   d8aae:	ea41 010c 	orrle.w	r1, r1, ip
   d8ab2:	4090      	lslle	r0, r2
   d8ab4:	1ae4      	subs	r4, r4, r3
   d8ab6:	bfa2      	ittt	ge
   d8ab8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8abc:	4329      	orrge	r1, r5
   d8abe:	bd30      	popge	{r4, r5, pc}
   d8ac0:	ea6f 0404 	mvn.w	r4, r4
   d8ac4:	3c1f      	subs	r4, #31
   d8ac6:	da1c      	bge.n	d8b02 <__adddf3+0x1d2>
   d8ac8:	340c      	adds	r4, #12
   d8aca:	dc0e      	bgt.n	d8aea <__adddf3+0x1ba>
   d8acc:	f104 0414 	add.w	r4, r4, #20
   d8ad0:	f1c4 0220 	rsb	r2, r4, #32
   d8ad4:	fa20 f004 	lsr.w	r0, r0, r4
   d8ad8:	fa01 f302 	lsl.w	r3, r1, r2
   d8adc:	ea40 0003 	orr.w	r0, r0, r3
   d8ae0:	fa21 f304 	lsr.w	r3, r1, r4
   d8ae4:	ea45 0103 	orr.w	r1, r5, r3
   d8ae8:	bd30      	pop	{r4, r5, pc}
   d8aea:	f1c4 040c 	rsb	r4, r4, #12
   d8aee:	f1c4 0220 	rsb	r2, r4, #32
   d8af2:	fa20 f002 	lsr.w	r0, r0, r2
   d8af6:	fa01 f304 	lsl.w	r3, r1, r4
   d8afa:	ea40 0003 	orr.w	r0, r0, r3
   d8afe:	4629      	mov	r1, r5
   d8b00:	bd30      	pop	{r4, r5, pc}
   d8b02:	fa21 f004 	lsr.w	r0, r1, r4
   d8b06:	4629      	mov	r1, r5
   d8b08:	bd30      	pop	{r4, r5, pc}
   d8b0a:	f094 0f00 	teq	r4, #0
   d8b0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8b12:	bf06      	itte	eq
   d8b14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8b18:	3401      	addeq	r4, #1
   d8b1a:	3d01      	subne	r5, #1
   d8b1c:	e74e      	b.n	d89bc <__adddf3+0x8c>
   d8b1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8b22:	bf18      	it	ne
   d8b24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8b28:	d029      	beq.n	d8b7e <__adddf3+0x24e>
   d8b2a:	ea94 0f05 	teq	r4, r5
   d8b2e:	bf08      	it	eq
   d8b30:	ea90 0f02 	teqeq	r0, r2
   d8b34:	d005      	beq.n	d8b42 <__adddf3+0x212>
   d8b36:	ea54 0c00 	orrs.w	ip, r4, r0
   d8b3a:	bf04      	itt	eq
   d8b3c:	4619      	moveq	r1, r3
   d8b3e:	4610      	moveq	r0, r2
   d8b40:	bd30      	pop	{r4, r5, pc}
   d8b42:	ea91 0f03 	teq	r1, r3
   d8b46:	bf1e      	ittt	ne
   d8b48:	2100      	movne	r1, #0
   d8b4a:	2000      	movne	r0, #0
   d8b4c:	bd30      	popne	{r4, r5, pc}
   d8b4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8b52:	d105      	bne.n	d8b60 <__adddf3+0x230>
   d8b54:	0040      	lsls	r0, r0, #1
   d8b56:	4149      	adcs	r1, r1
   d8b58:	bf28      	it	cs
   d8b5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8b5e:	bd30      	pop	{r4, r5, pc}
   d8b60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8b64:	bf3c      	itt	cc
   d8b66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8b6a:	bd30      	popcc	{r4, r5, pc}
   d8b6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8b70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8b74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8b78:	f04f 0000 	mov.w	r0, #0
   d8b7c:	bd30      	pop	{r4, r5, pc}
   d8b7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8b82:	bf1a      	itte	ne
   d8b84:	4619      	movne	r1, r3
   d8b86:	4610      	movne	r0, r2
   d8b88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8b8c:	bf1c      	itt	ne
   d8b8e:	460b      	movne	r3, r1
   d8b90:	4602      	movne	r2, r0
   d8b92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8b96:	bf06      	itte	eq
   d8b98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8b9c:	ea91 0f03 	teqeq	r1, r3
   d8ba0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8ba4:	bd30      	pop	{r4, r5, pc}
   d8ba6:	bf00      	nop

000d8ba8 <__aeabi_ui2d>:
   d8ba8:	f090 0f00 	teq	r0, #0
   d8bac:	bf04      	itt	eq
   d8bae:	2100      	moveq	r1, #0
   d8bb0:	4770      	bxeq	lr
   d8bb2:	b530      	push	{r4, r5, lr}
   d8bb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8bb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8bbc:	f04f 0500 	mov.w	r5, #0
   d8bc0:	f04f 0100 	mov.w	r1, #0
   d8bc4:	e750      	b.n	d8a68 <__adddf3+0x138>
   d8bc6:	bf00      	nop

000d8bc8 <__aeabi_i2d>:
   d8bc8:	f090 0f00 	teq	r0, #0
   d8bcc:	bf04      	itt	eq
   d8bce:	2100      	moveq	r1, #0
   d8bd0:	4770      	bxeq	lr
   d8bd2:	b530      	push	{r4, r5, lr}
   d8bd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8bd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8bdc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8be0:	bf48      	it	mi
   d8be2:	4240      	negmi	r0, r0
   d8be4:	f04f 0100 	mov.w	r1, #0
   d8be8:	e73e      	b.n	d8a68 <__adddf3+0x138>
   d8bea:	bf00      	nop

000d8bec <__aeabi_f2d>:
   d8bec:	0042      	lsls	r2, r0, #1
   d8bee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8bf2:	ea4f 0131 	mov.w	r1, r1, rrx
   d8bf6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8bfa:	bf1f      	itttt	ne
   d8bfc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8c00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8c04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8c08:	4770      	bxne	lr
   d8c0a:	f092 0f00 	teq	r2, #0
   d8c0e:	bf14      	ite	ne
   d8c10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8c14:	4770      	bxeq	lr
   d8c16:	b530      	push	{r4, r5, lr}
   d8c18:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8c1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8c20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8c24:	e720      	b.n	d8a68 <__adddf3+0x138>
   d8c26:	bf00      	nop

000d8c28 <__aeabi_ul2d>:
   d8c28:	ea50 0201 	orrs.w	r2, r0, r1
   d8c2c:	bf08      	it	eq
   d8c2e:	4770      	bxeq	lr
   d8c30:	b530      	push	{r4, r5, lr}
   d8c32:	f04f 0500 	mov.w	r5, #0
   d8c36:	e00a      	b.n	d8c4e <__aeabi_l2d+0x16>

000d8c38 <__aeabi_l2d>:
   d8c38:	ea50 0201 	orrs.w	r2, r0, r1
   d8c3c:	bf08      	it	eq
   d8c3e:	4770      	bxeq	lr
   d8c40:	b530      	push	{r4, r5, lr}
   d8c42:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8c46:	d502      	bpl.n	d8c4e <__aeabi_l2d+0x16>
   d8c48:	4240      	negs	r0, r0
   d8c4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8c4e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8c52:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8c56:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8c5a:	f43f aedc 	beq.w	d8a16 <__adddf3+0xe6>
   d8c5e:	f04f 0203 	mov.w	r2, #3
   d8c62:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8c66:	bf18      	it	ne
   d8c68:	3203      	addne	r2, #3
   d8c6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8c6e:	bf18      	it	ne
   d8c70:	3203      	addne	r2, #3
   d8c72:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8c76:	f1c2 0320 	rsb	r3, r2, #32
   d8c7a:	fa00 fc03 	lsl.w	ip, r0, r3
   d8c7e:	fa20 f002 	lsr.w	r0, r0, r2
   d8c82:	fa01 fe03 	lsl.w	lr, r1, r3
   d8c86:	ea40 000e 	orr.w	r0, r0, lr
   d8c8a:	fa21 f102 	lsr.w	r1, r1, r2
   d8c8e:	4414      	add	r4, r2
   d8c90:	e6c1      	b.n	d8a16 <__adddf3+0xe6>
   d8c92:	bf00      	nop

000d8c94 <__aeabi_dmul>:
   d8c94:	b570      	push	{r4, r5, r6, lr}
   d8c96:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8c9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8c9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8ca2:	bf1d      	ittte	ne
   d8ca4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8ca8:	ea94 0f0c 	teqne	r4, ip
   d8cac:	ea95 0f0c 	teqne	r5, ip
   d8cb0:	f000 f8de 	bleq	d8e70 <__aeabi_dmul+0x1dc>
   d8cb4:	442c      	add	r4, r5
   d8cb6:	ea81 0603 	eor.w	r6, r1, r3
   d8cba:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8cbe:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8cc2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8cc6:	bf18      	it	ne
   d8cc8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8ccc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8cd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8cd4:	d038      	beq.n	d8d48 <__aeabi_dmul+0xb4>
   d8cd6:	fba0 ce02 	umull	ip, lr, r0, r2
   d8cda:	f04f 0500 	mov.w	r5, #0
   d8cde:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8ce2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8ce6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8cea:	f04f 0600 	mov.w	r6, #0
   d8cee:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8cf2:	f09c 0f00 	teq	ip, #0
   d8cf6:	bf18      	it	ne
   d8cf8:	f04e 0e01 	orrne.w	lr, lr, #1
   d8cfc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8d00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8d04:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8d08:	d204      	bcs.n	d8d14 <__aeabi_dmul+0x80>
   d8d0a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8d0e:	416d      	adcs	r5, r5
   d8d10:	eb46 0606 	adc.w	r6, r6, r6
   d8d14:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8d18:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8d1c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8d20:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8d24:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8d28:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8d2c:	bf88      	it	hi
   d8d2e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8d32:	d81e      	bhi.n	d8d72 <__aeabi_dmul+0xde>
   d8d34:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8d38:	bf08      	it	eq
   d8d3a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8d3e:	f150 0000 	adcs.w	r0, r0, #0
   d8d42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8d46:	bd70      	pop	{r4, r5, r6, pc}
   d8d48:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8d4c:	ea46 0101 	orr.w	r1, r6, r1
   d8d50:	ea40 0002 	orr.w	r0, r0, r2
   d8d54:	ea81 0103 	eor.w	r1, r1, r3
   d8d58:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8d5c:	bfc2      	ittt	gt
   d8d5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8d62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8d66:	bd70      	popgt	{r4, r5, r6, pc}
   d8d68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d6c:	f04f 0e00 	mov.w	lr, #0
   d8d70:	3c01      	subs	r4, #1
   d8d72:	f300 80ab 	bgt.w	d8ecc <__aeabi_dmul+0x238>
   d8d76:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8d7a:	bfde      	ittt	le
   d8d7c:	2000      	movle	r0, #0
   d8d7e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8d82:	bd70      	pople	{r4, r5, r6, pc}
   d8d84:	f1c4 0400 	rsb	r4, r4, #0
   d8d88:	3c20      	subs	r4, #32
   d8d8a:	da35      	bge.n	d8df8 <__aeabi_dmul+0x164>
   d8d8c:	340c      	adds	r4, #12
   d8d8e:	dc1b      	bgt.n	d8dc8 <__aeabi_dmul+0x134>
   d8d90:	f104 0414 	add.w	r4, r4, #20
   d8d94:	f1c4 0520 	rsb	r5, r4, #32
   d8d98:	fa00 f305 	lsl.w	r3, r0, r5
   d8d9c:	fa20 f004 	lsr.w	r0, r0, r4
   d8da0:	fa01 f205 	lsl.w	r2, r1, r5
   d8da4:	ea40 0002 	orr.w	r0, r0, r2
   d8da8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8dac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8db0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8db4:	fa21 f604 	lsr.w	r6, r1, r4
   d8db8:	eb42 0106 	adc.w	r1, r2, r6
   d8dbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8dc0:	bf08      	it	eq
   d8dc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8dc6:	bd70      	pop	{r4, r5, r6, pc}
   d8dc8:	f1c4 040c 	rsb	r4, r4, #12
   d8dcc:	f1c4 0520 	rsb	r5, r4, #32
   d8dd0:	fa00 f304 	lsl.w	r3, r0, r4
   d8dd4:	fa20 f005 	lsr.w	r0, r0, r5
   d8dd8:	fa01 f204 	lsl.w	r2, r1, r4
   d8ddc:	ea40 0002 	orr.w	r0, r0, r2
   d8de0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8de4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8de8:	f141 0100 	adc.w	r1, r1, #0
   d8dec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8df0:	bf08      	it	eq
   d8df2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8df6:	bd70      	pop	{r4, r5, r6, pc}
   d8df8:	f1c4 0520 	rsb	r5, r4, #32
   d8dfc:	fa00 f205 	lsl.w	r2, r0, r5
   d8e00:	ea4e 0e02 	orr.w	lr, lr, r2
   d8e04:	fa20 f304 	lsr.w	r3, r0, r4
   d8e08:	fa01 f205 	lsl.w	r2, r1, r5
   d8e0c:	ea43 0302 	orr.w	r3, r3, r2
   d8e10:	fa21 f004 	lsr.w	r0, r1, r4
   d8e14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e18:	fa21 f204 	lsr.w	r2, r1, r4
   d8e1c:	ea20 0002 	bic.w	r0, r0, r2
   d8e20:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8e24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8e28:	bf08      	it	eq
   d8e2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8e2e:	bd70      	pop	{r4, r5, r6, pc}
   d8e30:	f094 0f00 	teq	r4, #0
   d8e34:	d10f      	bne.n	d8e56 <__aeabi_dmul+0x1c2>
   d8e36:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8e3a:	0040      	lsls	r0, r0, #1
   d8e3c:	eb41 0101 	adc.w	r1, r1, r1
   d8e40:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e44:	bf08      	it	eq
   d8e46:	3c01      	subeq	r4, #1
   d8e48:	d0f7      	beq.n	d8e3a <__aeabi_dmul+0x1a6>
   d8e4a:	ea41 0106 	orr.w	r1, r1, r6
   d8e4e:	f095 0f00 	teq	r5, #0
   d8e52:	bf18      	it	ne
   d8e54:	4770      	bxne	lr
   d8e56:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8e5a:	0052      	lsls	r2, r2, #1
   d8e5c:	eb43 0303 	adc.w	r3, r3, r3
   d8e60:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8e64:	bf08      	it	eq
   d8e66:	3d01      	subeq	r5, #1
   d8e68:	d0f7      	beq.n	d8e5a <__aeabi_dmul+0x1c6>
   d8e6a:	ea43 0306 	orr.w	r3, r3, r6
   d8e6e:	4770      	bx	lr
   d8e70:	ea94 0f0c 	teq	r4, ip
   d8e74:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8e78:	bf18      	it	ne
   d8e7a:	ea95 0f0c 	teqne	r5, ip
   d8e7e:	d00c      	beq.n	d8e9a <__aeabi_dmul+0x206>
   d8e80:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e84:	bf18      	it	ne
   d8e86:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e8a:	d1d1      	bne.n	d8e30 <__aeabi_dmul+0x19c>
   d8e8c:	ea81 0103 	eor.w	r1, r1, r3
   d8e90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e94:	f04f 0000 	mov.w	r0, #0
   d8e98:	bd70      	pop	{r4, r5, r6, pc}
   d8e9a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e9e:	bf06      	itte	eq
   d8ea0:	4610      	moveq	r0, r2
   d8ea2:	4619      	moveq	r1, r3
   d8ea4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8ea8:	d019      	beq.n	d8ede <__aeabi_dmul+0x24a>
   d8eaa:	ea94 0f0c 	teq	r4, ip
   d8eae:	d102      	bne.n	d8eb6 <__aeabi_dmul+0x222>
   d8eb0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8eb4:	d113      	bne.n	d8ede <__aeabi_dmul+0x24a>
   d8eb6:	ea95 0f0c 	teq	r5, ip
   d8eba:	d105      	bne.n	d8ec8 <__aeabi_dmul+0x234>
   d8ebc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8ec0:	bf1c      	itt	ne
   d8ec2:	4610      	movne	r0, r2
   d8ec4:	4619      	movne	r1, r3
   d8ec6:	d10a      	bne.n	d8ede <__aeabi_dmul+0x24a>
   d8ec8:	ea81 0103 	eor.w	r1, r1, r3
   d8ecc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ed0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8ed4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ed8:	f04f 0000 	mov.w	r0, #0
   d8edc:	bd70      	pop	{r4, r5, r6, pc}
   d8ede:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8ee2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8ee6:	bd70      	pop	{r4, r5, r6, pc}

000d8ee8 <__aeabi_ddiv>:
   d8ee8:	b570      	push	{r4, r5, r6, lr}
   d8eea:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8eee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8ef2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8ef6:	bf1d      	ittte	ne
   d8ef8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8efc:	ea94 0f0c 	teqne	r4, ip
   d8f00:	ea95 0f0c 	teqne	r5, ip
   d8f04:	f000 f8a7 	bleq	d9056 <__aeabi_ddiv+0x16e>
   d8f08:	eba4 0405 	sub.w	r4, r4, r5
   d8f0c:	ea81 0e03 	eor.w	lr, r1, r3
   d8f10:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8f14:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8f18:	f000 8088 	beq.w	d902c <__aeabi_ddiv+0x144>
   d8f1c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8f20:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8f24:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8f28:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8f2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8f30:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8f34:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8f38:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8f3c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8f40:	429d      	cmp	r5, r3
   d8f42:	bf08      	it	eq
   d8f44:	4296      	cmpeq	r6, r2
   d8f46:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8f4a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8f4e:	d202      	bcs.n	d8f56 <__aeabi_ddiv+0x6e>
   d8f50:	085b      	lsrs	r3, r3, #1
   d8f52:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f56:	1ab6      	subs	r6, r6, r2
   d8f58:	eb65 0503 	sbc.w	r5, r5, r3
   d8f5c:	085b      	lsrs	r3, r3, #1
   d8f5e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f62:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8f66:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8f6a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f6e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f72:	bf22      	ittt	cs
   d8f74:	1ab6      	subcs	r6, r6, r2
   d8f76:	4675      	movcs	r5, lr
   d8f78:	ea40 000c 	orrcs.w	r0, r0, ip
   d8f7c:	085b      	lsrs	r3, r3, #1
   d8f7e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f82:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f86:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f8a:	bf22      	ittt	cs
   d8f8c:	1ab6      	subcs	r6, r6, r2
   d8f8e:	4675      	movcs	r5, lr
   d8f90:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8f94:	085b      	lsrs	r3, r3, #1
   d8f96:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f9a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f9e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8fa2:	bf22      	ittt	cs
   d8fa4:	1ab6      	subcs	r6, r6, r2
   d8fa6:	4675      	movcs	r5, lr
   d8fa8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8fac:	085b      	lsrs	r3, r3, #1
   d8fae:	ea4f 0232 	mov.w	r2, r2, rrx
   d8fb2:	ebb6 0e02 	subs.w	lr, r6, r2
   d8fb6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8fba:	bf22      	ittt	cs
   d8fbc:	1ab6      	subcs	r6, r6, r2
   d8fbe:	4675      	movcs	r5, lr
   d8fc0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8fc4:	ea55 0e06 	orrs.w	lr, r5, r6
   d8fc8:	d018      	beq.n	d8ffc <__aeabi_ddiv+0x114>
   d8fca:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8fce:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8fd2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8fd6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8fda:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8fde:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8fe2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8fe6:	d1c0      	bne.n	d8f6a <__aeabi_ddiv+0x82>
   d8fe8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8fec:	d10b      	bne.n	d9006 <__aeabi_ddiv+0x11e>
   d8fee:	ea41 0100 	orr.w	r1, r1, r0
   d8ff2:	f04f 0000 	mov.w	r0, #0
   d8ff6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8ffa:	e7b6      	b.n	d8f6a <__aeabi_ddiv+0x82>
   d8ffc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9000:	bf04      	itt	eq
   d9002:	4301      	orreq	r1, r0
   d9004:	2000      	moveq	r0, #0
   d9006:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d900a:	bf88      	it	hi
   d900c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9010:	f63f aeaf 	bhi.w	d8d72 <__aeabi_dmul+0xde>
   d9014:	ebb5 0c03 	subs.w	ip, r5, r3
   d9018:	bf04      	itt	eq
   d901a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d901e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9022:	f150 0000 	adcs.w	r0, r0, #0
   d9026:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d902a:	bd70      	pop	{r4, r5, r6, pc}
   d902c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9030:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9034:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9038:	bfc2      	ittt	gt
   d903a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d903e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9042:	bd70      	popgt	{r4, r5, r6, pc}
   d9044:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9048:	f04f 0e00 	mov.w	lr, #0
   d904c:	3c01      	subs	r4, #1
   d904e:	e690      	b.n	d8d72 <__aeabi_dmul+0xde>
   d9050:	ea45 0e06 	orr.w	lr, r5, r6
   d9054:	e68d      	b.n	d8d72 <__aeabi_dmul+0xde>
   d9056:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d905a:	ea94 0f0c 	teq	r4, ip
   d905e:	bf08      	it	eq
   d9060:	ea95 0f0c 	teqeq	r5, ip
   d9064:	f43f af3b 	beq.w	d8ede <__aeabi_dmul+0x24a>
   d9068:	ea94 0f0c 	teq	r4, ip
   d906c:	d10a      	bne.n	d9084 <__aeabi_ddiv+0x19c>
   d906e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9072:	f47f af34 	bne.w	d8ede <__aeabi_dmul+0x24a>
   d9076:	ea95 0f0c 	teq	r5, ip
   d907a:	f47f af25 	bne.w	d8ec8 <__aeabi_dmul+0x234>
   d907e:	4610      	mov	r0, r2
   d9080:	4619      	mov	r1, r3
   d9082:	e72c      	b.n	d8ede <__aeabi_dmul+0x24a>
   d9084:	ea95 0f0c 	teq	r5, ip
   d9088:	d106      	bne.n	d9098 <__aeabi_ddiv+0x1b0>
   d908a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d908e:	f43f aefd 	beq.w	d8e8c <__aeabi_dmul+0x1f8>
   d9092:	4610      	mov	r0, r2
   d9094:	4619      	mov	r1, r3
   d9096:	e722      	b.n	d8ede <__aeabi_dmul+0x24a>
   d9098:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d909c:	bf18      	it	ne
   d909e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d90a2:	f47f aec5 	bne.w	d8e30 <__aeabi_dmul+0x19c>
   d90a6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d90aa:	f47f af0d 	bne.w	d8ec8 <__aeabi_dmul+0x234>
   d90ae:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d90b2:	f47f aeeb 	bne.w	d8e8c <__aeabi_dmul+0x1f8>
   d90b6:	e712      	b.n	d8ede <__aeabi_dmul+0x24a>

000d90b8 <__aeabi_d2iz>:
   d90b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d90bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d90c0:	d215      	bcs.n	d90ee <__aeabi_d2iz+0x36>
   d90c2:	d511      	bpl.n	d90e8 <__aeabi_d2iz+0x30>
   d90c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d90c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d90cc:	d912      	bls.n	d90f4 <__aeabi_d2iz+0x3c>
   d90ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d90d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d90d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d90da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d90de:	fa23 f002 	lsr.w	r0, r3, r2
   d90e2:	bf18      	it	ne
   d90e4:	4240      	negne	r0, r0
   d90e6:	4770      	bx	lr
   d90e8:	f04f 0000 	mov.w	r0, #0
   d90ec:	4770      	bx	lr
   d90ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d90f2:	d105      	bne.n	d9100 <__aeabi_d2iz+0x48>
   d90f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d90f8:	bf08      	it	eq
   d90fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d90fe:	4770      	bx	lr
   d9100:	f04f 0000 	mov.w	r0, #0
   d9104:	4770      	bx	lr
   d9106:	bf00      	nop

000d9108 <__aeabi_d2f>:
   d9108:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d910c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9110:	bf24      	itt	cs
   d9112:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9116:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d911a:	d90d      	bls.n	d9138 <__aeabi_d2f+0x30>
   d911c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9120:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9124:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9128:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d912c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9130:	bf08      	it	eq
   d9132:	f020 0001 	biceq.w	r0, r0, #1
   d9136:	4770      	bx	lr
   d9138:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d913c:	d121      	bne.n	d9182 <__aeabi_d2f+0x7a>
   d913e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9142:	bfbc      	itt	lt
   d9144:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9148:	4770      	bxlt	lr
   d914a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d914e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9152:	f1c2 0218 	rsb	r2, r2, #24
   d9156:	f1c2 0c20 	rsb	ip, r2, #32
   d915a:	fa10 f30c 	lsls.w	r3, r0, ip
   d915e:	fa20 f002 	lsr.w	r0, r0, r2
   d9162:	bf18      	it	ne
   d9164:	f040 0001 	orrne.w	r0, r0, #1
   d9168:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d916c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9170:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9174:	ea40 000c 	orr.w	r0, r0, ip
   d9178:	fa23 f302 	lsr.w	r3, r3, r2
   d917c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9180:	e7cc      	b.n	d911c <__aeabi_d2f+0x14>
   d9182:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9186:	d107      	bne.n	d9198 <__aeabi_d2f+0x90>
   d9188:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d918c:	bf1e      	ittt	ne
   d918e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9192:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9196:	4770      	bxne	lr
   d9198:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d919c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d91a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d91a4:	4770      	bx	lr
   d91a6:	bf00      	nop

000d91a8 <atoi>:
   d91a8:	220a      	movs	r2, #10
   d91aa:	2100      	movs	r1, #0
   d91ac:	f000 b912 	b.w	d93d4 <strtol>

000d91b0 <__cxa_atexit>:
   d91b0:	b510      	push	{r4, lr}
   d91b2:	4c05      	ldr	r4, [pc, #20]	; (d91c8 <__cxa_atexit+0x18>)
   d91b4:	4613      	mov	r3, r2
   d91b6:	b12c      	cbz	r4, d91c4 <__cxa_atexit+0x14>
   d91b8:	460a      	mov	r2, r1
   d91ba:	4601      	mov	r1, r0
   d91bc:	2002      	movs	r0, #2
   d91be:	f3af 8000 	nop.w
   d91c2:	bd10      	pop	{r4, pc}
   d91c4:	4620      	mov	r0, r4
   d91c6:	bd10      	pop	{r4, pc}
   d91c8:	00000000 	.word	0x00000000

000d91cc <memcmp>:
   d91cc:	b510      	push	{r4, lr}
   d91ce:	3901      	subs	r1, #1
   d91d0:	4402      	add	r2, r0
   d91d2:	4290      	cmp	r0, r2
   d91d4:	d007      	beq.n	d91e6 <memcmp+0x1a>
   d91d6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d91da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d91de:	42a3      	cmp	r3, r4
   d91e0:	d0f7      	beq.n	d91d2 <memcmp+0x6>
   d91e2:	1b18      	subs	r0, r3, r4
   d91e4:	bd10      	pop	{r4, pc}
   d91e6:	2000      	movs	r0, #0
   d91e8:	bd10      	pop	{r4, pc}

000d91ea <memcpy>:
   d91ea:	b510      	push	{r4, lr}
   d91ec:	1e43      	subs	r3, r0, #1
   d91ee:	440a      	add	r2, r1
   d91f0:	4291      	cmp	r1, r2
   d91f2:	d004      	beq.n	d91fe <memcpy+0x14>
   d91f4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d91f8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d91fc:	e7f8      	b.n	d91f0 <memcpy+0x6>
   d91fe:	bd10      	pop	{r4, pc}

000d9200 <memset>:
   d9200:	4402      	add	r2, r0
   d9202:	4603      	mov	r3, r0
   d9204:	4293      	cmp	r3, r2
   d9206:	d002      	beq.n	d920e <memset+0xe>
   d9208:	f803 1b01 	strb.w	r1, [r3], #1
   d920c:	e7fa      	b.n	d9204 <memset+0x4>
   d920e:	4770      	bx	lr

000d9210 <srand>:
   d9210:	b538      	push	{r3, r4, r5, lr}
   d9212:	4b12      	ldr	r3, [pc, #72]	; (d925c <srand+0x4c>)
   d9214:	681c      	ldr	r4, [r3, #0]
   d9216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9218:	4605      	mov	r5, r0
   d921a:	b9d3      	cbnz	r3, d9252 <srand+0x42>
   d921c:	2018      	movs	r0, #24
   d921e:	f7fd ffe9 	bl	d71f4 <malloc>
   d9222:	f243 330e 	movw	r3, #13070	; 0x330e
   d9226:	63a0      	str	r0, [r4, #56]	; 0x38
   d9228:	8003      	strh	r3, [r0, #0]
   d922a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d922e:	8043      	strh	r3, [r0, #2]
   d9230:	f241 2334 	movw	r3, #4660	; 0x1234
   d9234:	8083      	strh	r3, [r0, #4]
   d9236:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d923a:	80c3      	strh	r3, [r0, #6]
   d923c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9240:	8103      	strh	r3, [r0, #8]
   d9242:	2305      	movs	r3, #5
   d9244:	8143      	strh	r3, [r0, #10]
   d9246:	230b      	movs	r3, #11
   d9248:	8183      	strh	r3, [r0, #12]
   d924a:	2201      	movs	r2, #1
   d924c:	2300      	movs	r3, #0
   d924e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9252:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9254:	2200      	movs	r2, #0
   d9256:	611d      	str	r5, [r3, #16]
   d9258:	615a      	str	r2, [r3, #20]
   d925a:	bd38      	pop	{r3, r4, r5, pc}
   d925c:	2003d250 	.word	0x2003d250

000d9260 <strcmp>:
   d9260:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9264:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9268:	2a01      	cmp	r2, #1
   d926a:	bf28      	it	cs
   d926c:	429a      	cmpcs	r2, r3
   d926e:	d0f7      	beq.n	d9260 <strcmp>
   d9270:	1ad0      	subs	r0, r2, r3
   d9272:	4770      	bx	lr

000d9274 <strcpy>:
   d9274:	4603      	mov	r3, r0
   d9276:	f811 2b01 	ldrb.w	r2, [r1], #1
   d927a:	f803 2b01 	strb.w	r2, [r3], #1
   d927e:	2a00      	cmp	r2, #0
   d9280:	d1f9      	bne.n	d9276 <strcpy+0x2>
   d9282:	4770      	bx	lr

000d9284 <strlen>:
   d9284:	4603      	mov	r3, r0
   d9286:	f813 2b01 	ldrb.w	r2, [r3], #1
   d928a:	2a00      	cmp	r2, #0
   d928c:	d1fb      	bne.n	d9286 <strlen+0x2>
   d928e:	1a18      	subs	r0, r3, r0
   d9290:	3801      	subs	r0, #1
   d9292:	4770      	bx	lr

000d9294 <strstr>:
   d9294:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9296:	7803      	ldrb	r3, [r0, #0]
   d9298:	b963      	cbnz	r3, d92b4 <strstr+0x20>
   d929a:	780b      	ldrb	r3, [r1, #0]
   d929c:	2b00      	cmp	r3, #0
   d929e:	bf18      	it	ne
   d92a0:	2000      	movne	r0, #0
   d92a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d92a4:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d92a8:	b162      	cbz	r2, d92c4 <strstr+0x30>
   d92aa:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d92ae:	4297      	cmp	r7, r2
   d92b0:	4630      	mov	r0, r6
   d92b2:	d0f7      	beq.n	d92a4 <strstr+0x10>
   d92b4:	4603      	mov	r3, r0
   d92b6:	1c46      	adds	r6, r0, #1
   d92b8:	7800      	ldrb	r0, [r0, #0]
   d92ba:	b110      	cbz	r0, d92c2 <strstr+0x2e>
   d92bc:	1e4d      	subs	r5, r1, #1
   d92be:	1e5c      	subs	r4, r3, #1
   d92c0:	e7f0      	b.n	d92a4 <strstr+0x10>
   d92c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d92c4:	4618      	mov	r0, r3
   d92c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d92c8 <_strtol_r>:
   d92c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d92cc:	4680      	mov	r8, r0
   d92ce:	4840      	ldr	r0, [pc, #256]	; (d93d0 <_strtol_r+0x108>)
   d92d0:	f8d0 9000 	ldr.w	r9, [r0]
   d92d4:	460f      	mov	r7, r1
   d92d6:	463d      	mov	r5, r7
   d92d8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d92dc:	eb09 0004 	add.w	r0, r9, r4
   d92e0:	7840      	ldrb	r0, [r0, #1]
   d92e2:	f000 0008 	and.w	r0, r0, #8
   d92e6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d92ea:	b108      	cbz	r0, d92f0 <_strtol_r+0x28>
   d92ec:	462f      	mov	r7, r5
   d92ee:	e7f2      	b.n	d92d6 <_strtol_r+0xe>
   d92f0:	2c2d      	cmp	r4, #45	; 0x2d
   d92f2:	d103      	bne.n	d92fc <_strtol_r+0x34>
   d92f4:	1cbd      	adds	r5, r7, #2
   d92f6:	787c      	ldrb	r4, [r7, #1]
   d92f8:	2601      	movs	r6, #1
   d92fa:	e003      	b.n	d9304 <_strtol_r+0x3c>
   d92fc:	2c2b      	cmp	r4, #43	; 0x2b
   d92fe:	bf04      	itt	eq
   d9300:	787c      	ldrbeq	r4, [r7, #1]
   d9302:	1cbd      	addeq	r5, r7, #2
   d9304:	b113      	cbz	r3, d930c <_strtol_r+0x44>
   d9306:	2b10      	cmp	r3, #16
   d9308:	d10a      	bne.n	d9320 <_strtol_r+0x58>
   d930a:	e05b      	b.n	d93c4 <_strtol_r+0xfc>
   d930c:	2c30      	cmp	r4, #48	; 0x30
   d930e:	d157      	bne.n	d93c0 <_strtol_r+0xf8>
   d9310:	7828      	ldrb	r0, [r5, #0]
   d9312:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9316:	2858      	cmp	r0, #88	; 0x58
   d9318:	d14d      	bne.n	d93b6 <_strtol_r+0xee>
   d931a:	786c      	ldrb	r4, [r5, #1]
   d931c:	2310      	movs	r3, #16
   d931e:	3502      	adds	r5, #2
   d9320:	2e00      	cmp	r6, #0
   d9322:	bf14      	ite	ne
   d9324:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9328:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d932c:	2700      	movs	r7, #0
   d932e:	fbbc faf3 	udiv	sl, ip, r3
   d9332:	4638      	mov	r0, r7
   d9334:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9338:	eb09 0e04 	add.w	lr, r9, r4
   d933c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9340:	f01e 0f04 	tst.w	lr, #4
   d9344:	d001      	beq.n	d934a <_strtol_r+0x82>
   d9346:	3c30      	subs	r4, #48	; 0x30
   d9348:	e00b      	b.n	d9362 <_strtol_r+0x9a>
   d934a:	f01e 0e03 	ands.w	lr, lr, #3
   d934e:	d01b      	beq.n	d9388 <_strtol_r+0xc0>
   d9350:	f1be 0f01 	cmp.w	lr, #1
   d9354:	bf0c      	ite	eq
   d9356:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d935a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d935e:	ebce 0404 	rsb	r4, lr, r4
   d9362:	42a3      	cmp	r3, r4
   d9364:	dd10      	ble.n	d9388 <_strtol_r+0xc0>
   d9366:	f1b7 3fff 	cmp.w	r7, #4294967295
   d936a:	d00a      	beq.n	d9382 <_strtol_r+0xba>
   d936c:	4550      	cmp	r0, sl
   d936e:	d806      	bhi.n	d937e <_strtol_r+0xb6>
   d9370:	d101      	bne.n	d9376 <_strtol_r+0xae>
   d9372:	4564      	cmp	r4, ip
   d9374:	dc03      	bgt.n	d937e <_strtol_r+0xb6>
   d9376:	fb03 4000 	mla	r0, r3, r0, r4
   d937a:	2701      	movs	r7, #1
   d937c:	e001      	b.n	d9382 <_strtol_r+0xba>
   d937e:	f04f 37ff 	mov.w	r7, #4294967295
   d9382:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9386:	e7d7      	b.n	d9338 <_strtol_r+0x70>
   d9388:	1c7b      	adds	r3, r7, #1
   d938a:	d10c      	bne.n	d93a6 <_strtol_r+0xde>
   d938c:	2e00      	cmp	r6, #0
   d938e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d9392:	bf14      	ite	ne
   d9394:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9398:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d939c:	f8c8 3000 	str.w	r3, [r8]
   d93a0:	b92a      	cbnz	r2, d93ae <_strtol_r+0xe6>
   d93a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d93a6:	b106      	cbz	r6, d93aa <_strtol_r+0xe2>
   d93a8:	4240      	negs	r0, r0
   d93aa:	b172      	cbz	r2, d93ca <_strtol_r+0x102>
   d93ac:	b107      	cbz	r7, d93b0 <_strtol_r+0xe8>
   d93ae:	1e69      	subs	r1, r5, #1
   d93b0:	6011      	str	r1, [r2, #0]
   d93b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d93b6:	2430      	movs	r4, #48	; 0x30
   d93b8:	2b00      	cmp	r3, #0
   d93ba:	d1b1      	bne.n	d9320 <_strtol_r+0x58>
   d93bc:	2308      	movs	r3, #8
   d93be:	e7af      	b.n	d9320 <_strtol_r+0x58>
   d93c0:	230a      	movs	r3, #10
   d93c2:	e7ad      	b.n	d9320 <_strtol_r+0x58>
   d93c4:	2c30      	cmp	r4, #48	; 0x30
   d93c6:	d0a3      	beq.n	d9310 <_strtol_r+0x48>
   d93c8:	e7aa      	b.n	d9320 <_strtol_r+0x58>
   d93ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d93ce:	bf00      	nop
   d93d0:	2003d1ec 	.word	0x2003d1ec

000d93d4 <strtol>:
   d93d4:	4613      	mov	r3, r2
   d93d6:	460a      	mov	r2, r1
   d93d8:	4601      	mov	r1, r0
   d93da:	4802      	ldr	r0, [pc, #8]	; (d93e4 <strtol+0x10>)
   d93dc:	6800      	ldr	r0, [r0, #0]
   d93de:	f7ff bf73 	b.w	d92c8 <_strtol_r>
   d93e2:	bf00      	nop
   d93e4:	2003d250 	.word	0x2003d250

000d93e8 <dynalib_user>:
   d93e8:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d93f8:	00000000                                ....

000d93fc <_ZTVN8particle13__SPISettingsE>:
	...
   d9404:	000d40e1                                .@..

000d9408 <_ZTV6SdFile>:
	...
   d9410:	000d40b3 000d40d3 000d40bb 000d40b5     .@...@...@...@..
   d9420:	61666564 20746c75 42534d00 42534c00     default .MSB.LSB
   d9430:	50533c00 74655349 676e6974 65642073     .<SPISettings de
   d9440:	6c756166 3c003e74 53495053 69747465     fault>.<SPISetti
   d9450:	2073676e 6c257325 73252075 444f4d20     ngs %s%lu %s MOD
   d9460:	3e642545 6c656800 68006f6c 6f6c6c65     E%d>.hello.hello
   d9470:	00323232 656d6954 6d702c00 735f3031     222.Time.,pm10_s
   d9480:	646e6174 00647261 326d702c 74735f35     tandard.,pm25_st
   d9490:	61646e61 2c006472 30316d70 74735f30     andard.,pm100_st
   d94a0:	61646e61 2c006472 30316d70 766e655f     andard.,pm10_env
   d94b0:	6d702c00 655f3532 2c00766e 30316d70     .,pm25_env.,pm10
   d94c0:	6e655f30 502c0076 006d7533 7535502c     0_env.,P3um.,P5u
   d94d0:	502c006d 6d753031 32502c00 006d7535     m.,P10um.,P25um.
   d94e0:	3035502c 2c006d75 30303150 2c006d75     ,P50um.,P100um.,
   d94f0:	63656863 6d75736b 68532c00 65796e69     checksum.,Shinye
   d9500:	542c0069 65706d65 75746172 2c006572     i.,Temperature.,
   d9510:	696d7548 79746964 6e6f4300 7463656e     Humidity.Connect
   d9520:	2e676e69 2f002e2e 61646e69 31306174     ing..../indata01
   d9530:	7068702e 6573753f 6d616e72 73253d65     .php?username=%s
   d9540:	73617026 726f7773 73253d64 6e626426     &password=%s&dbn
   d9550:	3d656d61 74267325 656c6261 656d616e     ame=%s&tablename
   d9560:	2673253d 30316d70 6474735f 2664253d     =%s&pm10_std=%d&
   d9570:	35326d70 6474735f 2664253d 30316d70     pm25_std=%d&pm10
   d9580:	74735f30 64253d64 316d7026 6e655f30     0_std=%d&pm10_en
   d9590:	64253d76 326d7026 6e655f35 64253d76     v=%d&pm25_env=%d
   d95a0:	316d7026 655f3030 253d766e 33702664     &pm100_env=%d&p3
   d95b0:	2664253d 253d3570 31702664 64253d30     =%d&p5=%d&p10=%d
   d95c0:	35327026 2664253d 3d303570 70266425     &p25=%d&p50=%d&p
   d95d0:	3d303031 63266425 6b636568 3d6d7573     100=%d&checksum=
   d95e0:	54266425 65706d65 75746172 253d6572     %d&Temperature=%
   d95f0:	75482666 6964696d 253d7974 227b0066     f&Humidity=%f.{"
   d9600:	656d6974 22203a22 22646c25 7022202c     time": "%ld", "p
   d9610:	2230316d 6425223a 22202c22 35326d70     m10":"%d", "pm25
   d9620:	25223a22 202c2264 316d7022 3a223030     ":"%d", "pm100":
   d9630:	22642522 7022202c 2233306e 6425223a     "%d", "pn03":"%d
   d9640:	22202c22 35306e70 25223a22 202c2264     ", "pn05":"%d", 
   d9650:	316e7022 223a2230 2c226425 6e702220     "pn10":"%d", "pn
   d9660:	3a223532 22642522 7022202c 2230356e     25":"%d", "pn50"
   d9670:	6425223a 22202c22 30316e70 223a2230     :"%d", "pn100":"
   d9680:	2c226425 68532220 65796e69 223a2269     %d", "Shinyei":"
   d9690:	2c226625 65742220 3a22706d 22662522     %f", "temp":"%f"
   d96a0:	6822202c 64696d75 22797469 6625223a     , "humidity":"%f
   d96b0:	47007d22 53005445 69646e65 4420676e     "}.GET.Sending D
   d96c0:	00617461 65636341 2a007470 20002a2f     ata.Accept.*/*. 
   d96d0:	50545448 302e312f 63000a0d 65736f6c     HTTP/1.0...close
   d96e0:	6e6f4300 7463656e 006e6f69 54534f48     .Connection.HOST
   d96f0:	6e6f4300 746e6574 6e654c2d 00687467     .Content-Length.
   d9700:	54534f50 0d0a0d00 1c1f000a                       POST......

000d970a <_ZL11daysInMonth>:
   d970a:	1e1f1c1f 1f1f1e1f 1f1e1f1e 00000000              ..............

000d9718 <_ZTVN5spark13EthernetClassE>:
	...
   d9720:	000d72b3 000d72a9 000d729f 000d7295     .r...r...r...r..
   d9730:	000d7289 000d727d 000d7271 000d7269     .r..}r..qr..ir..
   d9740:	000d725f 000d7255 000d8485              _r..Ur......

000d974c <_ZTV8SPIClass>:
	...
   d9754:	000d72d1 000d72d3                       .r...r..

000d975c <_ZL14clock_divisors>:
   d975c:	18100800 38302820 66006e6c 6f63006e     .... (08ln.fn.co
   d976c:	64006564 69617465 3025006c 20753031     de.detail.%010u 
   d977c:	00205d00 2800202c 00203a29 63005b20     .] ., .(): . [.c
   d978c:	2065646f 2500203d 65640069 6c696174     ode = .%i.detail
   d979c:	203d2073 75616200 65530064 6c616972     s = .baud.Serial
   d97ac:	72655300 316c6169 70797400 61700065     .Serial1.type.pa
   d97bc:	006d6172 00646d63 68006469 7300646e     ram.cmd.id.hnd.s
   d97cc:	006d7274 746c6966 6c766c00 64646100     trm.filt.lvl.add
   d97dc:	646e6148 0072656c 6f6d6572 61486576     Handler.removeHa
   d97ec:	656c646e 6e650072 61486d75 656c646e     ndler.enumHandle
   d97fc:	4a007372 534e4f53 61657274 676f4c6d     rs.JSONStreamLog
   d980c:	646e6148 0072656c 00707061 656e6f6e     Handler.app.none
   d981c:	61727400 69006563 006f666e 6e726177     .trace.info.warn
   d982c:	72726500 7000726f 63696e61 6c6c6100     .error.panic.all
   d983c:	25005a00 6433302b 3230253a 59250075     .Z.%+03d:%02u.%Y
   d984c:	2d6d252d 25546425 4d253a48 2553253a     -%m-%dT%H:%M:%S%
   d985c:	7361007a 6d697463 00000065              z.asctime...

000d9868 <_ZTV9IPAddress>:
	...
   d9870:	000d7903 000d78f5 000d78f7              .y...x...x..

000d987c <_ZTV9USBSerial>:
	...
   d9884:	000d7a23 000d7a67 000d7a41 000d7627     #z..gz..Az..'v..
   d9894:	000d7a3b 000d7a25 000d7a2d 000d7a61     ;z..%z..-z..az..
   d98a4:	000d7a35 000d7a1f                       5z...z..

000d98ac <_ZTV11USARTSerial>:
	...
   d98b4:	000d7b0d 000d7b31 000d7b3d 000d7627     .{..1{..={..'v..
   d98c4:	000d7b19 000d7b25 000d7b1f 000d7b2b     .{..%{...{..+{..
   d98d4:	000d7b0f 000d7b13                       .{...{..

000d98dc <_ZTV7TwoWire>:
	...
   d98e4:	000d7bed 000d7c37 000d7c0f 000d7bef     .{..7|...|...{..
   d98f4:	000d7c17 000d7c1f 000d7c27 000d7c2f     .|...|..'|../|..

000d9904 <_ZTVN5spark9MeshClassE>:
	...
   d990c:	000d7d19 000d7d0f 000d7d05 000d7cfb     .}...}...}...|..
   d991c:	000d7cef 000d7ce3 000d7cd7 000d7ccf     .|...|...|...|..
   d992c:	000d7cc5 000d7cbb 000d8485              .|...|......

000d9938 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9940:	000d7e99 000d7e9f 000d8387 000d7eab     .~...~.......~..
   d9950:	000d7e9b                                .~..

000d9954 <_ZTV9TCPClient>:
	...
   d995c:	000d4165 000d41a5 000d7e11 000d7e2b     eA...A...~..+~..
   d996c:	000d822d 000d806f 000d8041 000d7e55     -...o...A...U~..
   d997c:	000d8105 000d7eb1 000d80a3 000d81ff     .....~..........
   d998c:	000d7e57 000d7e8f 000d7e3d 000d7fa1     W~...~..=~......
   d999c:	000d8021 69726977 7200676e 20766365     !...wiring.recv 
   d99ac:	6f727265 203d2072 00006425              error = %d..

000d99b8 <_ZTVN5spark9WiFiClassE>:
	...
   d99c0:	000d83fd 000d83f3 000d83e9 000d839f     ................
   d99d0:	000d83dd 000d83d1 000d83c5 000d83bd     ................
   d99e0:	000d83b3 000d83a9 000d8485              ............

000d99ec <_ZTVN5spark12NetworkClassE>:
	...
   d99f4:	000d841d 000d8427 000d8431 000d843b     ....'...1...;...
   d9a04:	000d8445 000d8451 000d845d 000d8469     E...Q...]...i...
   d9a14:	000d8471 000d847b 000d8485              q...{.......

000d9a20 <_ctype_>:
   d9a20:	20202000 20202020 28282020 20282828     .         ((((( 
   d9a30:	20202020 20202020 20202020 20202020                     
   d9a40:	10108820 10101010 10101010 10101010      ...............
   d9a50:	04040410 04040404 10040404 10101010     ................
   d9a60:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9a70:	01010101 01010101 01010101 10101010     ................
   d9a80:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9a90:	02020202 02020202 02020202 10101010     ................
   d9aa0:	00000020 00000000 00000000 00000000      ...............
	...

000d9b24 <__sf_fake_stdin>:
	...

000d9b44 <__sf_fake_stdout>:
	...

000d9b64 <__sf_fake_stderr>:
	...
   d9b84:	00000043                                         C.

000d9b86 <link_const_variable_data_end>:
	...

000d9b88 <link_constructors_location>:
   d9b88:	000d4c11 	.word	0x000d4c11
   d9b8c:	000d506b 	.word	0x000d506b
   d9b90:	000d506f 	.word	0x000d506f
   d9b94:	000d50c9 	.word	0x000d50c9
   d9b98:	000d5305 	.word	0x000d5305
   d9b9c:	000d5309 	.word	0x000d5309
   d9ba0:	000d5931 	.word	0x000d5931
   d9ba4:	000d5935 	.word	0x000d5935
   d9ba8:	000d5939 	.word	0x000d5939
   d9bac:	000d593d 	.word	0x000d593d
   d9bb0:	000d5fe1 	.word	0x000d5fe1
   d9bb4:	000d6005 	.word	0x000d6005
   d9bb8:	000d6009 	.word	0x000d6009
   d9bbc:	000d632d 	.word	0x000d632d
   d9bc0:	000d6331 	.word	0x000d6331
   d9bc4:	000d6335 	.word	0x000d6335
   d9bc8:	000d686f 	.word	0x000d686f
   d9bcc:	000d6873 	.word	0x000d6873
   d9bd0:	000d6877 	.word	0x000d6877
   d9bd4:	000d691d 	.word	0x000d691d
   d9bd8:	000d6cb9 	.word	0x000d6cb9
   d9bdc:	000d72bd 	.word	0x000d72bd
   d9be0:	000d745d 	.word	0x000d745d
   d9be4:	000d77bd 	.word	0x000d77bd
   d9be8:	000d77cd 	.word	0x000d77cd
   d9bec:	000d7805 	.word	0x000d7805
   d9bf0:	000d7dc5 	.word	0x000d7dc5
   d9bf4:	000d8409 	.word	0x000d8409
   d9bf8:	000d8551 	.word	0x000d8551
   d9bfc:	000d8605 	.word	0x000d8605
   d9c00:	000d8695 	.word	0x000d8695
   d9c04:	000d8719 	.word	0x000d8719
   d9c08:	000d87dd 	.word	0x000d87dd
   d9c0c:	000d88a1 	.word	0x000d88a1
